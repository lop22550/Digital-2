
Laboratorio7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  080080bc  080080bc  000090bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800875c  0800875c  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800875c  0800875c  0000975c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008764  08008764  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008764  08008764  00009764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008768  08008768  00009768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800876c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000257c  20000074  080087e0  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025f0  080087e0  0000a5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f36a  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002869  00000000  00000000  0001940e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a30  00000000  00000000  0001c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233c6  00000000  00000000  0001d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eeb  00000000  00000000  000407b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc4de  00000000  00000000  000546a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  00120bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00124678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080080a4 	.word	0x080080a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080080a4 	.word	0x080080a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	@ 0x40
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SELECT+0x18>)
 80005f6:	f001 fe4b 	bl	8002290 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f001 faec 	bl	8001bd8 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DESELECT+0x18>)
 8000612:	f001 fe3d 	bl	8002290 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 fade 	bl	8001bd8 <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <SPI_TxByte+0x30>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_TxByte+0x30>)
 8000646:	f002 fcae 	bl	8002fa6 <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000098 	.word	0x20000098

08000658 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000664:	bf00      	nop
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SPI_TxBuffer+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b02      	cmp	r3, #2
 8000672:	d1f8      	bne.n	8000666 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_TxBuffer+0x30>)
 800067c:	f002 fc93 	bl	8002fa6 <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098

0800068c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000696:	bf00      	nop
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <SPI_RxByte+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1f8      	bne.n	8000698 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	1df9      	adds	r1, r7, #7
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SPI_RxByte+0x34>)
 80006b2:	f002 fdbc 	bl	800322e <HAL_SPI_TransmitReceive>

	return data;
 80006b6:	79bb      	ldrb	r3, [r7, #6]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000098 	.word	0x20000098

080006c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006cc:	f7ff ffde 	bl	800068c <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <SD_ReadyWait+0x30>)
 80006e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ee:	f7ff ffcd 	bl	800068c <SPI_RxByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d003      	beq.n	8000704 <SD_ReadyWait+0x24>
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <SD_ReadyWait+0x30>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f4      	bne.n	80006ee <SD_ReadyWait+0xe>

	return res;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000092 	.word	0x20000092

08000714 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800071a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800071e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000720:	f7ff ff72 	bl	8000608 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e005      	b.n	8000736 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	f7ff ff7a 	bl	8000624 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b09      	cmp	r3, #9
 800073a:	ddf6      	ble.n	800072a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800073c:	f7ff ff56 	bl	80005ec <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000754:	2395      	movs	r3, #149	@ 0x95
 8000756:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000758:	463b      	mov	r3, r7
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff7b 	bl	8000658 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000762:	e002      	b.n	800076a <SD_PowerOn+0x56>
	{
		cnt--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800076a:	f7ff ff8f 	bl	800068c <SPI_RxByte>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <SD_PowerOn+0x66>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_PowerOn+0x50>
	}

	DESELECT();
 800077a:	f7ff ff45 	bl	8000608 <DESELECT>
	SPI_TxByte(0XFF);
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	f7ff ff50 	bl	8000624 <SPI_TxByte>

	PowerFlag = 1;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_PowerOn+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000095 	.word	0x20000095

08000798 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <SD_PowerOff+0x14>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	20000095 	.word	0x20000095

080007b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SD_CheckPower+0x14>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000095 	.word	0x20000095

080007c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007d4:	22c8      	movs	r2, #200	@ 0xc8
 80007d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007d8:	f7ff ff58 	bl	800068c <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d103      	bne.n	80007ee <SD_RxDataBlock+0x26>
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f4      	bne.n	80007d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f2:	d001      	beq.n	80007f8 <SD_RxDataBlock+0x30>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00f      	b.n	8000818 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff60 	bl	80006c4 <SPI_RxBytePtr>
	} while(len--);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	603a      	str	r2, [r7, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800080e:	f7ff ff3d 	bl	800068c <SPI_RxByte>
	SPI_RxByte();
 8000812:	f7ff ff3b 	bl	800068c <SPI_RxByte>

	return TRUE;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000090 	.word	0x20000090

08000824 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000834:	f7ff ff54 	bl	80006e0 <SD_ReadyWait>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d001      	beq.n	8000842 <SD_TxDataBlock+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	e02f      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff feed 	bl	8000624 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2bfd      	cmp	r3, #253	@ 0xfd
 800084e:	d020      	beq.n	8000892 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feff 	bl	8000658 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800085a:	f7ff ff17 	bl	800068c <SPI_RxByte>
		SPI_RxByte();
 800085e:	f7ff ff15 	bl	800068c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000862:	e00b      	b.n	800087c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000864:	f7ff ff12 	bl	800068c <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b05      	cmp	r3, #5
 8000874:	d006      	beq.n	8000884 <SD_TxDataBlock+0x60>
			i++;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	2b40      	cmp	r3, #64	@ 0x40
 8000880:	d9f0      	bls.n	8000864 <SD_TxDataBlock+0x40>
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000884:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000886:	bf00      	nop
 8000888:	f7ff ff00 	bl	800068c <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2b05      	cmp	r3, #5
 800089a:	d101      	bne.n	80008a0 <SD_TxDataBlock+0x7c>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008b6:	f7ff ff13 	bl	80006e0 <SD_ReadyWait>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d001      	beq.n	80008c4 <SD_SendCmd+0x1a>
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	e042      	b.n	800094a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feac 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	0e1b      	lsrs	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fea0 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe9a 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe95 	bl	8000624 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <SD_SendCmd+0x5c>
 8000900:	2395      	movs	r3, #149	@ 0x95
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e007      	b.n	8000916 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b48      	cmp	r3, #72	@ 0x48
 800090a:	d102      	bne.n	8000912 <SD_SendCmd+0x68>
 800090c:	2387      	movs	r3, #135	@ 0x87
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e001      	b.n	8000916 <SD_SendCmd+0x6c>
	else crc = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe83 	bl	8000624 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b4c      	cmp	r3, #76	@ 0x4c
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x7e>
 8000924:	f7ff feb2 	bl	800068c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800092c:	f7ff feae 	bl	800068c <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da05      	bge.n	8000948 <SD_SendCmd+0x9e>
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3b01      	subs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCmd+0x82>

	return res;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x14>
 8000964:	2301      	movs	r3, #1
 8000966:	e0d1      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000968:	4b6a      	ldr	r3, [pc, #424]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SD_disk_initialize+0x2a>
 8000976:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e0c6      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800097e:	f7ff fec9 	bl	8000714 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000982:	f7ff fe33 	bl	80005ec <SELECT>

	/* check disk type */
	type = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f7ff ff8c 	bl	80008aa <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f040 80a1 	bne.w	8000adc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 800099c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a6:	2048      	movs	r0, #72	@ 0x48
 80009a8:	f7ff ff7f 	bl	80008aa <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d155      	bne.n	8000a5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e00c      	b.n	80009d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009b8:	7bfc      	ldrb	r4, [r7, #15]
 80009ba:	f7ff fe67 	bl	800068c <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9ef      	bls.n	80009b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17e      	bne.n	8000adc <SD_disk_initialize+0x188>
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2baa      	cmp	r3, #170	@ 0xaa
 80009e2:	d17b      	bne.n	8000adc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	2100      	movs	r1, #0
 80009e6:	2077      	movs	r0, #119	@ 0x77
 80009e8:	f7ff ff5f 	bl	80008aa <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d807      	bhi.n	8000a02 <SD_disk_initialize+0xae>
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f6:	2069      	movs	r0, #105	@ 0x69
 80009f8:	f7ff ff57 	bl	80008aa <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ec      	bne.n	80009e4 <SD_disk_initialize+0x90>
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d062      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff46 	bl	80008aa <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe2e 	bl	800068c <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x104>
 8000a54:	230c      	movs	r3, #12
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x106>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e03e      	b.n	8000adc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff22 	bl	80008aa <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1b 	bl	80008aa <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x12c>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0d 	bl	80008aa <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x160>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff06 	bl	80008aa <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x160>
 8000aa4:	e00c      	b.n	8000ac0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff fefe 	bl	80008aa <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e2      	bne.n	8000a82 <SD_disk_initialize+0x12e>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000abe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <SD_disk_initialize+0x184>
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	2050      	movs	r0, #80	@ 0x50
 8000ace:	f7ff feec 	bl	80008aa <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SD_disk_initialize+0x1c8>)
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ae2:	f7ff fd91 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000ae6:	f7ff fdd1 	bl	800068c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b02:	f7ff fe49 	bl	8000798 <SD_PowerOff>
	}

	return Stat;
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000090 	.word	0x20000090
 8000b1c:	20000094 	.word	0x20000094

08000b20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SD_disk_status+0x14>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <SD_disk_status+0x1a>
	return Stat;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SD_disk_status+0x28>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_read+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e051      	b.n	8000c10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SD_disk_read+0xcc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_read+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e048      	b.n	8000c10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SD_disk_read+0xd0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_read+0x44>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b90:	f7ff fd2c 	bl	80005ec <SELECT>

	if (count == 1)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2051      	movs	r0, #81	@ 0x51
 8000b9e:	f7ff fe84 	bl	80008aa <SD_SendCmd>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d129      	bne.n	8000bfc <SD_disk_read+0xb0>
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fe0b 	bl	80007c8 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <SD_disk_read+0xb0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e01e      	b.n	8000bfc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2052      	movs	r0, #82	@ 0x52
 8000bc2:	f7ff fe72 	bl	80008aa <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d117      	bne.n	8000bfc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fdf9 	bl	80007c8 <SD_RxDataBlock>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <SD_disk_read+0xa6>
				buff += 512;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ed      	bne.n	8000bcc <SD_disk_read+0x80>
 8000bf0:	e000      	b.n	8000bf4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bf2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	204c      	movs	r0, #76	@ 0x4c
 8000bf8:	f7ff fe57 	bl	80008aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fd04 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fd44 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000094 	.word	0x20000094

08000c20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <SD_disk_write+0x1c>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <SD_disk_write+0x20>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e06b      	b.n	8000d18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <SD_disk_write+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_write+0x32>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e062      	b.n	8000d18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SD_disk_write+0x100>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_write+0x44>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e059      	b.n	8000d18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <SD_disk_write+0x104>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SD_disk_write+0x56>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c76:	f7ff fcb9 	bl	80005ec <SELECT>

	if (count == 1)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d110      	bne.n	8000ca2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2058      	movs	r0, #88	@ 0x58
 8000c84:	f7ff fe11 	bl	80008aa <SD_SendCmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13a      	bne.n	8000d04 <SD_disk_write+0xe4>
 8000c8e:	21fe      	movs	r1, #254	@ 0xfe
 8000c90:	68b8      	ldr	r0, [r7, #8]
 8000c92:	f7ff fdc7 	bl	8000824 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d033      	beq.n	8000d04 <SD_disk_write+0xe4>
			count = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e030      	b.n	8000d04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <SD_disk_write+0x104>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2077      	movs	r0, #119	@ 0x77
 8000cb2:	f7ff fdfa 	bl	80008aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	2057      	movs	r0, #87	@ 0x57
 8000cba:	f7ff fdf6 	bl	80008aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2059      	movs	r0, #89	@ 0x59
 8000cc2:	f7ff fdf2 	bl	80008aa <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ccc:	21fc      	movs	r1, #252	@ 0xfc
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f7ff fda8 	bl	8000824 <SD_TxDataBlock>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <SD_disk_write+0xd0>
				buff += 512;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1ee      	bne.n	8000ccc <SD_disk_write+0xac>
 8000cee:	e000      	b.n	8000cf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cf2:	21fd      	movs	r1, #253	@ 0xfd
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd95 	bl	8000824 <SD_TxDataBlock>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d04:	f7ff fc80 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000d08:	f7ff fcc0 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000094 	.word	0x20000094

08000d28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	@ 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	603a      	str	r2, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x1e>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e113      	b.n	8000f6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d124      	bne.n	8000d9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d012      	beq.n	8000d80 <SD_disk_ioctl+0x58>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc1a      	bgt.n	8000d94 <SD_disk_ioctl+0x6c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <SD_disk_ioctl+0x40>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d006      	beq.n	8000d74 <SD_disk_ioctl+0x4c>
 8000d66:	e015      	b.n	8000d94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d68:	f7ff fd16 	bl	8000798 <SD_PowerOff>
			res = RES_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d72:	e0fa      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d74:	f7ff fcce 	bl	8000714 <SD_PowerOn>
			res = RES_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0f4      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	f7ff fd14 	bl	80007b0 <SD_CheckPower>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e0ea      	b.n	8000f6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d9a:	e0e6      	b.n	8000f6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	@ (8000f78 <SD_disk_ioctl+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_ioctl+0x86>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0df      	b.n	8000f6e <SD_disk_ioctl+0x246>

		SELECT();
 8000dae:	f7ff fc1d 	bl	80005ec <SELECT>

		switch (ctrl)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80c9 	bhi.w	8000f4c <SD_disk_ioctl+0x224>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <SD_disk_ioctl+0x98>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000eb7 	.word	0x08000eb7
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000ea7 	.word	0x08000ea7
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000f4d 	.word	0x08000f4d
 8000dec:	08000ec9 	.word	0x08000ec9
 8000df0:	08000eed 	.word	0x08000eed
 8000df4:	08000f11 	.word	0x08000f11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	@ 0x49
 8000dfc:	f7ff fd55 	bl	80008aa <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a6 	bne.w	8000f54 <SD_disk_ioctl+0x22c>
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fcda 	bl	80007c8 <SD_RxDataBlock>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 809c 	beq.w	8000f54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	029a      	lsls	r2, r3, #10
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02d      	b.n	8000e9e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e42:	7c7b      	ldrb	r3, [r7, #17]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	09db      	lsrs	r3, r3, #7
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3302      	adds	r3, #2
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e6a:	7d3b      	ldrb	r3, [r7, #20]
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000eb6:	f7ff fc13 	bl	80006e0 <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	@ 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x230>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	@ 0x49
 8000ecc:	f7ff fced 	bl	80008aa <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x234>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc75 	bl	80007c8 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x234>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	@ 0x4a
 8000ef0:	f7ff fcdb 	bl	80008aa <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x238>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc63 	bl	80007c8 <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x238>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	@ 0x7a
 8000f14:	f7ff fcc9 	bl	80008aa <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fbae 	bl	800068c <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f60:	bf00      	nop
		}

		DESELECT();
 8000f62:	f7ff fb51 	bl	8000608 <DESELECT>
		SPI_RxByte();
 8000f66:	f7ff fb91 	bl	800068c <SPI_RxByte>
	}

	return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <transmit_uart>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmit_uart(char *string){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f943 	bl	8000210 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string , len, 200);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	23c8      	movs	r3, #200	@ 0xc8
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4803      	ldr	r0, [pc, #12]	@ (8000fa4 <transmit_uart+0x28>)
 8000f98:	f002 fc1e 	bl	80037d8 <HAL_UART_Transmit>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200021cc 	.word	0x200021cc

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b0ab      	sub	sp, #172	@ 0xac
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fda1 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 fa47 	bl	8001444 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uint8_t pruebas[] = "pruebas.txt";
 8000fb6:	4aa2      	ldr	r2, [pc, #648]	@ (8001240 <main+0x298>)
 8000fb8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000fbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t pruebas1[] = "pruebas1.txt";
 8000fc2:	4ba0      	ldr	r3, [pc, #640]	@ (8001244 <main+0x29c>)
 8000fc4:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fca:	c407      	stmia	r4!, {r0, r1, r2}
 8000fcc:	7023      	strb	r3, [r4, #0]
  uint8_t pruebas2[] = "pruebas2.txt";
 8000fce:	4b9e      	ldr	r3, [pc, #632]	@ (8001248 <main+0x2a0>)
 8000fd0:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd6:	c407      	stmia	r4!, {r0, r1, r2}
 8000fd8:	7023      	strb	r3, [r4, #0]
  uint8_t pruebas3[] = "pruebas3.txt";
 8000fda:	4b9c      	ldr	r3, [pc, #624]	@ (800124c <main+0x2a4>)
 8000fdc:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8000fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe2:	c407      	stmia	r4!, {r0, r1, r2}
 8000fe4:	7023      	strb	r3, [r4, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 fb25 	bl	8001634 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fea:	f000 facf 	bl	800158c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000fee:	f000 fa97 	bl	8001520 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ff2:	f003 fbf7 	bl	80047e4 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000ff6:	f000 faf3 	bl	80015e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  //HAL_UART_Receive_IT(&huart3, temp, 1);
  HAL_UART_Receive_IT(&huart2, buffer_terminal, 10);
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	4994      	ldr	r1, [pc, #592]	@ (8001250 <main+0x2a8>)
 8000ffe:	4895      	ldr	r0, [pc, #596]	@ (8001254 <main+0x2ac>)
 8001000:	f002 fc75 	bl	80038ee <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Waiting for the Micro SD module to inicialitize*/
	    HAL_Delay(500);
 8001004:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001008:	f000 fde6 	bl	8001bd8 <HAL_Delay>



	    //Montamos el sistema de archivos
	     fres = f_mount(&fs, "/", 0);
 800100c:	2200      	movs	r2, #0
 800100e:	4992      	ldr	r1, [pc, #584]	@ (8001258 <main+0x2b0>)
 8001010:	4892      	ldr	r0, [pc, #584]	@ (800125c <main+0x2b4>)
 8001012:	f005 fe31 	bl	8006c78 <f_mount>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b91      	ldr	r3, [pc, #580]	@ (8001260 <main+0x2b8>)
 800101c:	701a      	strb	r2, [r3, #0]
	     if (fres == FR_OK){
 800101e:	4b90      	ldr	r3, [pc, #576]	@ (8001260 <main+0x2b8>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <main+0x86>
	   	  transmit_uart("Micro SD card is mounted successfully\n");
 8001026:	488f      	ldr	r0, [pc, #572]	@ (8001264 <main+0x2bc>)
 8001028:	f7ff ffa8 	bl	8000f7c <transmit_uart>
 800102c:	e006      	b.n	800103c <main+0x94>
	     } else if (fres != FR_OK){
 800102e:	4b8c      	ldr	r3, [pc, #560]	@ (8001260 <main+0x2b8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <main+0x94>
	   	  transmit_uart("Micro SD card's mount error!\n");
 8001036:	488c      	ldr	r0, [pc, #560]	@ (8001268 <main+0x2c0>)
 8001038:	f7ff ffa0 	bl	8000f7c <transmit_uart>
	            		      }

*/

	    //Montamos el sistema de archivos
	    fres = f_mount(&fs, "/", 0);
 800103c:	2200      	movs	r2, #0
 800103e:	4986      	ldr	r1, [pc, #536]	@ (8001258 <main+0x2b0>)
 8001040:	4886      	ldr	r0, [pc, #536]	@ (800125c <main+0x2b4>)
 8001042:	f005 fe19 	bl	8006c78 <f_mount>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b85      	ldr	r3, [pc, #532]	@ (8001260 <main+0x2b8>)
 800104c:	701a      	strb	r2, [r3, #0]
	    if (fres == FR_OK){
 800104e:	4b84      	ldr	r3, [pc, #528]	@ (8001260 <main+0x2b8>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <main+0xb6>
	  	  transmit_uart("Micro SD card is mounted successfully\n");
 8001056:	4883      	ldr	r0, [pc, #524]	@ (8001264 <main+0x2bc>)
 8001058:	f7ff ff90 	bl	8000f7c <transmit_uart>
 800105c:	e006      	b.n	800106c <main+0xc4>
	    } else if (fres != FR_OK){
 800105e:	4b80      	ldr	r3, [pc, #512]	@ (8001260 <main+0x2b8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <main+0xc4>
	  	  transmit_uart("Micro SD card's mount error!\n");
 8001066:	4880      	ldr	r0, [pc, #512]	@ (8001268 <main+0x2c0>)
 8001068:	f7ff ff88 	bl	8000f7c <transmit_uart>


     //**************************************************************
         //Diseño de Menú
     //**************************************************************
         transmit_uart("Seleccionar archivo, presiona el número correspondiente: \n");
 800106c:	487f      	ldr	r0, [pc, #508]	@ (800126c <main+0x2c4>)
 800106e:	f7ff ff85 	bl	8000f7c <transmit_uart>
         transmit_uart("1. pruebas \n");
 8001072:	487f      	ldr	r0, [pc, #508]	@ (8001270 <main+0x2c8>)
 8001074:	f7ff ff82 	bl	8000f7c <transmit_uart>
         transmit_uart("2. pruebas1 \n");
 8001078:	487e      	ldr	r0, [pc, #504]	@ (8001274 <main+0x2cc>)
 800107a:	f7ff ff7f 	bl	8000f7c <transmit_uart>
         transmit_uart("3. pruebas2 \n");
 800107e:	487e      	ldr	r0, [pc, #504]	@ (8001278 <main+0x2d0>)
 8001080:	f7ff ff7c 	bl	8000f7c <transmit_uart>
         transmit_uart("4. pruebas3 \n");
 8001084:	487d      	ldr	r0, [pc, #500]	@ (800127c <main+0x2d4>)
 8001086:	f7ff ff79 	bl	8000f7c <transmit_uart>


         for(int i = 0; i < 10; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001090:	e044      	b.n	800111c <main+0x174>
        	    			if (buffer_terminal[i] == 49){   //117 es ASCII de u
 8001092:	4a6f      	ldr	r2, [pc, #444]	@ (8001250 <main+0x2a8>)
 8001094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b31      	cmp	r3, #49	@ 0x31
 800109e:	d108      	bne.n	80010b2 <main+0x10a>
        	    						flag_op1 = 1;
 80010a0:	4b77      	ldr	r3, [pc, #476]	@ (8001280 <main+0x2d8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
        	    						buffer_terminal[i] = 0;
 80010a6:	4a6a      	ldr	r2, [pc, #424]	@ (8001250 <main+0x2a8>)
 80010a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010ac:	4413      	add	r3, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
        	    					}

        	    			if (buffer_terminal[i] == 50){   //100 es ASCII de d
 80010b2:	4a67      	ldr	r2, [pc, #412]	@ (8001250 <main+0x2a8>)
 80010b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b32      	cmp	r3, #50	@ 0x32
 80010be:	d108      	bne.n	80010d2 <main+0x12a>
        	    						flag_op2 = 1;
 80010c0:	4b70      	ldr	r3, [pc, #448]	@ (8001284 <main+0x2dc>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
        	    						buffer_terminal[i] = 0;
 80010c6:	4a62      	ldr	r2, [pc, #392]	@ (8001250 <main+0x2a8>)
 80010c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]

        	    					}

        	    			if (buffer_terminal[i] == 51){   //108 es ASCII de l
 80010d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001250 <main+0x2a8>)
 80010d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b33      	cmp	r3, #51	@ 0x33
 80010de:	d108      	bne.n	80010f2 <main+0x14a>
        	    						flag_op3 = 1;
 80010e0:	4b69      	ldr	r3, [pc, #420]	@ (8001288 <main+0x2e0>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
        	    						buffer_terminal[i] = 0;
 80010e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001250 <main+0x2a8>)
 80010e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
        	    					}

        	    			if (buffer_terminal[i] == 52){   //114 es ASCII de l
 80010f2:	4a57      	ldr	r2, [pc, #348]	@ (8001250 <main+0x2a8>)
 80010f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b34      	cmp	r3, #52	@ 0x34
 80010fe:	d108      	bne.n	8001112 <main+0x16a>
        	    						flag_op4 = 1;
 8001100:	4b62      	ldr	r3, [pc, #392]	@ (800128c <main+0x2e4>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
        	    						buffer_terminal[i] = 0;
 8001106:	4a52      	ldr	r2, [pc, #328]	@ (8001250 <main+0x2a8>)
 8001108:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800110c:	4413      	add	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
         for(int i = 0; i < 10; i++) {
 8001112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800111c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001120:	2b09      	cmp	r3, #9
 8001122:	ddb6      	ble.n	8001092 <main+0xea>
        	    					}


        } //Fin del for

         if (flag_op1 == 1){
 8001124:	4b56      	ldr	r3, [pc, #344]	@ (8001280 <main+0x2d8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d145      	bne.n	80011b8 <main+0x210>
        	 flag_op1 = 0;
 800112c:	4b54      	ldr	r3, [pc, #336]	@ (8001280 <main+0x2d8>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
        	 //Abrimos el archivo en modo lectura
        		    fres = f_open(&fil, pruebas, FA_READ);
 8001132:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	4855      	ldr	r0, [pc, #340]	@ (8001290 <main+0x2e8>)
 800113c:	f005 fde2 	bl	8006d04 <f_open>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b46      	ldr	r3, [pc, #280]	@ (8001260 <main+0x2b8>)
 8001146:	701a      	strb	r2, [r3, #0]
        		    if (fres == FR_OK){
 8001148:	4b45      	ldr	r3, [pc, #276]	@ (8001260 <main+0x2b8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <main+0x1b0>
        		  	  transmit_uart("File opened for reading. \n");
 8001150:	4850      	ldr	r0, [pc, #320]	@ (8001294 <main+0x2ec>)
 8001152:	f7ff ff13 	bl	8000f7c <transmit_uart>
 8001156:	e011      	b.n	800117c <main+0x1d4>
        		    } else if (fres != FR_OK){
 8001158:	4b41      	ldr	r3, [pc, #260]	@ (8001260 <main+0x2b8>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00d      	beq.n	800117c <main+0x1d4>
        		  	  transmit_uart("File was not opened for reading. \n");
 8001160:	484d      	ldr	r0, [pc, #308]	@ (8001298 <main+0x2f0>)
 8001162:	f7ff ff0b 	bl	8000f7c <transmit_uart>
        		    }

        		    //Leemos el archivo
        		    while (f_gets(buffer, sizeof(buffer), &fil)){
 8001166:	e009      	b.n	800117c <main+0x1d4>
        		  	  char mRd[100];
        		  	  sprintf(mRd, "%s", buffer);
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <main+0x2f4>)
 800116c:	494c      	ldr	r1, [pc, #304]	@ (80012a0 <main+0x2f8>)
 800116e:	4618      	mov	r0, r3
 8001170:	f006 faf8 	bl	8007764 <siprintf>
        		  	  transmit_uart(mRd);
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff00 	bl	8000f7c <transmit_uart>
        		    while (f_gets(buffer, sizeof(buffer), &fil)){
 800117c:	4a44      	ldr	r2, [pc, #272]	@ (8001290 <main+0x2e8>)
 800117e:	2164      	movs	r1, #100	@ 0x64
 8001180:	4846      	ldr	r0, [pc, #280]	@ (800129c <main+0x2f4>)
 8001182:	f006 f98e 	bl	80074a2 <f_gets>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1ed      	bne.n	8001168 <main+0x1c0>
        		    }

        		    //Cerramos el archivo
        		      fres = f_close(&fil);
 800118c:	4840      	ldr	r0, [pc, #256]	@ (8001290 <main+0x2e8>)
 800118e:	f006 f95e 	bl	800744e <f_close>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <main+0x2b8>)
 8001198:	701a      	strb	r2, [r3, #0]
        		      if (fres == FR_OK){
 800119a:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <main+0x2b8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <main+0x202>
        		    	  transmit_uart("The file is closed. \n");
 80011a2:	4840      	ldr	r0, [pc, #256]	@ (80012a4 <main+0x2fc>)
 80011a4:	f7ff feea 	bl	8000f7c <transmit_uart>
 80011a8:	e006      	b.n	80011b8 <main+0x210>
        		      } else if (fres != FR_OK){
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <main+0x2b8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <main+0x210>
        		    	  transmit_uart("The file was not closed. \n");
 80011b2:	483d      	ldr	r0, [pc, #244]	@ (80012a8 <main+0x300>)
 80011b4:	f7ff fee2 	bl	8000f7c <transmit_uart>
        		      }
         } //fin del if


         if (flag_op2 == 1){
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <main+0x2dc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d17c      	bne.n	80012ba <main+0x312>
        	 flag_op2 = 0;
 80011c0:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <main+0x2dc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
              //Abrimos el archivo en modo lectura
                		    fres = f_open(&fil, pruebas1, FA_READ);
 80011c6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80011ca:	2201      	movs	r2, #1
 80011cc:	4619      	mov	r1, r3
 80011ce:	4830      	ldr	r0, [pc, #192]	@ (8001290 <main+0x2e8>)
 80011d0:	f005 fd98 	bl	8006d04 <f_open>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <main+0x2b8>)
 80011da:	701a      	strb	r2, [r3, #0]
                		    if (fres == FR_OK){
 80011dc:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <main+0x2b8>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <main+0x244>
                		  	  transmit_uart("File opened for reading. \n");
 80011e4:	482b      	ldr	r0, [pc, #172]	@ (8001294 <main+0x2ec>)
 80011e6:	f7ff fec9 	bl	8000f7c <transmit_uart>
 80011ea:	e011      	b.n	8001210 <main+0x268>
                		    } else if (fres != FR_OK){
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <main+0x2b8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00d      	beq.n	8001210 <main+0x268>
                		  	  transmit_uart("File was not opened for reading. \n");
 80011f4:	4828      	ldr	r0, [pc, #160]	@ (8001298 <main+0x2f0>)
 80011f6:	f7ff fec1 	bl	8000f7c <transmit_uart>
                		    }

                		    //Leemos el archivo
                		    while (f_gets(buffer, sizeof(buffer), &fil)){
 80011fa:	e009      	b.n	8001210 <main+0x268>
                		  	  char mRd[100];
                		  	  sprintf(mRd, "%s", buffer);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4a27      	ldr	r2, [pc, #156]	@ (800129c <main+0x2f4>)
 8001200:	4927      	ldr	r1, [pc, #156]	@ (80012a0 <main+0x2f8>)
 8001202:	4618      	mov	r0, r3
 8001204:	f006 faae 	bl	8007764 <siprintf>
                		  	  transmit_uart(mRd);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff feb6 	bl	8000f7c <transmit_uart>
                		    while (f_gets(buffer, sizeof(buffer), &fil)){
 8001210:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <main+0x2e8>)
 8001212:	2164      	movs	r1, #100	@ 0x64
 8001214:	4821      	ldr	r0, [pc, #132]	@ (800129c <main+0x2f4>)
 8001216:	f006 f944 	bl	80074a2 <f_gets>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1ed      	bne.n	80011fc <main+0x254>
                		    }

                		    //Cerramos el archivo
                		      fres = f_close(&fil);
 8001220:	481b      	ldr	r0, [pc, #108]	@ (8001290 <main+0x2e8>)
 8001222:	f006 f914 	bl	800744e <f_close>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <main+0x2b8>)
 800122c:	701a      	strb	r2, [r3, #0]
                		      if (fres == FR_OK){
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <main+0x2b8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d13a      	bne.n	80012ac <main+0x304>
                		    	  transmit_uart("The file is closed. \n");
 8001236:	481b      	ldr	r0, [pc, #108]	@ (80012a4 <main+0x2fc>)
 8001238:	f7ff fea0 	bl	8000f7c <transmit_uart>
 800123c:	e03d      	b.n	80012ba <main+0x312>
 800123e:	bf00      	nop
 8001240:	0800824c 	.word	0x0800824c
 8001244:	08008258 	.word	0x08008258
 8001248:	08008268 	.word	0x08008268
 800124c:	08008278 	.word	0x08008278
 8001250:	200021c0 	.word	0x200021c0
 8001254:	200021cc 	.word	0x200021cc
 8001258:	080080bc 	.word	0x080080bc
 800125c:	200000f0 	.word	0x200000f0
 8001260:	20002158 	.word	0x20002158
 8001264:	080080c0 	.word	0x080080c0
 8001268:	080080e8 	.word	0x080080e8
 800126c:	08008108 	.word	0x08008108
 8001270:	08008144 	.word	0x08008144
 8001274:	08008154 	.word	0x08008154
 8001278:	08008164 	.word	0x08008164
 800127c:	08008174 	.word	0x08008174
 8001280:	20002260 	.word	0x20002260
 8001284:	20002261 	.word	0x20002261
 8001288:	20002262 	.word	0x20002262
 800128c:	20002263 	.word	0x20002263
 8001290:	20001128 	.word	0x20001128
 8001294:	08008184 	.word	0x08008184
 8001298:	080081a0 	.word	0x080081a0
 800129c:	2000215c 	.word	0x2000215c
 80012a0:	080081c4 	.word	0x080081c4
 80012a4:	080081c8 	.word	0x080081c8
 80012a8:	080081e0 	.word	0x080081e0
                		      } else if (fres != FR_OK){
 80012ac:	4b58      	ldr	r3, [pc, #352]	@ (8001410 <main+0x468>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <main+0x312>
                		    	  transmit_uart("The file was not closed. \n");
 80012b4:	4857      	ldr	r0, [pc, #348]	@ (8001414 <main+0x46c>)
 80012b6:	f7ff fe61 	bl	8000f7c <transmit_uart>
                		      }
                 } //fin del if

         if (flag_op3 == 1){
 80012ba:	4b57      	ldr	r3, [pc, #348]	@ (8001418 <main+0x470>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d142      	bne.n	8001348 <main+0x3a0>
                	 //Abrimos el archivo en modo lectura
                		    fres = f_open(&fil, pruebas2, FA_READ);
 80012c2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80012c6:	2201      	movs	r2, #1
 80012c8:	4619      	mov	r1, r3
 80012ca:	4854      	ldr	r0, [pc, #336]	@ (800141c <main+0x474>)
 80012cc:	f005 fd1a 	bl	8006d04 <f_open>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001410 <main+0x468>)
 80012d6:	701a      	strb	r2, [r3, #0]
                		    if (fres == FR_OK){
 80012d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001410 <main+0x468>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d103      	bne.n	80012e8 <main+0x340>
                		  	  transmit_uart("File opened for reading. \n");
 80012e0:	484f      	ldr	r0, [pc, #316]	@ (8001420 <main+0x478>)
 80012e2:	f7ff fe4b 	bl	8000f7c <transmit_uart>
 80012e6:	e011      	b.n	800130c <main+0x364>
                		    } else if (fres != FR_OK){
 80012e8:	4b49      	ldr	r3, [pc, #292]	@ (8001410 <main+0x468>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00d      	beq.n	800130c <main+0x364>
                		  	  transmit_uart("File was not opened for reading. \n");
 80012f0:	484c      	ldr	r0, [pc, #304]	@ (8001424 <main+0x47c>)
 80012f2:	f7ff fe43 	bl	8000f7c <transmit_uart>
                		    }

                		    //Leemos el archivo
                		    while (f_gets(buffer, sizeof(buffer), &fil)){
 80012f6:	e009      	b.n	800130c <main+0x364>
                		  	  char mRd[100];
                		  	  sprintf(mRd, "%s", buffer);
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001428 <main+0x480>)
 80012fc:	494b      	ldr	r1, [pc, #300]	@ (800142c <main+0x484>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f006 fa30 	bl	8007764 <siprintf>
                		  	  transmit_uart(mRd);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe38 	bl	8000f7c <transmit_uart>
                		    while (f_gets(buffer, sizeof(buffer), &fil)){
 800130c:	4a43      	ldr	r2, [pc, #268]	@ (800141c <main+0x474>)
 800130e:	2164      	movs	r1, #100	@ 0x64
 8001310:	4845      	ldr	r0, [pc, #276]	@ (8001428 <main+0x480>)
 8001312:	f006 f8c6 	bl	80074a2 <f_gets>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ed      	bne.n	80012f8 <main+0x350>
                		    }

                		    //Cerramos el archivo
                		      fres = f_close(&fil);
 800131c:	483f      	ldr	r0, [pc, #252]	@ (800141c <main+0x474>)
 800131e:	f006 f896 	bl	800744e <f_close>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <main+0x468>)
 8001328:	701a      	strb	r2, [r3, #0]
                		      if (fres == FR_OK){
 800132a:	4b39      	ldr	r3, [pc, #228]	@ (8001410 <main+0x468>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <main+0x392>
                		    	  transmit_uart("The file is closed. \n");
 8001332:	483f      	ldr	r0, [pc, #252]	@ (8001430 <main+0x488>)
 8001334:	f7ff fe22 	bl	8000f7c <transmit_uart>
 8001338:	e006      	b.n	8001348 <main+0x3a0>
                		      } else if (fres != FR_OK){
 800133a:	4b35      	ldr	r3, [pc, #212]	@ (8001410 <main+0x468>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <main+0x3a0>
                		    	  transmit_uart("The file was not closed. \n");
 8001342:	4834      	ldr	r0, [pc, #208]	@ (8001414 <main+0x46c>)
 8001344:	f7ff fe1a 	bl	8000f7c <transmit_uart>
                		      }
                 } //fin del if

         if (flag_op4 == 1){
 8001348:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <main+0x48c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d145      	bne.n	80013dc <main+0x434>
        	 flag_op4 = 0;
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <main+0x48c>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
                	 //Abrimos el archivo en modo lectura
                		    fres = f_open(&fil, pruebas3, FA_READ);
 8001356:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	482f      	ldr	r0, [pc, #188]	@ (800141c <main+0x474>)
 8001360:	f005 fcd0 	bl	8006d04 <f_open>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b29      	ldr	r3, [pc, #164]	@ (8001410 <main+0x468>)
 800136a:	701a      	strb	r2, [r3, #0]
                		    if (fres == FR_OK){
 800136c:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <main+0x468>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d103      	bne.n	800137c <main+0x3d4>
                		  	  transmit_uart("File opened for reading. \n");
 8001374:	482a      	ldr	r0, [pc, #168]	@ (8001420 <main+0x478>)
 8001376:	f7ff fe01 	bl	8000f7c <transmit_uart>
 800137a:	e011      	b.n	80013a0 <main+0x3f8>
                		    } else if (fres != FR_OK){
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <main+0x468>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00d      	beq.n	80013a0 <main+0x3f8>
                		  	  transmit_uart("File was not opened for reading. \n");
 8001384:	4827      	ldr	r0, [pc, #156]	@ (8001424 <main+0x47c>)
 8001386:	f7ff fdf9 	bl	8000f7c <transmit_uart>
                		    }

                		    //Leemos el archivo
                		    while (f_gets(buffer, sizeof(buffer), &fil)){
 800138a:	e009      	b.n	80013a0 <main+0x3f8>
                		  	  char mRd[100];
                		  	  sprintf(mRd, "%s", buffer);
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4a26      	ldr	r2, [pc, #152]	@ (8001428 <main+0x480>)
 8001390:	4926      	ldr	r1, [pc, #152]	@ (800142c <main+0x484>)
 8001392:	4618      	mov	r0, r3
 8001394:	f006 f9e6 	bl	8007764 <siprintf>
                		  	  transmit_uart(mRd);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fdee 	bl	8000f7c <transmit_uart>
                		    while (f_gets(buffer, sizeof(buffer), &fil)){
 80013a0:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <main+0x474>)
 80013a2:	2164      	movs	r1, #100	@ 0x64
 80013a4:	4820      	ldr	r0, [pc, #128]	@ (8001428 <main+0x480>)
 80013a6:	f006 f87c 	bl	80074a2 <f_gets>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ed      	bne.n	800138c <main+0x3e4>
                		    }

                		    //Cerramos el archivo
                		      fres = f_close(&fil);
 80013b0:	481a      	ldr	r0, [pc, #104]	@ (800141c <main+0x474>)
 80013b2:	f006 f84c 	bl	800744e <f_close>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <main+0x468>)
 80013bc:	701a      	strb	r2, [r3, #0]
                		      if (fres == FR_OK){
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <main+0x468>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d103      	bne.n	80013ce <main+0x426>
                		    	  transmit_uart("The file is closed. \n");
 80013c6:	481a      	ldr	r0, [pc, #104]	@ (8001430 <main+0x488>)
 80013c8:	f7ff fdd8 	bl	8000f7c <transmit_uart>
 80013cc:	e006      	b.n	80013dc <main+0x434>
                		      } else if (fres != FR_OK){
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <main+0x468>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <main+0x434>
                		    	  transmit_uart("The file was not closed. \n");
 80013d6:	480f      	ldr	r0, [pc, #60]	@ (8001414 <main+0x46c>)
 80013d8:	f7ff fdd0 	bl	8000f7c <transmit_uart>




         //Desmontamos el sistema de archivos
         	    	 f_mount(NULL,  "", 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	4916      	ldr	r1, [pc, #88]	@ (8001438 <main+0x490>)
 80013e0:	2000      	movs	r0, #0
 80013e2:	f005 fc49 	bl	8006c78 <f_mount>
         	    	 if (fres == FR_OK){
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <main+0x468>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <main+0x44e>
         	    		 transmit_uart("The Micro SD card is unmounted! \n");
 80013ee:	4813      	ldr	r0, [pc, #76]	@ (800143c <main+0x494>)
 80013f0:	f7ff fdc4 	bl	8000f7c <transmit_uart>
 80013f4:	e006      	b.n	8001404 <main+0x45c>
         	    	 } else if (fres != FR_OK){
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <main+0x468>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <main+0x45c>
         	    		 transmit_uart("The Micro SD card was not unmounted! \n");
 80013fe:	4810      	ldr	r0, [pc, #64]	@ (8001440 <main+0x498>)
 8001400:	f7ff fdbc 	bl	8000f7c <transmit_uart>





         	    	 HAL_Delay(2000);
 8001404:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001408:	f000 fbe6 	bl	8001bd8 <HAL_Delay>
	    HAL_Delay(500);
 800140c:	e5fa      	b.n	8001004 <main+0x5c>
 800140e:	bf00      	nop
 8001410:	20002158 	.word	0x20002158
 8001414:	080081e0 	.word	0x080081e0
 8001418:	20002262 	.word	0x20002262
 800141c:	20001128 	.word	0x20001128
 8001420:	08008184 	.word	0x08008184
 8001424:	080081a0 	.word	0x080081a0
 8001428:	2000215c 	.word	0x2000215c
 800142c:	080081c4 	.word	0x080081c4
 8001430:	080081c8 	.word	0x080081c8
 8001434:	20002263 	.word	0x20002263
 8001438:	080081fc 	.word	0x080081fc
 800143c:	08008200 	.word	0x08008200
 8001440:	08008224 	.word	0x08008224

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	@ 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2234      	movs	r2, #52	@ 0x34
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f006 f9a8 	bl	80077a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <SystemClock_Config+0xd4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a29      	ldr	r2, [pc, #164]	@ (8001518 <SystemClock_Config+0xd4>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <SystemClock_Config+0xd4>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4b24      	ldr	r3, [pc, #144]	@ (800151c <SystemClock_Config+0xd8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001490:	4a22      	ldr	r2, [pc, #136]	@ (800151c <SystemClock_Config+0xd8>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b20      	ldr	r3, [pc, #128]	@ (800151c <SystemClock_Config+0xd8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ac:	2310      	movs	r3, #16
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b0:	2302      	movs	r3, #2
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014b8:	2310      	movs	r3, #16
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014c2:	2304      	movs	r3, #4
 80014c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fa40 	bl	8002958 <HAL_RCC_OscConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014de:	f000 f941 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2302      	movs	r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fee0 	bl	80022c4 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800150a:	f000 f92b 	bl	8001764 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001526:	4a18      	ldr	r2, [pc, #96]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MX_SPI1_Init+0x64>)
 800152c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_SPI1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_SPI1_Init+0x64>)
 800154c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001550:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001554:	2210      	movs	r2, #16
 8001556:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_SPI1_Init+0x64>)
 800156c:	220a      	movs	r2, #10
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <MX_SPI1_Init+0x64>)
 8001572:	f001 fc8f 	bl	8002e94 <HAL_SPI_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800157c:	f000 f8f2 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000098 	.word	0x20000098
 8001588:	40013000 	.word	0x40013000

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f002 f8b8 	bl	8003738 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f8c9 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200021cc 	.word	0x200021cc
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <MX_USART3_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 80015ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_USART3_UART_Init+0x4c>)
 8001618:	f002 f88e 	bl	8003738 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f000 f89f 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20002214 	.word	0x20002214
 8001630:	40004800 	.word	0x40004800

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <MX_GPIO_Init+0xd0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a2c      	ldr	r2, [pc, #176]	@ (8001704 <MX_GPIO_Init+0xd0>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <MX_GPIO_Init+0xd0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <MX_GPIO_Init+0xd0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a25      	ldr	r2, [pc, #148]	@ (8001704 <MX_GPIO_Init+0xd0>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <MX_GPIO_Init+0xd0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <MX_GPIO_Init+0xd0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <MX_GPIO_Init+0xd0>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_GPIO_Init+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <MX_GPIO_Init+0xd0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <MX_GPIO_Init+0xd0>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <MX_GPIO_Init+0xd0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2140      	movs	r1, #64	@ 0x40
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <MX_GPIO_Init+0xd4>)
 80016c0:	f000 fde6 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <MX_GPIO_Init+0xd8>)
 80016dc:	f000 fc44 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80016e0:	2340      	movs	r3, #64	@ 0x40
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4804      	ldr	r0, [pc, #16]	@ (8001708 <MX_GPIO_Init+0xd4>)
 80016f8:	f000 fc36 	bl	8001f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400
 800170c:	40020800 	.word	0x40020800

08001710 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart3, buffer_terminal, sizeof(buffer_terminal), 1000);
	//HAL_UART_Receive_IT(&huart3, buffer_terminal, 10);

	memcpy (buffer_terminal + indx, temp, 1);
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_UART_RxCpltCallback+0x44>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_UART_RxCpltCallback+0x48>)
 8001720:	4413      	add	r3, r2
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_UART_RxCpltCallback+0x4c>)
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
	++indx;
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_UART_RxCpltCallback+0x44>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_UART_RxCpltCallback+0x44>)
 8001732:	801a      	strh	r2, [r3, #0]
	if(indx >= 10){
 8001734:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_UART_RxCpltCallback+0x44>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	2b09      	cmp	r3, #9
 800173a:	d902      	bls.n	8001742 <HAL_UART_RxCpltCallback+0x32>
		indx = 0;
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_UART_RxCpltCallback+0x44>)
 800173e:	2200      	movs	r2, #0
 8001740:	801a      	strh	r2, [r3, #0]
	}


	HAL_UART_Receive_IT(&huart2, temp, 1);
 8001742:	2201      	movs	r2, #1
 8001744:	4905      	ldr	r1, [pc, #20]	@ (800175c <HAL_UART_RxCpltCallback+0x4c>)
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <HAL_UART_RxCpltCallback+0x50>)
 8001748:	f002 f8d1 	bl	80038ee <HAL_UART_Receive_IT>


}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000225e 	.word	0x2000225e
 8001758:	200021c0 	.word	0x200021c0
 800175c:	2000225c 	.word	0x2000225c
 8001760:	200021cc 	.word	0x200021cc

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <Error_Handler+0x8>

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	4a0f      	ldr	r2, [pc, #60]	@ (80017bc <HAL_MspInit+0x4c>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001784:	6453      	str	r3, [r2, #68]	@ 0x44
 8001786:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_MspInit+0x4c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x4c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ae:	2007      	movs	r0, #7
 80017b0:	f000 fb06 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <HAL_SPI_MspInit+0x84>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12b      	bne.n	800183a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 80017ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_SPI_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800181a:	23e0      	movs	r3, #224	@ 0xe0
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <HAL_SPI_MspInit+0x8c>)
 8001836:	f000 fb97 	bl	8001f68 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	@ 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40013000 	.word	0x40013000
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a45      	ldr	r2, [pc, #276]	@ (8001984 <HAL_UART_MspInit+0x134>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d134      	bne.n	80018dc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	4b44      	ldr	r3, [pc, #272]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <HAL_UART_MspInit+0x138>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a3c      	ldr	r2, [pc, #240]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b3a      	ldr	r3, [pc, #232]	@ (8001988 <HAL_UART_MspInit+0x138>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018aa:	230c      	movs	r3, #12
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ba:	2307      	movs	r3, #7
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4831      	ldr	r0, [pc, #196]	@ (800198c <HAL_UART_MspInit+0x13c>)
 80018c6:	f000 fb4f 	bl	8001f68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2026      	movs	r0, #38	@ 0x26
 80018d0:	f000 fa81 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018d4:	2026      	movs	r0, #38	@ 0x26
 80018d6:	f000 fa9a 	bl	8001e0e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80018da:	e04f      	b.n	800197c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001990 <HAL_UART_MspInit+0x140>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d14a      	bne.n	800197c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <HAL_UART_MspInit+0x138>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a26      	ldr	r2, [pc, #152]	@ (8001988 <HAL_UART_MspInit+0x138>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_UART_MspInit+0x138>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <HAL_UART_MspInit+0x138>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_UART_MspInit+0x138>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800193a:	2320      	movs	r3, #32
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800194a:	2307      	movs	r3, #7
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	480f      	ldr	r0, [pc, #60]	@ (8001994 <HAL_UART_MspInit+0x144>)
 8001956:	f000 fb07 	bl	8001f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800195a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800195e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800196c:	2307      	movs	r3, #7
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4808      	ldr	r0, [pc, #32]	@ (8001998 <HAL_UART_MspInit+0x148>)
 8001978:	f000 faf6 	bl	8001f68 <HAL_GPIO_Init>
}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	@ 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40004400 	.word	0x40004400
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40004800 	.word	0x40004800
 8001994:	40020800 	.word	0x40020800
 8001998:	40020400 	.word	0x40020400

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 f8d1 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <USART2_IRQHandler+0x10>)
 8001a02:	f001 ff99 	bl	8003938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200021cc 	.word	0x200021cc

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f005 feba 	bl	80077b8 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20020000 	.word	0x20020000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20002264 	.word	0x20002264
 8001a78:	200025f0 	.word	0x200025f0

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001aa4:	f7ff ffea 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f005 fe79 	bl	80077c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff fa69 	bl	8000fa8 <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ae4:	0800876c 	.word	0x0800876c
  ldr r2, =_sbss
 8001ae8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001aec:	200025f0 	.word	0x200025f0

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <HAL_Init+0x40>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_Init+0x40>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_Init+0x40>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f94f 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fe22 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f967 	bl	8001e2a <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 f92f 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000000c 	.word	0x2000000c
 8001bbc:	20002268 	.word	0x20002268

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20002268 	.word	0x20002268

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff ffee 	bl	8001bc0 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffde 	bl	8001bc0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	@ (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	@ (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff feb6 	bl	8001bc0 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d008      	beq.n	8001e74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2280      	movs	r2, #128	@ 0x80
 8001e66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e052      	b.n	8001f1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0216 	bic.w	r2, r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d103      	bne.n	8001ea4 <HAL_DMA_Abort+0x62>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0208 	bic.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec4:	e013      	b.n	8001eee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec6:	f7ff fe7b 	bl	8001bc0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d90c      	bls.n	8001eee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e015      	b.n	8001f1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e4      	bne.n	8001ec6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	223f      	movs	r2, #63	@ 0x3f
 8001f02:	409a      	lsls	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d004      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2280      	movs	r2, #128	@ 0x80
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e00c      	b.n	8001f5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2205      	movs	r2, #5
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e165      	b.n	8002250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8154 	bne.w	800224a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d005      	beq.n	8001fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80ae 	beq.w	800224a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002268 <HAL_GPIO_Init+0x300>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002268 <HAL_GPIO_Init+0x300>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002268 <HAL_GPIO_Init+0x300>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a58      	ldr	r2, [pc, #352]	@ (800226c <HAL_GPIO_Init+0x304>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4f      	ldr	r2, [pc, #316]	@ (8002270 <HAL_GPIO_Init+0x308>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d025      	beq.n	8002182 <HAL_GPIO_Init+0x21a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4e      	ldr	r2, [pc, #312]	@ (8002274 <HAL_GPIO_Init+0x30c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01f      	beq.n	800217e <HAL_GPIO_Init+0x216>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4d      	ldr	r2, [pc, #308]	@ (8002278 <HAL_GPIO_Init+0x310>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d019      	beq.n	800217a <HAL_GPIO_Init+0x212>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4c      	ldr	r2, [pc, #304]	@ (800227c <HAL_GPIO_Init+0x314>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0x20e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4b      	ldr	r2, [pc, #300]	@ (8002280 <HAL_GPIO_Init+0x318>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00d      	beq.n	8002172 <HAL_GPIO_Init+0x20a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4a      	ldr	r2, [pc, #296]	@ (8002284 <HAL_GPIO_Init+0x31c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x206>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a49      	ldr	r2, [pc, #292]	@ (8002288 <HAL_GPIO_Init+0x320>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_GPIO_Init+0x202>
 8002166:	2306      	movs	r3, #6
 8002168:	e00c      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800216a:	2307      	movs	r3, #7
 800216c:	e00a      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800216e:	2305      	movs	r3, #5
 8002170:	e008      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 8002172:	2304      	movs	r3, #4
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 8002176:	2303      	movs	r3, #3
 8002178:	e004      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800217a:	2302      	movs	r3, #2
 800217c:	e002      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x21c>
 8002182:	2300      	movs	r3, #0
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f002 0203 	and.w	r2, r2, #3
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	4093      	lsls	r3, r2
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002194:	4935      	ldr	r1, [pc, #212]	@ (800226c <HAL_GPIO_Init+0x304>)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3302      	adds	r3, #2
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a2:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <HAL_GPIO_Init+0x324>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c6:	4a31      	ldr	r2, [pc, #196]	@ (800228c <HAL_GPIO_Init+0x324>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021cc:	4b2f      	ldr	r3, [pc, #188]	@ (800228c <HAL_GPIO_Init+0x324>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f0:	4a26      	ldr	r2, [pc, #152]	@ (800228c <HAL_GPIO_Init+0x324>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f6:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_GPIO_Init+0x324>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221a:	4a1c      	ldr	r2, [pc, #112]	@ (800228c <HAL_GPIO_Init+0x324>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <HAL_GPIO_Init+0x324>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002244:	4a11      	ldr	r2, [pc, #68]	@ (800228c <HAL_GPIO_Init+0x324>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3301      	adds	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	f67f ae96 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3724      	adds	r7, #36	@ 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40013800 	.word	0x40013800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000
 8002284:	40021400 	.word	0x40021400
 8002288:	40021800 	.word	0x40021800
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0cc      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b68      	ldr	r3, [pc, #416]	@ (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d90c      	bls.n	8002300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b65      	ldr	r3, [pc, #404]	@ (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b63      	ldr	r3, [pc, #396]	@ (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b8      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002318:	4b59      	ldr	r3, [pc, #356]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a58      	ldr	r2, [pc, #352]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002330:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a52      	ldr	r2, [pc, #328]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800233a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b50      	ldr	r3, [pc, #320]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	494d      	ldr	r1, [pc, #308]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d044      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b47      	ldr	r3, [pc, #284]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d119      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d003      	beq.n	8002382 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237e:	2b03      	cmp	r3, #3
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4b3f      	ldr	r3, [pc, #252]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	4b3b      	ldr	r3, [pc, #236]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e067      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b37      	ldr	r3, [pc, #220]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4934      	ldr	r1, [pc, #208]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff fc04 	bl	8001bc0 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7ff fc00 	bl	8001bc0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e04f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e4:	4b25      	ldr	r3, [pc, #148]	@ (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d20c      	bcs.n	800240c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b22      	ldr	r3, [pc, #136]	@ (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e032      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4916      	ldr	r1, [pc, #88]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002436:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	490e      	ldr	r1, [pc, #56]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244a:	f000 f855 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	490a      	ldr	r1, [pc, #40]	@ (8002484 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	4a09      	ldr	r2, [pc, #36]	@ (8002488 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fb64 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023c00 	.word	0x40023c00
 8002480:	40023800 	.word	0x40023800
 8002484:	080082d0 	.word	0x080082d0
 8002488:	20000004 	.word	0x20000004
 800248c:	20000008 	.word	0x20000008

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ac:	f7ff fff0 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	@ (80024cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	080082e0 	.word	0x080082e0

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d4:	f7ff ffdc 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0b5b      	lsrs	r3, r3, #13
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	@ (80024f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	080082e0 	.word	0x080082e0

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b0ae      	sub	sp, #184	@ 0xb8
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251e:	4bcb      	ldr	r3, [pc, #812]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b0c      	cmp	r3, #12
 8002528:	f200 8206 	bhi.w	8002938 <HAL_RCC_GetSysClockFreq+0x440>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <HAL_RCC_GetSysClockFreq+0x3c>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002569 	.word	0x08002569
 8002538:	08002939 	.word	0x08002939
 800253c:	08002939 	.word	0x08002939
 8002540:	08002939 	.word	0x08002939
 8002544:	08002571 	.word	0x08002571
 8002548:	08002939 	.word	0x08002939
 800254c:	08002939 	.word	0x08002939
 8002550:	08002939 	.word	0x08002939
 8002554:	08002579 	.word	0x08002579
 8002558:	08002939 	.word	0x08002939
 800255c:	08002939 	.word	0x08002939
 8002560:	08002939 	.word	0x08002939
 8002564:	08002769 	.word	0x08002769
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4bb9      	ldr	r3, [pc, #740]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x358>)
 800256a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800256e:	e1e7      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4bb8      	ldr	r3, [pc, #736]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002576:	e1e3      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002578:	4bb4      	ldr	r3, [pc, #720]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002584:	4bb1      	ldr	r3, [pc, #708]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d071      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4bae      	ldr	r3, [pc, #696]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	2200      	movs	r2, #0
 8002598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800259c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	647b      	str	r3, [r7, #68]	@ 0x44
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025e8:	4649      	mov	r1, r9
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4641      	mov	r1, r8
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4641      	mov	r1, r8
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4641      	mov	r1, r8
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025fc:	4649      	mov	r1, r9
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002610:	4649      	mov	r1, r9
 8002612:	00cb      	lsls	r3, r1, #3
 8002614:	4641      	mov	r1, r8
 8002616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800261a:	4641      	mov	r1, r8
 800261c:	00ca      	lsls	r2, r1, #3
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4603      	mov	r3, r0
 8002624:	4622      	mov	r2, r4
 8002626:	189b      	adds	r3, r3, r2
 8002628:	633b      	str	r3, [r7, #48]	@ 0x30
 800262a:	462b      	mov	r3, r5
 800262c:	460a      	mov	r2, r1
 800262e:	eb42 0303 	adc.w	r3, r2, r3
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002640:	4629      	mov	r1, r5
 8002642:	024b      	lsls	r3, r1, #9
 8002644:	4621      	mov	r1, r4
 8002646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800264a:	4621      	mov	r1, r4
 800264c:	024a      	lsls	r2, r1, #9
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800265c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002660:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002664:	f7fd fe2c 	bl	80002c0 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002672:	e067      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b75      	ldr	r3, [pc, #468]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002680:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800268e:	2300      	movs	r3, #0
 8002690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002692:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026c8:	4649      	mov	r1, r9
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4641      	mov	r1, r8
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4641      	mov	r1, r8
 80026d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80026dc:	4649      	mov	r1, r9
 80026de:	eb63 0b01 	sbc.w	fp, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f6:	4692      	mov	sl, r2
 80026f8:	469b      	mov	fp, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb1a 0303 	adds.w	r3, sl, r3
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	462b      	mov	r3, r5
 8002704:	eb4b 0303 	adc.w	r3, fp, r3
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002716:	4629      	mov	r1, r5
 8002718:	028b      	lsls	r3, r1, #10
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002720:	4621      	mov	r1, r4
 8002722:	028a      	lsls	r2, r1, #10
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800272c:	2200      	movs	r2, #0
 800272e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002730:	677a      	str	r2, [r7, #116]	@ 0x74
 8002732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002736:	f7fd fdc3 	bl	80002c0 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4613      	mov	r3, r2
 8002740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002744:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800275a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002766:	e0eb      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4b38      	ldr	r3, [pc, #224]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d06b      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800278a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800278c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	663b      	str	r3, [r7, #96]	@ 0x60
 8002794:	2300      	movs	r3, #0
 8002796:	667b      	str	r3, [r7, #100]	@ 0x64
 8002798:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800279c:	4622      	mov	r2, r4
 800279e:	462b      	mov	r3, r5
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	0159      	lsls	r1, r3, #5
 80027aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ae:	0150      	lsls	r0, r2, #5
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4621      	mov	r1, r4
 80027b6:	1a51      	subs	r1, r2, r1
 80027b8:	61b9      	str	r1, [r7, #24]
 80027ba:	4629      	mov	r1, r5
 80027bc:	eb63 0301 	sbc.w	r3, r3, r1
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ce:	4659      	mov	r1, fp
 80027d0:	018b      	lsls	r3, r1, #6
 80027d2:	4651      	mov	r1, sl
 80027d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d8:	4651      	mov	r1, sl
 80027da:	018a      	lsls	r2, r1, #6
 80027dc:	4651      	mov	r1, sl
 80027de:	ebb2 0801 	subs.w	r8, r2, r1
 80027e2:	4659      	mov	r1, fp
 80027e4:	eb63 0901 	sbc.w	r9, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fc:	4690      	mov	r8, r2
 80027fe:	4699      	mov	r9, r3
 8002800:	4623      	mov	r3, r4
 8002802:	eb18 0303 	adds.w	r3, r8, r3
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	462b      	mov	r3, r5
 800280a:	eb49 0303 	adc.w	r3, r9, r3
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800281c:	4629      	mov	r1, r5
 800281e:	024b      	lsls	r3, r1, #9
 8002820:	4621      	mov	r1, r4
 8002822:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002826:	4621      	mov	r1, r4
 8002828:	024a      	lsls	r2, r1, #9
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002832:	2200      	movs	r2, #0
 8002834:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002836:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002838:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800283c:	f7fd fd40 	bl	80002c0 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800284a:	e065      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x420>
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x458>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	4618      	mov	r0, r3
 8002862:	4611      	mov	r1, r2
 8002864:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002868:	653b      	str	r3, [r7, #80]	@ 0x50
 800286a:	2300      	movs	r3, #0
 800286c:	657b      	str	r3, [r7, #84]	@ 0x54
 800286e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002872:	4642      	mov	r2, r8
 8002874:	464b      	mov	r3, r9
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4641      	mov	r1, r8
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	4649      	mov	r1, r9
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028a4:	4659      	mov	r1, fp
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	4651      	mov	r1, sl
 80028aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ae:	4651      	mov	r1, sl
 80028b0:	018a      	lsls	r2, r1, #6
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a54      	subs	r4, r2, r1
 80028b6:	4659      	mov	r1, fp
 80028b8:	eb63 0501 	sbc.w	r5, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	00eb      	lsls	r3, r5, #3
 80028c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	18e3      	adds	r3, r4, r3
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	464b      	mov	r3, r9
 80028d8:	eb45 0303 	adc.w	r3, r5, r3
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002900:	2200      	movs	r2, #0
 8002902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002904:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002906:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800290a:	f7fd fcd9 	bl	80002c0 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4613      	mov	r3, r2
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x458>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0f1b      	lsrs	r3, r3, #28
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800292a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002936:	e003      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x45c>)
 800293a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800293e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002944:	4618      	mov	r0, r3
 8002946:	37b8      	adds	r7, #184	@ 0xb8
 8002948:	46bd      	mov	sp, r7
 800294a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	00f42400 	.word	0x00f42400

08002958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e28d      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8083 	beq.w	8002a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002978:	4b94      	ldr	r3, [pc, #592]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b04      	cmp	r3, #4
 8002982:	d019      	beq.n	80029b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002984:	4b91      	ldr	r3, [pc, #580]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
        || \
 800298c:	2b08      	cmp	r3, #8
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002990:	4b8e      	ldr	r3, [pc, #568]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b88      	ldr	r3, [pc, #544]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b84      	ldr	r3, [pc, #528]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x124>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e25a      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x90>
 80029da:	4b7c      	ldr	r3, [pc, #496]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7b      	ldr	r2, [pc, #492]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xcc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0xb4>
 80029f2:	4b76      	ldr	r3, [pc, #472]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a75      	ldr	r2, [pc, #468]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b73      	ldr	r3, [pc, #460]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a72      	ldr	r2, [pc, #456]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xcc>
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6e      	ldr	r2, [pc, #440]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b6c      	ldr	r3, [pc, #432]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff f8c8 	bl	8001bc0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7ff f8c4 	bl	8001bc0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	@ 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e21f      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b61      	ldr	r3, [pc, #388]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xdc>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7ff f8b4 	bl	8001bc0 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7ff f8b0 	bl	8001bc0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e20b      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b57      	ldr	r3, [pc, #348]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x104>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06f      	beq.n	8002b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a8a:	4b50      	ldr	r3, [pc, #320]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d017      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a96:	4b4d      	ldr	r3, [pc, #308]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d105      	bne.n	8002aae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b44      	ldr	r3, [pc, #272]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b41      	ldr	r3, [pc, #260]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x186>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1d3      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b3b      	ldr	r3, [pc, #236]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4937      	ldr	r1, [pc, #220]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b34      	ldr	r3, [pc, #208]	@ (8002bd0 <HAL_RCC_OscConfig+0x278>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7ff f85d 	bl	8001bc0 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7ff f859 	bl	8001bc0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1b4      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b28      	ldr	r3, [pc, #160]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4925      	ldr	r1, [pc, #148]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_RCC_OscConfig+0x278>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7ff f83c 	bl	8001bc0 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7ff f838 	bl	8001bc0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e193      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d036      	beq.n	8002be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff f81c 	bl	8001bc0 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f818 	bl	8001bc0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e173      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x234>
 8002baa:	e01b      	b.n	8002be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bac:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7ff f805 	bl	8001bc0 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	e00e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff f801 	bl	8001bc0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d907      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e15c      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	42470000 	.word	0x42470000
 8002bd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ea      	bne.n	8002bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8097 	beq.w	8002d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b83      	ldr	r3, [pc, #524]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b7f      	ldr	r3, [pc, #508]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b7c      	ldr	r3, [pc, #496]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	4b79      	ldr	r3, [pc, #484]	@ (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2e:	4b76      	ldr	r3, [pc, #472]	@ (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	@ (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe ffc1 	bl	8001bc0 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c42:	f7fe ffbd 	bl	8001bc0 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e118      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	4b6c      	ldr	r3, [pc, #432]	@ (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x31e>
 8002c68:	4b66      	ldr	r3, [pc, #408]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	4a65      	ldr	r2, [pc, #404]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x340>
 8002c7e:	4b61      	ldr	r3, [pc, #388]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	4a60      	ldr	r2, [pc, #384]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c98:	4b5a      	ldr	r3, [pc, #360]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4a59      	ldr	r2, [pc, #356]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca4:	4b57      	ldr	r3, [pc, #348]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca8:	4a56      	ldr	r2, [pc, #344]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	f023 0304 	bic.w	r3, r3, #4
 8002cae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d015      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe ff82 	bl	8001bc0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe ff7e 	bl	8001bc0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0d7      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ee      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x368>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe ff6c 	bl	8001bc0 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe ff68 	bl	8001bc0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0c1      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	4b40      	ldr	r3, [pc, #256]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ee      	bne.n	8002cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d14:	4b3b      	ldr	r3, [pc, #236]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	4a3a      	ldr	r2, [pc, #232]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80ad 	beq.w	8002e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2a:	4b36      	ldr	r3, [pc, #216]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d060      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d145      	bne.n	8002dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b33      	ldr	r3, [pc, #204]	@ (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe ff3c 	bl	8001bc0 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe ff38 	bl	8001bc0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e093      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b29      	ldr	r3, [pc, #164]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	071b      	lsls	r3, r3, #28
 8002d96:	491b      	ldr	r1, [pc, #108]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe ff0d 	bl	8001bc0 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002daa:	f7fe ff09 	bl	8001bc0 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e064      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x452>
 8002dc8:	e05c      	b.n	8002e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fef6 	bl	8001bc0 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fef2 	bl	8001bc0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04d      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x480>
 8002df6:	e045      	b.n	8002e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e040      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e10:	4b1f      	ldr	r3, [pc, #124]	@ (8002e90 <HAL_RCC_OscConfig+0x538>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d030      	beq.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d129      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d122      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d119      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d10f      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07b      	b.n	8002f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eb6:	d009      	beq.n	8002ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
 8002ebe:	e005      	b.n	8002ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe fc6a 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f50:	ea42 0103 	orr.w	r1, r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0104 	and.w	r1, r3, #4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	f003 0210 	and.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b088      	sub	sp, #32
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb6:	f7fe fe03 	bl	8001bc0 <HAL_GetTick>
 8002fba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d001      	beq.n	8002fd0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e12a      	b.n	8003226 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Transmit+0x36>
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e122      	b.n	8003226 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_SPI_Transmit+0x48>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e11b      	b.n	8003226 <HAL_SPI_Transmit+0x280>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800303c:	d10f      	bne.n	800305e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800304c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800305c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003068:	2b40      	cmp	r3, #64	@ 0x40
 800306a:	d007      	beq.n	800307c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800307a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003084:	d152      	bne.n	800312c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Transmit+0xee>
 800308e:	8b7b      	ldrh	r3, [r7, #26]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d145      	bne.n	8003120 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b8:	e032      	b.n	8003120 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d112      	bne.n	80030ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80030ec:	e018      	b.n	8003120 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ee:	f7fe fd67 	bl	8001bc0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d803      	bhi.n	8003106 <HAL_SPI_Transmit+0x160>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d102      	bne.n	800310c <HAL_SPI_Transmit+0x166>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e082      	b.n	8003226 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1c7      	bne.n	80030ba <HAL_SPI_Transmit+0x114>
 800312a:	e053      	b.n	80031d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0x194>
 8003134:	8b7b      	ldrh	r3, [r7, #26]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d147      	bne.n	80031ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003160:	e033      	b.n	80031ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b02      	cmp	r3, #2
 800316e:	d113      	bne.n	8003198 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003196:	e018      	b.n	80031ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003198:	f7fe fd12 	bl	8001bc0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d803      	bhi.n	80031b0 <HAL_SPI_Transmit+0x20a>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_Transmit+0x210>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e02d      	b.n	8003226 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1c6      	bne.n	8003162 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fa59 	bl	8003690 <SPI_EndRxTxTransaction>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003224:	2300      	movs	r3, #0
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08a      	sub	sp, #40	@ 0x28
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800323c:	2301      	movs	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003240:	f7fe fcbe 	bl	8001bc0 <HAL_GetTick>
 8003244:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800324c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003258:	7ffb      	ldrb	r3, [r7, #31]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d00c      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x4a>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003264:	d106      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x46>
 800326e:	7ffb      	ldrb	r3, [r7, #31]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d001      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
 8003276:	e17f      	b.n	8003578 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_SPI_TransmitReceive+0x5c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x5c>
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e174      	b.n	8003578 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_SPI_TransmitReceive+0x6e>
 8003298:	2302      	movs	r3, #2
 800329a:	e16d      	b.n	8003578 <HAL_SPI_TransmitReceive+0x34a>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d003      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2205      	movs	r2, #5
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	887a      	ldrh	r2, [r7, #2]
 80032ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	887a      	ldrh	r2, [r7, #2]
 80032da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f8:	2b40      	cmp	r3, #64	@ 0x40
 80032fa:	d007      	beq.n	800330c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003314:	d17e      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_SPI_TransmitReceive+0xf6>
 800331e:	8afb      	ldrh	r3, [r7, #22]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d16c      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003348:	e059      	b.n	80033fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d11b      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x162>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d016      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x162>
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d113      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d119      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x1a4>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d014      	beq.n	80033d2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	b292      	uxth	r2, r2
 80033b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	1c9a      	adds	r2, r3, #2
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ce:	2301      	movs	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033d2:	f7fe fbf5 	bl	8001bc0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033de:	429a      	cmp	r2, r3
 80033e0:	d80d      	bhi.n	80033fe <HAL_SPI_TransmitReceive+0x1d0>
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d009      	beq.n	80033fe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0bc      	b.n	8003578 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1a0      	bne.n	800334a <HAL_SPI_TransmitReceive+0x11c>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d19b      	bne.n	800334a <HAL_SPI_TransmitReceive+0x11c>
 8003412:	e082      	b.n	800351a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x1f4>
 800341c:	8afb      	ldrh	r3, [r7, #22]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d171      	bne.n	8003506 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	330c      	adds	r3, #12
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003448:	e05d      	b.n	8003506 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d11c      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x264>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d017      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x264>
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	2b01      	cmp	r3, #1
 8003466:	d114      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	7812      	ldrb	r2, [r2, #0]
 8003474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d119      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x2a6>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d014      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034d0:	2301      	movs	r3, #1
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034d4:	f7fe fb74 	bl	8001bc0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d803      	bhi.n	80034ec <HAL_SPI_TransmitReceive+0x2be>
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d102      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x2c4>
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e038      	b.n	8003578 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d19c      	bne.n	800344a <HAL_SPI_TransmitReceive+0x21c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d197      	bne.n	800344a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8b6 	bl	8003690 <SPI_EndRxTxTransaction>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e01d      	b.n	8003578 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003576:	2300      	movs	r3, #0
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003590:	f7fe fb16 	bl	8001bc0 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035a0:	f7fe fb0e 	bl	8001bc0 <HAL_GetTick>
 80035a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035a6:	4b39      	ldr	r3, [pc, #228]	@ (800368c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	015b      	lsls	r3, r3, #5
 80035ac:	0d1b      	lsrs	r3, r3, #20
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b6:	e054      	b.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d050      	beq.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035c0:	f7fe fafe 	bl	8001bc0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d902      	bls.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d13d      	bne.n	8003652 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ee:	d111      	bne.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f8:	d004      	beq.n	8003604 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003602:	d107      	bne.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361c:	d10f      	bne.n	800363e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800363c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e017      	b.n	8003682 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3b01      	subs	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d19b      	bne.n	80035b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000004 	.word	0x20000004

08003690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2201      	movs	r2, #1
 80036a4:	2102      	movs	r1, #2
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff ff6a 	bl	8003580 <SPI_WaitFlagStateUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b6:	f043 0220 	orr.w	r2, r3, #32
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e032      	b.n	8003728 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <SPI_EndRxTxTransaction+0xa0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <SPI_EndRxTxTransaction+0xa4>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0d5b      	lsrs	r3, r3, #21
 80036ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036e0:	d112      	bne.n	8003708 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	@ 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff ff47 	bl	8003580 <SPI_WaitFlagStateUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d016      	beq.n	8003726 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e00f      	b.n	8003728 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3b01      	subs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b80      	cmp	r3, #128	@ 0x80
 8003720:	d0f2      	beq.n	8003708 <SPI_EndRxTxTransaction+0x78>
 8003722:	e000      	b.n	8003726 <SPI_EndRxTxTransaction+0x96>
        break;
 8003724:	bf00      	nop
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000004 	.word	0x20000004
 8003734:	165e9f81 	.word	0x165e9f81

08003738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e042      	b.n	80037d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fe f876 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	@ 0x24
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800377a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fdbd 	bl	80042fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	@ 0x28
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d175      	bne.n	80038e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_UART_Transmit+0x2c>
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e06e      	b.n	80038e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2221      	movs	r2, #33	@ 0x21
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003816:	f7fe f9d3 	bl	8001bc0 <HAL_GetTick>
 800381a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	88fa      	ldrh	r2, [r7, #6]
 8003826:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003830:	d108      	bne.n	8003844 <HAL_UART_Transmit+0x6c>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	e003      	b.n	800384c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800384c:	e02e      	b.n	80038ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	@ 0x80
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fb1f 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e03a      	b.n	80038e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3302      	adds	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e007      	b.n	800389e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1cb      	bne.n	800384e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2140      	movs	r1, #64	@ 0x40
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 faeb 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e006      	b.n	80038e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	4613      	mov	r3, r2
 80038fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b20      	cmp	r3, #32
 8003906:	d112      	bne.n	800392e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Receive_IT+0x26>
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e00b      	b.n	8003930 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	461a      	mov	r2, r3
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fb12 	bl	8003f4e <UART_Start_Receive_IT>
 800392a:	4603      	mov	r3, r0
 800392c:	e000      	b.n	8003930 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0ba      	sub	sp, #232	@ 0xe8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_UART_IRQHandler+0x66>
 800398a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fbf2 	bl	8004180 <UART_Receive_IT>
      return;
 800399c:	e25b      	b.n	8003e56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800399e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80de 	beq.w	8003b64 <HAL_UART_IRQHandler+0x22c>
 80039a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80d1 	beq.w	8003b64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_UART_IRQHandler+0xae>
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_UART_IRQHandler+0xd2>
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_UART_IRQHandler+0xf6>
 8003a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	f043 0204 	orr.w	r2, r3, #4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <HAL_UART_IRQHandler+0x126>
 8003a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	f043 0208 	orr.w	r2, r3, #8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 81f2 	beq.w	8003e4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_UART_IRQHandler+0x14e>
 8003a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fb7d 	bl	8004180 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b40      	cmp	r3, #64	@ 0x40
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x17a>
 8003aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04f      	beq.n	8003b52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa85 	bl	8003fc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d141      	bne.n	8003b4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003af2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1d9      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d18 <HAL_UART_IRQHandler+0x3e0>)
 8003b20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe f9fb 	bl	8001f22 <HAL_DMA_Abort_IT>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e00e      	b.n	8003b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f994 	bl	8003e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	e00a      	b.n	8003b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f990 	bl	8003e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e006      	b.n	8003b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f98c 	bl	8003e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b5e:	e175      	b.n	8003e4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	bf00      	nop
    return;
 8003b62:	e173      	b.n	8003e4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 814f 	bne.w	8003e0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8148 	beq.w	8003e0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8141 	beq.w	8003e0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003baa:	2b40      	cmp	r3, #64	@ 0x40
 8003bac:	f040 80b6 	bne.w	8003d1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8145 	beq.w	8003e50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	f080 813e 	bcs.w	8003e50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be6:	f000 8088 	beq.w	8003cfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1d9      	bne.n	8003bea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3314      	adds	r3, #20
 8003c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e1      	bne.n	8003c36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e3      	bne.n	8003c72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cca:	f023 0310 	bic.w	r3, r3, #16
 8003cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ce2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e3      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe f8a4 	bl	8001e42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f8b7 	bl	8003e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d16:	e09b      	b.n	8003e50 <HAL_UART_IRQHandler+0x518>
 8003d18:	08004089 	.word	0x08004089
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 808e 	beq.w	8003e54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8089 	beq.w	8003e54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d66:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e3      	bne.n	8003d42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	623b      	str	r3, [r7, #32]
   return(result);
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e3      	bne.n	8003d7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0310 	bic.w	r3, r3, #16
 8003dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003de4:	61fa      	str	r2, [r7, #28]
 8003de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	617b      	str	r3, [r7, #20]
   return(result);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e3      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f83d 	bl	8003e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e0a:	e023      	b.n	8003e54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_UART_IRQHandler+0x4f4>
 8003e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f943 	bl	80040b0 <UART_Transmit_IT>
    return;
 8003e2a:	e014      	b.n	8003e56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <HAL_UART_IRQHandler+0x51e>
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f983 	bl	8004150 <UART_EndTransmit_IT>
    return;
 8003e4a:	e004      	b.n	8003e56 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e54:	bf00      	nop
  }
}
 8003e56:	37e8      	adds	r7, #232	@ 0xe8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	e03b      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d037      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb6:	f7fd fe83 	bl	8001bc0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	6a3a      	ldr	r2, [r7, #32]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d302      	bcc.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e03a      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d023      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b80      	cmp	r3, #128	@ 0x80
 8003ee2:	d020      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d01d      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d116      	bne.n	8003f26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f857 	bl	8003fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2208      	movs	r2, #8
 8003f18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00f      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	bf0c      	ite	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	2300      	movne	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d0b4      	beq.n	8003eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2222      	movs	r2, #34	@ 0x22
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0220 	orr.w	r2, r2, #32
 8003fb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b095      	sub	sp, #84	@ 0x54
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fea:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e5      	bne.n	8003fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	61fb      	str	r3, [r7, #28]
   return(result);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800401e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e5      	bne.n	8003ffe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	2b01      	cmp	r3, #1
 8004038:	d119      	bne.n	800406e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	60bb      	str	r3, [r7, #8]
   return(result);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0310 	bic.w	r3, r3, #16
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800405a:	61ba      	str	r2, [r7, #24]
 800405c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6979      	ldr	r1, [r7, #20]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e5      	bne.n	800403a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800407c:	bf00      	nop
 800407e:	3754      	adds	r7, #84	@ 0x54
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff fee4 	bl	8003e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b21      	cmp	r3, #33	@ 0x21
 80040c2:	d13e      	bne.n	8004142 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040cc:	d114      	bne.n	80040f8 <UART_Transmit_IT+0x48>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d110      	bne.n	80040f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]
 80040f6:	e008      	b.n	800410a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	1c59      	adds	r1, r3, #1
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6211      	str	r1, [r2, #32]
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4619      	mov	r1, r3
 8004118:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800412c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800413c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004166:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fe73 	bl	8003e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	@ 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b22      	cmp	r3, #34	@ 0x22
 8004192:	f040 80ae 	bne.w	80042f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419e:	d117      	bne.n	80041d0 <UART_Receive_IT+0x50>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d113      	bne.n	80041d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041be:	b29a      	uxth	r2, r3
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	1c9a      	adds	r2, r3, #2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80041ce:	e026      	b.n	800421e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d007      	beq.n	80041f4 <UART_Receive_IT+0x74>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <UART_Receive_IT+0x82>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e008      	b.n	8004214 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800420e:	b2da      	uxtb	r2, r3
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29b      	uxth	r3, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4619      	mov	r1, r3
 800422c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800422e:	2b00      	cmp	r3, #0
 8004230:	d15d      	bne.n	80042ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0220 	bic.w	r2, r2, #32
 8004240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004250:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004274:	2b01      	cmp	r3, #1
 8004276:	d135      	bne.n	80042e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	613b      	str	r3, [r7, #16]
   return(result);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429e:	623a      	str	r2, [r7, #32]
 80042a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	69f9      	ldr	r1, [r7, #28]
 80042a4:	6a3a      	ldr	r2, [r7, #32]
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d10a      	bne.n	80042d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042da:	4619      	mov	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fdd1 	bl	8003e84 <HAL_UARTEx_RxEventCallback>
 80042e2:	e002      	b.n	80042ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fd fa13 	bl	8001710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e002      	b.n	80042f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3730      	adds	r7, #48	@ 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b0c0      	sub	sp, #256	@ 0x100
 8004302:	af00      	add	r7, sp, #0
 8004304:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	ea40 0301 	orr.w	r3, r0, r1
 8004324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	431a      	orrs	r2, r3
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	431a      	orrs	r2, r3
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004354:	f021 010c 	bic.w	r1, r1, #12
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004362:	430b      	orrs	r3, r1
 8004364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	6999      	ldr	r1, [r3, #24]
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	ea40 0301 	orr.w	r3, r0, r1
 8004382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b8f      	ldr	r3, [pc, #572]	@ (80045c8 <UART_SetConfig+0x2cc>)
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <UART_SetConfig+0xa0>
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b8d      	ldr	r3, [pc, #564]	@ (80045cc <UART_SetConfig+0x2d0>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d104      	bne.n	80043a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fe f898 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 80043a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043a4:	e003      	b.n	80043ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a6:	f7fe f87f 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 80043aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b8:	f040 810c 	bne.w	80045d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043d6:	415b      	adcs	r3, r3
 80043d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043de:	4621      	mov	r1, r4
 80043e0:	eb12 0801 	adds.w	r8, r2, r1
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb43 0901 	adc.w	r9, r3, r1
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	4623      	mov	r3, r4
 8004404:	eb18 0303 	adds.w	r3, r8, r3
 8004408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800440c:	462b      	mov	r3, r5
 800440e:	eb49 0303 	adc.w	r3, r9, r3
 8004412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004422:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800442a:	460b      	mov	r3, r1
 800442c:	18db      	adds	r3, r3, r3
 800442e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004430:	4613      	mov	r3, r2
 8004432:	eb42 0303 	adc.w	r3, r2, r3
 8004436:	657b      	str	r3, [r7, #84]	@ 0x54
 8004438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800443c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004440:	f7fb ff3e 	bl	80002c0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	011c      	lsls	r4, r3, #4
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800445c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800446c:	415b      	adcs	r3, r3
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004474:	4641      	mov	r1, r8
 8004476:	eb12 0a01 	adds.w	sl, r2, r1
 800447a:	4649      	mov	r1, r9
 800447c:	eb43 0b01 	adc.w	fp, r3, r1
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800448c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004494:	4692      	mov	sl, r2
 8004496:	469b      	mov	fp, r3
 8004498:	4643      	mov	r3, r8
 800449a:	eb1a 0303 	adds.w	r3, sl, r3
 800449e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044a2:	464b      	mov	r3, r9
 80044a4:	eb4b 0303 	adc.w	r3, fp, r3
 80044a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044d6:	f7fb fef3 	bl	80002c0 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80044e2:	fba3 2301 	umull	r2, r3, r3, r1
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2264      	movs	r2, #100	@ 0x64
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	1acb      	subs	r3, r1, r3
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80044f8:	fba3 2302 	umull	r2, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004504:	441c      	add	r4, r3
 8004506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004510:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	1891      	adds	r1, r2, r2
 800451e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004520:	415b      	adcs	r3, r3
 8004522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004528:	4641      	mov	r1, r8
 800452a:	1851      	adds	r1, r2, r1
 800452c:	6339      	str	r1, [r7, #48]	@ 0x30
 800452e:	4649      	mov	r1, r9
 8004530:	414b      	adcs	r3, r1
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004540:	4659      	mov	r1, fp
 8004542:	00cb      	lsls	r3, r1, #3
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454a:	4651      	mov	r1, sl
 800454c:	00ca      	lsls	r2, r1, #3
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	4603      	mov	r3, r0
 8004554:	4642      	mov	r2, r8
 8004556:	189b      	adds	r3, r3, r2
 8004558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800455c:	464b      	mov	r3, r9
 800455e:	460a      	mov	r2, r1
 8004560:	eb42 0303 	adc.w	r3, r2, r3
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004574:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800457c:	460b      	mov	r3, r1
 800457e:	18db      	adds	r3, r3, r3
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004582:	4613      	mov	r3, r2
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800458e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004592:	f7fb fe95 	bl	80002c0 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <UART_SetConfig+0x2d4>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	@ 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	3332      	adds	r3, #50	@ 0x32
 80045ae:	4a08      	ldr	r2, [pc, #32]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 0207 	and.w	r2, r3, #7
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4422      	add	r2, r4
 80045c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045c4:	e106      	b.n	80047d4 <UART_SetConfig+0x4d8>
 80045c6:	bf00      	nop
 80045c8:	40011000 	.word	0x40011000
 80045cc:	40011400 	.word	0x40011400
 80045d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045e6:	4642      	mov	r2, r8
 80045e8:	464b      	mov	r3, r9
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	6239      	str	r1, [r7, #32]
 80045ee:	415b      	adcs	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045f6:	4641      	mov	r1, r8
 80045f8:	1854      	adds	r4, r2, r1
 80045fa:	4649      	mov	r1, r9
 80045fc:	eb43 0501 	adc.w	r5, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	00eb      	lsls	r3, r5, #3
 800460a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800460e:	00e2      	lsls	r2, r4, #3
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	4643      	mov	r3, r8
 8004616:	18e3      	adds	r3, r4, r3
 8004618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800461c:	464b      	mov	r3, r9
 800461e:	eb45 0303 	adc.w	r3, r5, r3
 8004622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004642:	4629      	mov	r1, r5
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	4621      	mov	r1, r4
 8004648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464c:	4621      	mov	r1, r4
 800464e:	008a      	lsls	r2, r1, #2
 8004650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004654:	f7fb fe34 	bl	80002c0 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b60      	ldr	r3, [pc, #384]	@ (80047e0 <UART_SetConfig+0x4e4>)
 800465e:	fba3 2302 	umull	r2, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	011c      	lsls	r4, r3, #4
 8004666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	1891      	adds	r1, r2, r2
 800467e:	61b9      	str	r1, [r7, #24]
 8004680:	415b      	adcs	r3, r3
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004688:	4641      	mov	r1, r8
 800468a:	1851      	adds	r1, r2, r1
 800468c:	6139      	str	r1, [r7, #16]
 800468e:	4649      	mov	r1, r9
 8004690:	414b      	adcs	r3, r1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a0:	4659      	mov	r1, fp
 80046a2:	00cb      	lsls	r3, r1, #3
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046aa:	4651      	mov	r1, sl
 80046ac:	00ca      	lsls	r2, r1, #3
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	4642      	mov	r2, r8
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046bc:	464b      	mov	r3, r9
 80046be:	460a      	mov	r2, r1
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046e0:	4649      	mov	r1, r9
 80046e2:	008b      	lsls	r3, r1, #2
 80046e4:	4641      	mov	r1, r8
 80046e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ea:	4641      	mov	r1, r8
 80046ec:	008a      	lsls	r2, r1, #2
 80046ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046f2:	f7fb fde5 	bl	80002c0 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	4b38      	ldr	r3, [pc, #224]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80046fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2264      	movs	r2, #100	@ 0x64
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	3332      	adds	r3, #50	@ 0x32
 8004710:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <UART_SetConfig+0x4e4>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800471c:	441c      	add	r4, r3
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	673b      	str	r3, [r7, #112]	@ 0x70
 8004726:	677a      	str	r2, [r7, #116]	@ 0x74
 8004728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	415b      	adcs	r3, r3
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800473c:	4641      	mov	r1, r8
 800473e:	1851      	adds	r1, r2, r1
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	4649      	mov	r1, r9
 8004744:	414b      	adcs	r3, r1
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004754:	4659      	mov	r1, fp
 8004756:	00cb      	lsls	r3, r1, #3
 8004758:	4651      	mov	r1, sl
 800475a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475e:	4651      	mov	r1, sl
 8004760:	00ca      	lsls	r2, r1, #3
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	4603      	mov	r3, r0
 8004768:	4642      	mov	r2, r8
 800476a:	189b      	adds	r3, r3, r2
 800476c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800476e:	464b      	mov	r3, r9
 8004770:	460a      	mov	r2, r1
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	663b      	str	r3, [r7, #96]	@ 0x60
 8004782:	667a      	str	r2, [r7, #100]	@ 0x64
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047a2:	f7fb fd8d 	bl	80002c0 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	@ 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	3332      	adds	r3, #50	@ 0x32
 80047be:	4a08      	ldr	r2, [pc, #32]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4422      	add	r2, r4
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80047e8:	4904      	ldr	r1, [pc, #16]	@ (80047fc <MX_FATFS_Init+0x18>)
 80047ea:	4805      	ldr	r0, [pc, #20]	@ (8004800 <MX_FATFS_Init+0x1c>)
 80047ec:	f002 fee4 	bl	80075b8 <FATFS_LinkDriver>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b03      	ldr	r3, [pc, #12]	@ (8004804 <MX_FATFS_Init+0x20>)
 80047f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20002270 	.word	0x20002270
 8004800:	20000010 	.word	0x20000010
 8004804:	2000226c 	.word	0x2000226c

08004808 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800480c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;

	SD_disk_initialize (pdrv);
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fc f895 	bl	8000954 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800482a:	bf00      	nop
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;

	SD_disk_status (pdrv);
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	4618      	mov	r0, r3
 8004842:	f7fc f96d 	bl	8000b20 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004846:	bf00      	nop
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4603      	mov	r3, r0
 800485e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;

	SD_disk_read ( pdrv,  buff,  sector,  count);
 8004860:	7bf8      	ldrb	r0, [r7, #15]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	f7fc f970 	bl	8000b4c <SD_disk_read>

  /* USER CODE END READ */
}
 800486c:	bf00      	nop
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4603      	mov	r3, r0
 8004884:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;

	SD_disk_write ( pdrv,  buff,  sector, count);
 8004886:	7bf8      	ldrb	r0, [r7, #15]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	f7fc f9c7 	bl	8000c20 <SD_disk_write>

  /* USER CODE END WRITE */
}
 8004892:	bf00      	nop
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	603a      	str	r2, [r7, #0]
 80048a6:	71fb      	strb	r3, [r7, #7]
 80048a8:	460b      	mov	r3, r1
 80048aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl ( pdrv,  cmd, buff);
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	79b9      	ldrb	r1, [r7, #6]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc fa38 	bl	8000d28 <SD_disk_ioctl>

  /* USER CODE END IOCTL */
}
 80048b8:	bf00      	nop
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	4a08      	ldr	r2, [pc, #32]	@ (80048f4 <disk_status+0x30>)
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	79fa      	ldrb	r2, [r7, #7]
 80048dc:	4905      	ldr	r1, [pc, #20]	@ (80048f4 <disk_status+0x30>)
 80048de:	440a      	add	r2, r1
 80048e0:	7a12      	ldrb	r2, [r2, #8]
 80048e2:	4610      	mov	r0, r2
 80048e4:	4798      	blx	r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	2000249c 	.word	0x2000249c

080048f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	4a0e      	ldr	r2, [pc, #56]	@ (8004944 <disk_initialize+0x4c>)
 800490a:	5cd3      	ldrb	r3, [r2, r3]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d114      	bne.n	800493a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <disk_initialize+0x4c>)
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	79fa      	ldrb	r2, [r7, #7]
 800491e:	4909      	ldr	r1, [pc, #36]	@ (8004944 <disk_initialize+0x4c>)
 8004920:	440a      	add	r2, r1
 8004922:	7a12      	ldrb	r2, [r2, #8]
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	4a03      	ldr	r2, [pc, #12]	@ (8004944 <disk_initialize+0x4c>)
 8004936:	2101      	movs	r1, #1
 8004938:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800493a:	7bfb      	ldrb	r3, [r7, #15]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	2000249c 	.word	0x2000249c

08004948 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <disk_read+0x3c>)
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	689c      	ldr	r4, [r3, #8]
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <disk_read+0x3c>)
 8004968:	4413      	add	r3, r2
 800496a:	7a18      	ldrb	r0, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	47a0      	blx	r4
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
  return res;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	2000249c 	.word	0x2000249c

08004988 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <disk_write+0x3c>)
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68dc      	ldr	r4, [r3, #12]
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	4a07      	ldr	r2, [pc, #28]	@ (80049c4 <disk_write+0x3c>)
 80049a8:	4413      	add	r3, r2
 80049aa:	7a18      	ldrb	r0, [r3, #8]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	47a0      	blx	r4
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	2000249c 	.word	0x2000249c

080049c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	603a      	str	r2, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
 80049d4:	460b      	mov	r3, r1
 80049d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	4a09      	ldr	r2, [pc, #36]	@ (8004a00 <disk_ioctl+0x38>)
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	79fa      	ldrb	r2, [r7, #7]
 80049e6:	4906      	ldr	r1, [pc, #24]	@ (8004a00 <disk_ioctl+0x38>)
 80049e8:	440a      	add	r2, r1
 80049ea:	7a10      	ldrb	r0, [r2, #8]
 80049ec:	79b9      	ldrb	r1, [r7, #6]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	4798      	blx	r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2000249c 	.word	0x2000249c

08004a04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	b21a      	sxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	4313      	orrs	r3, r2
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004a28:	89fb      	ldrh	r3, [r7, #14]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3303      	adds	r3, #3
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	3202      	adds	r2, #2
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	3201      	adds	r2, #1
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
	return rv;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	887a      	ldrh	r2, [r7, #2]
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	887b      	ldrh	r3, [r7, #2]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	887a      	ldrh	r2, [r7, #2]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004b0a:	b480      	push	{r7}
 8004b0c:	b087      	sub	sp, #28
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	1c53      	adds	r3, r2, #1
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	1c59      	adds	r1, r3, #1
 8004b2e:	6179      	str	r1, [r7, #20]
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f1      	bne.n	8004b24 <mem_cpy+0x1a>
	}
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	617a      	str	r2, [r7, #20]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f3      	bne.n	8004b5c <mem_set+0x10>
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b82:	b480      	push	{r7}
 8004b84:	b089      	sub	sp, #36	@ 0x24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	61ba      	str	r2, [r7, #24]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	1acb      	subs	r3, r1, r3
 8004bae:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <mem_cmp+0x40>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0eb      	beq.n	8004b9a <mem_cmp+0x18>

	return r;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3724      	adds	r7, #36	@ 0x24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004bda:	e002      	b.n	8004be2 <chk_chr+0x12>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3301      	adds	r3, #1
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <chk_chr+0x26>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d1f2      	bne.n	8004bdc <chk_chr+0xc>
	return *str;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e029      	b.n	8004c70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004c1c:	4a27      	ldr	r2, [pc, #156]	@ (8004cbc <chk_lock+0xb4>)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	4413      	add	r3, r2
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01d      	beq.n	8004c66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c2a:	4a24      	ldr	r2, [pc, #144]	@ (8004cbc <chk_lock+0xb4>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4413      	add	r3, r2
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d116      	bne.n	8004c6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004cbc <chk_lock+0xb4>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	4413      	add	r3, r2
 8004c44:	3304      	adds	r3, #4
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d10c      	bne.n	8004c6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c50:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <chk_lock+0xb4>)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	4413      	add	r3, r2
 8004c58:	3308      	adds	r3, #8
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d102      	bne.n	8004c6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c64:	e007      	b.n	8004c76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d9d2      	bls.n	8004c1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d109      	bne.n	8004c90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <chk_lock+0x80>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d101      	bne.n	8004c8c <chk_lock+0x84>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e010      	b.n	8004cae <chk_lock+0xa6>
 8004c8c:	2312      	movs	r3, #18
 8004c8e:	e00e      	b.n	8004cae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <chk_lock+0xa0>
 8004c96:	4a09      	ldr	r2, [pc, #36]	@ (8004cbc <chk_lock+0xb4>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	4413      	add	r3, r2
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca6:	d101      	bne.n	8004cac <chk_lock+0xa4>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	e000      	b.n	8004cae <chk_lock+0xa6>
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	2000227c 	.word	0x2000227c

08004cc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	e002      	b.n	8004cd2 <enq_lock+0x12>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d806      	bhi.n	8004ce6 <enq_lock+0x26>
 8004cd8:	4a09      	ldr	r2, [pc, #36]	@ (8004d00 <enq_lock+0x40>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	4413      	add	r3, r2
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f2      	bne.n	8004ccc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	2000227c 	.word	0x2000227c

08004d04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e01f      	b.n	8004d54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004d14:	4a41      	ldr	r2, [pc, #260]	@ (8004e1c <inc_lock+0x118>)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	4413      	add	r3, r2
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d113      	bne.n	8004d4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004d26:	4a3d      	ldr	r2, [pc, #244]	@ (8004e1c <inc_lock+0x118>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3304      	adds	r3, #4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d109      	bne.n	8004d4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004d3a:	4a38      	ldr	r2, [pc, #224]	@ (8004e1c <inc_lock+0x118>)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	4413      	add	r3, r2
 8004d42:	3308      	adds	r3, #8
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d006      	beq.n	8004d5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d9dc      	bls.n	8004d14 <inc_lock+0x10>
 8004d5a:	e000      	b.n	8004d5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004d5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d132      	bne.n	8004dca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e002      	b.n	8004d70 <inc_lock+0x6c>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d806      	bhi.n	8004d84 <inc_lock+0x80>
 8004d76:	4a29      	ldr	r2, [pc, #164]	@ (8004e1c <inc_lock+0x118>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	4413      	add	r3, r2
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f2      	bne.n	8004d6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d101      	bne.n	8004d8e <inc_lock+0x8a>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e040      	b.n	8004e10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4922      	ldr	r1, [pc, #136]	@ (8004e1c <inc_lock+0x118>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	440b      	add	r3, r1
 8004d9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	491e      	ldr	r1, [pc, #120]	@ (8004e1c <inc_lock+0x118>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	440b      	add	r3, r1
 8004da8:	3304      	adds	r3, #4
 8004daa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	491a      	ldr	r1, [pc, #104]	@ (8004e1c <inc_lock+0x118>)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	440b      	add	r3, r1
 8004db8:	3308      	adds	r3, #8
 8004dba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004dbc:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <inc_lock+0x118>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d009      	beq.n	8004de4 <inc_lock+0xe0>
 8004dd0:	4a12      	ldr	r2, [pc, #72]	@ (8004e1c <inc_lock+0x118>)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	4413      	add	r3, r2
 8004dd8:	330c      	adds	r3, #12
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <inc_lock+0xe0>
 8004de0:	2300      	movs	r3, #0
 8004de2:	e015      	b.n	8004e10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d108      	bne.n	8004dfc <inc_lock+0xf8>
 8004dea:	4a0c      	ldr	r2, [pc, #48]	@ (8004e1c <inc_lock+0x118>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	4413      	add	r3, r2
 8004df2:	330c      	adds	r3, #12
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	e001      	b.n	8004e00 <inc_lock+0xfc>
 8004dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e00:	4906      	ldr	r1, [pc, #24]	@ (8004e1c <inc_lock+0x118>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	440b      	add	r3, r1
 8004e08:	330c      	adds	r3, #12
 8004e0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	2000227c 	.word	0x2000227c

08004e20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d825      	bhi.n	8004e80 <dec_lock+0x60>
		n = Files[i].ctr;
 8004e34:	4a17      	ldr	r2, [pc, #92]	@ (8004e94 <dec_lock+0x74>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e48:	d101      	bne.n	8004e4e <dec_lock+0x2e>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004e4e:	89fb      	ldrh	r3, [r7, #14]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <dec_lock+0x3a>
 8004e54:	89fb      	ldrh	r3, [r7, #14]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e94 <dec_lock+0x74>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	4413      	add	r3, r2
 8004e62:	330c      	adds	r3, #12
 8004e64:	89fa      	ldrh	r2, [r7, #14]
 8004e66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e68:	89fb      	ldrh	r3, [r7, #14]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <dec_lock+0x5a>
 8004e6e:	4a09      	ldr	r2, [pc, #36]	@ (8004e94 <dec_lock+0x74>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	4413      	add	r3, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	737b      	strb	r3, [r7, #13]
 8004e7e:	e001      	b.n	8004e84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e80:	2302      	movs	r3, #2
 8004e82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e84:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	2000227c 	.word	0x2000227c

08004e98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e010      	b.n	8004ec8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8004edc <clear_lock+0x44>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	4413      	add	r3, r2
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d105      	bne.n	8004ec2 <clear_lock+0x2a>
 8004eb6:	4a09      	ldr	r2, [pc, #36]	@ (8004edc <clear_lock+0x44>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	4413      	add	r3, r2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d9eb      	bls.n	8004ea6 <clear_lock+0xe>
	}
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	2000227c 	.word	0x2000227c

08004ee0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	78db      	ldrb	r3, [r3, #3]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d034      	beq.n	8004f5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	7858      	ldrb	r0, [r3, #1]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f04:	2301      	movs	r3, #1
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	f7ff fd3e 	bl	8004988 <disk_write>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	73fb      	strb	r3, [r7, #15]
 8004f16:	e022      	b.n	8004f5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d217      	bcs.n	8004f5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	789b      	ldrb	r3, [r3, #2]
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e010      	b.n	8004f58 <sync_window+0x78>
					wsect += fs->fsize;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7858      	ldrb	r0, [r3, #1]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	f7ff fd1b 	bl	8004988 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d8eb      	bhi.n	8004f36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d01b      	beq.n	8004fb8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ffad 	bl	8004ee0 <sync_window>
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d113      	bne.n	8004fb8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7858      	ldrb	r0, [r3, #1]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	f7ff fcd3 	bl	8004948 <disk_read>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff87 	bl	8004ee0 <sync_window>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d159      	bne.n	8005090 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d149      	bne.n	8005078 <sync_fs+0xb4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	791b      	ldrb	r3, [r3, #4]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d145      	bne.n	8005078 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	899b      	ldrh	r3, [r3, #12]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f7ff fda7 	bl	8004b4c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3338      	adds	r3, #56	@ 0x38
 8005002:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005006:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fd36 	bl	8004a7c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3338      	adds	r3, #56	@ 0x38
 8005014:	4921      	ldr	r1, [pc, #132]	@ (800509c <sync_fs+0xd8>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fd4b 	bl	8004ab2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3338      	adds	r3, #56	@ 0x38
 8005020:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005024:	491e      	ldr	r1, [pc, #120]	@ (80050a0 <sync_fs+0xdc>)
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fd43 	bl	8004ab2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3338      	adds	r3, #56	@ 0x38
 8005030:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7ff fd39 	bl	8004ab2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3338      	adds	r3, #56	@ 0x38
 8005044:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f7ff fd2f 	bl	8004ab2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7858      	ldrb	r0, [r3, #1]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506c:	2301      	movs	r3, #1
 800506e:	f7ff fc8b 	bl	8004988 <disk_write>
			fs->fsi_flag = 0;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2200      	movs	r2, #0
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fca1 	bl	80049c8 <disk_ioctl>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <sync_fs+0xcc>
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	41615252 	.word	0x41615252
 80050a0:	61417272 	.word	0x61417272

080050a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	3b02      	subs	r3, #2
 80050b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	3b02      	subs	r3, #2
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d301      	bcc.n	80050c4 <clust2sect+0x20>
 80050c0:	2300      	movs	r3, #0
 80050c2:	e008      	b.n	80050d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	895b      	ldrh	r3, [r3, #10]
 80050c8:	461a      	mov	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	fb03 f202 	mul.w	r2, r3, r2
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	4413      	add	r3, r2
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d904      	bls.n	8005102 <get_fat+0x20>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d302      	bcc.n	8005108 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005102:	2301      	movs	r3, #1
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e0ba      	b.n	800527e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005108:	f04f 33ff 	mov.w	r3, #4294967295
 800510c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b03      	cmp	r3, #3
 8005114:	f000 8082 	beq.w	800521c <get_fat+0x13a>
 8005118:	2b03      	cmp	r3, #3
 800511a:	f300 80a6 	bgt.w	800526a <get_fat+0x188>
 800511e:	2b01      	cmp	r3, #1
 8005120:	d002      	beq.n	8005128 <get_fat+0x46>
 8005122:	2b02      	cmp	r3, #2
 8005124:	d055      	beq.n	80051d2 <get_fat+0xf0>
 8005126:	e0a0      	b.n	800526a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	899b      	ldrh	r3, [r3, #12]
 800513e:	4619      	mov	r1, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	fbb3 f3f1 	udiv	r3, r3, r1
 8005146:	4413      	add	r3, r2
 8005148:	4619      	mov	r1, r3
 800514a:	6938      	ldr	r0, [r7, #16]
 800514c:	f7ff ff0c 	bl	8004f68 <move_window>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	f040 808c 	bne.w	8005270 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	60fa      	str	r2, [r7, #12]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	8992      	ldrh	r2, [r2, #12]
 8005162:	fbb3 f1f2 	udiv	r1, r3, r2
 8005166:	fb01 f202 	mul.w	r2, r1, r2
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005174:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	899b      	ldrh	r3, [r3, #12]
 800517e:	4619      	mov	r1, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	fbb3 f3f1 	udiv	r3, r3, r1
 8005186:	4413      	add	r3, r2
 8005188:	4619      	mov	r1, r3
 800518a:	6938      	ldr	r0, [r7, #16]
 800518c:	f7ff feec 	bl	8004f68 <move_window>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d16e      	bne.n	8005274 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	899b      	ldrh	r3, [r3, #12]
 800519a:	461a      	mov	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	fbb3 f1f2 	udiv	r1, r3, r2
 80051a2:	fb01 f202 	mul.w	r2, r1, r2
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <get_fat+0xe6>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	e002      	b.n	80051ce <get_fat+0xec>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ce:	617b      	str	r3, [r7, #20]
			break;
 80051d0:	e055      	b.n	800527e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	899b      	ldrh	r3, [r3, #12]
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4619      	mov	r1, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051e6:	4413      	add	r3, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f7ff febc 	bl	8004f68 <move_window>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d140      	bne.n	8005278 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	8992      	ldrh	r2, [r2, #12]
 8005204:	fbb3 f0f2 	udiv	r0, r3, r2
 8005208:	fb00 f202 	mul.w	r2, r0, r2
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	440b      	add	r3, r1
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fbf7 	bl	8004a04 <ld_word>
 8005216:	4603      	mov	r3, r0
 8005218:	617b      	str	r3, [r7, #20]
			break;
 800521a:	e030      	b.n	800527e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	899b      	ldrh	r3, [r3, #12]
 8005224:	089b      	lsrs	r3, r3, #2
 8005226:	b29b      	uxth	r3, r3
 8005228:	4619      	mov	r1, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005230:	4413      	add	r3, r2
 8005232:	4619      	mov	r1, r3
 8005234:	6938      	ldr	r0, [r7, #16]
 8005236:	f7ff fe97 	bl	8004f68 <move_window>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11d      	bne.n	800527c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	8992      	ldrh	r2, [r2, #12]
 800524e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005252:	fb00 f202 	mul.w	r2, r0, r2
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	440b      	add	r3, r1
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fbeb 	bl	8004a36 <ld_dword>
 8005260:	4603      	mov	r3, r0
 8005262:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005266:	617b      	str	r3, [r7, #20]
			break;
 8005268:	e009      	b.n	800527e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800526a:	2301      	movs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e006      	b.n	800527e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005270:	bf00      	nop
 8005272:	e004      	b.n	800527e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005274:	bf00      	nop
 8005276:	e002      	b.n	800527e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800527c:	bf00      	nop
		}
	}

	return val;
 800527e:	697b      	ldr	r3, [r7, #20]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b089      	sub	sp, #36	@ 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005294:	2302      	movs	r3, #2
 8005296:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b01      	cmp	r3, #1
 800529c:	f240 8109 	bls.w	80054b2 <put_fat+0x22a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	f080 8103 	bcs.w	80054b2 <put_fat+0x22a>
		switch (fs->fs_type) {
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	f000 80b6 	beq.w	8005422 <put_fat+0x19a>
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	f300 80fb 	bgt.w	80054b2 <put_fat+0x22a>
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d003      	beq.n	80052c8 <put_fat+0x40>
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	f000 8083 	beq.w	80053cc <put_fat+0x144>
 80052c6:	e0f4      	b.n	80054b2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4413      	add	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	899b      	ldrh	r3, [r3, #12]
 80052de:	4619      	mov	r1, r3
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e6:	4413      	add	r3, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff fe3c 	bl	8004f68 <move_window>
 80052f0:	4603      	mov	r3, r0
 80052f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052f4:	7ffb      	ldrb	r3, [r7, #31]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 80d4 	bne.w	80054a4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	61ba      	str	r2, [r7, #24]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	8992      	ldrh	r2, [r2, #12]
 800530c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005310:	fb00 f202 	mul.w	r2, r0, r2
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	440b      	add	r3, r1
 8005318:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00d      	beq.n	8005340 <put_fat+0xb8>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	b25b      	sxtb	r3, r3
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	b25a      	sxtb	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	b25b      	sxtb	r3, r3
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	b25b      	sxtb	r3, r3
 8005338:	4313      	orrs	r3, r2
 800533a:	b25b      	sxtb	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e001      	b.n	8005344 <put_fat+0xbc>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	899b      	ldrh	r3, [r3, #12]
 8005356:	4619      	mov	r1, r3
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	fbb3 f3f1 	udiv	r3, r3, r1
 800535e:	4413      	add	r3, r2
 8005360:	4619      	mov	r1, r3
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff fe00 	bl	8004f68 <move_window>
 8005368:	4603      	mov	r3, r0
 800536a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800536c:	7ffb      	ldrb	r3, [r7, #31]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 809a 	bne.w	80054a8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	899b      	ldrh	r3, [r3, #12]
 800537e:	461a      	mov	r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	fbb3 f0f2 	udiv	r0, r3, r2
 8005386:	fb00 f202 	mul.w	r2, r0, r2
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	440b      	add	r3, r1
 800538e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <put_fat+0x11a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e00e      	b.n	80053c0 <put_fat+0x138>
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	f023 030f 	bic.w	r3, r3, #15
 80053ac:	b25a      	sxtb	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	70da      	strb	r2, [r3, #3]
			break;
 80053ca:	e072      	b.n	80054b2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	899b      	ldrh	r3, [r3, #12]
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	4619      	mov	r1, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80053e0:	4413      	add	r3, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff fdbf 	bl	8004f68 <move_window>
 80053ea:	4603      	mov	r3, r0
 80053ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053ee:	7ffb      	ldrb	r3, [r7, #31]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d15b      	bne.n	80054ac <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	8992      	ldrh	r2, [r2, #12]
 8005402:	fbb3 f0f2 	udiv	r0, r3, r2
 8005406:	fb00 f202 	mul.w	r2, r0, r2
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	440b      	add	r3, r1
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	b292      	uxth	r2, r2
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fb31 	bl	8004a7c <st_word>
			fs->wflag = 1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	70da      	strb	r2, [r3, #3]
			break;
 8005420:	e047      	b.n	80054b2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	899b      	ldrh	r3, [r3, #12]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	b29b      	uxth	r3, r3
 800542e:	4619      	mov	r1, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	fbb3 f3f1 	udiv	r3, r3, r1
 8005436:	4413      	add	r3, r2
 8005438:	4619      	mov	r1, r3
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fd94 	bl	8004f68 <move_window>
 8005440:	4603      	mov	r3, r0
 8005442:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005444:	7ffb      	ldrb	r3, [r7, #31]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d132      	bne.n	80054b0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	8992      	ldrh	r2, [r2, #12]
 800545e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005462:	fb00 f202 	mul.w	r2, r0, r2
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	440b      	add	r3, r1
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fae3 	bl	8004a36 <ld_dword>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005476:	4323      	orrs	r3, r4
 8005478:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	8992      	ldrh	r2, [r2, #12]
 8005488:	fbb3 f0f2 	udiv	r0, r3, r2
 800548c:	fb00 f202 	mul.w	r2, r0, r2
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	440b      	add	r3, r1
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fb0b 	bl	8004ab2 <st_dword>
			fs->wflag = 1;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	70da      	strb	r2, [r3, #3]
			break;
 80054a2:	e006      	b.n	80054b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80054a4:	bf00      	nop
 80054a6:	e004      	b.n	80054b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80054a8:	bf00      	nop
 80054aa:	e002      	b.n	80054b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80054b0:	bf00      	nop
		}
	}
	return res;
 80054b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3724      	adds	r7, #36	@ 0x24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}

080054bc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d904      	bls.n	80054e2 <remove_chain+0x26>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d301      	bcc.n	80054e6 <remove_chain+0x2a>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e04b      	b.n	800557e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	69b8      	ldr	r0, [r7, #24]
 80054f4:	f7ff fec8 	bl	8005288 <put_fat>
 80054f8:	4603      	mov	r3, r0
 80054fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80054fc:	7ffb      	ldrb	r3, [r7, #31]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <remove_chain+0x4a>
 8005502:	7ffb      	ldrb	r3, [r7, #31]
 8005504:	e03b      	b.n	800557e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff fdea 	bl	80050e2 <get_fat>
 800550e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d031      	beq.n	800557a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <remove_chain+0x64>
 800551c:	2302      	movs	r3, #2
 800551e:	e02e      	b.n	800557e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d101      	bne.n	800552c <remove_chain+0x70>
 8005528:	2301      	movs	r3, #1
 800552a:	e028      	b.n	800557e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800552c:	2200      	movs	r2, #0
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	69b8      	ldr	r0, [r7, #24]
 8005532:	f7ff fea9 	bl	8005288 <put_fat>
 8005536:	4603      	mov	r3, r0
 8005538:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800553a:	7ffb      	ldrb	r3, [r7, #31]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <remove_chain+0x88>
 8005540:	7ffb      	ldrb	r3, [r7, #31]
 8005542:	e01c      	b.n	800557e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	3b02      	subs	r3, #2
 800554e:	429a      	cmp	r2, r3
 8005550:	d20b      	bcs.n	800556a <remove_chain+0xae>
			fs->free_clst++;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	791b      	ldrb	r3, [r3, #4]
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	d3c6      	bcc.n	8005506 <remove_chain+0x4a>
 8005578:	e000      	b.n	800557c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800557a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b088      	sub	sp, #32
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10d      	bne.n	80055b8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <create_chain+0x2c>
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d31b      	bcc.n	80055ea <create_chain+0x64>
 80055b2:	2301      	movs	r3, #1
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	e018      	b.n	80055ea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff fd91 	bl	80050e2 <get_fat>
 80055c0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d801      	bhi.n	80055cc <create_chain+0x46>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e070      	b.n	80056ae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d101      	bne.n	80055d8 <create_chain+0x52>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	e06a      	b.n	80056ae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d201      	bcs.n	80055e6 <create_chain+0x60>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	e063      	b.n	80056ae <create_chain+0x128>
		scl = clst;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d307      	bcc.n	800560e <create_chain+0x88>
				ncl = 2;
 80055fe:	2302      	movs	r3, #2
 8005600:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	429a      	cmp	r2, r3
 8005608:	d901      	bls.n	800560e <create_chain+0x88>
 800560a:	2300      	movs	r3, #0
 800560c:	e04f      	b.n	80056ae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800560e:	69f9      	ldr	r1, [r7, #28]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fd66 	bl	80050e2 <get_fat>
 8005616:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00e      	beq.n	800563c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d003      	beq.n	800562c <create_chain+0xa6>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d101      	bne.n	8005630 <create_chain+0xaa>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	e03e      	b.n	80056ae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	429a      	cmp	r2, r3
 8005636:	d1da      	bne.n	80055ee <create_chain+0x68>
 8005638:	2300      	movs	r3, #0
 800563a:	e038      	b.n	80056ae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800563c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800563e:	f04f 32ff 	mov.w	r2, #4294967295
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	6938      	ldr	r0, [r7, #16]
 8005646:	f7ff fe1f 	bl	8005288 <put_fat>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <create_chain+0xe2>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d006      	beq.n	8005668 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6938      	ldr	r0, [r7, #16]
 8005660:	f7ff fe12 	bl	8005288 <put_fat>
 8005664:	4603      	mov	r3, r0
 8005666:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d116      	bne.n	800569c <create_chain+0x116>
		fs->last_clst = ncl;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	3b02      	subs	r3, #2
 800567e:	429a      	cmp	r2, r3
 8005680:	d804      	bhi.n	800568c <create_chain+0x106>
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	1e5a      	subs	r2, r3, #1
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	791b      	ldrb	r3, [r3, #4]
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	711a      	strb	r2, [r3, #4]
 800569a:	e007      	b.n	80056ac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d102      	bne.n	80056a8 <create_chain+0x122>
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
 80056a6:	e000      	b.n	80056aa <create_chain+0x124>
 80056a8:	2301      	movs	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80056ac:	69fb      	ldr	r3, [r7, #28]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	3304      	adds	r3, #4
 80056cc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	899b      	ldrh	r3, [r3, #12]
 80056d2:	461a      	mov	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	8952      	ldrh	r2, [r2, #10]
 80056de:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	613a      	str	r2, [r7, #16]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <clmt_clust+0x42>
 80056f4:	2300      	movs	r3, #0
 80056f6:	e010      	b.n	800571a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d307      	bcc.n	8005710 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	3304      	adds	r3, #4
 800570c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800570e:	e7e9      	b.n	80056e4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005710:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4413      	add	r3, r2
}
 800571a:	4618      	mov	r0, r3
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800573c:	d204      	bcs.n	8005748 <dir_sdi+0x22>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005748:	2302      	movs	r3, #2
 800574a:	e071      	b.n	8005830 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <dir_sdi+0x46>
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d902      	bls.n	800576c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10c      	bne.n	800578c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	8912      	ldrh	r2, [r2, #8]
 800577a:	4293      	cmp	r3, r2
 800577c:	d301      	bcc.n	8005782 <dir_sdi+0x5c>
 800577e:	2302      	movs	r3, #2
 8005780:	e056      	b.n	8005830 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	61da      	str	r2, [r3, #28]
 800578a:	e02d      	b.n	80057e8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	895b      	ldrh	r3, [r3, #10]
 8005790:	461a      	mov	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	899b      	ldrh	r3, [r3, #12]
 8005796:	fb02 f303 	mul.w	r3, r2, r3
 800579a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800579c:	e019      	b.n	80057d2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fc9d 	bl	80050e2 <get_fat>
 80057a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d101      	bne.n	80057b6 <dir_sdi+0x90>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e03c      	b.n	8005830 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d904      	bls.n	80057c6 <dir_sdi+0xa0>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d301      	bcc.n	80057ca <dir_sdi+0xa4>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e032      	b.n	8005830 <dir_sdi+0x10a>
			ofs -= csz;
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d2e1      	bcs.n	800579e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	6938      	ldr	r0, [r7, #16]
 80057de:	f7ff fc61 	bl	80050a4 <clust2sect>
 80057e2:	4602      	mov	r2, r0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <dir_sdi+0xd4>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e01a      	b.n	8005830 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69da      	ldr	r2, [r3, #28]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	899b      	ldrh	r3, [r3, #12]
 8005802:	4619      	mov	r1, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	fbb3 f3f1 	udiv	r3, r3, r1
 800580a:	441a      	add	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	899b      	ldrh	r3, [r3, #12]
 800581a:	461a      	mov	r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005822:	fb00 f202 	mul.w	r2, r0, r2
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	18ca      	adds	r2, r1, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	3320      	adds	r3, #32
 800584e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <dir_next+0x28>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800585e:	d301      	bcc.n	8005864 <dir_next+0x2c>
 8005860:	2304      	movs	r3, #4
 8005862:	e0bb      	b.n	80059dc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	899b      	ldrh	r3, [r3, #12]
 8005868:	461a      	mov	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005870:	fb01 f202 	mul.w	r2, r1, r2
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 809d 	bne.w	80059b6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	8912      	ldrh	r2, [r2, #8]
 8005896:	4293      	cmp	r3, r2
 8005898:	f0c0 808d 	bcc.w	80059b6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	61da      	str	r2, [r3, #28]
 80058a2:	2304      	movs	r3, #4
 80058a4:	e09a      	b.n	80059dc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	899b      	ldrh	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	8952      	ldrh	r2, [r2, #10]
 80058b6:	3a01      	subs	r2, #1
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d17b      	bne.n	80059b6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7ff fc0b 	bl	80050e2 <get_fat>
 80058cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d801      	bhi.n	80058d8 <dir_next+0xa0>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e081      	b.n	80059dc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d101      	bne.n	80058e4 <dir_next+0xac>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e07b      	b.n	80059dc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d359      	bcc.n	80059a2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	61da      	str	r2, [r3, #28]
 80058fa:	2304      	movs	r3, #4
 80058fc:	e06e      	b.n	80059dc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7ff fe3d 	bl	8005586 <create_chain>
 800590c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <dir_next+0xe0>
 8005914:	2307      	movs	r3, #7
 8005916:	e061      	b.n	80059dc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <dir_next+0xea>
 800591e:	2302      	movs	r3, #2
 8005920:	e05c      	b.n	80059dc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d101      	bne.n	800592e <dir_next+0xf6>
 800592a:	2301      	movs	r3, #1
 800592c:	e056      	b.n	80059dc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fad6 	bl	8004ee0 <sync_window>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <dir_next+0x106>
 800593a:	2301      	movs	r3, #1
 800593c:	e04e      	b.n	80059dc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	899b      	ldrh	r3, [r3, #12]
 8005948:	461a      	mov	r2, r3
 800594a:	2100      	movs	r1, #0
 800594c:	f7ff f8fe 	bl	8004b4c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	6979      	ldr	r1, [r7, #20]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff fba4 	bl	80050a4 <clust2sect>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34
 8005962:	e012      	b.n	800598a <dir_next+0x152>
						fs->wflag = 1;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff fab8 	bl	8004ee0 <sync_window>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <dir_next+0x142>
 8005976:	2301      	movs	r3, #1
 8005978:	e030      	b.n	80059dc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3301      	adds	r3, #1
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	635a      	str	r2, [r3, #52]	@ 0x34
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	895b      	ldrh	r3, [r3, #10]
 800598e:	461a      	mov	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4293      	cmp	r3, r2
 8005994:	d3e6      	bcc.n	8005964 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad2      	subs	r2, r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fb7a 	bl	80050a4 <clust2sect>
 80059b0:	4602      	mov	r2, r0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	899b      	ldrh	r3, [r3, #12]
 80059c6:	461a      	mov	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80059ce:	fb00 f202 	mul.w	r2, r0, r2
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	18ca      	adds	r2, r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80059f4:	2100      	movs	r1, #0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fe95 	bl	8005726 <dir_sdi>
 80059fc:	4603      	mov	r3, r0
 80059fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d12b      	bne.n	8005a5e <dir_alloc+0x7a>
		n = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff faa9 	bl	8004f68 <move_window>
 8005a16:	4603      	mov	r3, r0
 8005a18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11d      	bne.n	8005a5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2be5      	cmp	r3, #229	@ 0xe5
 8005a28:	d004      	beq.n	8005a34 <dir_alloc+0x50>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d107      	bne.n	8005a44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3301      	adds	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d102      	bne.n	8005a48 <dir_alloc+0x64>
 8005a42:	e00c      	b.n	8005a5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005a48:	2101      	movs	r1, #1
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff fef4 	bl	8005838 <dir_next>
 8005a50:	4603      	mov	r3, r0
 8005a52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0d7      	beq.n	8005a0a <dir_alloc+0x26>
 8005a5a:	e000      	b.n	8005a5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005a5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d101      	bne.n	8005a68 <dir_alloc+0x84>
 8005a64:	2307      	movs	r3, #7
 8005a66:	75fb      	strb	r3, [r7, #23]
	return res;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	331a      	adds	r3, #26
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe ffbf 	bl	8004a04 <ld_word>
 8005a86:	4603      	mov	r3, r0
 8005a88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d109      	bne.n	8005aa6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	3314      	adds	r3, #20
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe ffb4 	bl	8004a04 <ld_word>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	331a      	adds	r3, #26
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe ffd8 	bl	8004a7c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d109      	bne.n	8005ae8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f103 0214 	add.w	r2, r3, #20
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f7fe ffca 	bl	8004a7c <st_word>
	}
}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	331a      	adds	r3, #26
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe ff80 	bl	8004a04 <ld_word>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <cmp_lfn+0x1e>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e059      	b.n	8005bc2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b16:	1e5a      	subs	r2, r3, #1
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b24:	2301      	movs	r3, #1
 8005b26:	81fb      	strh	r3, [r7, #14]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	e033      	b.n	8005b96 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005b2e:	4a27      	ldr	r2, [pc, #156]	@ (8005bcc <cmp_lfn+0xdc>)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe ff61 	bl	8004a04 <ld_word>
 8005b42:	4603      	mov	r3, r0
 8005b44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005b46:	89fb      	ldrh	r3, [r7, #14]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01a      	beq.n	8005b82 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005b50:	d812      	bhi.n	8005b78 <cmp_lfn+0x88>
 8005b52:	89bb      	ldrh	r3, [r7, #12]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 fd7b 	bl	8007650 <ff_wtoupper>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461c      	mov	r4, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	617a      	str	r2, [r7, #20]
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 fd6f 	bl	8007650 <ff_wtoupper>
 8005b72:	4603      	mov	r3, r0
 8005b74:	429c      	cmp	r4, r3
 8005b76:	d001      	beq.n	8005b7c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e022      	b.n	8005bc2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005b7c:	89bb      	ldrh	r3, [r7, #12]
 8005b7e:	81fb      	strh	r3, [r7, #14]
 8005b80:	e006      	b.n	8005b90 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005b82:	89bb      	ldrh	r3, [r7, #12]
 8005b84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d001      	beq.n	8005b90 <cmp_lfn+0xa0>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e018      	b.n	8005bc2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	3301      	adds	r3, #1
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b0c      	cmp	r3, #12
 8005b9a:	d9c8      	bls.n	8005b2e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <cmp_lfn+0xd0>
 8005ba8:	89fb      	ldrh	r3, [r7, #14]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d008      	beq.n	8005bc0 <cmp_lfn+0xd0>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <cmp_lfn+0xd0>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005bc0:	2301      	movs	r3, #1
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd90      	pop	{r4, r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	08008368 	.word	0x08008368

08005bd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	460b      	mov	r3, r1
 8005be0:	71fb      	strb	r3, [r7, #7]
 8005be2:	4613      	mov	r3, r2
 8005be4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	330d      	adds	r3, #13
 8005bea:	79ba      	ldrb	r2, [r7, #6]
 8005bec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	330b      	adds	r3, #11
 8005bf2:	220f      	movs	r2, #15
 8005bf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	331a      	adds	r3, #26
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe ff39 	bl	8004a7c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	1e5a      	subs	r2, r3, #1
 8005c0e:	4613      	mov	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	82fb      	strh	r3, [r7, #22]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005c22:	8afb      	ldrh	r3, [r7, #22]
 8005c24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <put_lfn+0x6c>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	61fa      	str	r2, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005c3c:	4a17      	ldr	r2, [pc, #92]	@ (8005c9c <put_lfn+0xcc>)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	4413      	add	r3, r2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	8afa      	ldrh	r2, [r7, #22]
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe ff14 	bl	8004a7c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005c54:	8afb      	ldrh	r3, [r7, #22]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <put_lfn+0x90>
 8005c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	3301      	adds	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	d9da      	bls.n	8005c22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005c6c:	8afb      	ldrh	r3, [r7, #22]
 8005c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d006      	beq.n	8005c84 <put_lfn+0xb4>
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <put_lfn+0xbc>
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	79fa      	ldrb	r2, [r7, #7]
 8005c90:	701a      	strb	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08008368 	.word	0x08008368

08005ca0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	@ 0x30
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005cae:	220b      	movs	r2, #11
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7fe ff29 	bl	8004b0a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d92b      	bls.n	8005d16 <gen_numname+0x76>
		sr = seq;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005cc2:	e022      	b.n	8005d0a <gen_numname+0x6a>
			wc = *lfn++;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	607a      	str	r2, [r7, #4]
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cd2:	e017      	b.n	8005d04 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	005a      	lsls	r2, r3, #1
 8005cd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005ce2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <gen_numname+0x5e>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005cf8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005cfc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	3301      	adds	r3, #1
 8005d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	d9e4      	bls.n	8005cd4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1d8      	bne.n	8005cc4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005d16:	2307      	movs	r3, #7
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	3330      	adds	r3, #48	@ 0x30
 8005d26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d2e:	2b39      	cmp	r3, #57	@ 0x39
 8005d30:	d904      	bls.n	8005d3c <gen_numname+0x9c>
 8005d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d36:	3307      	adds	r3, #7
 8005d38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3e:	1e5a      	subs	r2, r3, #1
 8005d40:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d42:	3330      	adds	r3, #48	@ 0x30
 8005d44:	443b      	add	r3, r7
 8005d46:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005d4a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1df      	bne.n	8005d1a <gen_numname+0x7a>
	ns[i] = '~';
 8005d5a:	f107 0214 	add.w	r2, r7, #20
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	4413      	add	r3, r2
 8005d62:	227e      	movs	r2, #126	@ 0x7e
 8005d64:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6a:	e002      	b.n	8005d72 <gen_numname+0xd2>
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	3301      	adds	r3, #1
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d205      	bcs.n	8005d86 <gen_numname+0xe6>
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	4413      	add	r3, r2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d1f2      	bne.n	8005d6c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d88:	2b07      	cmp	r3, #7
 8005d8a:	d807      	bhi.n	8005d9c <gen_numname+0xfc>
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d92:	3330      	adds	r3, #48	@ 0x30
 8005d94:	443b      	add	r3, r7
 8005d96:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005d9a:	e000      	b.n	8005d9e <gen_numname+0xfe>
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	460a      	mov	r2, r1
 8005daa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	2b07      	cmp	r3, #7
 8005db0:	d9e9      	bls.n	8005d86 <gen_numname+0xe6>
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	3730      	adds	r7, #48	@ 0x30
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005dc8:	230b      	movs	r3, #11
 8005dca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	0852      	lsrs	r2, r2, #1
 8005dd2:	01db      	lsls	r3, r3, #7
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	1c59      	adds	r1, r3, #1
 8005ddc:	6079      	str	r1, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	4413      	add	r3, r2
 8005de2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ed      	bne.n	8005dcc <sum_sfn+0x10>
	return sum;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff fc89 	bl	8005726 <dir_sdi>
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <dir_find+0x24>
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	e0a9      	b.n	8005f76 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e22:	23ff      	movs	r3, #255	@ 0xff
 8005e24:	753b      	strb	r3, [r7, #20]
 8005e26:	7d3b      	ldrb	r3, [r7, #20]
 8005e28:	757b      	strb	r3, [r7, #21]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	4619      	mov	r1, r3
 8005e38:	6938      	ldr	r0, [r7, #16]
 8005e3a:	f7ff f895 	bl	8004f68 <move_window>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8090 	bne.w	8005f6a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e52:	7dbb      	ldrb	r3, [r7, #22]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <dir_find+0x60>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	75fb      	strb	r3, [r7, #23]
 8005e5c:	e08a      	b.n	8005f74 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	330b      	adds	r3, #11
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	7bfa      	ldrb	r2, [r7, #15]
 8005e70:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005e72:	7dbb      	ldrb	r3, [r7, #22]
 8005e74:	2be5      	cmp	r3, #229	@ 0xe5
 8005e76:	d007      	beq.n	8005e88 <dir_find+0x8a>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <dir_find+0x98>
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2b0f      	cmp	r3, #15
 8005e86:	d006      	beq.n	8005e96 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e88:	23ff      	movs	r3, #255	@ 0xff
 8005e8a:	757b      	strb	r3, [r7, #21]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e94:	e05e      	b.n	8005f54 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	d136      	bne.n	8005f0a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d154      	bne.n	8005f54 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005eaa:	7dbb      	ldrb	r3, [r7, #22]
 8005eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00d      	beq.n	8005ed0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	7b5b      	ldrb	r3, [r3, #13]
 8005eba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005ebc:	7dbb      	ldrb	r3, [r7, #22]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec2:	75bb      	strb	r3, [r7, #22]
 8005ec4:	7dbb      	ldrb	r3, [r7, #22]
 8005ec6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ed0:	7dba      	ldrb	r2, [r7, #22]
 8005ed2:	7d7b      	ldrb	r3, [r7, #21]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d115      	bne.n	8005f04 <dir_find+0x106>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	330d      	adds	r3, #13
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	7d3a      	ldrb	r2, [r7, #20]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d10e      	bne.n	8005f04 <dir_find+0x106>
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7ff fdfd 	bl	8005af0 <cmp_lfn>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <dir_find+0x106>
 8005efc:	7d7b      	ldrb	r3, [r7, #21]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	e000      	b.n	8005f06 <dir_find+0x108>
 8005f04:	23ff      	movs	r3, #255	@ 0xff
 8005f06:	757b      	strb	r3, [r7, #21]
 8005f08:	e024      	b.n	8005f54 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005f0a:	7d7b      	ldrb	r3, [r7, #21]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <dir_find+0x126>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff ff51 	bl	8005dbc <sum_sfn>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	7d3b      	ldrb	r3, [r7, #20]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d024      	beq.n	8005f6e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <dir_find+0x14a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a18      	ldr	r0, [r3, #32]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3324      	adds	r3, #36	@ 0x24
 8005f3a:	220b      	movs	r2, #11
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fe fe20 	bl	8004b82 <mem_cmp>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d014      	beq.n	8005f72 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f48:	23ff      	movs	r3, #255	@ 0xff
 8005f4a:	757b      	strb	r3, [r7, #21]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005f54:	2100      	movs	r1, #0
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fc6e 	bl	8005838 <dir_next>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f43f af65 	beq.w	8005e32 <dir_find+0x34>
 8005f68:	e004      	b.n	8005f74 <dir_find+0x176>
		if (res != FR_OK) break;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005f72:	bf00      	nop

	return res;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	@ 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f94:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <dir_register+0x20>
 8005f9c:	2306      	movs	r3, #6
 8005f9e:	e0e0      	b.n	8006162 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa4:	e002      	b.n	8005fac <dir_register+0x2c>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	3301      	adds	r3, #1
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f4      	bne.n	8005fa6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005fc2:	f107 030c 	add.w	r3, r7, #12
 8005fc6:	220c      	movs	r2, #12
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fd9e 	bl	8004b0a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d032      	beq.n	800603e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2240      	movs	r2, #64	@ 0x40
 8005fdc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fe4:	e016      	b.n	8006014 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	f107 010c 	add.w	r1, r7, #12
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	f7ff fe53 	bl	8005ca0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff feff 	bl	8005dfe <dir_find>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006006:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006010:	3301      	adds	r3, #1
 8006012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006016:	2b63      	cmp	r3, #99	@ 0x63
 8006018:	d9e5      	bls.n	8005fe6 <dir_register+0x66>
 800601a:	e000      	b.n	800601e <dir_register+0x9e>
			if (res != FR_OK) break;
 800601c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	2b64      	cmp	r3, #100	@ 0x64
 8006022:	d101      	bne.n	8006028 <dir_register+0xa8>
 8006024:	2307      	movs	r3, #7
 8006026:	e09c      	b.n	8006162 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800602c:	2b04      	cmp	r3, #4
 800602e:	d002      	beq.n	8006036 <dir_register+0xb6>
 8006030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006034:	e095      	b.n	8006162 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006036:	7dfa      	ldrb	r2, [r7, #23]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <dir_register+0xd8>
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	330c      	adds	r3, #12
 800604c:	4a47      	ldr	r2, [pc, #284]	@ (800616c <dir_register+0x1ec>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	3301      	adds	r3, #1
 8006056:	e000      	b.n	800605a <dir_register+0xda>
 8006058:	2301      	movs	r3, #1
 800605a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800605c:	6a39      	ldr	r1, [r7, #32]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff fcc0 	bl	80059e4 <dir_alloc>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800606a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800606e:	2b00      	cmp	r3, #0
 8006070:	d148      	bne.n	8006104 <dir_register+0x184>
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	3b01      	subs	r3, #1
 8006076:	623b      	str	r3, [r7, #32]
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d042      	beq.n	8006104 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	015b      	lsls	r3, r3, #5
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fb4b 	bl	8005726 <dir_sdi>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800609a:	2b00      	cmp	r3, #0
 800609c:	d132      	bne.n	8006104 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3324      	adds	r3, #36	@ 0x24
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fe8a 	bl	8005dbc <sum_sfn>
 80060a8:	4603      	mov	r3, r0
 80060aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	4619      	mov	r1, r3
 80060b2:	69f8      	ldr	r0, [r7, #28]
 80060b4:	f7fe ff58 	bl	8004f68 <move_window>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80060be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d11d      	bne.n	8006102 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	6918      	ldr	r0, [r3, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a19      	ldr	r1, [r3, #32]
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	7efb      	ldrb	r3, [r7, #27]
 80060d4:	f7ff fd7c 	bl	8005bd0 <put_lfn>
				fs->wflag = 1;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2201      	movs	r2, #1
 80060dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80060de:	2100      	movs	r1, #0
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fba9 	bl	8005838 <dir_next>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80060ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d107      	bne.n	8006104 <dir_register+0x184>
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1d5      	bne.n	80060ac <dir_register+0x12c>
 8006100:	e000      	b.n	8006104 <dir_register+0x184>
				if (res != FR_OK) break;
 8006102:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006104:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006108:	2b00      	cmp	r3, #0
 800610a:	d128      	bne.n	800615e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	4619      	mov	r1, r3
 8006112:	69f8      	ldr	r0, [r7, #28]
 8006114:	f7fe ff28 	bl	8004f68 <move_window>
 8006118:	4603      	mov	r3, r0
 800611a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800611e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006122:	2b00      	cmp	r3, #0
 8006124:	d11b      	bne.n	800615e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	2220      	movs	r2, #32
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe fd0c 	bl	8004b4c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a18      	ldr	r0, [r3, #32]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3324      	adds	r3, #36	@ 0x24
 800613c:	220b      	movs	r2, #11
 800613e:	4619      	mov	r1, r3
 8006140:	f7fe fce3 	bl	8004b0a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	330c      	adds	r3, #12
 8006150:	f002 0218 	and.w	r2, r2, #24
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2201      	movs	r2, #1
 800615c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800615e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006162:	4618      	mov	r0, r3
 8006164:	3730      	adds	r7, #48	@ 0x30
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	4ec4ec4f 	.word	0x4ec4ec4f

08006170 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	@ 0x28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	61ba      	str	r2, [r7, #24]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800619e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061a0:	2b1f      	cmp	r3, #31
 80061a2:	d940      	bls.n	8006226 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80061a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80061a8:	d006      	beq.n	80061b8 <create_name+0x48>
 80061aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80061ae:	d110      	bne.n	80061d2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80061b0:	e002      	b.n	80061b8 <create_name+0x48>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	3301      	adds	r3, #1
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80061c2:	d0f6      	beq.n	80061b2 <create_name+0x42>
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	4413      	add	r3, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80061ce:	d0f0      	beq.n	80061b2 <create_name+0x42>
			break;
 80061d0:	e02a      	b.n	8006228 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80061d6:	d901      	bls.n	80061dc <create_name+0x6c>
 80061d8:	2306      	movs	r3, #6
 80061da:	e17d      	b.n	80064d8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80061dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80061e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061e4:	2101      	movs	r1, #1
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f9f6 	bl	80075d8 <ff_convert>
 80061ec:	4603      	mov	r3, r0
 80061ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <create_name+0x8a>
 80061f6:	2306      	movs	r3, #6
 80061f8:	e16e      	b.n	80064d8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80061fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80061fe:	d809      	bhi.n	8006214 <create_name+0xa4>
 8006200:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006202:	4619      	mov	r1, r3
 8006204:	488d      	ldr	r0, [pc, #564]	@ (800643c <create_name+0x2cc>)
 8006206:	f7fe fce3 	bl	8004bd0 <chk_chr>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <create_name+0xa4>
 8006210:	2306      	movs	r3, #6
 8006212:	e161      	b.n	80064d8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	617a      	str	r2, [r7, #20]
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006222:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006224:	e7b4      	b.n	8006190 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006226:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	441a      	add	r2, r3
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006232:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006234:	2b1f      	cmp	r3, #31
 8006236:	d801      	bhi.n	800623c <create_name+0xcc>
 8006238:	2304      	movs	r3, #4
 800623a:	e000      	b.n	800623e <create_name+0xce>
 800623c:	2300      	movs	r3, #0
 800623e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006242:	e011      	b.n	8006268 <create_name+0xf8>
		w = lfn[di - 1];
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800624a:	3b01      	subs	r3, #1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006256:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006258:	2b20      	cmp	r3, #32
 800625a:	d002      	beq.n	8006262 <create_name+0xf2>
 800625c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800625e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006260:	d106      	bne.n	8006270 <create_name+0x100>
		di--;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	3b01      	subs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1ea      	bne.n	8006244 <create_name+0xd4>
 800626e:	e000      	b.n	8006272 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006270:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	2200      	movs	r2, #0
 800627c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <create_name+0x118>
 8006284:	2306      	movs	r3, #6
 8006286:	e127      	b.n	80064d8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3324      	adds	r3, #36	@ 0x24
 800628c:	220b      	movs	r2, #11
 800628e:	2120      	movs	r1, #32
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe fc5b 	bl	8004b4c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	e002      	b.n	80062a2 <create_name+0x132>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	3301      	adds	r3, #1
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d0f5      	beq.n	800629c <create_name+0x12c>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80062bc:	d0ee      	beq.n	800629c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <create_name+0x168>
 80062c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062c8:	f043 0303 	orr.w	r3, r3, #3
 80062cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80062d0:	e002      	b.n	80062d8 <create_name+0x168>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <create_name+0x182>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80062e4:	3b01      	subs	r3, #1
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80062f0:	d1ef      	bne.n	80062d2 <create_name+0x162>

	i = b = 0; ni = 8;
 80062f2:	2300      	movs	r3, #0
 80062f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80062f8:	2300      	movs	r3, #0
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	2308      	movs	r3, #8
 80062fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	61ba      	str	r2, [r7, #24]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8090 	beq.w	8006438 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006318:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800631a:	2b20      	cmp	r3, #32
 800631c:	d006      	beq.n	800632c <create_name+0x1bc>
 800631e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006320:	2b2e      	cmp	r3, #46	@ 0x2e
 8006322:	d10a      	bne.n	800633a <create_name+0x1ca>
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	429a      	cmp	r2, r3
 800632a:	d006      	beq.n	800633a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800632c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006330:	f043 0303 	orr.w	r3, r3, #3
 8006334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006338:	e07d      	b.n	8006436 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	429a      	cmp	r2, r3
 8006340:	d203      	bcs.n	800634a <create_name+0x1da>
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	429a      	cmp	r2, r3
 8006348:	d123      	bne.n	8006392 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b0b      	cmp	r3, #11
 800634e:	d106      	bne.n	800635e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006354:	f043 0303 	orr.w	r3, r3, #3
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800635c:	e075      	b.n	800644a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	429a      	cmp	r2, r3
 8006364:	d005      	beq.n	8006372 <create_name+0x202>
 8006366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800636a:	f043 0303 	orr.w	r3, r3, #3
 800636e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	429a      	cmp	r2, r3
 8006378:	d866      	bhi.n	8006448 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	2308      	movs	r3, #8
 8006380:	623b      	str	r3, [r7, #32]
 8006382:	230b      	movs	r3, #11
 8006384:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006386:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006390:	e051      	b.n	8006436 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006394:	2b7f      	cmp	r3, #127	@ 0x7f
 8006396:	d914      	bls.n	80063c2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006398:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f001 f91b 	bl	80075d8 <ff_convert>
 80063a2:	4603      	mov	r3, r0
 80063a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80063a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <create_name+0x246>
 80063ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ae:	3b80      	subs	r3, #128	@ 0x80
 80063b0:	4a23      	ldr	r2, [pc, #140]	@ (8006440 <create_name+0x2d0>)
 80063b2:	5cd3      	ldrb	r3, [r2, r3]
 80063b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80063b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063ba:	f043 0302 	orr.w	r3, r3, #2
 80063be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80063c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <create_name+0x268>
 80063c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ca:	4619      	mov	r1, r3
 80063cc:	481d      	ldr	r0, [pc, #116]	@ (8006444 <create_name+0x2d4>)
 80063ce:	f7fe fbff 	bl	8004bd0 <chk_chr>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80063d8:	235f      	movs	r3, #95	@ 0x5f
 80063da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80063dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063e0:	f043 0303 	orr.w	r3, r3, #3
 80063e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063e8:	e01b      	b.n	8006422 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80063ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ec:	2b40      	cmp	r3, #64	@ 0x40
 80063ee:	d909      	bls.n	8006404 <create_name+0x294>
 80063f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80063f4:	d806      	bhi.n	8006404 <create_name+0x294>
					b |= 2;
 80063f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063fa:	f043 0302 	orr.w	r3, r3, #2
 80063fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006402:	e00e      	b.n	8006422 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006406:	2b60      	cmp	r3, #96	@ 0x60
 8006408:	d90b      	bls.n	8006422 <create_name+0x2b2>
 800640a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800640c:	2b7a      	cmp	r3, #122	@ 0x7a
 800640e:	d808      	bhi.n	8006422 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800641c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800641e:	3b20      	subs	r3, #32
 8006420:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	623a      	str	r2, [r7, #32]
 8006428:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800642a:	b2d1      	uxtb	r1, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4413      	add	r3, r2
 8006430:	460a      	mov	r2, r1
 8006432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006436:	e763      	b.n	8006300 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006438:	bf00      	nop
 800643a:	e006      	b.n	800644a <create_name+0x2da>
 800643c:	08008288 	.word	0x08008288
 8006440:	080082e8 	.word	0x080082e8
 8006444:	08008294 	.word	0x08008294
			if (si > di) break;			/* No extension */
 8006448:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006450:	2be5      	cmp	r3, #229	@ 0xe5
 8006452:	d103      	bne.n	800645c <create_name+0x2ec>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2205      	movs	r2, #5
 8006458:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	2b08      	cmp	r3, #8
 8006460:	d104      	bne.n	800646c <create_name+0x2fc>
 8006462:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800646c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006470:	f003 030c 	and.w	r3, r3, #12
 8006474:	2b0c      	cmp	r3, #12
 8006476:	d005      	beq.n	8006484 <create_name+0x314>
 8006478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	2b03      	cmp	r3, #3
 8006482:	d105      	bne.n	8006490 <create_name+0x320>
 8006484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006488:	f043 0302 	orr.w	r3, r3, #2
 800648c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d117      	bne.n	80064cc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800649c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d105      	bne.n	80064b4 <create_name+0x344>
 80064a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064ac:	f043 0310 	orr.w	r3, r3, #16
 80064b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80064b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d105      	bne.n	80064cc <create_name+0x35c>
 80064c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c4:	f043 0308 	orr.w	r3, r3, #8
 80064c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80064d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80064d6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3728      	adds	r7, #40	@ 0x28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064f4:	e002      	b.n	80064fc <follow_path+0x1c>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	3301      	adds	r3, #1
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b2f      	cmp	r3, #47	@ 0x2f
 8006502:	d0f8      	beq.n	80064f6 <follow_path+0x16>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b5c      	cmp	r3, #92	@ 0x5c
 800650a:	d0f4      	beq.n	80064f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2200      	movs	r2, #0
 8006510:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b1f      	cmp	r3, #31
 8006518:	d80a      	bhi.n	8006530 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2280      	movs	r2, #128	@ 0x80
 800651e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006522:	2100      	movs	r1, #0
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff f8fe 	bl	8005726 <dir_sdi>
 800652a:	4603      	mov	r3, r0
 800652c:	75fb      	strb	r3, [r7, #23]
 800652e:	e048      	b.n	80065c2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006530:	463b      	mov	r3, r7
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fe1b 	bl	8006170 <create_name>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d139      	bne.n	80065b8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fc5a 	bl	8005dfe <dir_find>
 800654a:	4603      	mov	r3, r0
 800654c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006554:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b04      	cmp	r3, #4
 8006560:	d12c      	bne.n	80065bc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d127      	bne.n	80065bc <follow_path+0xdc>
 800656c:	2305      	movs	r3, #5
 800656e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006570:	e024      	b.n	80065bc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d121      	bne.n	80065c0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	799b      	ldrb	r3, [r3, #6]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006588:	2305      	movs	r3, #5
 800658a:	75fb      	strb	r3, [r7, #23]
 800658c:	e019      	b.n	80065c2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	8992      	ldrh	r2, [r2, #12]
 800659c:	fbb3 f0f2 	udiv	r0, r3, r2
 80065a0:	fb00 f202 	mul.w	r2, r0, r2
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	440b      	add	r3, r1
 80065a8:	4619      	mov	r1, r3
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fa61 	bl	8005a72 <ld_clust>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065b6:	e7bb      	b.n	8006530 <follow_path+0x50>
			if (res != FR_OK) break;
 80065b8:	bf00      	nop
 80065ba:	e002      	b.n	80065c2 <follow_path+0xe2>
				break;
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065c0:	bf00      	nop
			}
		}
	}

	return res;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065d4:	f04f 33ff 	mov.w	r3, #4294967295
 80065d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d031      	beq.n	8006646 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e002      	b.n	80065f0 <get_ldnumber+0x24>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b1f      	cmp	r3, #31
 80065f6:	d903      	bls.n	8006600 <get_ldnumber+0x34>
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80065fe:	d1f4      	bne.n	80065ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b3a      	cmp	r3, #58	@ 0x3a
 8006606:	d11c      	bne.n	8006642 <get_ldnumber+0x76>
			tp = *path;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	60fa      	str	r2, [r7, #12]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	3b30      	subs	r3, #48	@ 0x30
 8006618:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b09      	cmp	r3, #9
 800661e:	d80e      	bhi.n	800663e <get_ldnumber+0x72>
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	429a      	cmp	r2, r3
 8006626:	d10a      	bne.n	800663e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <get_ldnumber+0x72>
					vol = (int)i;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	3301      	adds	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	e002      	b.n	8006648 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006646:	693b      	ldr	r3, [r7, #16]
}
 8006648:	4618      	mov	r0, r3
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	70da      	strb	r2, [r3, #3]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f04f 32ff 	mov.w	r2, #4294967295
 800666a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fe fc7a 	bl	8004f68 <move_window>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <check_fs+0x2a>
 800667a:	2304      	movs	r3, #4
 800667c:	e038      	b.n	80066f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3338      	adds	r3, #56	@ 0x38
 8006682:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe f9bc 	bl	8004a04 <ld_word>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006694:	429a      	cmp	r2, r3
 8006696:	d001      	beq.n	800669c <check_fs+0x48>
 8006698:	2303      	movs	r3, #3
 800669a:	e029      	b.n	80066f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066a2:	2be9      	cmp	r3, #233	@ 0xe9
 80066a4:	d009      	beq.n	80066ba <check_fs+0x66>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066ac:	2beb      	cmp	r3, #235	@ 0xeb
 80066ae:	d11e      	bne.n	80066ee <check_fs+0x9a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80066b6:	2b90      	cmp	r3, #144	@ 0x90
 80066b8:	d119      	bne.n	80066ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3338      	adds	r3, #56	@ 0x38
 80066be:	3336      	adds	r3, #54	@ 0x36
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe f9b8 	bl	8004a36 <ld_dword>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80066cc:	4a0a      	ldr	r2, [pc, #40]	@ (80066f8 <check_fs+0xa4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d101      	bne.n	80066d6 <check_fs+0x82>
 80066d2:	2300      	movs	r3, #0
 80066d4:	e00c      	b.n	80066f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3338      	adds	r3, #56	@ 0x38
 80066da:	3352      	adds	r3, #82	@ 0x52
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe f9aa 	bl	8004a36 <ld_dword>
 80066e2:	4603      	mov	r3, r0
 80066e4:	4a05      	ldr	r2, [pc, #20]	@ (80066fc <check_fs+0xa8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <check_fs+0x9a>
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066ee:	2302      	movs	r3, #2
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	00544146 	.word	0x00544146
 80066fc:	33544146 	.word	0x33544146

08006700 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b096      	sub	sp, #88	@ 0x58
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff ff59 	bl	80065cc <get_ldnumber>
 800671a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800671c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671e:	2b00      	cmp	r3, #0
 8006720:	da01      	bge.n	8006726 <find_volume+0x26>
 8006722:	230b      	movs	r3, #11
 8006724:	e265      	b.n	8006bf2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006726:	4a9f      	ldr	r2, [pc, #636]	@ (80069a4 <find_volume+0x2a4>)
 8006728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <find_volume+0x3a>
 8006736:	230c      	movs	r3, #12
 8006738:	e25b      	b.n	8006bf2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800673e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01a      	beq.n	8006786 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe f8b5 	bl	80048c4 <disk_status>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10c      	bne.n	8006786 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <find_volume+0x82>
 8006772:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800677e:	230a      	movs	r3, #10
 8006780:	e237      	b.n	8006bf2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006782:	2300      	movs	r3, #0
 8006784:	e235      	b.n	8006bf2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800678c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006792:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe f8ad 	bl	80048f8 <disk_initialize>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80067a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80067b0:	2303      	movs	r3, #3
 80067b2:	e21e      	b.n	8006bf2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <find_volume+0xca>
 80067ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80067c6:	230a      	movs	r3, #10
 80067c8:	e213      	b.n	8006bf2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	7858      	ldrb	r0, [r3, #1]
 80067ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d0:	330c      	adds	r3, #12
 80067d2:	461a      	mov	r2, r3
 80067d4:	2102      	movs	r1, #2
 80067d6:	f7fe f8f7 	bl	80049c8 <disk_ioctl>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <find_volume+0xe4>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e206      	b.n	8006bf2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	899b      	ldrh	r3, [r3, #12]
 80067e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ec:	d80d      	bhi.n	800680a <find_volume+0x10a>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f0:	899b      	ldrh	r3, [r3, #12]
 80067f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f6:	d308      	bcc.n	800680a <find_volume+0x10a>
 80067f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fa:	899b      	ldrh	r3, [r3, #12]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	899b      	ldrh	r3, [r3, #12]
 8006802:	3b01      	subs	r3, #1
 8006804:	4013      	ands	r3, r2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <find_volume+0x10e>
 800680a:	2301      	movs	r3, #1
 800680c:	e1f1      	b.n	8006bf2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006812:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006814:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006816:	f7ff ff1d 	bl	8006654 <check_fs>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006820:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006824:	2b02      	cmp	r3, #2
 8006826:	d149      	bne.n	80068bc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006828:	2300      	movs	r3, #0
 800682a:	643b      	str	r3, [r7, #64]	@ 0x40
 800682c:	e01e      	b.n	800686c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800683c:	4413      	add	r3, r2
 800683e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	3304      	adds	r3, #4
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d006      	beq.n	8006858 <find_volume+0x158>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	3308      	adds	r3, #8
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe f8f1 	bl	8004a36 <ld_dword>
 8006854:	4602      	mov	r2, r0
 8006856:	e000      	b.n	800685a <find_volume+0x15a>
 8006858:	2200      	movs	r2, #0
 800685a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	3358      	adds	r3, #88	@ 0x58
 8006860:	443b      	add	r3, r7
 8006862:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006868:	3301      	adds	r3, #1
 800686a:	643b      	str	r3, [r7, #64]	@ 0x40
 800686c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800686e:	2b03      	cmp	r3, #3
 8006870:	d9dd      	bls.n	800682e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006872:	2300      	movs	r3, #0
 8006874:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <find_volume+0x182>
 800687c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800687e:	3b01      	subs	r3, #1
 8006880:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	3358      	adds	r3, #88	@ 0x58
 8006888:	443b      	add	r3, r7
 800688a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800688e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <find_volume+0x1a2>
 8006896:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006898:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800689a:	f7ff fedb 	bl	8006654 <check_fs>
 800689e:	4603      	mov	r3, r0
 80068a0:	e000      	b.n	80068a4 <find_volume+0x1a4>
 80068a2:	2303      	movs	r3, #3
 80068a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80068a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d905      	bls.n	80068bc <find_volume+0x1bc>
 80068b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b2:	3301      	adds	r3, #1
 80068b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d9e2      	bls.n	8006882 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d101      	bne.n	80068c8 <find_volume+0x1c8>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e194      	b.n	8006bf2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d901      	bls.n	80068d4 <find_volume+0x1d4>
 80068d0:	230d      	movs	r3, #13
 80068d2:	e18e      	b.n	8006bf2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	3338      	adds	r3, #56	@ 0x38
 80068d8:	330b      	adds	r3, #11
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe f892 	bl	8004a04 <ld_word>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e6:	899b      	ldrh	r3, [r3, #12]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <find_volume+0x1f0>
 80068ec:	230d      	movs	r3, #13
 80068ee:	e180      	b.n	8006bf2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	3338      	adds	r3, #56	@ 0x38
 80068f4:	3316      	adds	r3, #22
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe f884 	bl	8004a04 <ld_word>
 80068fc:	4603      	mov	r3, r0
 80068fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <find_volume+0x214>
 8006906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006908:	3338      	adds	r3, #56	@ 0x38
 800690a:	3324      	adds	r3, #36	@ 0x24
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe f892 	bl	8004a36 <ld_dword>
 8006912:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006918:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800691a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006926:	789b      	ldrb	r3, [r3, #2]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d005      	beq.n	8006938 <find_volume+0x238>
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	789b      	ldrb	r3, [r3, #2]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d001      	beq.n	8006938 <find_volume+0x238>
 8006934:	230d      	movs	r3, #13
 8006936:	e15c      	b.n	8006bf2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	789b      	ldrb	r3, [r3, #2]
 800693c:	461a      	mov	r2, r3
 800693e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006940:	fb02 f303 	mul.w	r3, r2, r3
 8006944:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800694c:	461a      	mov	r2, r3
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	895b      	ldrh	r3, [r3, #10]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <find_volume+0x26c>
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	895b      	ldrh	r3, [r3, #10]
 800695e:	461a      	mov	r2, r3
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	895b      	ldrh	r3, [r3, #10]
 8006964:	3b01      	subs	r3, #1
 8006966:	4013      	ands	r3, r2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <find_volume+0x270>
 800696c:	230d      	movs	r3, #13
 800696e:	e140      	b.n	8006bf2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	3338      	adds	r3, #56	@ 0x38
 8006974:	3311      	adds	r3, #17
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe f844 	bl	8004a04 <ld_word>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006982:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	891b      	ldrh	r3, [r3, #8]
 8006988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800698a:	8992      	ldrh	r2, [r2, #12]
 800698c:	0952      	lsrs	r2, r2, #5
 800698e:	b292      	uxth	r2, r2
 8006990:	fbb3 f1f2 	udiv	r1, r3, r2
 8006994:	fb01 f202 	mul.w	r2, r1, r2
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <find_volume+0x2a8>
 80069a0:	230d      	movs	r3, #13
 80069a2:	e126      	b.n	8006bf2 <find_volume+0x4f2>
 80069a4:	20002274 	.word	0x20002274

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	3338      	adds	r3, #56	@ 0x38
 80069ac:	3313      	adds	r3, #19
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe f828 	bl	8004a04 <ld_word>
 80069b4:	4603      	mov	r3, r0
 80069b6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <find_volume+0x2cc>
 80069be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c0:	3338      	adds	r3, #56	@ 0x38
 80069c2:	3320      	adds	r3, #32
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe f836 	bl	8004a36 <ld_dword>
 80069ca:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	3338      	adds	r3, #56	@ 0x38
 80069d0:	330e      	adds	r3, #14
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe f816 	bl	8004a04 <ld_word>
 80069d8:	4603      	mov	r3, r0
 80069da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <find_volume+0x2e6>
 80069e2:	230d      	movs	r3, #13
 80069e4:	e105      	b.n	8006bf2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80069e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ea:	4413      	add	r3, r2
 80069ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ee:	8911      	ldrh	r1, [r2, #8]
 80069f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069f2:	8992      	ldrh	r2, [r2, #12]
 80069f4:	0952      	lsrs	r2, r2, #5
 80069f6:	b292      	uxth	r2, r2
 80069f8:	fbb1 f2f2 	udiv	r2, r1, r2
 80069fc:	b292      	uxth	r2, r2
 80069fe:	4413      	add	r3, r2
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d201      	bcs.n	8006a0e <find_volume+0x30e>
 8006a0a:	230d      	movs	r3, #13
 8006a0c:	e0f1      	b.n	8006bf2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a16:	8952      	ldrh	r2, [r2, #10]
 8006a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a1c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <find_volume+0x328>
 8006a24:	230d      	movs	r3, #13
 8006a26:	e0e4      	b.n	8006bf2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d802      	bhi.n	8006a3e <find_volume+0x33e>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d802      	bhi.n	8006a4e <find_volume+0x34e>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a5a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a5c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a60:	441a      	add	r2, r3
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006a66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	441a      	add	r2, r3
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006a70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d11e      	bne.n	8006ab6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	3338      	adds	r3, #56	@ 0x38
 8006a7c:	332a      	adds	r3, #42	@ 0x2a
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fd ffc0 	bl	8004a04 <ld_word>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <find_volume+0x38e>
 8006a8a:	230d      	movs	r3, #13
 8006a8c:	e0b1      	b.n	8006bf2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a90:	891b      	ldrh	r3, [r3, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <find_volume+0x39a>
 8006a96:	230d      	movs	r3, #13
 8006a98:	e0ab      	b.n	8006bf2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	3338      	adds	r3, #56	@ 0x38
 8006a9e:	332c      	adds	r3, #44	@ 0x2c
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fd ffc8 	bl	8004a36 <ld_dword>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab4:	e01f      	b.n	8006af6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	891b      	ldrh	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <find_volume+0x3c2>
 8006abe:	230d      	movs	r3, #13
 8006ac0:	e097      	b.n	8006bf2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac8:	441a      	add	r2, r3
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ace:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d103      	bne.n	8006ade <find_volume+0x3de>
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	e00a      	b.n	8006af4 <find_volume+0x3f4>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	69da      	ldr	r2, [r3, #28]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	085a      	lsrs	r2, r3, #1
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af8:	6a1a      	ldr	r2, [r3, #32]
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	899b      	ldrh	r3, [r3, #12]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b02:	440b      	add	r3, r1
 8006b04:	3b01      	subs	r3, #1
 8006b06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b08:	8989      	ldrh	r1, [r1, #12]
 8006b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d201      	bcs.n	8006b16 <find_volume+0x416>
 8006b12:	230d      	movs	r3, #13
 8006b14:	e06d      	b.n	8006bf2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1c:	619a      	str	r2, [r3, #24]
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	2280      	movs	r2, #128	@ 0x80
 8006b2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d149      	bne.n	8006bc8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	3338      	adds	r3, #56	@ 0x38
 8006b38:	3330      	adds	r3, #48	@ 0x30
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd ff62 	bl	8004a04 <ld_word>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d140      	bne.n	8006bc8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b48:	3301      	adds	r3, #1
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b4e:	f7fe fa0b 	bl	8004f68 <move_window>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d137      	bne.n	8006bc8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b60:	3338      	adds	r3, #56	@ 0x38
 8006b62:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fd ff4c 	bl	8004a04 <ld_word>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d127      	bne.n	8006bc8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	3338      	adds	r3, #56	@ 0x38
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fd ff5a 	bl	8004a36 <ld_dword>
 8006b82:	4603      	mov	r3, r0
 8006b84:	4a1d      	ldr	r2, [pc, #116]	@ (8006bfc <find_volume+0x4fc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d11e      	bne.n	8006bc8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	3338      	adds	r3, #56	@ 0x38
 8006b8e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fd ff4f 	bl	8004a36 <ld_dword>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	4a19      	ldr	r2, [pc, #100]	@ (8006c00 <find_volume+0x500>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d113      	bne.n	8006bc8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba2:	3338      	adds	r3, #56	@ 0x38
 8006ba4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fd ff44 	bl	8004a36 <ld_dword>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	3338      	adds	r3, #56	@ 0x38
 8006bb8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fd ff3a 	bl	8004a36 <ld_dword>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006bce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <find_volume+0x504>)
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c04 <find_volume+0x504>)
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <find_volume+0x504>)
 8006bde:	881a      	ldrh	r2, [r3, #0]
 8006be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	4a08      	ldr	r2, [pc, #32]	@ (8006c08 <find_volume+0x508>)
 8006be8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006bea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bec:	f7fe f954 	bl	8004e98 <clear_lock>
#endif
	return FR_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3758      	adds	r7, #88	@ 0x58
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	41615252 	.word	0x41615252
 8006c00:	61417272 	.word	0x61417272
 8006c04:	20002278 	.word	0x20002278
 8006c08:	2000229c 	.word	0x2000229c

08006c0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c16:	2309      	movs	r3, #9
 8006c18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01c      	beq.n	8006c5a <validate+0x4e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d018      	beq.n	8006c5a <validate+0x4e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d013      	beq.n	8006c5a <validate+0x4e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	889a      	ldrh	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	88db      	ldrh	r3, [r3, #6]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d10c      	bne.n	8006c5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fd fe3c 	bl	80048c4 <disk_status>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <validate+0x4e>
			res = FR_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <validate+0x5a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	e000      	b.n	8006c68 <validate+0x5c>
 8006c66:	2300      	movs	r3, #0
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	6013      	str	r3, [r2, #0]
	return res;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fc9c 	bl	80065cc <get_ldnumber>
 8006c94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da01      	bge.n	8006ca0 <f_mount+0x28>
 8006c9c:	230b      	movs	r3, #11
 8006c9e:	e02b      	b.n	8006cf8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ca0:	4a17      	ldr	r2, [pc, #92]	@ (8006d00 <f_mount+0x88>)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006cb0:	69b8      	ldr	r0, [r7, #24]
 8006cb2:	f7fe f8f1 	bl	8004e98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	490d      	ldr	r1, [pc, #52]	@ (8006d00 <f_mount+0x88>)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <f_mount+0x66>
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d001      	beq.n	8006ce2 <f_mount+0x6a>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e00a      	b.n	8006cf8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ce2:	f107 010c 	add.w	r1, r7, #12
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	2200      	movs	r2, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff fd07 	bl	8006700 <find_volume>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20002274 	.word	0x20002274

08006d04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b09a      	sub	sp, #104	@ 0x68
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <f_open+0x18>
 8006d18:	2309      	movs	r3, #9
 8006d1a:	e1b7      	b.n	800708c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d24:	79fa      	ldrb	r2, [r7, #7]
 8006d26:	f107 0114 	add.w	r1, r7, #20
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff fce6 	bl	8006700 <find_volume>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006d3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 819b 	bne.w	800707a <f_open+0x376>
		dj.obj.fs = fs;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	f107 0318 	add.w	r3, r7, #24
 8006d4e:	4611      	mov	r1, r2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fbc5 	bl	80064e0 <follow_path>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d118      	bne.n	8006d96 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da03      	bge.n	8006d76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d6e:	2306      	movs	r3, #6
 8006d70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006d74:	e00f      	b.n	8006d96 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	bf8c      	ite	hi
 8006d7c:	2301      	movhi	r3, #1
 8006d7e:	2300      	movls	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	f107 0318 	add.w	r3, r7, #24
 8006d88:	4611      	mov	r1, r2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd ff3c 	bl	8004c08 <chk_lock>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	f003 031c 	and.w	r3, r3, #28
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d07f      	beq.n	8006ea0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006da0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d017      	beq.n	8006dd8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006da8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d10e      	bne.n	8006dce <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006db0:	f7fd ff86 	bl	8004cc0 <enq_lock>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d006      	beq.n	8006dc8 <f_open+0xc4>
 8006dba:	f107 0318 	add.w	r3, r7, #24
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff f8de 	bl	8005f80 <dir_register>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	e000      	b.n	8006dca <f_open+0xc6>
 8006dc8:	2312      	movs	r3, #18
 8006dca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	f043 0308 	orr.w	r3, r3, #8
 8006dd4:	71fb      	strb	r3, [r7, #7]
 8006dd6:	e010      	b.n	8006dfa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006dd8:	7fbb      	ldrb	r3, [r7, #30]
 8006dda:	f003 0311 	and.w	r3, r3, #17
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <f_open+0xe6>
					res = FR_DENIED;
 8006de2:	2307      	movs	r3, #7
 8006de4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006de8:	e007      	b.n	8006dfa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <f_open+0xf6>
 8006df4:	2308      	movs	r3, #8
 8006df6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d168      	bne.n	8006ed4 <f_open+0x1d0>
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d063      	beq.n	8006ed4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006e0c:	f7fd fcfc 	bl	8004808 <get_fattime>
 8006e10:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e14:	330e      	adds	r3, #14
 8006e16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fe4a 	bl	8004ab2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e20:	3316      	adds	r3, #22
 8006e22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fd fe44 	bl	8004ab2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	330b      	adds	r3, #11
 8006e2e:	2220      	movs	r2, #32
 8006e30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe fe1a 	bl	8005a72 <ld_clust>
 8006e3e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e44:	2200      	movs	r2, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fe32 	bl	8005ab0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	331c      	adds	r3, #28
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fd fe2d 	bl	8004ab2 <st_dword>
					fs->wflag = 1;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d037      	beq.n	8006ed4 <f_open+0x1d0>
						dw = fs->winsect;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e68:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006e6a:	f107 0318 	add.w	r3, r7, #24
 8006e6e:	2200      	movs	r2, #0
 8006e70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fb22 	bl	80054bc <remove_chain>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006e7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d126      	bne.n	8006ed4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe f86c 	bl	8004f68 <move_window>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e9a:	3a01      	subs	r2, #1
 8006e9c:	615a      	str	r2, [r3, #20]
 8006e9e:	e019      	b.n	8006ed4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d115      	bne.n	8006ed4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006ea8:	7fbb      	ldrb	r3, [r7, #30]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <f_open+0x1b6>
					res = FR_NO_FILE;
 8006eb2:	2304      	movs	r3, #4
 8006eb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006eb8:	e00c      	b.n	8006ed4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <f_open+0x1d0>
 8006ec4:	7fbb      	ldrb	r3, [r7, #30]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <f_open+0x1d0>
						res = FR_DENIED;
 8006ece:	2307      	movs	r3, #7
 8006ed0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ed4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d126      	bne.n	8006f2a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006ef6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	bf8c      	ite	hi
 8006f02:	2301      	movhi	r3, #1
 8006f04:	2300      	movls	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f107 0318 	add.w	r3, r7, #24
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fd fef7 	bl	8004d04 <inc_lock>
 8006f16:	4602      	mov	r2, r0
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <f_open+0x226>
 8006f24:	2302      	movs	r3, #2
 8006f26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 80a3 	bne.w	800707a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fd99 	bl	8005a72 <ld_clust>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	331c      	adds	r3, #28
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fd fd73 	bl	8004a36 <ld_dword>
 8006f50:	4602      	mov	r2, r0
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	88da      	ldrh	r2, [r3, #6]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	79fa      	ldrb	r2, [r7, #7]
 8006f6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3330      	adds	r3, #48	@ 0x30
 8006f86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd fddd 	bl	8004b4c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d06e      	beq.n	800707a <f_open+0x376>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d06a      	beq.n	800707a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	895b      	ldrh	r3, [r3, #10]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	899b      	ldrh	r3, [r3, #12]
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fc8:	e016      	b.n	8006ff8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fe f887 	bl	80050e2 <get_fat>
 8006fd4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006fd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d802      	bhi.n	8006fe2 <f_open+0x2de>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d102      	bne.n	8006ff0 <f_open+0x2ec>
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ff0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ff8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <f_open+0x304>
 8007000:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007004:	429a      	cmp	r2, r3
 8007006:	d8e0      	bhi.n	8006fca <f_open+0x2c6>
				}
				fp->clust = clst;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800700c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800700e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007012:	2b00      	cmp	r3, #0
 8007014:	d131      	bne.n	800707a <f_open+0x376>
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	899b      	ldrh	r3, [r3, #12]
 800701a:	461a      	mov	r2, r3
 800701c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800701e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007022:	fb01 f202 	mul.w	r2, r1, r2
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d026      	beq.n	800707a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe f837 	bl	80050a4 <clust2sect>
 8007036:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <f_open+0x342>
						res = FR_INT_ERR;
 800703e:	2302      	movs	r3, #2
 8007040:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007044:	e019      	b.n	800707a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	899b      	ldrh	r3, [r3, #12]
 800704a:	461a      	mov	r2, r3
 800704c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800704e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007054:	441a      	add	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	7858      	ldrb	r0, [r3, #1]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	2301      	movs	r3, #1
 800706a:	f7fd fc6d 	bl	8004948 <disk_read>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <f_open+0x376>
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800707a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <f_open+0x384>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007088:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800708c:	4618      	mov	r0, r3
 800708e:	3768      	adds	r7, #104	@ 0x68
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08e      	sub	sp, #56	@ 0x38
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f107 0214 	add.w	r2, r7, #20
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fda9 	bl	8006c0c <validate>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d107      	bne.n	80070d8 <f_read+0x44>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	7d5b      	ldrb	r3, [r3, #21]
 80070cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80070d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <f_read+0x4a>
 80070d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070dc:	e135      	b.n	800734a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	7d1b      	ldrb	r3, [r3, #20]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <f_read+0x5a>
 80070ea:	2307      	movs	r3, #7
 80070ec:	e12d      	b.n	800734a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	429a      	cmp	r2, r3
 8007100:	f240 811e 	bls.w	8007340 <f_read+0x2ac>
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007108:	e11a      	b.n	8007340 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	8992      	ldrh	r2, [r2, #12]
 8007112:	fbb3 f1f2 	udiv	r1, r3, r2
 8007116:	fb01 f202 	mul.w	r2, r1, r2
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	f040 80d5 	bne.w	80072cc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	8992      	ldrh	r2, [r2, #12]
 800712a:	fbb3 f3f2 	udiv	r3, r3, r2
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	8952      	ldrh	r2, [r2, #10]
 8007132:	3a01      	subs	r2, #1
 8007134:	4013      	ands	r3, r2
 8007136:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d12f      	bne.n	800719e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	633b      	str	r3, [r7, #48]	@ 0x30
 800714c:	e013      	b.n	8007176 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d007      	beq.n	8007166 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	4619      	mov	r1, r3
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7fe faaa 	bl	80056b6 <clmt_clust>
 8007162:	6338      	str	r0, [r7, #48]	@ 0x30
 8007164:	e007      	b.n	8007176 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f7fd ffb7 	bl	80050e2 <get_fat>
 8007174:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	2b01      	cmp	r3, #1
 800717a:	d804      	bhi.n	8007186 <f_read+0xf2>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2202      	movs	r2, #2
 8007180:	755a      	strb	r2, [r3, #21]
 8007182:	2302      	movs	r3, #2
 8007184:	e0e1      	b.n	800734a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d104      	bne.n	8007198 <f_read+0x104>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	755a      	strb	r2, [r3, #21]
 8007194:	2301      	movs	r3, #1
 8007196:	e0d8      	b.n	800734a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800719c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f7fd ff7c 	bl	80050a4 <clust2sect>
 80071ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <f_read+0x12a>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2202      	movs	r2, #2
 80071b8:	755a      	strb	r2, [r3, #21]
 80071ba:	2302      	movs	r3, #2
 80071bc:	e0c5      	b.n	800734a <f_read+0x2b6>
			sect += csect;
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	899b      	ldrh	r3, [r3, #12]
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80071d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d041      	beq.n	800725e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071de:	4413      	add	r3, r2
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	8952      	ldrh	r2, [r2, #10]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d905      	bls.n	80071f4 <f_read+0x160>
					cc = fs->csize - csect;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	895b      	ldrh	r3, [r3, #10]
 80071ec:	461a      	mov	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	7858      	ldrb	r0, [r3, #1]
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071fe:	f7fd fba3 	bl	8004948 <disk_read>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <f_read+0x17e>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	755a      	strb	r2, [r3, #21]
 800720e:	2301      	movs	r3, #1
 8007210:	e09b      	b.n	800734a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	7d1b      	ldrb	r3, [r3, #20]
 8007216:	b25b      	sxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	da18      	bge.n	800724e <f_read+0x1ba>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1a      	ldr	r2, [r3, #32]
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007226:	429a      	cmp	r2, r3
 8007228:	d911      	bls.n	800724e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	8992      	ldrh	r2, [r2, #12]
 8007236:	fb02 f303 	mul.w	r3, r2, r3
 800723a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800723c:	18d0      	adds	r0, r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	899b      	ldrh	r3, [r3, #12]
 8007248:	461a      	mov	r2, r3
 800724a:	f7fd fc5e 	bl	8004b0a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	899b      	ldrh	r3, [r3, #12]
 8007252:	461a      	mov	r2, r3
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	fb02 f303 	mul.w	r3, r2, r3
 800725a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800725c:	e05c      	b.n	8007318 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	d02e      	beq.n	80072c6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	7d1b      	ldrb	r3, [r3, #20]
 800726c:	b25b      	sxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	da18      	bge.n	80072a4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	7858      	ldrb	r0, [r3, #1]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	2301      	movs	r3, #1
 8007282:	f7fd fb81 	bl	8004988 <disk_write>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <f_read+0x202>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	755a      	strb	r2, [r3, #21]
 8007292:	2301      	movs	r3, #1
 8007294:	e059      	b.n	800734a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	7d1b      	ldrb	r3, [r3, #20]
 800729a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	7858      	ldrb	r0, [r3, #1]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072ae:	2301      	movs	r3, #1
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	f7fd fb49 	bl	8004948 <disk_read>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <f_read+0x232>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	755a      	strb	r2, [r3, #21]
 80072c2:	2301      	movs	r3, #1
 80072c4:	e041      	b.n	800734a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	899b      	ldrh	r3, [r3, #12]
 80072d0:	4618      	mov	r0, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	8992      	ldrh	r2, [r2, #12]
 80072da:	fbb3 f1f2 	udiv	r1, r3, r2
 80072de:	fb01 f202 	mul.w	r2, r1, r2
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	1ac3      	subs	r3, r0, r3
 80072e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80072e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d901      	bls.n	80072f4 <f_read+0x260>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	8992      	ldrh	r2, [r2, #12]
 8007302:	fbb3 f0f2 	udiv	r0, r3, r2
 8007306:	fb00 f202 	mul.w	r2, r0, r2
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	440b      	add	r3, r1
 800730e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007310:	4619      	mov	r1, r3
 8007312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007314:	f7fd fbf9 	bl	8004b0a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	4413      	add	r3, r2
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007326:	441a      	add	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	619a      	str	r2, [r3, #24]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	441a      	add	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f aee1 	bne.w	800710a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3738      	adds	r7, #56	@ 0x38
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b086      	sub	sp, #24
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f107 0208 	add.w	r2, r7, #8
 8007360:	4611      	mov	r1, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fc52 	bl	8006c0c <validate>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d168      	bne.n	8007444 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	7d1b      	ldrb	r3, [r3, #20]
 8007376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d062      	beq.n	8007444 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7d1b      	ldrb	r3, [r3, #20]
 8007382:	b25b      	sxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	da15      	bge.n	80073b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	7858      	ldrb	r0, [r3, #1]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	2301      	movs	r3, #1
 8007398:	f7fd faf6 	bl	8004988 <disk_write>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <f_sync+0x54>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e04f      	b.n	8007446 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	7d1b      	ldrb	r3, [r3, #20]
 80073aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80073b4:	f7fd fa28 	bl	8004808 <get_fattime>
 80073b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fd fdd0 	bl	8004f68 <move_window>
 80073c8:	4603      	mov	r3, r0
 80073ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d138      	bne.n	8007444 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	330b      	adds	r3, #11
 80073dc:	781a      	ldrb	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	330b      	adds	r3, #11
 80073e2:	f042 0220 	orr.w	r2, r2, #32
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	461a      	mov	r2, r3
 80073f4:	68f9      	ldr	r1, [r7, #12]
 80073f6:	f7fe fb5b 	bl	8005ab0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f103 021c 	add.w	r2, r3, #28
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4619      	mov	r1, r3
 8007406:	4610      	mov	r0, r2
 8007408:	f7fd fb53 	bl	8004ab2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3316      	adds	r3, #22
 8007410:	6939      	ldr	r1, [r7, #16]
 8007412:	4618      	mov	r0, r3
 8007414:	f7fd fb4d 	bl	8004ab2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3312      	adds	r3, #18
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fb2c 	bl	8004a7c <st_word>
					fs->wflag = 1;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2201      	movs	r2, #1
 8007428:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fd fdc9 	bl	8004fc4 <sync_fs>
 8007432:	4603      	mov	r3, r0
 8007434:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7d1b      	ldrb	r3, [r3, #20]
 800743a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800743e:	b2da      	uxtb	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007444:	7dfb      	ldrb	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff ff7b 	bl	8007352 <f_sync>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d118      	bne.n	8007498 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f107 0208 	add.w	r2, r7, #8
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fbcc 	bl	8006c0c <validate>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10c      	bne.n	8007498 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	4618      	mov	r0, r3
 8007484:	f7fd fccc 	bl	8004e20 <dec_lock>
 8007488:	4603      	mov	r3, r0
 800748a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b088      	sub	sp, #32
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
	int n = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80074b6:	e01c      	b.n	80074f2 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80074b8:	f107 0310 	add.w	r3, r7, #16
 80074bc:	f107 0114 	add.w	r1, r7, #20
 80074c0:	2201      	movs	r2, #1
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff fde6 	bl	8007094 <f_read>
		if (rc != 1) break;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d117      	bne.n	80074fe <f_gets+0x5c>
		c = s[0];
 80074ce:	7d3b      	ldrb	r3, [r7, #20]
 80074d0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b0d      	cmp	r3, #13
 80074d6:	d00b      	beq.n	80074f0 <f_gets+0x4e>
		*p++ = c;
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	61ba      	str	r2, [r7, #24]
 80074de:	7dfa      	ldrb	r2, [r7, #23]
 80074e0:	701a      	strb	r2, [r3, #0]
		n++;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	2b0a      	cmp	r3, #10
 80074ec:	d009      	beq.n	8007502 <f_gets+0x60>
 80074ee:	e000      	b.n	80074f2 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80074f0:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	dbdd      	blt.n	80074b8 <f_gets+0x16>
 80074fc:	e002      	b.n	8007504 <f_gets+0x62>
		if (rc != 1) break;
 80074fe:	bf00      	nop
 8007500:	e000      	b.n	8007504 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007502:	bf00      	nop
	}
	*p = 0;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <f_gets+0x72>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	e000      	b.n	8007516 <f_gets+0x74>
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3720      	adds	r7, #32
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4613      	mov	r3, r2
 800752c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007536:	4b1f      	ldr	r3, [pc, #124]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 8007538:	7a5b      	ldrb	r3, [r3, #9]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d131      	bne.n	80075a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007540:	4b1c      	ldr	r3, [pc, #112]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 8007542:	7a5b      	ldrb	r3, [r3, #9]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	4b1a      	ldr	r3, [pc, #104]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 800754a:	2100      	movs	r1, #0
 800754c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800754e:	4b19      	ldr	r3, [pc, #100]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 8007550:	7a5b      	ldrb	r3, [r3, #9]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	4a17      	ldr	r2, [pc, #92]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800755e:	4b15      	ldr	r3, [pc, #84]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 8007560:	7a5b      	ldrb	r3, [r3, #9]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	4b13      	ldr	r3, [pc, #76]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 8007568:	4413      	add	r3, r2
 800756a:	79fa      	ldrb	r2, [r7, #7]
 800756c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800756e:	4b11      	ldr	r3, [pc, #68]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 8007570:	7a5b      	ldrb	r3, [r3, #9]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	b2d1      	uxtb	r1, r2
 8007578:	4a0e      	ldr	r2, [pc, #56]	@ (80075b4 <FATFS_LinkDriverEx+0x94>)
 800757a:	7251      	strb	r1, [r2, #9]
 800757c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800757e:	7dbb      	ldrb	r3, [r7, #22]
 8007580:	3330      	adds	r3, #48	@ 0x30
 8007582:	b2da      	uxtb	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3301      	adds	r3, #1
 800758c:	223a      	movs	r2, #58	@ 0x3a
 800758e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3302      	adds	r3, #2
 8007594:	222f      	movs	r2, #47	@ 0x2f
 8007596:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	3303      	adds	r3, #3
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	2000249c 	.word	0x2000249c

080075b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80075c2:	2200      	movs	r2, #0
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff ffaa 	bl	8007520 <FATFS_LinkDriverEx>
 80075cc:	4603      	mov	r3, r0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80075e8:	d802      	bhi.n	80075f0 <ff_convert+0x18>
		c = chr;
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	81fb      	strh	r3, [r7, #14]
 80075ee:	e025      	b.n	800763c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2bff      	cmp	r3, #255	@ 0xff
 80075fa:	d805      	bhi.n	8007608 <ff_convert+0x30>
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	3b80      	subs	r3, #128	@ 0x80
 8007600:	4a12      	ldr	r2, [pc, #72]	@ (800764c <ff_convert+0x74>)
 8007602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007606:	e000      	b.n	800760a <ff_convert+0x32>
 8007608:	2300      	movs	r3, #0
 800760a:	81fb      	strh	r3, [r7, #14]
 800760c:	e016      	b.n	800763c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800760e:	2300      	movs	r3, #0
 8007610:	81fb      	strh	r3, [r7, #14]
 8007612:	e009      	b.n	8007628 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007614:	89fb      	ldrh	r3, [r7, #14]
 8007616:	4a0d      	ldr	r2, [pc, #52]	@ (800764c <ff_convert+0x74>)
 8007618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800761c:	88fa      	ldrh	r2, [r7, #6]
 800761e:	429a      	cmp	r2, r3
 8007620:	d006      	beq.n	8007630 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	3301      	adds	r3, #1
 8007626:	81fb      	strh	r3, [r7, #14]
 8007628:	89fb      	ldrh	r3, [r7, #14]
 800762a:	2b7f      	cmp	r3, #127	@ 0x7f
 800762c:	d9f2      	bls.n	8007614 <ff_convert+0x3c>
 800762e:	e000      	b.n	8007632 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007630:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	3380      	adds	r3, #128	@ 0x80
 8007636:	b29b      	uxth	r3, r3
 8007638:	b2db      	uxtb	r3, r3
 800763a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800763c:	89fb      	ldrh	r3, [r7, #14]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	08008378 	.word	0x08008378

08007650 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007660:	d201      	bcs.n	8007666 <ff_wtoupper+0x16>
 8007662:	4b3e      	ldr	r3, [pc, #248]	@ (800775c <ff_wtoupper+0x10c>)
 8007664:	e000      	b.n	8007668 <ff_wtoupper+0x18>
 8007666:	4b3e      	ldr	r3, [pc, #248]	@ (8007760 <ff_wtoupper+0x110>)
 8007668:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	1c9a      	adds	r2, r3, #2
 800766e:	617a      	str	r2, [r7, #20]
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007674:	8a7b      	ldrh	r3, [r7, #18]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d068      	beq.n	800774c <ff_wtoupper+0xfc>
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	8a7b      	ldrh	r3, [r7, #18]
 800767e:	429a      	cmp	r2, r3
 8007680:	d364      	bcc.n	800774c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	1c9a      	adds	r2, r3, #2
 8007686:	617a      	str	r2, [r7, #20]
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	823b      	strh	r3, [r7, #16]
 800768c:	8a3b      	ldrh	r3, [r7, #16]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	81fb      	strh	r3, [r7, #14]
 8007692:	8a3b      	ldrh	r3, [r7, #16]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007698:	88fa      	ldrh	r2, [r7, #6]
 800769a:	8a79      	ldrh	r1, [r7, #18]
 800769c:	8a3b      	ldrh	r3, [r7, #16]
 800769e:	440b      	add	r3, r1
 80076a0:	429a      	cmp	r2, r3
 80076a2:	da49      	bge.n	8007738 <ff_wtoupper+0xe8>
			switch (cmd) {
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d84f      	bhi.n	800774a <ff_wtoupper+0xfa>
 80076aa:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <ff_wtoupper+0x60>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076e7 	.word	0x080076e7
 80076b8:	080076fd 	.word	0x080076fd
 80076bc:	08007705 	.word	0x08007705
 80076c0:	0800770d 	.word	0x0800770d
 80076c4:	08007715 	.word	0x08007715
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007725 	.word	0x08007725
 80076d0:	0800772d 	.word	0x0800772d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	8a7b      	ldrh	r3, [r7, #18]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4413      	add	r3, r2
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	80fb      	strh	r3, [r7, #6]
 80076e4:	e027      	b.n	8007736 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	8a7b      	ldrh	r3, [r7, #18]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	80fb      	strh	r3, [r7, #6]
 80076fa:	e01c      	b.n	8007736 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	3b10      	subs	r3, #16
 8007700:	80fb      	strh	r3, [r7, #6]
 8007702:	e018      	b.n	8007736 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	3b20      	subs	r3, #32
 8007708:	80fb      	strh	r3, [r7, #6]
 800770a:	e014      	b.n	8007736 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	3b30      	subs	r3, #48	@ 0x30
 8007710:	80fb      	strh	r3, [r7, #6]
 8007712:	e010      	b.n	8007736 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	3b1a      	subs	r3, #26
 8007718:	80fb      	strh	r3, [r7, #6]
 800771a:	e00c      	b.n	8007736 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	3308      	adds	r3, #8
 8007720:	80fb      	strh	r3, [r7, #6]
 8007722:	e008      	b.n	8007736 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	3b50      	subs	r3, #80	@ 0x50
 8007728:	80fb      	strh	r3, [r7, #6]
 800772a:	e004      	b.n	8007736 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007732:	80fb      	strh	r3, [r7, #6]
 8007734:	bf00      	nop
			}
			break;
 8007736:	e008      	b.n	800774a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007738:	89fb      	ldrh	r3, [r7, #14]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d195      	bne.n	800766a <ff_wtoupper+0x1a>
 800773e:	8a3b      	ldrh	r3, [r7, #16]
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4413      	add	r3, r2
 8007746:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007748:	e78f      	b.n	800766a <ff_wtoupper+0x1a>
			break;
 800774a:	bf00      	nop
	}

	return chr;
 800774c:	88fb      	ldrh	r3, [r7, #6]
}
 800774e:	4618      	mov	r0, r3
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	08008478 	.word	0x08008478
 8007760:	0800866c 	.word	0x0800866c

08007764 <siprintf>:
 8007764:	b40e      	push	{r1, r2, r3}
 8007766:	b510      	push	{r4, lr}
 8007768:	b09d      	sub	sp, #116	@ 0x74
 800776a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800776c:	9002      	str	r0, [sp, #8]
 800776e:	9006      	str	r0, [sp, #24]
 8007770:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007774:	480a      	ldr	r0, [pc, #40]	@ (80077a0 <siprintf+0x3c>)
 8007776:	9107      	str	r1, [sp, #28]
 8007778:	9104      	str	r1, [sp, #16]
 800777a:	490a      	ldr	r1, [pc, #40]	@ (80077a4 <siprintf+0x40>)
 800777c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007780:	9105      	str	r1, [sp, #20]
 8007782:	2400      	movs	r4, #0
 8007784:	a902      	add	r1, sp, #8
 8007786:	6800      	ldr	r0, [r0, #0]
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800778c:	f000 f994 	bl	8007ab8 <_svfiprintf_r>
 8007790:	9b02      	ldr	r3, [sp, #8]
 8007792:	701c      	strb	r4, [r3, #0]
 8007794:	b01d      	add	sp, #116	@ 0x74
 8007796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800779a:	b003      	add	sp, #12
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000024 	.word	0x20000024
 80077a4:	ffff0208 	.word	0xffff0208

080077a8 <memset>:
 80077a8:	4402      	add	r2, r0
 80077aa:	4603      	mov	r3, r0
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d100      	bne.n	80077b2 <memset+0xa>
 80077b0:	4770      	bx	lr
 80077b2:	f803 1b01 	strb.w	r1, [r3], #1
 80077b6:	e7f9      	b.n	80077ac <memset+0x4>

080077b8 <__errno>:
 80077b8:	4b01      	ldr	r3, [pc, #4]	@ (80077c0 <__errno+0x8>)
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	20000024 	.word	0x20000024

080077c4 <__libc_init_array>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	4d0d      	ldr	r5, [pc, #52]	@ (80077fc <__libc_init_array+0x38>)
 80077c8:	4c0d      	ldr	r4, [pc, #52]	@ (8007800 <__libc_init_array+0x3c>)
 80077ca:	1b64      	subs	r4, r4, r5
 80077cc:	10a4      	asrs	r4, r4, #2
 80077ce:	2600      	movs	r6, #0
 80077d0:	42a6      	cmp	r6, r4
 80077d2:	d109      	bne.n	80077e8 <__libc_init_array+0x24>
 80077d4:	4d0b      	ldr	r5, [pc, #44]	@ (8007804 <__libc_init_array+0x40>)
 80077d6:	4c0c      	ldr	r4, [pc, #48]	@ (8007808 <__libc_init_array+0x44>)
 80077d8:	f000 fc64 	bl	80080a4 <_init>
 80077dc:	1b64      	subs	r4, r4, r5
 80077de:	10a4      	asrs	r4, r4, #2
 80077e0:	2600      	movs	r6, #0
 80077e2:	42a6      	cmp	r6, r4
 80077e4:	d105      	bne.n	80077f2 <__libc_init_array+0x2e>
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ec:	4798      	blx	r3
 80077ee:	3601      	adds	r6, #1
 80077f0:	e7ee      	b.n	80077d0 <__libc_init_array+0xc>
 80077f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f6:	4798      	blx	r3
 80077f8:	3601      	adds	r6, #1
 80077fa:	e7f2      	b.n	80077e2 <__libc_init_array+0x1e>
 80077fc:	08008764 	.word	0x08008764
 8007800:	08008764 	.word	0x08008764
 8007804:	08008764 	.word	0x08008764
 8007808:	08008768 	.word	0x08008768

0800780c <__retarget_lock_acquire_recursive>:
 800780c:	4770      	bx	lr

0800780e <__retarget_lock_release_recursive>:
 800780e:	4770      	bx	lr

08007810 <_free_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4605      	mov	r5, r0
 8007814:	2900      	cmp	r1, #0
 8007816:	d041      	beq.n	800789c <_free_r+0x8c>
 8007818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800781c:	1f0c      	subs	r4, r1, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfb8      	it	lt
 8007822:	18e4      	addlt	r4, r4, r3
 8007824:	f000 f8e0 	bl	80079e8 <__malloc_lock>
 8007828:	4a1d      	ldr	r2, [pc, #116]	@ (80078a0 <_free_r+0x90>)
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	b933      	cbnz	r3, 800783c <_free_r+0x2c>
 800782e:	6063      	str	r3, [r4, #4]
 8007830:	6014      	str	r4, [r2, #0]
 8007832:	4628      	mov	r0, r5
 8007834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007838:	f000 b8dc 	b.w	80079f4 <__malloc_unlock>
 800783c:	42a3      	cmp	r3, r4
 800783e:	d908      	bls.n	8007852 <_free_r+0x42>
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	1821      	adds	r1, r4, r0
 8007844:	428b      	cmp	r3, r1
 8007846:	bf01      	itttt	eq
 8007848:	6819      	ldreq	r1, [r3, #0]
 800784a:	685b      	ldreq	r3, [r3, #4]
 800784c:	1809      	addeq	r1, r1, r0
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	e7ed      	b.n	800782e <_free_r+0x1e>
 8007852:	461a      	mov	r2, r3
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	b10b      	cbz	r3, 800785c <_free_r+0x4c>
 8007858:	42a3      	cmp	r3, r4
 800785a:	d9fa      	bls.n	8007852 <_free_r+0x42>
 800785c:	6811      	ldr	r1, [r2, #0]
 800785e:	1850      	adds	r0, r2, r1
 8007860:	42a0      	cmp	r0, r4
 8007862:	d10b      	bne.n	800787c <_free_r+0x6c>
 8007864:	6820      	ldr	r0, [r4, #0]
 8007866:	4401      	add	r1, r0
 8007868:	1850      	adds	r0, r2, r1
 800786a:	4283      	cmp	r3, r0
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	d1e0      	bne.n	8007832 <_free_r+0x22>
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	6053      	str	r3, [r2, #4]
 8007876:	4408      	add	r0, r1
 8007878:	6010      	str	r0, [r2, #0]
 800787a:	e7da      	b.n	8007832 <_free_r+0x22>
 800787c:	d902      	bls.n	8007884 <_free_r+0x74>
 800787e:	230c      	movs	r3, #12
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	e7d6      	b.n	8007832 <_free_r+0x22>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	1821      	adds	r1, r4, r0
 8007888:	428b      	cmp	r3, r1
 800788a:	bf04      	itt	eq
 800788c:	6819      	ldreq	r1, [r3, #0]
 800788e:	685b      	ldreq	r3, [r3, #4]
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	bf04      	itt	eq
 8007894:	1809      	addeq	r1, r1, r0
 8007896:	6021      	streq	r1, [r4, #0]
 8007898:	6054      	str	r4, [r2, #4]
 800789a:	e7ca      	b.n	8007832 <_free_r+0x22>
 800789c:	bd38      	pop	{r3, r4, r5, pc}
 800789e:	bf00      	nop
 80078a0:	200025ec 	.word	0x200025ec

080078a4 <sbrk_aligned>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4e0f      	ldr	r6, [pc, #60]	@ (80078e4 <sbrk_aligned+0x40>)
 80078a8:	460c      	mov	r4, r1
 80078aa:	6831      	ldr	r1, [r6, #0]
 80078ac:	4605      	mov	r5, r0
 80078ae:	b911      	cbnz	r1, 80078b6 <sbrk_aligned+0x12>
 80078b0:	f000 fba4 	bl	8007ffc <_sbrk_r>
 80078b4:	6030      	str	r0, [r6, #0]
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 fb9f 	bl	8007ffc <_sbrk_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	d103      	bne.n	80078ca <sbrk_aligned+0x26>
 80078c2:	f04f 34ff 	mov.w	r4, #4294967295
 80078c6:	4620      	mov	r0, r4
 80078c8:	bd70      	pop	{r4, r5, r6, pc}
 80078ca:	1cc4      	adds	r4, r0, #3
 80078cc:	f024 0403 	bic.w	r4, r4, #3
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	d0f8      	beq.n	80078c6 <sbrk_aligned+0x22>
 80078d4:	1a21      	subs	r1, r4, r0
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 fb90 	bl	8007ffc <_sbrk_r>
 80078dc:	3001      	adds	r0, #1
 80078de:	d1f2      	bne.n	80078c6 <sbrk_aligned+0x22>
 80078e0:	e7ef      	b.n	80078c2 <sbrk_aligned+0x1e>
 80078e2:	bf00      	nop
 80078e4:	200025e8 	.word	0x200025e8

080078e8 <_malloc_r>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	1ccd      	adds	r5, r1, #3
 80078ee:	f025 0503 	bic.w	r5, r5, #3
 80078f2:	3508      	adds	r5, #8
 80078f4:	2d0c      	cmp	r5, #12
 80078f6:	bf38      	it	cc
 80078f8:	250c      	movcc	r5, #12
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	4606      	mov	r6, r0
 80078fe:	db01      	blt.n	8007904 <_malloc_r+0x1c>
 8007900:	42a9      	cmp	r1, r5
 8007902:	d904      	bls.n	800790e <_malloc_r+0x26>
 8007904:	230c      	movs	r3, #12
 8007906:	6033      	str	r3, [r6, #0]
 8007908:	2000      	movs	r0, #0
 800790a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079e4 <_malloc_r+0xfc>
 8007912:	f000 f869 	bl	80079e8 <__malloc_lock>
 8007916:	f8d8 3000 	ldr.w	r3, [r8]
 800791a:	461c      	mov	r4, r3
 800791c:	bb44      	cbnz	r4, 8007970 <_malloc_r+0x88>
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff ffbf 	bl	80078a4 <sbrk_aligned>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	4604      	mov	r4, r0
 800792a:	d158      	bne.n	80079de <_malloc_r+0xf6>
 800792c:	f8d8 4000 	ldr.w	r4, [r8]
 8007930:	4627      	mov	r7, r4
 8007932:	2f00      	cmp	r7, #0
 8007934:	d143      	bne.n	80079be <_malloc_r+0xd6>
 8007936:	2c00      	cmp	r4, #0
 8007938:	d04b      	beq.n	80079d2 <_malloc_r+0xea>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	4639      	mov	r1, r7
 800793e:	4630      	mov	r0, r6
 8007940:	eb04 0903 	add.w	r9, r4, r3
 8007944:	f000 fb5a 	bl	8007ffc <_sbrk_r>
 8007948:	4581      	cmp	r9, r0
 800794a:	d142      	bne.n	80079d2 <_malloc_r+0xea>
 800794c:	6821      	ldr	r1, [r4, #0]
 800794e:	1a6d      	subs	r5, r5, r1
 8007950:	4629      	mov	r1, r5
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff ffa6 	bl	80078a4 <sbrk_aligned>
 8007958:	3001      	adds	r0, #1
 800795a:	d03a      	beq.n	80079d2 <_malloc_r+0xea>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	442b      	add	r3, r5
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	f8d8 3000 	ldr.w	r3, [r8]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	bb62      	cbnz	r2, 80079c4 <_malloc_r+0xdc>
 800796a:	f8c8 7000 	str.w	r7, [r8]
 800796e:	e00f      	b.n	8007990 <_malloc_r+0xa8>
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	1b52      	subs	r2, r2, r5
 8007974:	d420      	bmi.n	80079b8 <_malloc_r+0xd0>
 8007976:	2a0b      	cmp	r2, #11
 8007978:	d917      	bls.n	80079aa <_malloc_r+0xc2>
 800797a:	1961      	adds	r1, r4, r5
 800797c:	42a3      	cmp	r3, r4
 800797e:	6025      	str	r5, [r4, #0]
 8007980:	bf18      	it	ne
 8007982:	6059      	strne	r1, [r3, #4]
 8007984:	6863      	ldr	r3, [r4, #4]
 8007986:	bf08      	it	eq
 8007988:	f8c8 1000 	streq.w	r1, [r8]
 800798c:	5162      	str	r2, [r4, r5]
 800798e:	604b      	str	r3, [r1, #4]
 8007990:	4630      	mov	r0, r6
 8007992:	f000 f82f 	bl	80079f4 <__malloc_unlock>
 8007996:	f104 000b 	add.w	r0, r4, #11
 800799a:	1d23      	adds	r3, r4, #4
 800799c:	f020 0007 	bic.w	r0, r0, #7
 80079a0:	1ac2      	subs	r2, r0, r3
 80079a2:	bf1c      	itt	ne
 80079a4:	1a1b      	subne	r3, r3, r0
 80079a6:	50a3      	strne	r3, [r4, r2]
 80079a8:	e7af      	b.n	800790a <_malloc_r+0x22>
 80079aa:	6862      	ldr	r2, [r4, #4]
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	bf0c      	ite	eq
 80079b0:	f8c8 2000 	streq.w	r2, [r8]
 80079b4:	605a      	strne	r2, [r3, #4]
 80079b6:	e7eb      	b.n	8007990 <_malloc_r+0xa8>
 80079b8:	4623      	mov	r3, r4
 80079ba:	6864      	ldr	r4, [r4, #4]
 80079bc:	e7ae      	b.n	800791c <_malloc_r+0x34>
 80079be:	463c      	mov	r4, r7
 80079c0:	687f      	ldr	r7, [r7, #4]
 80079c2:	e7b6      	b.n	8007932 <_malloc_r+0x4a>
 80079c4:	461a      	mov	r2, r3
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	d1fb      	bne.n	80079c4 <_malloc_r+0xdc>
 80079cc:	2300      	movs	r3, #0
 80079ce:	6053      	str	r3, [r2, #4]
 80079d0:	e7de      	b.n	8007990 <_malloc_r+0xa8>
 80079d2:	230c      	movs	r3, #12
 80079d4:	6033      	str	r3, [r6, #0]
 80079d6:	4630      	mov	r0, r6
 80079d8:	f000 f80c 	bl	80079f4 <__malloc_unlock>
 80079dc:	e794      	b.n	8007908 <_malloc_r+0x20>
 80079de:	6005      	str	r5, [r0, #0]
 80079e0:	e7d6      	b.n	8007990 <_malloc_r+0xa8>
 80079e2:	bf00      	nop
 80079e4:	200025ec 	.word	0x200025ec

080079e8 <__malloc_lock>:
 80079e8:	4801      	ldr	r0, [pc, #4]	@ (80079f0 <__malloc_lock+0x8>)
 80079ea:	f7ff bf0f 	b.w	800780c <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	200025e4 	.word	0x200025e4

080079f4 <__malloc_unlock>:
 80079f4:	4801      	ldr	r0, [pc, #4]	@ (80079fc <__malloc_unlock+0x8>)
 80079f6:	f7ff bf0a 	b.w	800780e <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	200025e4 	.word	0x200025e4

08007a00 <__ssputs_r>:
 8007a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a04:	688e      	ldr	r6, [r1, #8]
 8007a06:	461f      	mov	r7, r3
 8007a08:	42be      	cmp	r6, r7
 8007a0a:	680b      	ldr	r3, [r1, #0]
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	4690      	mov	r8, r2
 8007a12:	d82d      	bhi.n	8007a70 <__ssputs_r+0x70>
 8007a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a1c:	d026      	beq.n	8007a6c <__ssputs_r+0x6c>
 8007a1e:	6965      	ldr	r5, [r4, #20]
 8007a20:	6909      	ldr	r1, [r1, #16]
 8007a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a26:	eba3 0901 	sub.w	r9, r3, r1
 8007a2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a2e:	1c7b      	adds	r3, r7, #1
 8007a30:	444b      	add	r3, r9
 8007a32:	106d      	asrs	r5, r5, #1
 8007a34:	429d      	cmp	r5, r3
 8007a36:	bf38      	it	cc
 8007a38:	461d      	movcc	r5, r3
 8007a3a:	0553      	lsls	r3, r2, #21
 8007a3c:	d527      	bpl.n	8007a8e <__ssputs_r+0x8e>
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f7ff ff52 	bl	80078e8 <_malloc_r>
 8007a44:	4606      	mov	r6, r0
 8007a46:	b360      	cbz	r0, 8007aa2 <__ssputs_r+0xa2>
 8007a48:	6921      	ldr	r1, [r4, #16]
 8007a4a:	464a      	mov	r2, r9
 8007a4c:	f000 fae6 	bl	800801c <memcpy>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	6126      	str	r6, [r4, #16]
 8007a5e:	6165      	str	r5, [r4, #20]
 8007a60:	444e      	add	r6, r9
 8007a62:	eba5 0509 	sub.w	r5, r5, r9
 8007a66:	6026      	str	r6, [r4, #0]
 8007a68:	60a5      	str	r5, [r4, #8]
 8007a6a:	463e      	mov	r6, r7
 8007a6c:	42be      	cmp	r6, r7
 8007a6e:	d900      	bls.n	8007a72 <__ssputs_r+0x72>
 8007a70:	463e      	mov	r6, r7
 8007a72:	6820      	ldr	r0, [r4, #0]
 8007a74:	4632      	mov	r2, r6
 8007a76:	4641      	mov	r1, r8
 8007a78:	f000 faa6 	bl	8007fc8 <memmove>
 8007a7c:	68a3      	ldr	r3, [r4, #8]
 8007a7e:	1b9b      	subs	r3, r3, r6
 8007a80:	60a3      	str	r3, [r4, #8]
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	4433      	add	r3, r6
 8007a86:	6023      	str	r3, [r4, #0]
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8e:	462a      	mov	r2, r5
 8007a90:	f000 fad2 	bl	8008038 <_realloc_r>
 8007a94:	4606      	mov	r6, r0
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d1e0      	bne.n	8007a5c <__ssputs_r+0x5c>
 8007a9a:	6921      	ldr	r1, [r4, #16]
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	f7ff feb7 	bl	8007810 <_free_r>
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	f8ca 3000 	str.w	r3, [sl]
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	e7e9      	b.n	8007a8a <__ssputs_r+0x8a>
	...

08007ab8 <_svfiprintf_r>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	4698      	mov	r8, r3
 8007abe:	898b      	ldrh	r3, [r1, #12]
 8007ac0:	061b      	lsls	r3, r3, #24
 8007ac2:	b09d      	sub	sp, #116	@ 0x74
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	4614      	mov	r4, r2
 8007aca:	d510      	bpl.n	8007aee <_svfiprintf_r+0x36>
 8007acc:	690b      	ldr	r3, [r1, #16]
 8007ace:	b973      	cbnz	r3, 8007aee <_svfiprintf_r+0x36>
 8007ad0:	2140      	movs	r1, #64	@ 0x40
 8007ad2:	f7ff ff09 	bl	80078e8 <_malloc_r>
 8007ad6:	6028      	str	r0, [r5, #0]
 8007ad8:	6128      	str	r0, [r5, #16]
 8007ada:	b930      	cbnz	r0, 8007aea <_svfiprintf_r+0x32>
 8007adc:	230c      	movs	r3, #12
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	b01d      	add	sp, #116	@ 0x74
 8007ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aea:	2340      	movs	r3, #64	@ 0x40
 8007aec:	616b      	str	r3, [r5, #20]
 8007aee:	2300      	movs	r3, #0
 8007af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af2:	2320      	movs	r3, #32
 8007af4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afc:	2330      	movs	r3, #48	@ 0x30
 8007afe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c9c <_svfiprintf_r+0x1e4>
 8007b02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b06:	f04f 0901 	mov.w	r9, #1
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	469a      	mov	sl, r3
 8007b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b12:	b10a      	cbz	r2, 8007b18 <_svfiprintf_r+0x60>
 8007b14:	2a25      	cmp	r2, #37	@ 0x25
 8007b16:	d1f9      	bne.n	8007b0c <_svfiprintf_r+0x54>
 8007b18:	ebba 0b04 	subs.w	fp, sl, r4
 8007b1c:	d00b      	beq.n	8007b36 <_svfiprintf_r+0x7e>
 8007b1e:	465b      	mov	r3, fp
 8007b20:	4622      	mov	r2, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	4638      	mov	r0, r7
 8007b26:	f7ff ff6b 	bl	8007a00 <__ssputs_r>
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f000 80a7 	beq.w	8007c7e <_svfiprintf_r+0x1c6>
 8007b30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b32:	445a      	add	r2, fp
 8007b34:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b36:	f89a 3000 	ldrb.w	r3, [sl]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 809f 	beq.w	8007c7e <_svfiprintf_r+0x1c6>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f04f 32ff 	mov.w	r2, #4294967295
 8007b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b4a:	f10a 0a01 	add.w	sl, sl, #1
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	9307      	str	r3, [sp, #28]
 8007b52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b58:	4654      	mov	r4, sl
 8007b5a:	2205      	movs	r2, #5
 8007b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b60:	484e      	ldr	r0, [pc, #312]	@ (8007c9c <_svfiprintf_r+0x1e4>)
 8007b62:	f7f8 fb5d 	bl	8000220 <memchr>
 8007b66:	9a04      	ldr	r2, [sp, #16]
 8007b68:	b9d8      	cbnz	r0, 8007ba2 <_svfiprintf_r+0xea>
 8007b6a:	06d0      	lsls	r0, r2, #27
 8007b6c:	bf44      	itt	mi
 8007b6e:	2320      	movmi	r3, #32
 8007b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b74:	0711      	lsls	r1, r2, #28
 8007b76:	bf44      	itt	mi
 8007b78:	232b      	movmi	r3, #43	@ 0x2b
 8007b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b84:	d015      	beq.n	8007bb2 <_svfiprintf_r+0xfa>
 8007b86:	9a07      	ldr	r2, [sp, #28]
 8007b88:	4654      	mov	r4, sl
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f04f 0c0a 	mov.w	ip, #10
 8007b90:	4621      	mov	r1, r4
 8007b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b96:	3b30      	subs	r3, #48	@ 0x30
 8007b98:	2b09      	cmp	r3, #9
 8007b9a:	d94b      	bls.n	8007c34 <_svfiprintf_r+0x17c>
 8007b9c:	b1b0      	cbz	r0, 8007bcc <_svfiprintf_r+0x114>
 8007b9e:	9207      	str	r2, [sp, #28]
 8007ba0:	e014      	b.n	8007bcc <_svfiprintf_r+0x114>
 8007ba2:	eba0 0308 	sub.w	r3, r0, r8
 8007ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8007baa:	4313      	orrs	r3, r2
 8007bac:	9304      	str	r3, [sp, #16]
 8007bae:	46a2      	mov	sl, r4
 8007bb0:	e7d2      	b.n	8007b58 <_svfiprintf_r+0xa0>
 8007bb2:	9b03      	ldr	r3, [sp, #12]
 8007bb4:	1d19      	adds	r1, r3, #4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	9103      	str	r1, [sp, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfbb      	ittet	lt
 8007bbe:	425b      	neglt	r3, r3
 8007bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc4:	9307      	strge	r3, [sp, #28]
 8007bc6:	9307      	strlt	r3, [sp, #28]
 8007bc8:	bfb8      	it	lt
 8007bca:	9204      	strlt	r2, [sp, #16]
 8007bcc:	7823      	ldrb	r3, [r4, #0]
 8007bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bd0:	d10a      	bne.n	8007be8 <_svfiprintf_r+0x130>
 8007bd2:	7863      	ldrb	r3, [r4, #1]
 8007bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bd6:	d132      	bne.n	8007c3e <_svfiprintf_r+0x186>
 8007bd8:	9b03      	ldr	r3, [sp, #12]
 8007bda:	1d1a      	adds	r2, r3, #4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	9203      	str	r2, [sp, #12]
 8007be0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007be4:	3402      	adds	r4, #2
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007cac <_svfiprintf_r+0x1f4>
 8007bec:	7821      	ldrb	r1, [r4, #0]
 8007bee:	2203      	movs	r2, #3
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	f7f8 fb15 	bl	8000220 <memchr>
 8007bf6:	b138      	cbz	r0, 8007c08 <_svfiprintf_r+0x150>
 8007bf8:	9b04      	ldr	r3, [sp, #16]
 8007bfa:	eba0 000a 	sub.w	r0, r0, sl
 8007bfe:	2240      	movs	r2, #64	@ 0x40
 8007c00:	4082      	lsls	r2, r0
 8007c02:	4313      	orrs	r3, r2
 8007c04:	3401      	adds	r4, #1
 8007c06:	9304      	str	r3, [sp, #16]
 8007c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0c:	4824      	ldr	r0, [pc, #144]	@ (8007ca0 <_svfiprintf_r+0x1e8>)
 8007c0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c12:	2206      	movs	r2, #6
 8007c14:	f7f8 fb04 	bl	8000220 <memchr>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d036      	beq.n	8007c8a <_svfiprintf_r+0x1d2>
 8007c1c:	4b21      	ldr	r3, [pc, #132]	@ (8007ca4 <_svfiprintf_r+0x1ec>)
 8007c1e:	bb1b      	cbnz	r3, 8007c68 <_svfiprintf_r+0x1b0>
 8007c20:	9b03      	ldr	r3, [sp, #12]
 8007c22:	3307      	adds	r3, #7
 8007c24:	f023 0307 	bic.w	r3, r3, #7
 8007c28:	3308      	adds	r3, #8
 8007c2a:	9303      	str	r3, [sp, #12]
 8007c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2e:	4433      	add	r3, r6
 8007c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c32:	e76a      	b.n	8007b0a <_svfiprintf_r+0x52>
 8007c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c38:	460c      	mov	r4, r1
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	e7a8      	b.n	8007b90 <_svfiprintf_r+0xd8>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	3401      	adds	r4, #1
 8007c42:	9305      	str	r3, [sp, #20]
 8007c44:	4619      	mov	r1, r3
 8007c46:	f04f 0c0a 	mov.w	ip, #10
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c50:	3a30      	subs	r2, #48	@ 0x30
 8007c52:	2a09      	cmp	r2, #9
 8007c54:	d903      	bls.n	8007c5e <_svfiprintf_r+0x1a6>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0c6      	beq.n	8007be8 <_svfiprintf_r+0x130>
 8007c5a:	9105      	str	r1, [sp, #20]
 8007c5c:	e7c4      	b.n	8007be8 <_svfiprintf_r+0x130>
 8007c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c62:	4604      	mov	r4, r0
 8007c64:	2301      	movs	r3, #1
 8007c66:	e7f0      	b.n	8007c4a <_svfiprintf_r+0x192>
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca8 <_svfiprintf_r+0x1f0>)
 8007c70:	a904      	add	r1, sp, #16
 8007c72:	4638      	mov	r0, r7
 8007c74:	f3af 8000 	nop.w
 8007c78:	1c42      	adds	r2, r0, #1
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	d1d6      	bne.n	8007c2c <_svfiprintf_r+0x174>
 8007c7e:	89ab      	ldrh	r3, [r5, #12]
 8007c80:	065b      	lsls	r3, r3, #25
 8007c82:	f53f af2d 	bmi.w	8007ae0 <_svfiprintf_r+0x28>
 8007c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c88:	e72c      	b.n	8007ae4 <_svfiprintf_r+0x2c>
 8007c8a:	ab03      	add	r3, sp, #12
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4b05      	ldr	r3, [pc, #20]	@ (8007ca8 <_svfiprintf_r+0x1f0>)
 8007c92:	a904      	add	r1, sp, #16
 8007c94:	4638      	mov	r0, r7
 8007c96:	f000 f879 	bl	8007d8c <_printf_i>
 8007c9a:	e7ed      	b.n	8007c78 <_svfiprintf_r+0x1c0>
 8007c9c:	08008728 	.word	0x08008728
 8007ca0:	08008732 	.word	0x08008732
 8007ca4:	00000000 	.word	0x00000000
 8007ca8:	08007a01 	.word	0x08007a01
 8007cac:	0800872e 	.word	0x0800872e

08007cb0 <_printf_common>:
 8007cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	4616      	mov	r6, r2
 8007cb6:	4698      	mov	r8, r3
 8007cb8:	688a      	ldr	r2, [r1, #8]
 8007cba:	690b      	ldr	r3, [r1, #16]
 8007cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	bfb8      	it	lt
 8007cc4:	4613      	movlt	r3, r2
 8007cc6:	6033      	str	r3, [r6, #0]
 8007cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ccc:	4607      	mov	r7, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	b10a      	cbz	r2, 8007cd6 <_printf_common+0x26>
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	6033      	str	r3, [r6, #0]
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	0699      	lsls	r1, r3, #26
 8007cda:	bf42      	ittt	mi
 8007cdc:	6833      	ldrmi	r3, [r6, #0]
 8007cde:	3302      	addmi	r3, #2
 8007ce0:	6033      	strmi	r3, [r6, #0]
 8007ce2:	6825      	ldr	r5, [r4, #0]
 8007ce4:	f015 0506 	ands.w	r5, r5, #6
 8007ce8:	d106      	bne.n	8007cf8 <_printf_common+0x48>
 8007cea:	f104 0a19 	add.w	sl, r4, #25
 8007cee:	68e3      	ldr	r3, [r4, #12]
 8007cf0:	6832      	ldr	r2, [r6, #0]
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	42ab      	cmp	r3, r5
 8007cf6:	dc26      	bgt.n	8007d46 <_printf_common+0x96>
 8007cf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cfc:	6822      	ldr	r2, [r4, #0]
 8007cfe:	3b00      	subs	r3, #0
 8007d00:	bf18      	it	ne
 8007d02:	2301      	movne	r3, #1
 8007d04:	0692      	lsls	r2, r2, #26
 8007d06:	d42b      	bmi.n	8007d60 <_printf_common+0xb0>
 8007d08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	4638      	mov	r0, r7
 8007d10:	47c8      	blx	r9
 8007d12:	3001      	adds	r0, #1
 8007d14:	d01e      	beq.n	8007d54 <_printf_common+0xa4>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	6922      	ldr	r2, [r4, #16]
 8007d1a:	f003 0306 	and.w	r3, r3, #6
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	bf02      	ittt	eq
 8007d22:	68e5      	ldreq	r5, [r4, #12]
 8007d24:	6833      	ldreq	r3, [r6, #0]
 8007d26:	1aed      	subeq	r5, r5, r3
 8007d28:	68a3      	ldr	r3, [r4, #8]
 8007d2a:	bf0c      	ite	eq
 8007d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d30:	2500      	movne	r5, #0
 8007d32:	4293      	cmp	r3, r2
 8007d34:	bfc4      	itt	gt
 8007d36:	1a9b      	subgt	r3, r3, r2
 8007d38:	18ed      	addgt	r5, r5, r3
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	341a      	adds	r4, #26
 8007d3e:	42b5      	cmp	r5, r6
 8007d40:	d11a      	bne.n	8007d78 <_printf_common+0xc8>
 8007d42:	2000      	movs	r0, #0
 8007d44:	e008      	b.n	8007d58 <_printf_common+0xa8>
 8007d46:	2301      	movs	r3, #1
 8007d48:	4652      	mov	r2, sl
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	47c8      	blx	r9
 8007d50:	3001      	adds	r0, #1
 8007d52:	d103      	bne.n	8007d5c <_printf_common+0xac>
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295
 8007d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5c:	3501      	adds	r5, #1
 8007d5e:	e7c6      	b.n	8007cee <_printf_common+0x3e>
 8007d60:	18e1      	adds	r1, r4, r3
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	2030      	movs	r0, #48	@ 0x30
 8007d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d6a:	4422      	add	r2, r4
 8007d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d74:	3302      	adds	r3, #2
 8007d76:	e7c7      	b.n	8007d08 <_printf_common+0x58>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	4638      	mov	r0, r7
 8007d80:	47c8      	blx	r9
 8007d82:	3001      	adds	r0, #1
 8007d84:	d0e6      	beq.n	8007d54 <_printf_common+0xa4>
 8007d86:	3601      	adds	r6, #1
 8007d88:	e7d9      	b.n	8007d3e <_printf_common+0x8e>
	...

08007d8c <_printf_i>:
 8007d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	7e0f      	ldrb	r7, [r1, #24]
 8007d92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d94:	2f78      	cmp	r7, #120	@ 0x78
 8007d96:	4691      	mov	r9, r2
 8007d98:	4680      	mov	r8, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	469a      	mov	sl, r3
 8007d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007da2:	d807      	bhi.n	8007db4 <_printf_i+0x28>
 8007da4:	2f62      	cmp	r7, #98	@ 0x62
 8007da6:	d80a      	bhi.n	8007dbe <_printf_i+0x32>
 8007da8:	2f00      	cmp	r7, #0
 8007daa:	f000 80d1 	beq.w	8007f50 <_printf_i+0x1c4>
 8007dae:	2f58      	cmp	r7, #88	@ 0x58
 8007db0:	f000 80b8 	beq.w	8007f24 <_printf_i+0x198>
 8007db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dbc:	e03a      	b.n	8007e34 <_printf_i+0xa8>
 8007dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dc2:	2b15      	cmp	r3, #21
 8007dc4:	d8f6      	bhi.n	8007db4 <_printf_i+0x28>
 8007dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8007dcc <_printf_i+0x40>)
 8007dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dcc:	08007e25 	.word	0x08007e25
 8007dd0:	08007e39 	.word	0x08007e39
 8007dd4:	08007db5 	.word	0x08007db5
 8007dd8:	08007db5 	.word	0x08007db5
 8007ddc:	08007db5 	.word	0x08007db5
 8007de0:	08007db5 	.word	0x08007db5
 8007de4:	08007e39 	.word	0x08007e39
 8007de8:	08007db5 	.word	0x08007db5
 8007dec:	08007db5 	.word	0x08007db5
 8007df0:	08007db5 	.word	0x08007db5
 8007df4:	08007db5 	.word	0x08007db5
 8007df8:	08007f37 	.word	0x08007f37
 8007dfc:	08007e63 	.word	0x08007e63
 8007e00:	08007ef1 	.word	0x08007ef1
 8007e04:	08007db5 	.word	0x08007db5
 8007e08:	08007db5 	.word	0x08007db5
 8007e0c:	08007f59 	.word	0x08007f59
 8007e10:	08007db5 	.word	0x08007db5
 8007e14:	08007e63 	.word	0x08007e63
 8007e18:	08007db5 	.word	0x08007db5
 8007e1c:	08007db5 	.word	0x08007db5
 8007e20:	08007ef9 	.word	0x08007ef9
 8007e24:	6833      	ldr	r3, [r6, #0]
 8007e26:	1d1a      	adds	r2, r3, #4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6032      	str	r2, [r6, #0]
 8007e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e34:	2301      	movs	r3, #1
 8007e36:	e09c      	b.n	8007f72 <_printf_i+0x1e6>
 8007e38:	6833      	ldr	r3, [r6, #0]
 8007e3a:	6820      	ldr	r0, [r4, #0]
 8007e3c:	1d19      	adds	r1, r3, #4
 8007e3e:	6031      	str	r1, [r6, #0]
 8007e40:	0606      	lsls	r6, r0, #24
 8007e42:	d501      	bpl.n	8007e48 <_printf_i+0xbc>
 8007e44:	681d      	ldr	r5, [r3, #0]
 8007e46:	e003      	b.n	8007e50 <_printf_i+0xc4>
 8007e48:	0645      	lsls	r5, r0, #25
 8007e4a:	d5fb      	bpl.n	8007e44 <_printf_i+0xb8>
 8007e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	da03      	bge.n	8007e5c <_printf_i+0xd0>
 8007e54:	232d      	movs	r3, #45	@ 0x2d
 8007e56:	426d      	negs	r5, r5
 8007e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e5c:	4858      	ldr	r0, [pc, #352]	@ (8007fc0 <_printf_i+0x234>)
 8007e5e:	230a      	movs	r3, #10
 8007e60:	e011      	b.n	8007e86 <_printf_i+0xfa>
 8007e62:	6821      	ldr	r1, [r4, #0]
 8007e64:	6833      	ldr	r3, [r6, #0]
 8007e66:	0608      	lsls	r0, r1, #24
 8007e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e6c:	d402      	bmi.n	8007e74 <_printf_i+0xe8>
 8007e6e:	0649      	lsls	r1, r1, #25
 8007e70:	bf48      	it	mi
 8007e72:	b2ad      	uxthmi	r5, r5
 8007e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e76:	4852      	ldr	r0, [pc, #328]	@ (8007fc0 <_printf_i+0x234>)
 8007e78:	6033      	str	r3, [r6, #0]
 8007e7a:	bf14      	ite	ne
 8007e7c:	230a      	movne	r3, #10
 8007e7e:	2308      	moveq	r3, #8
 8007e80:	2100      	movs	r1, #0
 8007e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e86:	6866      	ldr	r6, [r4, #4]
 8007e88:	60a6      	str	r6, [r4, #8]
 8007e8a:	2e00      	cmp	r6, #0
 8007e8c:	db05      	blt.n	8007e9a <_printf_i+0x10e>
 8007e8e:	6821      	ldr	r1, [r4, #0]
 8007e90:	432e      	orrs	r6, r5
 8007e92:	f021 0104 	bic.w	r1, r1, #4
 8007e96:	6021      	str	r1, [r4, #0]
 8007e98:	d04b      	beq.n	8007f32 <_printf_i+0x1a6>
 8007e9a:	4616      	mov	r6, r2
 8007e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8007ea4:	5dc7      	ldrb	r7, [r0, r7]
 8007ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007eaa:	462f      	mov	r7, r5
 8007eac:	42bb      	cmp	r3, r7
 8007eae:	460d      	mov	r5, r1
 8007eb0:	d9f4      	bls.n	8007e9c <_printf_i+0x110>
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d10b      	bne.n	8007ece <_printf_i+0x142>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	07df      	lsls	r7, r3, #31
 8007eba:	d508      	bpl.n	8007ece <_printf_i+0x142>
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	6861      	ldr	r1, [r4, #4]
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	bfde      	ittt	le
 8007ec4:	2330      	movle	r3, #48	@ 0x30
 8007ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ece:	1b92      	subs	r2, r2, r6
 8007ed0:	6122      	str	r2, [r4, #16]
 8007ed2:	f8cd a000 	str.w	sl, [sp]
 8007ed6:	464b      	mov	r3, r9
 8007ed8:	aa03      	add	r2, sp, #12
 8007eda:	4621      	mov	r1, r4
 8007edc:	4640      	mov	r0, r8
 8007ede:	f7ff fee7 	bl	8007cb0 <_printf_common>
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d14a      	bne.n	8007f7c <_printf_i+0x1f0>
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eea:	b004      	add	sp, #16
 8007eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	f043 0320 	orr.w	r3, r3, #32
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	4832      	ldr	r0, [pc, #200]	@ (8007fc4 <_printf_i+0x238>)
 8007efa:	2778      	movs	r7, #120	@ 0x78
 8007efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	6831      	ldr	r1, [r6, #0]
 8007f04:	061f      	lsls	r7, r3, #24
 8007f06:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f0a:	d402      	bmi.n	8007f12 <_printf_i+0x186>
 8007f0c:	065f      	lsls	r7, r3, #25
 8007f0e:	bf48      	it	mi
 8007f10:	b2ad      	uxthmi	r5, r5
 8007f12:	6031      	str	r1, [r6, #0]
 8007f14:	07d9      	lsls	r1, r3, #31
 8007f16:	bf44      	itt	mi
 8007f18:	f043 0320 	orrmi.w	r3, r3, #32
 8007f1c:	6023      	strmi	r3, [r4, #0]
 8007f1e:	b11d      	cbz	r5, 8007f28 <_printf_i+0x19c>
 8007f20:	2310      	movs	r3, #16
 8007f22:	e7ad      	b.n	8007e80 <_printf_i+0xf4>
 8007f24:	4826      	ldr	r0, [pc, #152]	@ (8007fc0 <_printf_i+0x234>)
 8007f26:	e7e9      	b.n	8007efc <_printf_i+0x170>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	f023 0320 	bic.w	r3, r3, #32
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	e7f6      	b.n	8007f20 <_printf_i+0x194>
 8007f32:	4616      	mov	r6, r2
 8007f34:	e7bd      	b.n	8007eb2 <_printf_i+0x126>
 8007f36:	6833      	ldr	r3, [r6, #0]
 8007f38:	6825      	ldr	r5, [r4, #0]
 8007f3a:	6961      	ldr	r1, [r4, #20]
 8007f3c:	1d18      	adds	r0, r3, #4
 8007f3e:	6030      	str	r0, [r6, #0]
 8007f40:	062e      	lsls	r6, r5, #24
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	d501      	bpl.n	8007f4a <_printf_i+0x1be>
 8007f46:	6019      	str	r1, [r3, #0]
 8007f48:	e002      	b.n	8007f50 <_printf_i+0x1c4>
 8007f4a:	0668      	lsls	r0, r5, #25
 8007f4c:	d5fb      	bpl.n	8007f46 <_printf_i+0x1ba>
 8007f4e:	8019      	strh	r1, [r3, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	6123      	str	r3, [r4, #16]
 8007f54:	4616      	mov	r6, r2
 8007f56:	e7bc      	b.n	8007ed2 <_printf_i+0x146>
 8007f58:	6833      	ldr	r3, [r6, #0]
 8007f5a:	1d1a      	adds	r2, r3, #4
 8007f5c:	6032      	str	r2, [r6, #0]
 8007f5e:	681e      	ldr	r6, [r3, #0]
 8007f60:	6862      	ldr	r2, [r4, #4]
 8007f62:	2100      	movs	r1, #0
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7f8 f95b 	bl	8000220 <memchr>
 8007f6a:	b108      	cbz	r0, 8007f70 <_printf_i+0x1e4>
 8007f6c:	1b80      	subs	r0, r0, r6
 8007f6e:	6060      	str	r0, [r4, #4]
 8007f70:	6863      	ldr	r3, [r4, #4]
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	2300      	movs	r3, #0
 8007f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f7a:	e7aa      	b.n	8007ed2 <_printf_i+0x146>
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	4632      	mov	r2, r6
 8007f80:	4649      	mov	r1, r9
 8007f82:	4640      	mov	r0, r8
 8007f84:	47d0      	blx	sl
 8007f86:	3001      	adds	r0, #1
 8007f88:	d0ad      	beq.n	8007ee6 <_printf_i+0x15a>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	079b      	lsls	r3, r3, #30
 8007f8e:	d413      	bmi.n	8007fb8 <_printf_i+0x22c>
 8007f90:	68e0      	ldr	r0, [r4, #12]
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	4298      	cmp	r0, r3
 8007f96:	bfb8      	it	lt
 8007f98:	4618      	movlt	r0, r3
 8007f9a:	e7a6      	b.n	8007eea <_printf_i+0x15e>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	4632      	mov	r2, r6
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	47d0      	blx	sl
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d09d      	beq.n	8007ee6 <_printf_i+0x15a>
 8007faa:	3501      	adds	r5, #1
 8007fac:	68e3      	ldr	r3, [r4, #12]
 8007fae:	9903      	ldr	r1, [sp, #12]
 8007fb0:	1a5b      	subs	r3, r3, r1
 8007fb2:	42ab      	cmp	r3, r5
 8007fb4:	dcf2      	bgt.n	8007f9c <_printf_i+0x210>
 8007fb6:	e7eb      	b.n	8007f90 <_printf_i+0x204>
 8007fb8:	2500      	movs	r5, #0
 8007fba:	f104 0619 	add.w	r6, r4, #25
 8007fbe:	e7f5      	b.n	8007fac <_printf_i+0x220>
 8007fc0:	08008739 	.word	0x08008739
 8007fc4:	0800874a 	.word	0x0800874a

08007fc8 <memmove>:
 8007fc8:	4288      	cmp	r0, r1
 8007fca:	b510      	push	{r4, lr}
 8007fcc:	eb01 0402 	add.w	r4, r1, r2
 8007fd0:	d902      	bls.n	8007fd8 <memmove+0x10>
 8007fd2:	4284      	cmp	r4, r0
 8007fd4:	4623      	mov	r3, r4
 8007fd6:	d807      	bhi.n	8007fe8 <memmove+0x20>
 8007fd8:	1e43      	subs	r3, r0, #1
 8007fda:	42a1      	cmp	r1, r4
 8007fdc:	d008      	beq.n	8007ff0 <memmove+0x28>
 8007fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fe6:	e7f8      	b.n	8007fda <memmove+0x12>
 8007fe8:	4402      	add	r2, r0
 8007fea:	4601      	mov	r1, r0
 8007fec:	428a      	cmp	r2, r1
 8007fee:	d100      	bne.n	8007ff2 <memmove+0x2a>
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ffa:	e7f7      	b.n	8007fec <memmove+0x24>

08007ffc <_sbrk_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	@ (8008018 <_sbrk_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f9 fd02 	bl	8001a10 <_sbrk>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_sbrk_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_sbrk_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	200025e0 	.word	0x200025e0

0800801c <memcpy>:
 800801c:	440a      	add	r2, r1
 800801e:	4291      	cmp	r1, r2
 8008020:	f100 33ff 	add.w	r3, r0, #4294967295
 8008024:	d100      	bne.n	8008028 <memcpy+0xc>
 8008026:	4770      	bx	lr
 8008028:	b510      	push	{r4, lr}
 800802a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800802e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008032:	4291      	cmp	r1, r2
 8008034:	d1f9      	bne.n	800802a <memcpy+0xe>
 8008036:	bd10      	pop	{r4, pc}

08008038 <_realloc_r>:
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	4607      	mov	r7, r0
 800803e:	4614      	mov	r4, r2
 8008040:	460d      	mov	r5, r1
 8008042:	b921      	cbnz	r1, 800804e <_realloc_r+0x16>
 8008044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008048:	4611      	mov	r1, r2
 800804a:	f7ff bc4d 	b.w	80078e8 <_malloc_r>
 800804e:	b92a      	cbnz	r2, 800805c <_realloc_r+0x24>
 8008050:	f7ff fbde 	bl	8007810 <_free_r>
 8008054:	4625      	mov	r5, r4
 8008056:	4628      	mov	r0, r5
 8008058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805c:	f000 f81a 	bl	8008094 <_malloc_usable_size_r>
 8008060:	4284      	cmp	r4, r0
 8008062:	4606      	mov	r6, r0
 8008064:	d802      	bhi.n	800806c <_realloc_r+0x34>
 8008066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800806a:	d8f4      	bhi.n	8008056 <_realloc_r+0x1e>
 800806c:	4621      	mov	r1, r4
 800806e:	4638      	mov	r0, r7
 8008070:	f7ff fc3a 	bl	80078e8 <_malloc_r>
 8008074:	4680      	mov	r8, r0
 8008076:	b908      	cbnz	r0, 800807c <_realloc_r+0x44>
 8008078:	4645      	mov	r5, r8
 800807a:	e7ec      	b.n	8008056 <_realloc_r+0x1e>
 800807c:	42b4      	cmp	r4, r6
 800807e:	4622      	mov	r2, r4
 8008080:	4629      	mov	r1, r5
 8008082:	bf28      	it	cs
 8008084:	4632      	movcs	r2, r6
 8008086:	f7ff ffc9 	bl	800801c <memcpy>
 800808a:	4629      	mov	r1, r5
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff fbbf 	bl	8007810 <_free_r>
 8008092:	e7f1      	b.n	8008078 <_realloc_r+0x40>

08008094 <_malloc_usable_size_r>:
 8008094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008098:	1f18      	subs	r0, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	bfbc      	itt	lt
 800809e:	580b      	ldrlt	r3, [r1, r0]
 80080a0:	18c0      	addlt	r0, r0, r3
 80080a2:	4770      	bx	lr

080080a4 <_init>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	bf00      	nop
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr

080080b0 <_fini>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr
