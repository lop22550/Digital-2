/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include "ili9341.h"
#include "Bitmaps.h"

#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

// COSAS PARA LA LECTURA DE LA TARJETA SD
FATFS fs;
FATFS *pfs;
FIL fil;
FRESULT fres;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;
char buffer1[100];


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart3_tx;
DMA_HandleTypeDef hdma_usart3_rx;

/* USER CODE BEGIN PV */
extern unsigned char fondo[];

uint16_t buffer[10];
uint8_t temp[2];
uint16_t indx  = 0;
uint8_t flag_up = 0;
uint8_t flag_down = 0;
uint8_t flag_left = 0;
uint8_t flag_right = 0;
uint8_t flag_A = 0;
uint8_t flag_B = 0;
uint8_t flag_Start  = 0;
uint8_t flag_Select = 0;

uint8_t Up[] = "Up\r\n";
   uint8_t Down[] = "Down\r\n";
   uint8_t Left[] = "Left\r\n";
   uint8_t Right[] = "Right\r\n";
   uint8_t A[] = "A\r\n";
   uint8_t B[] = "B\r\n";
   uint8_t Hola[] = "Hola\r\n";


   // Coordenadas X y Y iniciales y otros valores constantes de samus al iniciar el juego
   const uint8_t x0 = 100;
   const uint8_t y0 = 175;
   const uint8_t h = 111; //175 - 64 (el doble de la altura de samus)

   //Coordenadas de Ridley
   const uint8_t x0r = 300;
   const uint8_t y0r = 175;
   uint8_t xr = 0;
   uint8_t yr = 0;


   //Coordenas X y Y que varían según la acción del control
   uint8_t xf;
   uint8_t yf;


   uint8_t flag_title = 0;

   uint8_t Estado_de_juego = 0;
#define INTRO 1
#define TRANSITION1 2
#define JUEGO 3
#define PAUSE 4
#define GameOver 5


uint8_t pruebas []= "pruebas.txt";


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_UART5_Init(void);
/* USER CODE BEGIN PFP */

void MECHANICS(void);
void MECHANICS_Ridley(void);

//FUNCIÓN PARA MOSTRAR ESTADOS DE LECTURA DE LA TARJETA SD
void transmit_uart(char *string){
	uint8_t len = strlen(string);
	HAL_UART_Transmit(&huart2, (uint8_t*) string , len, 200);
}



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_USART3_UART_Init();
  MX_FATFS_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */

    LCD_Init();

  	LCD_Clear(0x00);
  	FillRect(0, 0, 319, 239, 0xFFFF);


  	Estado_de_juego = INTRO;
  	LCD_Sprite(0, 0, 319, 240, Title_screen_1, 1, 0, 0, 0);
  	HAL_Delay(100);


  	HAL_UART_Receive_DMA(&huart2, temp, 1);
  	HAL_UART_Receive_DMA(&huart3, temp, 1);


  	//Condiciones iniciles
  	xf = x0;
  	yf = y0;



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {



	  switch (Estado_de_juego){
	  case INTRO:

		  HAL_UART_Transmit(&huart5, 1, 8, HAL_MAX_DELAY);

		  LCD_Sprite(0, 0, 319, 240, Title_screen_8, 1, 0, 0, 0);

		  if (flag_title == 1){
			  Estado_de_juego = TRANSITION1;
		  }

		  HAL_Delay(100);
		  break;
	  case TRANSITION1:
		  FillRect(0, 0, 319, 206, 0x0000);
		  for (int x = 0; x < 319; x++) {
		    LCD_Bitmap(x, 207, 16, 16, tile_brinstar1);
		    LCD_Bitmap(x, 223, 16, 16, tile_brinstar1);
		    x += 15;
		  }

		  Estado_de_juego = JUEGO;
		  break;

	   case PAUSE:
		  LCD_Sprite(0, 0, 319, 240, PAUSE_MENU, 1, 0, 0, 0);
		  /*FillRect(0, 0, 319, 206, 0x0000);
		  for (int x = 0; x < 319; x++) {
			LCD_Bitmap(x, 207, 16, 16, tile_brinstar1);
		  	LCD_Bitmap(x, 223, 16, 16, tile_brinstar1);
		  	x += 15;
		  }*/
		   Estado_de_juego = JUEGO;
		  break;

	  case JUEGO:
		  HAL_UART_Transmit(&huart5, 2, 8,HAL_MAX_DELAY);
		  MECHANICS();
	  	  break;

	  }









	 /* for (int var = 319 - 20; var > 0; var-- ) {
	  		  int anim = (var/5)% 4; //Me entrega los valores para los indices de la animacion de samus
	  		  LCD_Sprite(var, 175, 20, 32, samus_Idle_walk,4, anim, 1, 0);
	  		  V_line(var +21, 175, 32, 0x0000);
	  		  HAL_Delay(5);
	  	}*/




    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 9600;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin|SYS_JTMS_SWDIO_Pin|SYS_JTCK_SWCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin SYS_JTMS_SWDIO_Pin SYS_JTCK_SWCLK_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
                          |LCD_D0_Pin|LCD_D2_Pin|SYS_JTMS_SWDIO_Pin|SYS_JTCK_SWCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void MECHANICS (void){


//*********************** ACCION DE LA FECHA DERECHA *************************************************************************

	if (flag_right == 1){


		for (int var = 0; var < 20; var++ ) {
		  int anim = (var/5)% 4; //Me entrega los valores para los indices de la animacion de samus
		  if (xf < 319 - 20){
			xf ++;

			LCD_Sprite(xf, yf, 20, 32, samus_Idle_walk,4, anim, 0, 0);
		    V_line(xf - 1, yf, 32, 0x0000);

		    HAL_Delay(5);
		   }
	     }
		flag_right = 0;
	  }


//*********************** ACCION DE LA FECHA IZQUIERDA *************************************************************************
	  if (flag_left == 1){
	 		for (int var = 0; var < 20; var++ ) {
	 		  int anim = (var/5)% 4; //Me entrega los valores para los indices de la animacion de samus

	 		  if (xf < 319 - 20){
	 			xf --;

	 		    LCD_Sprite(xf, 175, 20, 32, samus_Idle_walk,4, anim, 1, 0);
	 		    V_line(xf +21, 175, 32, 0x0000);


	 		    HAL_Delay(5);
	 		 }

	 		  //if (position_X == 20){position_X = 0;}
	 	   }
	 		flag_left = 0;
	 	  }

//*********************** ACCION DE SALTO *************************************************************************

	  if (flag_A == 1){

		  for (yf = y0; yf > h; yf --) {

			  LCD_Sprite(xf, yf, 18, 25, samus_jump, 1, 0, 0, 0);
			 // LCD_Sprite(x, y, width, height, bitmap, columns, index, flip, offset)
			 // H_line(x, y, l, c)
			  H_line(xf, yf + 26, 18, 0x0000);
			  V_line(xf +19, yf, 32, 0x0000);
			  V_line(xf +20, yf, 32, 0x0000);
			  V_line(xf +21, yf, 32, 0x0000);
			 V_line(xf -1, yf, 32, 0x0000);
			 V_line(xf -2, yf, 32, 0x0000);


			  HAL_Delay(5);
			  //xf++;

			  if (flag_right == 1){
				  xf = xf + 2;
				  flag_right = 0;
			  } else if (flag_left == 1){
				  xf = xf - 2;
				  flag_left = 0;
			  }

		}

		  for (yf = h; yf < y0; yf ++) {
		  		LCD_Sprite(xf, yf, 18, 25, samus_jump, 1, 0, 0, 0);
		    	H_line(xf, yf , 18, 0x0000);
		    	V_line(xf +19, yf, 32, 0x0000);
		    	V_line(xf +20, yf, 32, 0x0000);
		    	V_line(xf +21, yf, 32, 0x0000);
		    	V_line(xf -1, yf, 32, 0x0000);
		    	V_line(xf -2, yf, 32, 0x0000);
		  		HAL_Delay(5);


		  		if (flag_right == 1){
		  			xf = xf+2;
		 			flag_right = 0;
		  		} else if (flag_left == 1){
		  			xf=xf-2;
		  			flag_left = 0;
		  		  }

		  }

		  flag_A  = 0;

	  }

//*********************** ACCION DE DISPARO *************************************************************************

	  if (flag_B == 1){
		  if (flag_right == 1){

		  }

		  if (flag_left == 1){

		  }

		  if (flag_up == 1){

		  }

		  if (flag_down == 1){

		  }



	  }



}


void MECHANICS_Ridley(void){
	//LCD_Sprite(x, y, width, height, bitmap, columns, index, flip, offset)

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

	memcpy (buffer + indx, temp, 1);
	++indx;
	if(indx >= 10){
		indx = 0;
	}


    HAL_UART_Receive_DMA(&huart2, temp, 1);

	HAL_UART_Receive_DMA(&huart3, temp, 1);

//--------------------------Inicio del bloque para transmitir------------------------------------------------------------
		for(int i = 0; i < 10; i++) {
			if (buffer[i] == 117){   //117 es ASCII de u
						flag_up = 1;
						buffer[i] = 0;
					}

			if (buffer[i] == 100){   //100 es ASCII de d
						flag_down = 1;
						buffer[i] = 0;

					}

			if (buffer[i] == 108){   //108 es ASCII de l
						flag_left = 1;
						buffer[i] = 0;
					}

			if (buffer[i] == 114){   //114 es ASCII de l
						flag_right = 1;
						buffer[i] = 0;
					}


			if (buffer[i] == 65){   //65 es ASCII de l
				    	flag_A = 1;
				    	buffer[i] = 0;
					}


			if (buffer[i] == 66){   //66 es ASCII de l
						flag_B = 1;
						buffer[i] = 0;
			 }

			if (buffer[i] == 83){ //83 es ASCII de s mayúscula
				flag_Start = 1;
				flag_title = 1;
				buffer[i] = 0;
			}

			if (buffer[i] == 115){ //115 es ASCII de s minúscula
				flag_Select = 1;
				//Estado_de_juego = PAUSE;
				buffer[i] = 0;
			}


		    } //Fin del for



	  if (flag_up == 1){
		  //HAL_UART_Transmit(&huart2, Up, sizeof(Up), 2000);
		  HAL_UART_Transmit_DMA(&huart2, Up, sizeof(Up));
		  //flag_title = 1;
		  	 //LCD_Bitmap(100, 50, 20, 32, Samus_Stand);

		  //flag_up = 0;
		  }

	  if (flag_down == 1){
		  HAL_UART_Transmit(&huart2, Down, sizeof(Down), 2000);
		  //flag_title = 1;
		  //flag_down = 0;
		  }

	  if (flag_left == 1){
		  HAL_UART_Transmit(&huart2, Left, sizeof(Left), 2000);
		  //flag_title = 1;
		  //flag_left = 0;
		  }

	  if (flag_right == 1){
		  HAL_UART_Transmit(&huart2, Right, sizeof(Right), 2000);
		  //flag_title = 1;
		  // flag_right = 0;
		  }

	  if (flag_A == 1){
		  HAL_UART_Transmit(&huart2, A, sizeof(A), 2000);
		  //flag_title = 1;
		  //flag_A = 0;
		  }

	   if (flag_B == 1){
		   HAL_UART_Transmit(&huart2, B, sizeof(B), 2000);
		   //flag_title = 1;
		   //flag_B = 0;
		   }
	   ;
//--------------------------Fin del bloque para transmitir-------------------


}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
