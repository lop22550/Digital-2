
SlaveI2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000037a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003a9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e73  00000000  00000000  00000447  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e7  00000000  00000000  00001af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d4  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002d8  000002d8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_Slave_Init 00000014  000002c4  000002c4  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.initADC 0000003c  00000226  00000226  000002ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_21 00000032  00000262  00000262  000002f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_24 0000007e  00000154  00000154  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.refreshPORT 00000092  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.initPorts 0000001a  00000294  00000294  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000054  000001d2  000001d2  00000266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.valorADC 00000001  00800100  00800100  0000037a  2**0
                  ALLOC
 22 .bss.buffer   00000001  00800101  00800101  0000037a  2**0
                  ALLOC
 23 .text.__dummy_fini 00000002  000002e0  000002e0  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  000002e2  000002e2  00000376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  000002e4  000002e4  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  000002ae  000002ae  00000342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  000002dc  000002dc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
   8:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
   c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  10:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  14:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  18:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  1c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  20:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  24:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  28:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  2c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  30:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  34:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  38:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  3c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  40:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  44:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  48:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  4c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  50:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  54:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_21>
  58:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  5c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>
  60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_24>
  64:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  ba:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000002d8 <__bad_interrupt>:
 2d8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Slave_Init:

000002c4 <I2C_Slave_Init>:
}
//********************
//Funcion para inicializar I2C Esclavo
//********************
void I2C_Slave_Init(uint8_t adress){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //PINES DE I2C COMO ENTRADAS
 2c4:	97 b1       	in	r25, 0x07	; 7
 2c6:	9f 7c       	andi	r25, 0xCF	; 207
 2c8:	97 b9       	out	0x07, r25	; 7
	TWAR = adress <<1; //se asigna la direccion que tendra
 2ca:	88 0f       	add	r24, r24
 2cc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 2d0:	85 e4       	ldi	r24, 0x45	; 69
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d6:	08 95       	ret

Disassembly of section .text.initADC:

00000226 <initADC>:
		}
		
	}
}
void initADC(void){
	ADMUX = 0;
 226:	ec e7       	ldi	r30, 0x7C	; 124
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	10 82       	st	Z, r1
	
	// Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
 22c:	80 81       	ld	r24, Z
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 232:	80 81       	ld	r24, Z
 234:	8f 77       	andi	r24, 0x7F	; 127
 236:	80 83       	st	Z, r24
	
	// Justificando hacia la izquierda
	ADMUX |= (1<<ADLAR);
 238:	80 81       	ld	r24, Z
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 23e:	ea e7       	ldi	r30, 0x7A	; 122
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	10 82       	st	Z, r1
	//Encendiendo ADC
	ADCSRA |= (1<<ADEN);
 244:	80 81       	ld	r24, Z
 246:	80 68       	ori	r24, 0x80	; 128
 248:	80 83       	st	Z, r24
	
	// Habilitamos ISR ADC
	ADCSRA |= (1<<ADIE);
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
	
	// Prescaler de 128 > 16M / 128 = 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 250:	80 81       	ld	r24, Z
 252:	87 60       	ori	r24, 0x07	; 7
 254:	80 83       	st	Z, r24
	
	// Deshabilitando la intrada digital PC0
	DIDR0 |= (1<<ADC0D);
 256:	ee e7       	ldi	r30, 0x7E	; 126
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	80 83       	st	Z, r24
 260:	08 95       	ret

Disassembly of section .text.__vector_21:

00000262 <__vector_21>:
	
}

ISR(ADC_vect){
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 93       	push	r24
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
	valorADC = ADCH;
 272:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 276:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF);
 27a:	ea e7       	ldi	r30, 0x7A	; 122
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 61       	ori	r24, 0x10	; 16
 282:	80 83       	st	Z, r24
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

Disassembly of section .text.__vector_24:

00000154 <__vector_24>:

ISR(TWI_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 164:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 168:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 16a:	80 38       	cpi	r24, 0x80	; 128
 16c:	99 f0       	breq	.+38     	; 0x194 <__vector_24+0x40>
 16e:	28 f4       	brcc	.+10     	; 0x17a <__vector_24+0x26>
 170:	80 36       	cpi	r24, 0x60	; 96
 172:	51 f0       	breq	.+20     	; 0x188 <__vector_24+0x34>
 174:	80 37       	cpi	r24, 0x70	; 112
 176:	41 f0       	breq	.+16     	; 0x188 <__vector_24+0x34>
 178:	1f c0       	rjmp	.+62     	; 0x1b8 <__vector_24+0x64>
 17a:	88 3a       	cpi	r24, 0xA8	; 168
 17c:	a9 f0       	breq	.+42     	; 0x1a8 <__vector_24+0x54>
 17e:	88 3b       	cpi	r24, 0xB8	; 184
 180:	99 f0       	breq	.+38     	; 0x1a8 <__vector_24+0x54>
 182:	80 39       	cpi	r24, 0x90	; 144
 184:	c9 f4       	brne	.+50     	; 0x1b8 <__vector_24+0x64>
 186:	06 c0       	rjmp	.+12     	; 0x194 <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |= (1<< TWINT);
 188:	ec eb       	ldi	r30, 0xBC	; 188
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
		break;
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <__vector_24+0x6e>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 194:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 198:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buffer>
		TWCR |= (1<< TWINT); // Se limpia la bandera
 19c:	ec eb       	ldi	r30, 0xBC	; 188
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
		break;
 1a6:	0d c0       	rjmp	.+26     	; 0x1c2 <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
		TWDR = valorADC; // Cargar el dato
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWEN)|(1 << TWIE)|(1 << TWINT)|(1 << TWEA); // Inicia el envio
 1b0:	85 ec       	ldi	r24, 0xC5	; 197
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <__vector_24+0x6e>
		default: // Se libera el bus de cualquier error
		TWCR |= (1<< TWINT)|(1<<TWSTO);
 1b8:	ec eb       	ldi	r30, 0xBC	; 188
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 69       	ori	r24, 0x90	; 144
 1c0:	80 83       	st	Z, r24
		break;
	}
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

Disassembly of section .text.refreshPORT:

000000c2 <refreshPORT>:
	refreshPORT(0);
	DDRB |= (1<<DDB5);
	
}
void refreshPORT(uint8_t valor){
	if(valor & 0b10000000){
  c2:	88 23       	and	r24, r24
  c4:	24 f4       	brge	.+8      	; 0xce <refreshPORT+0xc>
		PORTD |= (1<<PORTD5);
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	90 62       	ori	r25, 0x20	; 32
  ca:	9b b9       	out	0x0b, r25	; 11
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <refreshPORT+0x12>
		}else{
		PORTD &= ~(1<<PORTD5);
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	9f 7d       	andi	r25, 0xDF	; 223
  d2:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b01000000){
  d4:	86 ff       	sbrs	r24, 6
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <refreshPORT+0x1e>
		PORTD |= (1<<PORTD4);
  d8:	9b b1       	in	r25, 0x0b	; 11
  da:	90 61       	ori	r25, 0x10	; 16
  dc:	9b b9       	out	0x0b, r25	; 11
  de:	03 c0       	rjmp	.+6      	; 0xe6 <refreshPORT+0x24>
		}else{
		PORTD &= ~(1<<PORTD4);
  e0:	9b b1       	in	r25, 0x0b	; 11
  e2:	9f 7e       	andi	r25, 0xEF	; 239
  e4:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b00100000){
  e6:	85 ff       	sbrs	r24, 5
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <refreshPORT+0x30>
		PORTD |= (1<<PORTD3);
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	98 60       	ori	r25, 0x08	; 8
  ee:	9b b9       	out	0x0b, r25	; 11
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <refreshPORT+0x36>
		}else{
		PORTD &= ~(1<<PORTD3);
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	97 7f       	andi	r25, 0xF7	; 247
  f6:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b00010000){
  f8:	84 ff       	sbrs	r24, 4
  fa:	04 c0       	rjmp	.+8      	; 0x104 <refreshPORT+0x42>
		PORTD |= (1<<PORTD2);
  fc:	9b b1       	in	r25, 0x0b	; 11
  fe:	94 60       	ori	r25, 0x04	; 4
 100:	9b b9       	out	0x0b, r25	; 11
 102:	03 c0       	rjmp	.+6      	; 0x10a <refreshPORT+0x48>
		}else{
		PORTD &= ~(1<<PORTD2);
 104:	9b b1       	in	r25, 0x0b	; 11
 106:	9b 7f       	andi	r25, 0xFB	; 251
 108:	9b b9       	out	0x0b, r25	; 11
	}
	if(valor & 0b00001000){
 10a:	83 ff       	sbrs	r24, 3
 10c:	04 c0       	rjmp	.+8      	; 0x116 <refreshPORT+0x54>
		PORTC |= (1<<PORTC3);
 10e:	98 b1       	in	r25, 0x08	; 8
 110:	98 60       	ori	r25, 0x08	; 8
 112:	98 b9       	out	0x08, r25	; 8
 114:	03 c0       	rjmp	.+6      	; 0x11c <refreshPORT+0x5a>
		}else{
		PORTC &= ~(1<<PORTC3);
 116:	98 b1       	in	r25, 0x08	; 8
 118:	97 7f       	andi	r25, 0xF7	; 247
 11a:	98 b9       	out	0x08, r25	; 8
	}
	if(valor & 0b00000100){
 11c:	82 ff       	sbrs	r24, 2
 11e:	04 c0       	rjmp	.+8      	; 0x128 <refreshPORT+0x66>
		PORTC |= (1<<PORTC2);
 120:	98 b1       	in	r25, 0x08	; 8
 122:	94 60       	ori	r25, 0x04	; 4
 124:	98 b9       	out	0x08, r25	; 8
 126:	03 c0       	rjmp	.+6      	; 0x12e <refreshPORT+0x6c>
		}else{
		PORTC &= ~(1<<PORTC2);
 128:	98 b1       	in	r25, 0x08	; 8
 12a:	9b 7f       	andi	r25, 0xFB	; 251
 12c:	98 b9       	out	0x08, r25	; 8
	}
	if(valor & 0b00000010){
 12e:	81 ff       	sbrs	r24, 1
 130:	04 c0       	rjmp	.+8      	; 0x13a <refreshPORT+0x78>
		PORTC |= (1<<PORTC1);
 132:	98 b1       	in	r25, 0x08	; 8
 134:	92 60       	ori	r25, 0x02	; 2
 136:	98 b9       	out	0x08, r25	; 8
 138:	03 c0       	rjmp	.+6      	; 0x140 <refreshPORT+0x7e>
		}else{
		PORTC &= ~(1<<PORTC1);
 13a:	98 b1       	in	r25, 0x08	; 8
 13c:	9d 7f       	andi	r25, 0xFD	; 253
 13e:	98 b9       	out	0x08, r25	; 8
	}
	if(valor & 0b00000001){
 140:	80 ff       	sbrs	r24, 0
 142:	04 c0       	rjmp	.+8      	; 0x14c <refreshPORT+0x8a>
		PORTD |= (1<<PORTD6);
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	08 95       	ret
		}else{
		PORTD &= ~(1<<PORTD6);
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	8b b9       	out	0x0b, r24	; 11
 152:	08 95       	ret

Disassembly of section .text.initPorts:

00000294 <initPorts>:
}


void initPorts(void){
	// Salidas
	DDRC |= (1<< DDC1)|(1<< DDC2)|(1<< DDC3);
 294:	87 b1       	in	r24, 0x07	; 7
 296:	8e 60       	ori	r24, 0x0E	; 14
 298:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<< DDD2)|(1<< DDD3)|(1<< DDD4)|(1<< DDD5)|(1<< DDD6);
 29a:	8a b1       	in	r24, 0x0a	; 10
 29c:	8c 67       	ori	r24, 0x7C	; 124
 29e:	8a b9       	out	0x0a, r24	; 10
	refreshPORT(0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
	DDRB |= (1<<DDB5);
 2a6:	84 b1       	in	r24, 0x04	; 4
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	84 b9       	out	0x04, r24	; 4
 2ac:	08 95       	ret

Disassembly of section .text.main:

000001d2 <main>:
void initADC(void);


int main(void)
{
	DDRB |= (1<<DDB5);
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	80 62       	ori	r24, 0x20	; 32
 1d6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB5);
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	8f 7d       	andi	r24, 0xDF	; 223
 1dc:	85 b9       	out	0x05, r24	; 5
	initPorts();
 1de:	0e 94 4a 01 	call	0x294	; 0x294 <initPorts>
	initADC();
 1e2:	0e 94 13 01 	call	0x226	; 0x226 <initADC>
	
	I2C_Slave_Init(SlaveAddress);
 1e6:	80 e3       	ldi	r24, 0x30	; 48
 1e8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <I2C_Slave_Init>
	
	sei();		// Habilitar Interrupciones
 1ec:	78 94       	sei
	
	while (1)
	{
		// Iniciando secuencia de adc
		ADCSRA |= (1<< ADSC);
 1ee:	ea e7       	ldi	r30, 0x7A	; 122
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 64       	ori	r24, 0x40	; 64
 1f6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	81 ee       	ldi	r24, 0xE1	; 225
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x2c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x36>
 208:	00 00       	nop
		_delay_ms(100);
		refreshPORT(valorADC);
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
		if(buffer == 'R'){
 212:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <buffer>
 216:	82 35       	cpi	r24, 0x52	; 82
 218:	51 f7       	brne	.-44     	; 0x1ee <main+0x1c>
			PINB |= (1<<PINB5);
 21a:	83 b1       	in	r24, 0x03	; 3
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	83 b9       	out	0x03, r24	; 3
			buffer = 0;
 220:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <buffer>
 224:	e4 cf       	rjmp	.-56     	; 0x1ee <main+0x1c>

Disassembly of section .text.__dummy_fini:

000002e0 <_fini>:
 2e0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002e2 <__funcs_on_exit>:
 2e2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002e4 <__simulator_exit>:
 2e4:	08 95       	ret

Disassembly of section .text.exit:

000002ae <exit>:
 2ae:	ec 01       	movw	r28, r24
 2b0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__funcs_on_exit>
 2b4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_fini>
 2b8:	ce 01       	movw	r24, r28
 2ba:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__simulator_exit>
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <_Exit>

Disassembly of section .text._Exit:

000002dc <_Exit>:
 2dc:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
