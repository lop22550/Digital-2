
Laborarotorio4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005ee  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000005ee  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  0000061d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000655  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000198b  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095f  00000000  00000000  00002a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000033e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ad  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ba  00000000  00000000  0000382d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000054c  0000054c  000005e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004098  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.I2C_Master_Init 000000b8  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Master_Start 00000010  00000534  00000534  000005c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.I2C_Master_Stop 00000008  00000544  00000544  000005d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.I2C_Master_Write 00000030  00000434  00000434  000004c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_Port 00000092  000002f4  000002f4  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_CMD 00000024  000004b4  000004b4  00000548  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.initLCD8bits 0000006a  00000386  00000386  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_Write_Char 00000024  000004d8  000004d8  0000056c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_Set_Cursor 00000022  000004fc  000004fc  00000590  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.ConvertADC 000000a4  00000250  00000250  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    000000d6  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.valorI2C 00000001  00800103  00800103  000005ee  2**0
                  ALLOC
 27 .text.libgcc.div 00000028  00000464  00000464  000004f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.libgcc.div 00000044  000003f0  000003f0  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.div 00000028  0000048c  0000048c  00000520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_fini 00000002  00000554  00000554  000005e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_funcs_on_exit 00000002  00000556  00000556  000005ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_simulator_exit 00000002  00000558  00000558  000005ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.exit    00000016  0000051e  0000051e  000005b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  00000550  00000550  000005e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
   8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
   c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  10:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  14:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  18:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  1c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  20:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  24:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  28:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  2c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  30:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  34:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  38:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  3c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  40:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  44:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  48:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  4c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  50:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  54:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  58:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  5c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  60:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
  64:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 8f 02 	jmp	0x51e	; 0x51e <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000054c <__bad_interrupt>:
 54c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Master_Init:

00000198 <I2C_Master_Init>:


//********************
//Funcion para inicializar I2C Maestro
//********************
void I2C_Master_Init(unsigned long SCL_Clock,uint8_t Prescaler){
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	8b 01       	movw	r16, r22
 1a0:	9c 01       	movw	r18, r24
 1a2:	c4 2f       	mov	r28, r20
	DDRC &= ~((1<<DDC4)|(1<<DDC5));	//Pines de i2c como entradas
 1a4:	87 b1       	in	r24, 0x07	; 7
 1a6:	8f 7c       	andi	r24, 0xCF	; 207
 1a8:	87 b9       	out	0x07, r24	; 7
	
	switch(Prescaler){
 1aa:	44 30       	cpi	r20, 0x04	; 4
 1ac:	79 f0       	breq	.+30     	; 0x1cc <I2C_Master_Init+0x34>
 1ae:	18 f4       	brcc	.+6      	; 0x1b6 <I2C_Master_Init+0x1e>
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <I2C_Master_Init+0x28>
 1b4:	23 c0       	rjmp	.+70     	; 0x1fc <I2C_Master_Init+0x64>
 1b6:	40 31       	cpi	r20, 0x10	; 16
 1b8:	91 f0       	breq	.+36     	; 0x1de <I2C_Master_Init+0x46>
 1ba:	40 34       	cpi	r20, 0x40	; 64
 1bc:	c9 f0       	breq	.+50     	; 0x1f0 <I2C_Master_Init+0x58>
 1be:	1e c0       	rjmp	.+60     	; 0x1fc <I2C_Master_Init+0x64>
		case 1:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
 1c0:	e9 eb       	ldi	r30, 0xB9	; 185
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8c 7f       	andi	r24, 0xFC	; 252
 1c8:	80 83       	st	Z, r24
		break;
 1ca:	1e c0       	rjmp	.+60     	; 0x208 <I2C_Master_Init+0x70>
		case 4:
			TWSR &= ~(1<<TWPS1);
 1cc:	e9 eb       	ldi	r30, 0xB9	; 185
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	8d 7f       	andi	r24, 0xFD	; 253
 1d4:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS0);
 1d6:	80 81       	ld	r24, Z
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24
		break;
 1dc:	15 c0       	rjmp	.+42     	; 0x208 <I2C_Master_Init+0x70>
		case 16:
			TWSR &= ~(1<<TWPS0);
 1de:	e9 eb       	ldi	r30, 0xB9	; 185
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS1);
 1e8:	80 81       	ld	r24, Z
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	80 83       	st	Z, r24
		break;
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <I2C_Master_Init+0x70>
		case 64:
			TWSR |= ((1<<TWPS1)|(1<<TWPS0));
 1f0:	e9 eb       	ldi	r30, 0xB9	; 185
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	83 60       	ori	r24, 0x03	; 3
 1f8:	80 83       	st	Z, r24
		break;
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <I2C_Master_Init+0x70>
		default:
		TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
 1fc:	e9 eb       	ldi	r30, 0xB9	; 185
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	8c 7f       	andi	r24, 0xFC	; 252
 204:	80 83       	st	Z, r24
		Prescaler = 1;
 206:	c1 e0       	ldi	r28, 0x01	; 1
		break;
		
	}
	TWBR = ((F_CPU/SCL_Clock)-16)/(2*Prescaler); // must be > 10 for estable operation
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	74 e2       	ldi	r23, 0x24	; 36
 20c:	84 ef       	ldi	r24, 0xF4	; 244
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	a9 01       	movw	r20, r18
 212:	98 01       	movw	r18, r16
 214:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__udivmodsi4>
 218:	ca 01       	movw	r24, r20
 21a:	b9 01       	movw	r22, r18
 21c:	60 51       	subi	r22, 0x10	; 16
 21e:	71 09       	sbc	r23, r1
 220:	81 09       	sbc	r24, r1
 222:	91 09       	sbc	r25, r1
 224:	4c 2f       	mov	r20, r28
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	9a 01       	movw	r18, r20
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	03 2e       	mov	r0, r19
 230:	00 0c       	add	r0, r0
 232:	44 0b       	sbc	r20, r20
 234:	55 0b       	sbc	r21, r21
 236:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__udivmodsi4>
 23a:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 23e:	ec eb       	ldi	r30, 0xBC	; 188
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	84 60       	ori	r24, 0x04	; 4
 246:	80 83       	st	Z, r24
}
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

Disassembly of section .text.I2C_Master_Start:

00000534 <I2C_Master_Start>:
//********************
//Funcion de inicio de la comunicacion I2C
//********************
void I2C_Master_Start(void){
	uint8_t estado;
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Iniciar condicion de start
 534:	84 ea       	ldi	r24, 0xA4	; 164
 536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR &(1<<TWINT))); //espera a que termine la flag TWINT
 53a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 53e:	88 23       	and	r24, r24
 540:	e4 f7       	brge	.-8      	; 0x53a <I2C_Master_Start+0x6>
}
 542:	08 95       	ret

Disassembly of section .text.I2C_Master_Stop:

00000544 <I2C_Master_Stop>:

//********************
//Funcion de parada de la comunicacion I2C
//********************
void I2C_Master_Stop(void){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO); //inicia el envio secuencia parada stop
 544:	84 e9       	ldi	r24, 0x94	; 148
 546:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 54a:	08 95       	ret

Disassembly of section .text.I2C_Master_Write:

00000434 <I2C_Master_Write>:
//********************
//Funcion de transmision de datos del maestro al esclavo
//********************
uint8_t I2C_Master_Write(uint8_t dato){
	uint8_t estado;
	TWDR = dato; //cargar el dato
 434:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //Inicia el envio
 438:	84 e8       	ldi	r24, 0x84	; 132
 43a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT))); //Espera al flag TWINT
 43e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 442:	88 23       	and	r24, r24
 444:	e4 f7       	brge	.-8      	; 0x43e <I2C_Master_Write+0xa>
	estado = TWSR & 0xF8; //verificar estado
 446:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 44a:	88 7f       	andi	r24, 0xF8	; 248
	//verificar si se transmitio una SLA + W con AFK, SLA + R con ACK, o un Dato con ACK
	if(estado == 0x18 || estado == 0x28 || estado == 0x40){
 44c:	88 31       	cpi	r24, 0x18	; 24
 44e:	31 f0       	breq	.+12     	; 0x45c <I2C_Master_Write+0x28>
 450:	88 32       	cpi	r24, 0x28	; 40
 452:	31 f0       	breq	.+12     	; 0x460 <I2C_Master_Write+0x2c>
 454:	80 34       	cpi	r24, 0x40	; 64
 456:	29 f4       	brne	.+10     	; 0x462 <I2C_Master_Write+0x2e>
		return 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	08 95       	ret
 460:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return estado;
	}
}
 462:	08 95       	ret

Disassembly of section .text.LCD_Port:

000002f4 <LCD_Port>:
	LCD_CMD(0x0C);
}

void LCD_Shift_Left(void){
	LCD_CMD(0x01);
	LCD_CMD(0x08);
 2f4:	80 ff       	sbrs	r24, 0
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <LCD_Port+0xc>
 2f8:	9b b1       	in	r25, 0x0b	; 11
 2fa:	90 62       	ori	r25, 0x20	; 32
 2fc:	9b b9       	out	0x0b, r25	; 11
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <LCD_Port+0x12>
 300:	9b b1       	in	r25, 0x0b	; 11
 302:	9f 7d       	andi	r25, 0xDF	; 223
 304:	9b b9       	out	0x0b, r25	; 11
 306:	81 ff       	sbrs	r24, 1
 308:	04 c0       	rjmp	.+8      	; 0x312 <LCD_Port+0x1e>
 30a:	9b b1       	in	r25, 0x0b	; 11
 30c:	90 64       	ori	r25, 0x40	; 64
 30e:	9b b9       	out	0x0b, r25	; 11
 310:	03 c0       	rjmp	.+6      	; 0x318 <LCD_Port+0x24>
 312:	9b b1       	in	r25, 0x0b	; 11
 314:	9f 7b       	andi	r25, 0xBF	; 191
 316:	9b b9       	out	0x0b, r25	; 11
 318:	82 ff       	sbrs	r24, 2
 31a:	04 c0       	rjmp	.+8      	; 0x324 <LCD_Port+0x30>
 31c:	9b b1       	in	r25, 0x0b	; 11
 31e:	90 68       	ori	r25, 0x80	; 128
 320:	9b b9       	out	0x0b, r25	; 11
 322:	03 c0       	rjmp	.+6      	; 0x32a <LCD_Port+0x36>
 324:	9b b1       	in	r25, 0x0b	; 11
 326:	9f 77       	andi	r25, 0x7F	; 127
 328:	9b b9       	out	0x0b, r25	; 11
 32a:	83 ff       	sbrs	r24, 3
 32c:	04 c0       	rjmp	.+8      	; 0x336 <LCD_Port+0x42>
 32e:	95 b1       	in	r25, 0x05	; 5
 330:	91 60       	ori	r25, 0x01	; 1
 332:	95 b9       	out	0x05, r25	; 5
 334:	03 c0       	rjmp	.+6      	; 0x33c <LCD_Port+0x48>
 336:	95 b1       	in	r25, 0x05	; 5
 338:	9e 7f       	andi	r25, 0xFE	; 254
 33a:	95 b9       	out	0x05, r25	; 5
 33c:	84 ff       	sbrs	r24, 4
 33e:	04 c0       	rjmp	.+8      	; 0x348 <LCD_Port+0x54>
 340:	95 b1       	in	r25, 0x05	; 5
 342:	92 60       	ori	r25, 0x02	; 2
 344:	95 b9       	out	0x05, r25	; 5
 346:	03 c0       	rjmp	.+6      	; 0x34e <LCD_Port+0x5a>
 348:	95 b1       	in	r25, 0x05	; 5
 34a:	9d 7f       	andi	r25, 0xFD	; 253
 34c:	95 b9       	out	0x05, r25	; 5
 34e:	85 ff       	sbrs	r24, 5
 350:	04 c0       	rjmp	.+8      	; 0x35a <LCD_Port+0x66>
 352:	95 b1       	in	r25, 0x05	; 5
 354:	94 60       	ori	r25, 0x04	; 4
 356:	95 b9       	out	0x05, r25	; 5
 358:	03 c0       	rjmp	.+6      	; 0x360 <LCD_Port+0x6c>
 35a:	95 b1       	in	r25, 0x05	; 5
 35c:	9b 7f       	andi	r25, 0xFB	; 251
 35e:	95 b9       	out	0x05, r25	; 5
 360:	86 ff       	sbrs	r24, 6
 362:	04 c0       	rjmp	.+8      	; 0x36c <LCD_Port+0x78>
 364:	95 b1       	in	r25, 0x05	; 5
 366:	98 60       	ori	r25, 0x08	; 8
 368:	95 b9       	out	0x05, r25	; 5
 36a:	03 c0       	rjmp	.+6      	; 0x372 <LCD_Port+0x7e>
 36c:	95 b1       	in	r25, 0x05	; 5
 36e:	97 7f       	andi	r25, 0xF7	; 247
 370:	95 b9       	out	0x05, r25	; 5
 372:	88 23       	and	r24, r24
 374:	24 f4       	brge	.+8      	; 0x37e <LCD_Port+0x8a>
 376:	85 b1       	in	r24, 0x05	; 5
 378:	80 61       	ori	r24, 0x10	; 16
 37a:	85 b9       	out	0x05, r24	; 5
 37c:	08 95       	ret
 37e:	85 b1       	in	r24, 0x05	; 5
 380:	8f 7e       	andi	r24, 0xEF	; 239
 382:	85 b9       	out	0x05, r24	; 5
 384:	08 95       	ret

Disassembly of section .text.LCD_CMD:

000004b4 <LCD_CMD>:
 4b4:	9b b1       	in	r25, 0x0b	; 11
 4b6:	9b 7f       	andi	r25, 0xFB	; 251
 4b8:	9b b9       	out	0x0b, r25	; 11
 4ba:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Port>
 4be:	8b b1       	in	r24, 0x0b	; 11
 4c0:	80 61       	ori	r24, 0x10	; 16
 4c2:	8b b9       	out	0x0b, r24	; 11
 4c4:	8f e7       	ldi	r24, 0x7F	; 127
 4c6:	9e e3       	ldi	r25, 0x3E	; 62
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCD_CMD+0x14>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCD_CMD+0x1a>
 4ce:	00 00       	nop
 4d0:	8b b1       	in	r24, 0x0b	; 11
 4d2:	8f 7e       	andi	r24, 0xEF	; 239
 4d4:	8b b9       	out	0x0b, r24	; 11
 4d6:	08 95       	ret

Disassembly of section .text.initLCD8bits:

00000386 <initLCD8bits>:
 386:	8a b1       	in	r24, 0x0a	; 10
 388:	8c 6f       	ori	r24, 0xFC	; 252
 38a:	8a b9       	out	0x0a, r24	; 10
 38c:	8b b1       	in	r24, 0x0b	; 11
 38e:	83 70       	andi	r24, 0x03	; 3
 390:	8b b9       	out	0x0b, r24	; 11
 392:	84 b1       	in	r24, 0x04	; 4
 394:	8f 63       	ori	r24, 0x3F	; 63
 396:	84 b9       	out	0x04, r24	; 4
 398:	15 b8       	out	0x05, r1	; 5
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Port>
 3a0:	2f ef       	ldi	r18, 0xFF	; 255
 3a2:	89 ef       	ldi	r24, 0xF9	; 249
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <initLCD8bits+0x20>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <initLCD8bits+0x2a>
 3b0:	00 00       	nop
 3b2:	88 e3       	ldi	r24, 0x38	; 56
 3b4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_CMD>
 3b8:	87 eb       	ldi	r24, 0xB7	; 183
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <initLCD8bits+0x36>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <initLCD8bits+0x3c>
 3c2:	00 00       	nop
 3c4:	8c e0       	ldi	r24, 0x0C	; 12
 3c6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_CMD>
 3ca:	87 eb       	ldi	r24, 0xB7	; 183
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <initLCD8bits+0x48>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <initLCD8bits+0x4e>
 3d4:	00 00       	nop
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_CMD>
 3dc:	87 eb       	ldi	r24, 0xB7	; 183
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <initLCD8bits+0x5a>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <initLCD8bits+0x60>
 3e6:	00 00       	nop
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_CMD>
 3ee:	08 95       	ret

Disassembly of section .text.LCD_Write_Char:

000004d8 <LCD_Write_Char>:
 4d8:	9b b1       	in	r25, 0x0b	; 11
 4da:	94 60       	ori	r25, 0x04	; 4
 4dc:	9b b9       	out	0x0b, r25	; 11
 4de:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Port>
 4e2:	8b b1       	in	r24, 0x0b	; 11
 4e4:	80 61       	ori	r24, 0x10	; 16
 4e6:	8b b9       	out	0x0b, r24	; 11
 4e8:	8f e3       	ldi	r24, 0x3F	; 63
 4ea:	9c e9       	ldi	r25, 0x9C	; 156
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_Write_Char+0x14>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCD_Write_Char+0x1a>
 4f2:	00 00       	nop
 4f4:	8b b1       	in	r24, 0x0b	; 11
 4f6:	8f 7e       	andi	r24, 0xEF	; 239
 4f8:	8b b9       	out	0x0b, r24	; 11
 4fa:	08 95       	ret

Disassembly of section .text.LCD_Set_Cursor:

000004fc <LCD_Set_Cursor>:
}

void LCD_Set_Cursor(int columna, int fila){
	int coordenada = 0;
	if (fila == 1){
 4fc:	61 30       	cpi	r22, 0x01	; 1
 4fe:	71 05       	cpc	r23, r1
 500:	19 f4       	brne	.+6      	; 0x508 <LCD_Set_Cursor+0xc>
		coordenada = 0x80 + columna;
 502:	80 58       	subi	r24, 0x80	; 128
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	08 c0       	rjmp	.+16     	; 0x518 <LCD_Set_Cursor+0x1c>
	} else if (fila == 2)
 508:	62 30       	cpi	r22, 0x02	; 2
 50a:	71 05       	cpc	r23, r1
 50c:	19 f4       	brne	.+6      	; 0x514 <LCD_Set_Cursor+0x18>
	{
		coordenada = 0xC0 + columna;
 50e:	80 54       	subi	r24, 0x40	; 64
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	02 c0       	rjmp	.+4      	; 0x518 <LCD_Set_Cursor+0x1c>
	LCD_CMD(0x01);
	LCD_CMD(0x08);
}

void LCD_Set_Cursor(int columna, int fila){
	int coordenada = 0;
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
		coordenada = 0x80 + columna;
	} else if (fila == 2)
	{
		coordenada = 0xC0 + columna;
		}
		LCD_CMD(coordenada);
 518:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <LCD_CMD>
 51c:	08 95       	ret

Disassembly of section .text.ConvertADC:

00000250 <ConvertADC>:
		PORTC &= ~(1<<PORTC0);
	}
	
}

void ConvertADC(uint8_t conversionADC){
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
	uint8_t unidades, decenas, centenas;
	
	unidades = conversionADC % 10;						//ej. 156 %10 = 6
 254:	2d ec       	ldi	r18, 0xCD	; 205
 256:	82 9f       	mul	r24, r18
 258:	c1 2d       	mov	r28, r1
 25a:	11 24       	eor	r1, r1
 25c:	c6 95       	lsr	r28
 25e:	c6 95       	lsr	r28
 260:	c6 95       	lsr	r28
 262:	cc 0f       	add	r28, r28
 264:	9c 2f       	mov	r25, r28
 266:	99 0f       	add	r25, r25
 268:	99 0f       	add	r25, r25
 26a:	c9 0f       	add	r28, r25
 26c:	38 2f       	mov	r19, r24
 26e:	3c 1b       	sub	r19, r28
 270:	c3 2f       	mov	r28, r19
	conversionADC = (conversionADC - unidades)/10;		//(156-6)/10 = 150/10 = 15
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	83 1b       	sub	r24, r19
 276:	91 09       	sbc	r25, r1
 278:	ea e0       	ldi	r30, 0x0A	; 10
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	bf 01       	movw	r22, r30
 27e:	0e 94 32 02 	call	0x464	; 0x464 <__divmodhi4>
	decenas = conversionADC % 10;						//15%10 = 5
 282:	62 9f       	mul	r22, r18
 284:	d1 2d       	mov	r29, r1
 286:	11 24       	eor	r1, r1
 288:	d6 95       	lsr	r29
 28a:	d6 95       	lsr	r29
 28c:	d6 95       	lsr	r29
 28e:	dd 0f       	add	r29, r29
 290:	8d 2f       	mov	r24, r29
 292:	88 0f       	add	r24, r24
 294:	88 0f       	add	r24, r24
 296:	d8 0f       	add	r29, r24
 298:	86 2f       	mov	r24, r22
 29a:	8d 1b       	sub	r24, r29
 29c:	d8 2f       	mov	r29, r24
	conversionADC = (conversionADC - decenas)/10;		//(15-5)/10 = 1
 29e:	77 27       	eor	r23, r23
 2a0:	cb 01       	movw	r24, r22
 2a2:	8d 1b       	sub	r24, r29
 2a4:	91 09       	sbc	r25, r1
 2a6:	bf 01       	movw	r22, r30
 2a8:	0e 94 32 02 	call	0x464	; 0x464 <__divmodhi4>
	centenas = conversionADC % 10;						//1%10 = 1
 2ac:	62 9f       	mul	r22, r18
 2ae:	81 2d       	mov	r24, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	86 95       	lsr	r24
 2b4:	86 95       	lsr	r24
 2b6:	86 95       	lsr	r24
 2b8:	88 0f       	add	r24, r24
 2ba:	28 2f       	mov	r18, r24
 2bc:	22 0f       	add	r18, r18
 2be:	22 0f       	add	r18, r18
 2c0:	82 0f       	add	r24, r18
 2c2:	68 1b       	sub	r22, r24
 2c4:	86 2f       	mov	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	9f ef       	ldi	r25, 0xFF	; 255
 2c8:	21 ee       	ldi	r18, 0xE1	; 225
 2ca:	34 e0       	ldi	r19, 0x04	; 4
 2cc:	91 50       	subi	r25, 0x01	; 1
 2ce:	20 40       	sbci	r18, 0x00	; 0
 2d0:	30 40       	sbci	r19, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <ConvertADC+0x7c>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <ConvertADC+0x86>
 2d6:	00 00       	nop
	
	_delay_ms(100);

	LCD_Write_Char(CERO + centenas);
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_Write_Char>
	LCD_Write_Char(CERO + decenas);
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	8d 0f       	add	r24, r29
 2e2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_Write_Char>
	LCD_Write_Char(CERO + unidades);
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	8c 0f       	add	r24, r28
 2ea:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_Write_Char>
	
	
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
void initPorts(void){
	// Salidas
	DDRC |= (1<< DDC0)|(1<< DDC1)|(1<< DDC2)|(1<< DDC3);
	DDRD |= (1<< DDD2)|(1<< DDD3)|(1<< DDD4)|(1<< DDD5);
	refreshPORT(0);
	DDRB |= (1<<DDB5);
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	60 ea       	ldi	r22, 0xA0	; 160
  c6:	76 e8       	ldi	r23, 0x86	; 134
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_Master_Init>
  d0:	0e 94 c3 01 	call	0x386	; 0x386 <initLCD8bits>
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	87 e0       	ldi	r24, 0x07	; 7
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_Set_Cursor>
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x22>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x28>
  ea:	00 00       	nop
  ec:	83 e5       	ldi	r24, 0x53	; 83
  ee:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_Write_Char>
  f2:	82 e3       	ldi	r24, 0x32	; 50
  f4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_Write_Char>
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	0e 94 9a 02 	call	0x534	; 0x534 <I2C_Master_Start>
 102:	80 e6       	ldi	r24, 0x60	; 96
 104:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufferI2C>
 108:	0e 94 1a 02 	call	0x434	; 0x434 <I2C_Master_Write>
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	11 f0       	breq	.+4      	; 0x118 <main+0x56>
 114:	0e 94 a2 02 	call	0x544	; 0x544 <I2C_Master_Stop>
 118:	82 e5       	ldi	r24, 0x52	; 82
 11a:	0e 94 1a 02 	call	0x434	; 0x434 <I2C_Master_Write>
 11e:	0e 94 a2 02 	call	0x544	; 0x544 <I2C_Master_Stop>
 122:	9f ef       	ldi	r25, 0xFF	; 255
 124:	29 e6       	ldi	r18, 0x69	; 105
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	91 50       	subi	r25, 0x01	; 1
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x66>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x70>
 132:	00 00       	nop
 134:	85 b1       	in	r24, 0x05	; 5
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	85 b9       	out	0x05, r24	; 5
 13a:	0e 94 9a 02 	call	0x534	; 0x534 <I2C_Master_Start>
 13e:	81 e6       	ldi	r24, 0x61	; 97
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufferI2C>
 144:	0e 94 1a 02 	call	0x434	; 0x434 <I2C_Master_Write>
 148:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	11 f0       	breq	.+4      	; 0x154 <main+0x92>
 150:	0e 94 a2 02 	call	0x544	; 0x544 <I2C_Master_Stop>
 154:	84 e8       	ldi	r24, 0x84	; 132
 156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15e:	88 23       	and	r24, r24
 160:	e4 f7       	brge	.-8      	; 0x15a <main+0x98>
 162:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 166:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_end>
 16a:	0e 94 a2 02 	call	0x544	; 0x544 <I2C_Master_Stop>
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_Set_Cursor>
 17a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_end>
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 28 01 	call	0x250	; 0x250 <ConvertADC>
 184:	9f ef       	ldi	r25, 0xFF	; 255
 186:	29 e6       	ldi	r18, 0x69	; 105
 188:	88 e1       	ldi	r24, 0x18	; 24
 18a:	91 50       	subi	r25, 0x01	; 1
 18c:	20 40       	sbci	r18, 0x00	; 0
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0xc8>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0xd2>
 194:	00 00       	nop
 196:	b0 cf       	rjmp	.-160    	; 0xf8 <main+0x36>

Disassembly of section .text.libgcc.div:

00000464 <__divmodhi4>:
 464:	97 fb       	bst	r25, 7
 466:	07 2e       	mov	r0, r23
 468:	16 f4       	brtc	.+4      	; 0x46e <__divmodhi4+0xa>
 46a:	00 94       	com	r0
 46c:	07 d0       	rcall	.+14     	; 0x47c <__divmodhi4_neg1>
 46e:	77 fd       	sbrc	r23, 7
 470:	09 d0       	rcall	.+18     	; 0x484 <__divmodhi4_neg2>
 472:	0e 94 46 02 	call	0x48c	; 0x48c <__udivmodhi4>
 476:	07 fc       	sbrc	r0, 7
 478:	05 d0       	rcall	.+10     	; 0x484 <__divmodhi4_neg2>
 47a:	3e f4       	brtc	.+14     	; 0x48a <__divmodhi4_exit>

0000047c <__divmodhi4_neg1>:
 47c:	90 95       	com	r25
 47e:	81 95       	neg	r24
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	08 95       	ret

00000484 <__divmodhi4_neg2>:
 484:	70 95       	com	r23
 486:	61 95       	neg	r22
 488:	7f 4f       	sbci	r23, 0xFF	; 255

0000048a <__divmodhi4_exit>:
 48a:	08 95       	ret

Disassembly of section .text.libgcc.div:

000003f0 <__udivmodsi4>:
 3f0:	a1 e2       	ldi	r26, 0x21	; 33
 3f2:	1a 2e       	mov	r1, r26
 3f4:	aa 1b       	sub	r26, r26
 3f6:	bb 1b       	sub	r27, r27
 3f8:	fd 01       	movw	r30, r26
 3fa:	0d c0       	rjmp	.+26     	; 0x416 <__udivmodsi4_ep>

000003fc <__udivmodsi4_loop>:
 3fc:	aa 1f       	adc	r26, r26
 3fe:	bb 1f       	adc	r27, r27
 400:	ee 1f       	adc	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	a2 17       	cp	r26, r18
 406:	b3 07       	cpc	r27, r19
 408:	e4 07       	cpc	r30, r20
 40a:	f5 07       	cpc	r31, r21
 40c:	20 f0       	brcs	.+8      	; 0x416 <__udivmodsi4_ep>
 40e:	a2 1b       	sub	r26, r18
 410:	b3 0b       	sbc	r27, r19
 412:	e4 0b       	sbc	r30, r20
 414:	f5 0b       	sbc	r31, r21

00000416 <__udivmodsi4_ep>:
 416:	66 1f       	adc	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	1a 94       	dec	r1
 420:	69 f7       	brne	.-38     	; 0x3fc <__udivmodsi4_loop>
 422:	60 95       	com	r22
 424:	70 95       	com	r23
 426:	80 95       	com	r24
 428:	90 95       	com	r25
 42a:	9b 01       	movw	r18, r22
 42c:	ac 01       	movw	r20, r24
 42e:	bd 01       	movw	r22, r26
 430:	cf 01       	movw	r24, r30
 432:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000048c <__udivmodhi4>:
 48c:	aa 1b       	sub	r26, r26
 48e:	bb 1b       	sub	r27, r27
 490:	51 e1       	ldi	r21, 0x11	; 17
 492:	07 c0       	rjmp	.+14     	; 0x4a2 <__udivmodhi4_ep>

00000494 <__udivmodhi4_loop>:
 494:	aa 1f       	adc	r26, r26
 496:	bb 1f       	adc	r27, r27
 498:	a6 17       	cp	r26, r22
 49a:	b7 07       	cpc	r27, r23
 49c:	10 f0       	brcs	.+4      	; 0x4a2 <__udivmodhi4_ep>
 49e:	a6 1b       	sub	r26, r22
 4a0:	b7 0b       	sbc	r27, r23

000004a2 <__udivmodhi4_ep>:
 4a2:	88 1f       	adc	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	5a 95       	dec	r21
 4a8:	a9 f7       	brne	.-22     	; 0x494 <__udivmodhi4_loop>
 4aa:	80 95       	com	r24
 4ac:	90 95       	com	r25
 4ae:	bc 01       	movw	r22, r24
 4b0:	cd 01       	movw	r24, r26
 4b2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000554 <_fini>:
 554:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000556 <__funcs_on_exit>:
 556:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000558 <__simulator_exit>:
 558:	08 95       	ret

Disassembly of section .text.exit:

0000051e <exit>:
 51e:	ec 01       	movw	r28, r24
 520:	0e 94 ab 02 	call	0x556	; 0x556 <__funcs_on_exit>
 524:	0e 94 aa 02 	call	0x554	; 0x554 <_fini>
 528:	ce 01       	movw	r24, r28
 52a:	0e 94 ac 02 	call	0x558	; 0x558 <__simulator_exit>
 52e:	ce 01       	movw	r24, r28
 530:	0e 94 a8 02 	call	0x550	; 0x550 <_Exit>

Disassembly of section .text._Exit:

00000550 <_Exit>:
 550:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
