
SlaveDH11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000798  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000798  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000c4  00000000  00000000  000007c7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000088b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011dd  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b4  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069c  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000244  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004dc  00000000  00000000  00002dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000006f6  000006f6  0000078a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003318  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.I2C_Slave_Init 00000014  0000067c  0000067c  00000710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.servo_set_angle 00000032  000005b6  000005b6  0000064a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DHT11_Request 0000002e  000005e8  000005e8  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.DHT11_Response 00000014  00000690  00000690  00000724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.DHT11_ReadByte 0000002e  00000616  00000616  000006aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.DHT11_Read 000000a6  00000376  00000376  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000112  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_24 0000007e  0000041c  0000041c  000004b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.Temperatura_decimal 00000001  0080010d  0080010d  00000798  2**0
                  ALLOC
 24 .bss.Temperatura_entero 00000001  0080010e  0080010e  00000798  2**0
                  ALLOC
 25 .bss.Humedad_decimal 00000001  0080010f  0080010f  00000798  2**0
                  ALLOC
 26 .bss.Humedad_entero 00000001  00800110  00800110  00000798  2**0
                  ALLOC
 27 .bss.valorDH11 00000008  00800105  00800105  00000798  2**0
                  ALLOC
 28 .bss.buffer   00000001  00800111  00800111  00000798  2**0
                  ALLOC
 29 .text         0000000e  000006a4  000006a4  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         000000ce  000002a8  000002a8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text         0000005e  00000514  00000514  000005a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text         0000007a  0000049a  0000049a  0000052e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         0000000c  000006dc  000006dc  00000770  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text         00000006  000006f0  000006f0  00000784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text         0000000e  000006b2  000006b2  00000746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text         0000000e  000006c0  000006c0  00000754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         00000022  00000644  00000644  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         00000044  00000572  00000572  00000606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         0000000e  000006ce  000006ce  00000762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         00000008  000006e8  000006e8  0000077c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         000000d4  000001d4  000001d4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__dummy_fini 00000002  000006fe  000006fe  00000792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_funcs_on_exit 00000002  00000700  00000700  00000794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__dummy_simulator_exit 00000002  00000702  00000702  00000796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.exit    00000016  00000666  00000666  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text._Exit   00000004  000006fa  000006fa  0000078e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
   8:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
   c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  10:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  14:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  18:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  1c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  20:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  24:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  28:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  2c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  30:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  34:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  38:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  3c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  40:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  44:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  48:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  4c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  50:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  54:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  58:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  5c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>
  60:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_24>
  64:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 12       	cpse	r0, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 33 03 	jmp	0x666	; 0x666 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000006f6 <__bad_interrupt>:
 6f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.I2C_Slave_Init:

0000067c <I2C_Slave_Init>:
}
//********************
//Funcion para inicializar I2C Esclavo
//********************
void I2C_Slave_Init(uint8_t adress){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //PINES DE I2C COMO ENTRADAS
 67c:	97 b1       	in	r25, 0x07	; 7
 67e:	9f 7c       	andi	r25, 0xCF	; 207
 680:	97 b9       	out	0x07, r25	; 7
	TWAR = adress <<1; //se asigna la direccion que tendra
 682:	88 0f       	add	r24, r24
 684:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 688:	85 e4       	ldi	r24, 0x45	; 69
 68a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 68e:	08 95       	ret

Disassembly of section .text.servo_set_angle:

000005b6 <servo_set_angle>:


//---Funciones-----------------------------------------------------------------------------------------------------------

void servo_set_angle(uint8_t angle) {
	OCR1A = 1000 + (angle * 11.1); // 1000 µs (0°) a 2000 µs (180°)
 5b6:	68 2f       	mov	r22, r24
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 4f 02 	call	0x49e	; 0x49e <__floatsisf>
 5c2:	2a e9       	ldi	r18, 0x9A	; 154
 5c4:	39 e9       	ldi	r19, 0x99	; 153
 5c6:	41 e3       	ldi	r20, 0x31	; 49
 5c8:	51 e4       	ldi	r21, 0x41	; 65
 5ca:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__mulsf3>
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	4a e7       	ldi	r20, 0x7A	; 122
 5d4:	54 e4       	ldi	r21, 0x44	; 68
 5d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__addsf3>
 5da:	0e 94 8a 02 	call	0x514	; 0x514 <__fixunssfsi>
 5de:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5e2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 5e6:	08 95       	ret

Disassembly of section .text.DHT11_Request:

000005e8 <DHT11_Request>:
}



void DHT11_Request(void) {
	DDRC |= (1 << DDC0);  // Configurar PC0 como salida
 5e8:	87 b1       	in	r24, 0x07	; 7
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PORTC0);  // Enviar señal baja
 5ee:	88 b1       	in	r24, 0x08	; 8
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f4:	2f ef       	ldi	r18, 0xFF	; 255
 5f6:	89 ef       	ldi	r24, 0xF9	; 249
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	21 50       	subi	r18, 0x01	; 1
 5fc:	80 40       	sbci	r24, 0x00	; 0
 5fe:	90 40       	sbci	r25, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <DHT11_Request+0x12>
 602:	00 c0       	rjmp	.+0      	; 0x604 <DHT11_Request+0x1c>
 604:	00 00       	nop
	_delay_ms(20);  // Mantener señal baja al menos 18ms
	PORTC |= (1 << PORTC0);  // Enviar señal alta
 606:	88 b1       	in	r24, 0x08	; 8
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60c:	25 ed       	ldi	r18, 0xD5	; 213
 60e:	2a 95       	dec	r18
 610:	f1 f7       	brne	.-4      	; 0x60e <DHT11_Request+0x26>
 612:	00 00       	nop
 614:	08 95       	ret

Disassembly of section .text.DHT11_Response:

00000690 <DHT11_Response>:
	_delay_us(40);  // Esperar 40us
}

// Configurar el pin como entrada para recibir la respuesta
void DHT11_Response() {
	DDRC &= ~(1 << DDC0);  // Configurar PD2 como entrada
 690:	87 b1       	in	r24, 0x07	; 7
 692:	8e 7f       	andi	r24, 0xFE	; 254
 694:	87 b9       	out	0x07, r24	; 7
	while (PINC & (1 << PINC0));
 696:	30 99       	sbic	0x06, 0	; 6
 698:	fe cf       	rjmp	.-4      	; 0x696 <DHT11_Response+0x6>
	while (!(PINC & (1 << PINC0)));  // Esperar a que el sensor envíe HIGH
 69a:	30 9b       	sbis	0x06, 0	; 6
 69c:	fe cf       	rjmp	.-4      	; 0x69a <DHT11_Response+0xa>
	while (PINC & (1 << PINC0));  // Esperar a que termine la respuesta
 69e:	30 99       	sbic	0x06, 0	; 6
 6a0:	fe cf       	rjmp	.-4      	; 0x69e <DHT11_Response+0xe>
}
 6a2:	08 95       	ret

Disassembly of section .text.DHT11_ReadByte:

00000616 <DHT11_ReadByte>:

// Leer un byte del DHT11
uint8_t DHT11_ReadByte() {
	uint8_t i, data = 0;
 616:	80 e0       	ldi	r24, 0x00	; 0
	for (i = 0; i < 8; i++) {
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	11 c0       	rjmp	.+34     	; 0x63e <DHT11_ReadByte+0x28>
		while (!(PINC & (1 << PINC0)));  // Esperar a que el pin sea HIGH
 61c:	30 9b       	sbis	0x06, 0	; 6
 61e:	fe cf       	rjmp	.-4      	; 0x61c <DHT11_ReadByte+0x6>
 620:	95 ea       	ldi	r25, 0xA5	; 165
 622:	9a 95       	dec	r25
 624:	f1 f7       	brne	.-4      	; 0x622 <DHT11_ReadByte+0xc>
 626:	00 00       	nop
		_delay_us(31);  // Esperar 30us
		if (PINC & (1 << PINC0))  // Si el pin sigue en HIGH después de 30us, es un "1"
 628:	30 9b       	sbis	0x06, 0	; 6
 62a:	05 c0       	rjmp	.+10     	; 0x636 <DHT11_ReadByte+0x20>
		data = (data << 1) | 1;
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	81 60       	ori	r24, 0x01	; 1
 634:	01 c0       	rjmp	.+2      	; 0x638 <DHT11_ReadByte+0x22>
		else
		data = (data << 1);
 636:	88 0f       	add	r24, r24
		while (PINC & (1 << PINC0));  // Esperar a que el pin vuelva a LOW
 638:	30 99       	sbic	0x06, 0	; 6
 63a:	fe cf       	rjmp	.-4      	; 0x638 <DHT11_ReadByte+0x22>
}

// Leer un byte del DHT11
uint8_t DHT11_ReadByte() {
	uint8_t i, data = 0;
	for (i = 0; i < 8; i++) {
 63c:	2f 5f       	subi	r18, 0xFF	; 255
 63e:	28 30       	cpi	r18, 0x08	; 8
 640:	68 f3       	brcs	.-38     	; 0x61c <DHT11_ReadByte+0x6>
		else
		data = (data << 1);
		while (PINC & (1 << PINC0));  // Esperar a que el pin vuelva a LOW
	}
	return data;
}
 642:	08 95       	ret

Disassembly of section .text.DHT11_Read:

00000376 <DHT11_Read>:

// Función para leer el sensor
void DHT11_Read(void) {
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	DHT11_Request();
 37a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DHT11_Request>
	DHT11_Response();
 37e:	0e 94 48 03 	call	0x690	; 0x690 <DHT11_Response>
 
	// Leer 5 bytes de datos
	DHT11_data[0] = DHT11_ReadByte();  // Humedad entera
 382:	0e 94 0b 03 	call	0x616	; 0x616 <DHT11_ReadByte>
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d1 e0       	ldi	r29, 0x01	; 1
 38a:	88 83       	st	Y, r24
	DHT11_data[1] = DHT11_ReadByte();  // Humedad decimal
 38c:	0e 94 0b 03 	call	0x616	; 0x616 <DHT11_ReadByte>
 390:	89 83       	std	Y+1, r24	; 0x01
	DHT11_data[2] = DHT11_ReadByte();  // Temperatura entera
 392:	0e 94 0b 03 	call	0x616	; 0x616 <DHT11_ReadByte>
 396:	8a 83       	std	Y+2, r24	; 0x02
	DHT11_data[3] = DHT11_ReadByte();  // Temperatura decimal
 398:	0e 94 0b 03 	call	0x616	; 0x616 <DHT11_ReadByte>
 39c:	8b 83       	std	Y+3, r24	; 0x03
	DHT11_data[4] = DHT11_ReadByte();  // Checksum
 39e:	0e 94 0b 03 	call	0x616	; 0x616 <DHT11_ReadByte>
 3a2:	8c 83       	std	Y+4, r24	; 0x04

	// Verificar checksum
	if (((DHT11_data[0] + DHT11_data[1] + DHT11_data[2] + DHT11_data[3]) &0xFF) == DHT11_data[4]){
 3a4:	28 81       	ld	r18, Y
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	82 0f       	add	r24, r18
 3ac:	91 1d       	adc	r25, r1
 3ae:	2a 81       	ldd	r18, Y+2	; 0x02
 3b0:	82 0f       	add	r24, r18
 3b2:	91 1d       	adc	r25, r1
 3b4:	2b 81       	ldd	r18, Y+3	; 0x03
 3b6:	82 0f       	add	r24, r18
 3b8:	91 1d       	adc	r25, r1
 3ba:	99 27       	eor	r25, r25
 3bc:	2c 81       	ldd	r18, Y+4	; 0x04
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	82 17       	cp	r24, r18
 3c2:	93 07       	cpc	r25, r19
 3c4:	a9 f4       	brne	.+42     	; 0x3f0 <DHT11_Read+0x7a>
	// Datos válidos
	   PORTC |= (1<<PORTC1);
 3c6:	88 b1       	in	r24, 0x08	; 8
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	88 b9       	out	0x08, r24	; 8
	   valorDH11 =  1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_end>
 3d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_end+0x1>
 3d6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_end+0x2>
 3da:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_end+0x3>
 3de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_end+0x4>
 3e2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_end+0x5>
 3e6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_end+0x6>
 3ea:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_end+0x7>
 3ee:	13 c0       	rjmp	.+38     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	}  
	else{ // Error en la transmisión
		PORTC &= ~(1<<PORTC1);
 3f0:	88 b1       	in	r24, 0x08	; 8
 3f2:	8d 7f       	andi	r24, 0xFD	; 253
 3f4:	88 b9       	out	0x08, r24	; 8
	    valorDH11= 0;
 3f6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_end>
 3fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_end+0x1>
 3fe:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_end+0x2>
 402:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <_end+0x3>
 406:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <_end+0x4>
 40a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_end+0x5>
 40e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_end+0x6>
 412:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <_end+0x7>
		}  
	

}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
void servo_set_angle(uint8_t angle); //Función para setear ángulo del servo


int main(void)
{
	DDRB |= (1<<DDB5);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB5);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<DDB1);
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB2);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	84 b9       	out	0x04, r24	; 4

	
	
	DDRC |= (1<<DDC1);
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<PORTC1);
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	88 b9       	out	0x08, r24	; 8
	//initPorts();
	
	I2C_Slave_Init(SlaveAddress);	
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	0e 94 3e 03 	call	0x67c	; 0x67c <I2C_Slave_Init>
	
	//Configuración de Timer 1 (Prescaler 8 = 2MHz)
	TCCR1B |= (1 << CS11); // Prescaler 8
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
	TCNT1 = 0; // Inicia en 0
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	// Configuración PWM para servo (Timer1, Fast PWM, 50 Hz)
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
  fe:	a0 e8       	ldi	r26, 0x80	; 128
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	8c 91       	ld	r24, X
 104:	82 68       	ori	r24, 0x82	; 130
 106:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 108:	80 81       	ld	r24, Z
 10a:	88 61       	ori	r24, 0x18	; 24
 10c:	80 83       	st	Z, r24
	ICR1 = 20000; // 20 ms (50 Hz)
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 116:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//initServoPWM();

		
		
	sei();		// Habilitar Interrupciones
 11a:	78 94       	sei
	
	while (1)
	{
		DHT11_Read();
 11c:	0e 94 bb 01 	call	0x376	; 0x376 <DHT11_Read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	91 e6       	ldi	r25, 0x61	; 97
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x64>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x6e>
 130:	00 00       	nop
		_delay_ms(2000);
		
		// Iniciando conversión del sensor de humedad DHT11
		Humedad_entero = DHT11_data[0];
 132:	e0 e0       	ldi	r30, 0x00	; 0
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	80 81       	ld	r24, Z
 138:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Humedad_entero>
		Humedad_decimal = DHT11_data[1];
 13c:	91 81       	ldd	r25, Z+1	; 0x01
 13e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Humedad_decimal>
		Temperatura_entero  = DHT11_data[2];
 142:	92 81       	ldd	r25, Z+2	; 0x02
 144:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <Temperatura_entero>
		Temperatura_decimal = DHT11_data[3];
 148:	93 81       	ldd	r25, Z+3	; 0x03
 14a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <Temperatura_decimal>
	
		//Si el valor de humedad baja del 40%, se enciende el rociador de la planta
		if (Humedad_entero <= 40){
 14e:	89 32       	cpi	r24, 0x29	; 41
 150:	b0 f5       	brcc	.+108    	; 0x1be <main+0xfc>
			
			servo_set_angle(0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 db 02 	call	0x5b6	; 0x5b6 <servo_set_angle>
			servo_set_angle(45);
 158:	8d e2       	ldi	r24, 0x2D	; 45
 15a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <servo_set_angle>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	81 ee       	ldi	r24, 0xE1	; 225
 162:	94 e0       	ldi	r25, 0x04	; 4
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0xa2>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xac>
 16e:	00 00       	nop
			_delay_ms(100);
			servo_set_angle(90);
 170:	8a e5       	ldi	r24, 0x5A	; 90
 172:	0e 94 db 02 	call	0x5b6	; 0x5b6 <servo_set_angle>
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	81 ee       	ldi	r24, 0xE1	; 225
 17a:	94 e0       	ldi	r25, 0x04	; 4
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xba>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xc4>
 186:	00 00       	nop
			_delay_ms(100);
			servo_set_angle(120);
 188:	88 e7       	ldi	r24, 0x78	; 120
 18a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <servo_set_angle>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	94 e0       	ldi	r25, 0x04	; 4
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xd2>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xdc>
 19e:	00 00       	nop
			_delay_ms(100);
			servo_set_angle(180);
 1a0:	84 eb       	ldi	r24, 0xB4	; 180
 1a2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <servo_set_angle>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	81 ee       	ldi	r24, 0xE1	; 225
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0xea>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xf4>
 1b6:	00 00       	nop
			_delay_ms(100);
			servo_set_angle(0);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 db 02 	call	0x5b6	; 0x5b6 <servo_set_angle>
			
		}
	
		
		if(buffer == 'R'){
 1be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <buffer>
 1c2:	82 35       	cpi	r24, 0x52	; 82
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <main+0x106>
 1c6:	aa cf       	rjmp	.-172    	; 0x11c <main+0x5a>
			PINB |= (1<<PINB5);
 1c8:	83 b1       	in	r24, 0x03	; 3
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	83 b9       	out	0x03, r24	; 3
			buffer = 0;
 1ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <buffer>
 1d2:	a4 cf       	rjmp	.-184    	; 0x11c <main+0x5a>

Disassembly of section .text.__vector_24:

0000041c <__vector_24>:




//---Interrupciones------------------------------------------------------------------------------------------
ISR(TWI_vect){
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	8f 93       	push	r24
 428:	ef 93       	push	r30
 42a:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 42c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 430:	8c 7f       	andi	r24, 0xFC	; 252
	switch(estado){
 432:	80 38       	cpi	r24, 0x80	; 128
 434:	99 f0       	breq	.+38     	; 0x45c <__vector_24+0x40>
 436:	28 f4       	brcc	.+10     	; 0x442 <__vector_24+0x26>
 438:	80 36       	cpi	r24, 0x60	; 96
 43a:	51 f0       	breq	.+20     	; 0x450 <__vector_24+0x34>
 43c:	80 37       	cpi	r24, 0x70	; 112
 43e:	41 f0       	breq	.+16     	; 0x450 <__vector_24+0x34>
 440:	1f c0       	rjmp	.+62     	; 0x480 <__vector_24+0x64>
 442:	88 3a       	cpi	r24, 0xA8	; 168
 444:	a9 f0       	breq	.+42     	; 0x470 <__vector_24+0x54>
 446:	88 3b       	cpi	r24, 0xB8	; 184
 448:	99 f0       	breq	.+38     	; 0x470 <__vector_24+0x54>
 44a:	80 39       	cpi	r24, 0x90	; 144
 44c:	c9 f4       	brne	.+50     	; 0x480 <__vector_24+0x64>
 44e:	06 c0       	rjmp	.+12     	; 0x45c <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |= (1<< TWINT);
 450:	ec eb       	ldi	r30, 0xBC	; 188
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	80 68       	ori	r24, 0x80	; 128
 458:	80 83       	st	Z, r24
		break;
 45a:	17 c0       	rjmp	.+46     	; 0x48a <__vector_24+0x6e>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 45c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 460:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <buffer>
		TWCR |= (1<< TWINT); // Se limpia la bandera
 464:	ec eb       	ldi	r30, 0xBC	; 188
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	80 68       	ori	r24, 0x80	; 128
 46c:	80 83       	st	Z, r24
		break;
 46e:	0d c0       	rjmp	.+26     	; 0x48a <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
		TWDR = Humedad_entero; // Cargar el dato
 470:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Humedad_entero>
 474:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWEN)|(1 << TWIE)|(1 << TWINT)|(1 << TWEA); // Inicia el envio
 478:	85 ec       	ldi	r24, 0xC5	; 197
 47a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 47e:	05 c0       	rjmp	.+10     	; 0x48a <__vector_24+0x6e>
		default: // Se libera el bus de cualquier error
		TWCR |= (1<< TWINT)|(1<<TWSTO);
 480:	ec eb       	ldi	r30, 0xBC	; 188
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	80 69       	ori	r24, 0x90	; 144
 488:	80 83       	st	Z, r24
		break;
	}
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	8f 91       	pop	r24
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

Disassembly of section .text:

000006a4 <__subsf3>:
 6a4:	50 58       	subi	r21, 0x80	; 128

000006a6 <__addsf3>:
 6a6:	bb 27       	eor	r27, r27
 6a8:	aa 27       	eor	r26, r26
 6aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3x>
 6ae:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_round>

Disassembly of section .text:

000002a8 <__addsf3x>:
 2a8:	11 c0       	rjmp	.+34     	; 0x2cc <__addsf3x+0x24>
 2aa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 2ae:	38 f0       	brcs	.+14     	; 0x2be <__addsf3x+0x16>
 2b0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 2b4:	20 f0       	brcs	.+8      	; 0x2be <__addsf3x+0x16>
 2b6:	39 f4       	brne	.+14     	; 0x2c6 <__addsf3x+0x1e>
 2b8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ba:	19 f4       	brne	.+6      	; 0x2c2 <__addsf3x+0x1a>
 2bc:	26 f4       	brtc	.+8      	; 0x2c6 <__addsf3x+0x1e>
 2be:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_nan>
 2c2:	0e f4       	brtc	.+2      	; 0x2c6 <__addsf3x+0x1e>
 2c4:	e0 95       	com	r30
 2c6:	e7 fb       	bst	r30, 7
 2c8:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_inf>
 2cc:	e9 2f       	mov	r30, r25
 2ce:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_split3>
 2d2:	58 f3       	brcs	.-42     	; 0x2aa <__addsf3x+0x2>
 2d4:	ba 17       	cp	r27, r26
 2d6:	62 07       	cpc	r22, r18
 2d8:	73 07       	cpc	r23, r19
 2da:	84 07       	cpc	r24, r20
 2dc:	95 07       	cpc	r25, r21
 2de:	20 f0       	brcs	.+8      	; 0x2e8 <__addsf3x+0x40>
 2e0:	79 f4       	brne	.+30     	; 0x300 <__addsf3x+0x58>
 2e2:	a6 f5       	brtc	.+104    	; 0x34c <__addsf3x+0xa4>
 2e4:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_zero>
 2e8:	0e f4       	brtc	.+2      	; 0x2ec <__addsf3x+0x44>
 2ea:	e0 95       	com	r30
 2ec:	0b 2e       	mov	r0, r27
 2ee:	ba 2f       	mov	r27, r26
 2f0:	a0 2d       	mov	r26, r0
 2f2:	0b 01       	movw	r0, r22
 2f4:	b9 01       	movw	r22, r18
 2f6:	90 01       	movw	r18, r0
 2f8:	0c 01       	movw	r0, r24
 2fa:	ca 01       	movw	r24, r20
 2fc:	a0 01       	movw	r20, r0
 2fe:	11 24       	eor	r1, r1
 300:	ff 27       	eor	r31, r31
 302:	59 1b       	sub	r21, r25
 304:	99 f0       	breq	.+38     	; 0x32c <__addsf3x+0x84>
 306:	59 3f       	cpi	r21, 0xF9	; 249
 308:	50 f4       	brcc	.+20     	; 0x31e <__addsf3x+0x76>
 30a:	50 3e       	cpi	r21, 0xE0	; 224
 30c:	68 f1       	brcs	.+90     	; 0x368 <__addsf3x+0xc0>
 30e:	1a 16       	cp	r1, r26
 310:	f0 40       	sbci	r31, 0x00	; 0
 312:	a2 2f       	mov	r26, r18
 314:	23 2f       	mov	r18, r19
 316:	34 2f       	mov	r19, r20
 318:	44 27       	eor	r20, r20
 31a:	58 5f       	subi	r21, 0xF8	; 248
 31c:	f3 cf       	rjmp	.-26     	; 0x304 <__addsf3x+0x5c>
 31e:	46 95       	lsr	r20
 320:	37 95       	ror	r19
 322:	27 95       	ror	r18
 324:	a7 95       	ror	r26
 326:	f0 40       	sbci	r31, 0x00	; 0
 328:	53 95       	inc	r21
 32a:	c9 f7       	brne	.-14     	; 0x31e <__addsf3x+0x76>
 32c:	7e f4       	brtc	.+30     	; 0x34c <__addsf3x+0xa4>
 32e:	1f 16       	cp	r1, r31
 330:	ba 0b       	sbc	r27, r26
 332:	62 0b       	sbc	r22, r18
 334:	73 0b       	sbc	r23, r19
 336:	84 0b       	sbc	r24, r20
 338:	ba f0       	brmi	.+46     	; 0x368 <__addsf3x+0xc0>
 33a:	91 50       	subi	r25, 0x01	; 1
 33c:	a1 f0       	breq	.+40     	; 0x366 <__addsf3x+0xbe>
 33e:	ff 0f       	add	r31, r31
 340:	bb 1f       	adc	r27, r27
 342:	66 1f       	adc	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	88 1f       	adc	r24, r24
 348:	c2 f7       	brpl	.-16     	; 0x33a <__addsf3x+0x92>
 34a:	0e c0       	rjmp	.+28     	; 0x368 <__addsf3x+0xc0>
 34c:	ba 0f       	add	r27, r26
 34e:	62 1f       	adc	r22, r18
 350:	73 1f       	adc	r23, r19
 352:	84 1f       	adc	r24, r20
 354:	48 f4       	brcc	.+18     	; 0x368 <__addsf3x+0xc0>
 356:	87 95       	ror	r24
 358:	77 95       	ror	r23
 35a:	67 95       	ror	r22
 35c:	b7 95       	ror	r27
 35e:	f7 95       	ror	r31
 360:	9e 3f       	cpi	r25, 0xFE	; 254
 362:	08 f0       	brcs	.+2      	; 0x366 <__addsf3x+0xbe>
 364:	b0 cf       	rjmp	.-160    	; 0x2c6 <__addsf3x+0x1e>
 366:	93 95       	inc	r25
 368:	88 0f       	add	r24, r24
 36a:	08 f0       	brcs	.+2      	; 0x36e <__addsf3x+0xc6>
 36c:	99 27       	eor	r25, r25
 36e:	ee 0f       	add	r30, r30
 370:	97 95       	ror	r25
 372:	87 95       	ror	r24
 374:	08 95       	ret

Disassembly of section .text:

00000514 <__fixunssfsi>:
 514:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_splitA>
 518:	88 f0       	brcs	.+34     	; 0x53c <__fixunssfsi+0x28>
 51a:	9f 57       	subi	r25, 0x7F	; 127
 51c:	98 f0       	brcs	.+38     	; 0x544 <__fixunssfsi+0x30>
 51e:	b9 2f       	mov	r27, r25
 520:	99 27       	eor	r25, r25
 522:	b7 51       	subi	r27, 0x17	; 23
 524:	b0 f0       	brcs	.+44     	; 0x552 <__fixunssfsi+0x3e>
 526:	e1 f0       	breq	.+56     	; 0x560 <__fixunssfsi+0x4c>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	1a f0       	brmi	.+6      	; 0x538 <__fixunssfsi+0x24>
 532:	ba 95       	dec	r27
 534:	c9 f7       	brne	.-14     	; 0x528 <__fixunssfsi+0x14>
 536:	14 c0       	rjmp	.+40     	; 0x560 <__fixunssfsi+0x4c>
 538:	b1 30       	cpi	r27, 0x01	; 1
 53a:	91 f0       	breq	.+36     	; 0x560 <__fixunssfsi+0x4c>
 53c:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fp_zero>
 540:	b1 e0       	ldi	r27, 0x01	; 1
 542:	08 95       	ret
 544:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_zero>
 548:	67 2f       	mov	r22, r23
 54a:	78 2f       	mov	r23, r24
 54c:	88 27       	eor	r24, r24
 54e:	b8 5f       	subi	r27, 0xF8	; 248
 550:	39 f0       	breq	.+14     	; 0x560 <__fixunssfsi+0x4c>
 552:	b9 3f       	cpi	r27, 0xF9	; 249
 554:	cc f3       	brlt	.-14     	; 0x548 <__fixunssfsi+0x34>
 556:	86 95       	lsr	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b3 95       	inc	r27
 55e:	d9 f7       	brne	.-10     	; 0x556 <__fixunssfsi+0x42>
 560:	3e f4       	brtc	.+14     	; 0x570 <__fixunssfsi+0x5c>
 562:	90 95       	com	r25
 564:	80 95       	com	r24
 566:	70 95       	com	r23
 568:	61 95       	neg	r22
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	08 95       	ret

Disassembly of section .text:

0000049a <__floatunsisf>:
 49a:	e8 94       	clt
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <__floatsisf+0x12>

0000049e <__floatsisf>:
 49e:	97 fb       	bst	r25, 7
 4a0:	3e f4       	brtc	.+14     	; 0x4b0 <__floatsisf+0x12>
 4a2:	90 95       	com	r25
 4a4:	80 95       	com	r24
 4a6:	70 95       	com	r23
 4a8:	61 95       	neg	r22
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	99 23       	and	r25, r25
 4b2:	a9 f0       	breq	.+42     	; 0x4de <__floatsisf+0x40>
 4b4:	f9 2f       	mov	r31, r25
 4b6:	96 e9       	ldi	r25, 0x96	; 150
 4b8:	bb 27       	eor	r27, r27
 4ba:	93 95       	inc	r25
 4bc:	f6 95       	lsr	r31
 4be:	87 95       	ror	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b7 95       	ror	r27
 4c6:	f1 11       	cpse	r31, r1
 4c8:	f8 cf       	rjmp	.-16     	; 0x4ba <__floatsisf+0x1c>
 4ca:	fa f4       	brpl	.+62     	; 0x50a <__floatsisf+0x6c>
 4cc:	bb 0f       	add	r27, r27
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__floatsisf+0x36>
 4d0:	60 ff       	sbrs	r22, 0
 4d2:	1b c0       	rjmp	.+54     	; 0x50a <__floatsisf+0x6c>
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	16 c0       	rjmp	.+44     	; 0x50a <__floatsisf+0x6c>
 4de:	88 23       	and	r24, r24
 4e0:	11 f0       	breq	.+4      	; 0x4e6 <__floatsisf+0x48>
 4e2:	96 e9       	ldi	r25, 0x96	; 150
 4e4:	11 c0       	rjmp	.+34     	; 0x508 <__floatsisf+0x6a>
 4e6:	77 23       	and	r23, r23
 4e8:	21 f0       	breq	.+8      	; 0x4f2 <__floatsisf+0x54>
 4ea:	9e e8       	ldi	r25, 0x8E	; 142
 4ec:	87 2f       	mov	r24, r23
 4ee:	76 2f       	mov	r23, r22
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__floatsisf+0x5e>
 4f2:	66 23       	and	r22, r22
 4f4:	71 f0       	breq	.+28     	; 0x512 <__floatsisf+0x74>
 4f6:	96 e8       	ldi	r25, 0x86	; 134
 4f8:	86 2f       	mov	r24, r22
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	2a f0       	brmi	.+10     	; 0x50a <__floatsisf+0x6c>
 500:	9a 95       	dec	r25
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	da f7       	brpl	.-10     	; 0x500 <__floatsisf+0x62>
 50a:	88 0f       	add	r24, r24
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	97 f9       	bld	r25, 7
 512:	08 95       	ret

Disassembly of section .text:

000006dc <__fp_inf>:
 6dc:	97 f9       	bld	r25, 7
 6de:	9f 67       	ori	r25, 0x7F	; 127
 6e0:	80 e8       	ldi	r24, 0x80	; 128
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	08 95       	ret

Disassembly of section .text:

000006f0 <__fp_nan>:
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	80 ec       	ldi	r24, 0xC0	; 192
 6f4:	08 95       	ret

Disassembly of section .text:

000006b2 <__fp_pscA>:
 6b2:	00 24       	eor	r0, r0
 6b4:	0a 94       	dec	r0
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	18 06       	cpc	r1, r24
 6bc:	09 06       	cpc	r0, r25
 6be:	08 95       	ret

Disassembly of section .text:

000006c0 <__fp_pscB>:
 6c0:	00 24       	eor	r0, r0
 6c2:	0a 94       	dec	r0
 6c4:	12 16       	cp	r1, r18
 6c6:	13 06       	cpc	r1, r19
 6c8:	14 06       	cpc	r1, r20
 6ca:	05 06       	cpc	r0, r21
 6cc:	08 95       	ret

Disassembly of section .text:

00000644 <__fp_round>:
 644:	09 2e       	mov	r0, r25
 646:	03 94       	inc	r0
 648:	00 0c       	add	r0, r0
 64a:	11 f4       	brne	.+4      	; 0x650 <__fp_round+0xc>
 64c:	88 23       	and	r24, r24
 64e:	52 f0       	brmi	.+20     	; 0x664 <__fp_round+0x20>
 650:	bb 0f       	add	r27, r27
 652:	40 f4       	brcc	.+16     	; 0x664 <__fp_round+0x20>
 654:	bf 2b       	or	r27, r31
 656:	11 f4       	brne	.+4      	; 0x65c <__fp_round+0x18>
 658:	60 ff       	sbrs	r22, 0
 65a:	04 c0       	rjmp	.+8      	; 0x664 <__fp_round+0x20>
 65c:	6f 5f       	subi	r22, 0xFF	; 255
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	08 95       	ret

Disassembly of section .text:

00000572 <__fp_split3>:
 572:	57 fd       	sbrc	r21, 7
 574:	90 58       	subi	r25, 0x80	; 128
 576:	44 0f       	add	r20, r20
 578:	55 1f       	adc	r21, r21
 57a:	59 f0       	breq	.+22     	; 0x592 <__fp_splitA+0x10>
 57c:	5f 3f       	cpi	r21, 0xFF	; 255
 57e:	71 f0       	breq	.+28     	; 0x59c <__fp_splitA+0x1a>
 580:	47 95       	ror	r20

00000582 <__fp_splitA>:
 582:	88 0f       	add	r24, r24
 584:	97 fb       	bst	r25, 7
 586:	99 1f       	adc	r25, r25
 588:	61 f0       	breq	.+24     	; 0x5a2 <__fp_splitA+0x20>
 58a:	9f 3f       	cpi	r25, 0xFF	; 255
 58c:	79 f0       	breq	.+30     	; 0x5ac <__fp_splitA+0x2a>
 58e:	87 95       	ror	r24
 590:	08 95       	ret
 592:	12 16       	cp	r1, r18
 594:	13 06       	cpc	r1, r19
 596:	14 06       	cpc	r1, r20
 598:	55 1f       	adc	r21, r21
 59a:	f2 cf       	rjmp	.-28     	; 0x580 <__fp_split3+0xe>
 59c:	46 95       	lsr	r20
 59e:	f1 df       	rcall	.-30     	; 0x582 <__fp_splitA>
 5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <__fp_splitA+0x30>
 5a2:	16 16       	cp	r1, r22
 5a4:	17 06       	cpc	r1, r23
 5a6:	18 06       	cpc	r1, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	f1 cf       	rjmp	.-30     	; 0x58e <__fp_splitA+0xc>
 5ac:	86 95       	lsr	r24
 5ae:	71 05       	cpc	r23, r1
 5b0:	61 05       	cpc	r22, r1
 5b2:	08 94       	sec
 5b4:	08 95       	ret

Disassembly of section .text:

000006ce <__fp_zero>:
 6ce:	e8 94       	clt

000006d0 <__fp_szero>:
 6d0:	bb 27       	eor	r27, r27
 6d2:	66 27       	eor	r22, r22
 6d4:	77 27       	eor	r23, r23
 6d6:	cb 01       	movw	r24, r22
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret

Disassembly of section .text:

000006e8 <__mulsf3>:
 6e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__mulsf3x>
 6ec:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_round>

Disassembly of section .text:

000001d4 <__mulsf3x>:
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <__mulsf3x+0x20>
 1d6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 1da:	38 f0       	brcs	.+14     	; 0x1ea <__mulsf3x+0x16>
 1dc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 1e0:	20 f0       	brcs	.+8      	; 0x1ea <__mulsf3x+0x16>
 1e2:	95 23       	and	r25, r21
 1e4:	11 f0       	breq	.+4      	; 0x1ea <__mulsf3x+0x16>
 1e6:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_inf>
 1ea:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__fp_nan>
 1ee:	11 24       	eor	r1, r1
 1f0:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__fp_szero>
 1f4:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_split3>
 1f8:	70 f3       	brcs	.-36     	; 0x1d6 <__mulsf3x+0x2>

000001fa <__mulsf3_pse>:
 1fa:	95 9f       	mul	r25, r21
 1fc:	c1 f3       	breq	.-16     	; 0x1ee <__mulsf3x+0x1a>
 1fe:	95 0f       	add	r25, r21
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	55 1f       	adc	r21, r21
 204:	62 9f       	mul	r22, r18
 206:	f0 01       	movw	r30, r0
 208:	72 9f       	mul	r23, r18
 20a:	bb 27       	eor	r27, r27
 20c:	f0 0d       	add	r31, r0
 20e:	b1 1d       	adc	r27, r1
 210:	63 9f       	mul	r22, r19
 212:	aa 27       	eor	r26, r26
 214:	f0 0d       	add	r31, r0
 216:	b1 1d       	adc	r27, r1
 218:	aa 1f       	adc	r26, r26
 21a:	64 9f       	mul	r22, r20
 21c:	66 27       	eor	r22, r22
 21e:	b0 0d       	add	r27, r0
 220:	a1 1d       	adc	r26, r1
 222:	66 1f       	adc	r22, r22
 224:	82 9f       	mul	r24, r18
 226:	22 27       	eor	r18, r18
 228:	b0 0d       	add	r27, r0
 22a:	a1 1d       	adc	r26, r1
 22c:	62 1f       	adc	r22, r18
 22e:	73 9f       	mul	r23, r19
 230:	b0 0d       	add	r27, r0
 232:	a1 1d       	adc	r26, r1
 234:	62 1f       	adc	r22, r18
 236:	83 9f       	mul	r24, r19
 238:	a0 0d       	add	r26, r0
 23a:	61 1d       	adc	r22, r1
 23c:	22 1f       	adc	r18, r18
 23e:	74 9f       	mul	r23, r20
 240:	33 27       	eor	r19, r19
 242:	a0 0d       	add	r26, r0
 244:	61 1d       	adc	r22, r1
 246:	23 1f       	adc	r18, r19
 248:	84 9f       	mul	r24, r20
 24a:	60 0d       	add	r22, r0
 24c:	21 1d       	adc	r18, r1
 24e:	82 2f       	mov	r24, r18
 250:	76 2f       	mov	r23, r22
 252:	6a 2f       	mov	r22, r26
 254:	11 24       	eor	r1, r1
 256:	9f 57       	subi	r25, 0x7F	; 127
 258:	50 40       	sbci	r21, 0x00	; 0
 25a:	9a f0       	brmi	.+38     	; 0x282 <__mulsf3_pse+0x88>
 25c:	f1 f0       	breq	.+60     	; 0x29a <__mulsf3_pse+0xa0>
 25e:	88 23       	and	r24, r24
 260:	4a f0       	brmi	.+18     	; 0x274 <__mulsf3_pse+0x7a>
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	bb 1f       	adc	r27, r27
 268:	66 1f       	adc	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	88 1f       	adc	r24, r24
 26e:	91 50       	subi	r25, 0x01	; 1
 270:	50 40       	sbci	r21, 0x00	; 0
 272:	a9 f7       	brne	.-22     	; 0x25e <__mulsf3_pse+0x64>
 274:	9e 3f       	cpi	r25, 0xFE	; 254
 276:	51 05       	cpc	r21, r1
 278:	80 f0       	brcs	.+32     	; 0x29a <__mulsf3_pse+0xa0>
 27a:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_inf>
 27e:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__fp_szero>
 282:	5f 3f       	cpi	r21, 0xFF	; 255
 284:	e4 f3       	brlt	.-8      	; 0x27e <__mulsf3_pse+0x84>
 286:	98 3e       	cpi	r25, 0xE8	; 232
 288:	d4 f3       	brlt	.-12     	; 0x27e <__mulsf3_pse+0x84>
 28a:	86 95       	lsr	r24
 28c:	77 95       	ror	r23
 28e:	67 95       	ror	r22
 290:	b7 95       	ror	r27
 292:	f7 95       	ror	r31
 294:	e7 95       	ror	r30
 296:	9f 5f       	subi	r25, 0xFF	; 255
 298:	c1 f7       	brne	.-16     	; 0x28a <__mulsf3_pse+0x90>
 29a:	fe 2b       	or	r31, r30
 29c:	88 0f       	add	r24, r24
 29e:	91 1d       	adc	r25, r1
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	97 f9       	bld	r25, 7
 2a6:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000006fe <_fini>:
 6fe:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000700 <__funcs_on_exit>:
 700:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000702 <__simulator_exit>:
 702:	08 95       	ret

Disassembly of section .text.exit:

00000666 <exit>:
 666:	ec 01       	movw	r28, r24
 668:	0e 94 80 03 	call	0x700	; 0x700 <__funcs_on_exit>
 66c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <_fini>
 670:	ce 01       	movw	r24, r28
 672:	0e 94 81 03 	call	0x702	; 0x702 <__simulator_exit>
 676:	ce 01       	movw	r24, r28
 678:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Exit>

Disassembly of section .text._Exit:

000006fa <_Exit>:
 6fa:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
