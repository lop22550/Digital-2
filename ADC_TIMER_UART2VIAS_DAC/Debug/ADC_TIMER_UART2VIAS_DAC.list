
ADC_TIMER_UART2VIAS_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080085d0  080085d0  000095d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b4  080089b4  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089b4  080089b4  000099b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089bc  080089bc  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089bc  080089bc  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089c0  080089c0  000099c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080089c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001dc  08008ba0  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08008ba0  0000a4d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010432  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250f  00000000  00000000  0001a63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf0  00000000  00000000  0001daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246a6  00000000  00000000  0001e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123ae  00000000  00000000  00042d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0ebe  00000000  00000000  000550e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135fa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005380  00000000  00000000  00135fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0013b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085b4 	.word	0x080085b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080085b4 	.word	0x080085b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9be 	b.w	8000fe0 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	468e      	mov	lr, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	4688      	mov	r8, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	d962      	bls.n	8000dc4 <__udivmoddi4+0xdc>
 8000cfe:	fab2 f682 	clz	r6, r2
 8000d02:	b14e      	cbz	r6, 8000d18 <__udivmoddi4+0x30>
 8000d04:	f1c6 0320 	rsb	r3, r6, #32
 8000d08:	fa01 f806 	lsl.w	r8, r1, r6
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	40b7      	lsls	r7, r6
 8000d12:	ea43 0808 	orr.w	r8, r3, r8
 8000d16:	40b4      	lsls	r4, r6
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	fa1f fc87 	uxth.w	ip, r7
 8000d20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d24:	0c23      	lsrs	r3, r4, #16
 8000d26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d3c:	f080 80ea 	bcs.w	8000f14 <__udivmoddi4+0x22c>
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f240 80e7 	bls.w	8000f14 <__udivmoddi4+0x22c>
 8000d46:	3902      	subs	r1, #2
 8000d48:	443b      	add	r3, r7
 8000d4a:	1a9a      	subs	r2, r3, r2
 8000d4c:	b2a3      	uxth	r3, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5e:	459c      	cmp	ip, r3
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0x8e>
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d68:	f080 80d6 	bcs.w	8000f18 <__udivmoddi4+0x230>
 8000d6c:	459c      	cmp	ip, r3
 8000d6e:	f240 80d3 	bls.w	8000f18 <__udivmoddi4+0x230>
 8000d72:	443b      	add	r3, r7
 8000d74:	3802      	subs	r0, #2
 8000d76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7a:	eba3 030c 	sub.w	r3, r3, ip
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40f3      	lsrs	r3, r6
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xb6>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb0>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x14c>
 8000da6:	4573      	cmp	r3, lr
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xc8>
 8000daa:	4282      	cmp	r2, r0
 8000dac:	f200 8105 	bhi.w	8000fba <__udivmoddi4+0x2d2>
 8000db0:	1a84      	subs	r4, r0, r2
 8000db2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	4690      	mov	r8, r2
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d0e5      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000dc2:	e7e2      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f000 8090 	beq.w	8000eea <__udivmoddi4+0x202>
 8000dca:	fab2 f682 	clz	r6, r2
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f040 80a4 	bne.w	8000f1c <__udivmoddi4+0x234>
 8000dd4:	1a8a      	subs	r2, r1, r2
 8000dd6:	0c03      	lsrs	r3, r0, #16
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	b280      	uxth	r0, r0
 8000dde:	b2bc      	uxth	r4, r7
 8000de0:	2101      	movs	r1, #1
 8000de2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000de6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dee:	fb04 f20c 	mul.w	r2, r4, ip
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x11e>
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x11c>
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	f200 80e0 	bhi.w	8000fc4 <__udivmoddi4+0x2dc>
 8000e04:	46c4      	mov	ip, r8
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e14:	fb02 f404 	mul.w	r4, r2, r4
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x144>
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x142>
 8000e24:	429c      	cmp	r4, r3
 8000e26:	f200 80ca 	bhi.w	8000fbe <__udivmoddi4+0x2d6>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	1b1b      	subs	r3, r3, r4
 8000e2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa0e f401 	lsl.w	r4, lr, r1
 8000e44:	fa20 f306 	lsr.w	r3, r0, r6
 8000e48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e50:	4323      	orrs	r3, r4
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	fa1f fc87 	uxth.w	ip, r7
 8000e5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e5e:	0c1c      	lsrs	r4, r3, #16
 8000e60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d909      	bls.n	8000e88 <__udivmoddi4+0x1a0>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e7a:	f080 809c 	bcs.w	8000fb6 <__udivmoddi4+0x2ce>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	f240 8099 	bls.w	8000fb6 <__udivmoddi4+0x2ce>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	eba4 040e 	sub.w	r4, r4, lr
 8000e8c:	fa1f fe83 	uxth.w	lr, r3
 8000e90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e94:	fb09 4413 	mls	r4, r9, r3, r4
 8000e98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea0:	45a4      	cmp	ip, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1ce>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eaa:	f080 8082 	bcs.w	8000fb2 <__udivmoddi4+0x2ca>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d97f      	bls.n	8000fb2 <__udivmoddi4+0x2ca>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eba:	eba4 040c 	sub.w	r4, r4, ip
 8000ebe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ec2:	4564      	cmp	r4, ip
 8000ec4:	4673      	mov	r3, lr
 8000ec6:	46e1      	mov	r9, ip
 8000ec8:	d362      	bcc.n	8000f90 <__udivmoddi4+0x2a8>
 8000eca:	d05f      	beq.n	8000f8c <__udivmoddi4+0x2a4>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x1fe>
 8000ece:	ebb8 0203 	subs.w	r2, r8, r3
 8000ed2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	fa22 f301 	lsr.w	r3, r2, r1
 8000ede:	431e      	orrs	r6, r3
 8000ee0:	40cc      	lsrs	r4, r1
 8000ee2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	e74f      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000eea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eee:	0c01      	lsrs	r1, r0, #16
 8000ef0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ef4:	b280      	uxth	r0, r0
 8000ef6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000efa:	463b      	mov	r3, r7
 8000efc:	4638      	mov	r0, r7
 8000efe:	463c      	mov	r4, r7
 8000f00:	46b8      	mov	r8, r7
 8000f02:	46be      	mov	lr, r7
 8000f04:	2620      	movs	r6, #32
 8000f06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f0a:	eba2 0208 	sub.w	r2, r2, r8
 8000f0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f12:	e766      	b.n	8000de2 <__udivmoddi4+0xfa>
 8000f14:	4601      	mov	r1, r0
 8000f16:	e718      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f18:	4610      	mov	r0, r2
 8000f1a:	e72c      	b.n	8000d76 <__udivmoddi4+0x8e>
 8000f1c:	f1c6 0220 	rsb	r2, r6, #32
 8000f20:	fa2e f302 	lsr.w	r3, lr, r2
 8000f24:	40b7      	lsls	r7, r6
 8000f26:	40b1      	lsls	r1, r6
 8000f28:	fa20 f202 	lsr.w	r2, r0, r2
 8000f2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f30:	430a      	orrs	r2, r1
 8000f32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f36:	b2bc      	uxth	r4, r7
 8000f38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb08 f904 	mul.w	r9, r8, r4
 8000f46:	40b0      	lsls	r0, r6
 8000f48:	4589      	cmp	r9, r1
 8000f4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f4e:	b280      	uxth	r0, r0
 8000f50:	d93e      	bls.n	8000fd0 <__udivmoddi4+0x2e8>
 8000f52:	1879      	adds	r1, r7, r1
 8000f54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f58:	d201      	bcs.n	8000f5e <__udivmoddi4+0x276>
 8000f5a:	4589      	cmp	r9, r1
 8000f5c:	d81f      	bhi.n	8000f9e <__udivmoddi4+0x2b6>
 8000f5e:	eba1 0109 	sub.w	r1, r1, r9
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fb09 f804 	mul.w	r8, r9, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f74:	4542      	cmp	r2, r8
 8000f76:	d229      	bcs.n	8000fcc <__udivmoddi4+0x2e4>
 8000f78:	18ba      	adds	r2, r7, r2
 8000f7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f7e:	d2c4      	bcs.n	8000f0a <__udivmoddi4+0x222>
 8000f80:	4542      	cmp	r2, r8
 8000f82:	d2c2      	bcs.n	8000f0a <__udivmoddi4+0x222>
 8000f84:	f1a9 0102 	sub.w	r1, r9, #2
 8000f88:	443a      	add	r2, r7
 8000f8a:	e7be      	b.n	8000f0a <__udivmoddi4+0x222>
 8000f8c:	45f0      	cmp	r8, lr
 8000f8e:	d29d      	bcs.n	8000ecc <__udivmoddi4+0x1e4>
 8000f90:	ebbe 0302 	subs.w	r3, lr, r2
 8000f94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f98:	3801      	subs	r0, #1
 8000f9a:	46e1      	mov	r9, ip
 8000f9c:	e796      	b.n	8000ecc <__udivmoddi4+0x1e4>
 8000f9e:	eba7 0909 	sub.w	r9, r7, r9
 8000fa2:	4449      	add	r1, r9
 8000fa4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fa8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fac:	fb09 f804 	mul.w	r8, r9, r4
 8000fb0:	e7db      	b.n	8000f6a <__udivmoddi4+0x282>
 8000fb2:	4673      	mov	r3, lr
 8000fb4:	e77f      	b.n	8000eb6 <__udivmoddi4+0x1ce>
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	e766      	b.n	8000e88 <__udivmoddi4+0x1a0>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e6fd      	b.n	8000dba <__udivmoddi4+0xd2>
 8000fbe:	443b      	add	r3, r7
 8000fc0:	3a02      	subs	r2, #2
 8000fc2:	e733      	b.n	8000e2c <__udivmoddi4+0x144>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	443b      	add	r3, r7
 8000fca:	e71c      	b.n	8000e06 <__udivmoddi4+0x11e>
 8000fcc:	4649      	mov	r1, r9
 8000fce:	e79c      	b.n	8000f0a <__udivmoddi4+0x222>
 8000fd0:	eba1 0109 	sub.w	r1, r1, r9
 8000fd4:	46c4      	mov	ip, r8
 8000fd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fda:	fb09 f804 	mul.w	r8, r9, r4
 8000fde:	e7c4      	b.n	8000f6a <__udivmoddi4+0x282>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback para la interrupción de TIM10
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);  //Inicializa la conversión ADC1
 8000fec:	4831      	ldr	r0, [pc, #196]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fee:	f000 fe19 	bl	8001c24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); //Se espera a que se complete la conversión
 8000ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff6:	482f      	ldr	r0, [pc, #188]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ff8:	f000 fee6 	bl	8001dc8 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1); //Se asigna el valor en la variable correspondiente
 8000ffc:	482d      	ldr	r0, [pc, #180]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ffe:	f000 ff6e 	bl	8001ede <HAL_ADC_GetValue>
 8001002:	4603      	mov	r3, r0
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001008:	801a      	strh	r2, [r3, #0]
	sprintf(msg, "%d\n", adc_value); //Se prepara el mensaje...
 800100a:	4b2b      	ldr	r3, [pc, #172]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	492a      	ldr	r1, [pc, #168]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001012:	482b      	ldr	r0, [pc, #172]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001014:	f005 f9ea 	bl	80063ec <siprintf>
	HAL_UART_Transmit_IT(&huart2,(uint8_t*)msg, strlen(msg)); //...y se envía por UART
 8001018:	4829      	ldr	r0, [pc, #164]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800101a:	f7ff f8f9 	bl	8000210 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	b29b      	uxth	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	4926      	ldr	r1, [pc, #152]	@ (80010c0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001026:	4827      	ldr	r0, [pc, #156]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001028:	f003 fa22 	bl	8004470 <HAL_UART_Transmit_IT>
	//En la línea de arriba se usa la opción con IT para evitar "ocupar" al procesador enviando el mensaje

	x_n = 1.0*adc_value; //Con el 1.0, de una vez se convierte a float
 800102c:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa97 	bl	8000564 <__aeabi_i2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fdb5 	bl	8000bac <__aeabi_d2f>
 8001042:	4603      	mov	r3, r0
 8001044:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001046:	6013      	str	r3, [r2, #0]
	y_n = num_recibido*x_n;  //Esto ilustra cómo se podría usar lo recibido por UART.
 8001048:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800104a:	ed93 7a00 	vldr	s14, [r3]
 800104e:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800105a:	edc3 7a00 	vstr	s15, [r3]

	// Lo siguiente es para asegurarse de que el valor que se envíe al DAC esté en
	// el intervalo adecuado (el DAC es de 12 bits)
	if(y_n > 4095.0){
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80010d4 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8001068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd03      	ble.n	800107a <HAL_TIM_PeriodElapsedCallback+0x96>
		y_n = 4095.0;
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e00b      	b.n	8001092 <HAL_TIM_PeriodElapsedCallback+0xae>
	}
	else if(y_n < 0.0){
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001088:	d503      	bpl.n	8001092 <HAL_TIM_PeriodElapsedCallback+0xae>
		y_n = 0.0;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
	}

	//Se envía un valor de 12 bits alineado a la derecha al DAC (note el casting a entero que se le aplica  y_n
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)y_n);
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010a8:	f001 fade 	bl	8002668 <HAL_DAC_SetValue>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001f8 	.word	0x200001f8
 80010b8:	20000344 	.word	0x20000344
 80010bc:	080085d0 	.word	0x080085d0
 80010c0:	20000348 	.word	0x20000348
 80010c4:	2000029c 	.word	0x2000029c
 80010c8:	2000037c 	.word	0x2000037c
 80010cc:	20000004 	.word	0x20000004
 80010d0:	20000380 	.word	0x20000380
 80010d4:	457ff000 	.word	0x457ff000
 80010d8:	457ff000 	.word	0x457ff000
 80010dc:	20000240 	.word	0x20000240

080010e0 <HAL_UART_RxCpltCallback>:

//Callback para la interrupción de UART2 al momento de recibir toda la data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	rec[COEF_SIZE-1] = '\0'; //Se agrega un nulo para convertir a string
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <HAL_UART_RxCpltCallback+0x38>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	71da      	strb	r2, [r3, #7]
	num_recibido = atof((char*)rec);  //Se convierte a float
 80010ee:	480a      	ldr	r0, [pc, #40]	@ (8001118 <HAL_UART_RxCpltCallback+0x38>)
 80010f0:	f004 faa8 	bl	8005644 <atof>
 80010f4:	ec53 2b10 	vmov	r2, r3, d0
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fd56 	bl	8000bac <__aeabi_d2f>
 8001100:	4603      	mov	r3, r0
 8001102:	4a06      	ldr	r2, [pc, #24]	@ (800111c <HAL_UART_RxCpltCallback+0x3c>)
 8001104:	6013      	str	r3, [r2, #0]

	//El UART se configura nuevamente para poder recibir la siguiente recepción
	HAL_UART_Receive_DMA(&huart2,rec,COEF_SIZE);
 8001106:	2208      	movs	r2, #8
 8001108:	4903      	ldr	r1, [pc, #12]	@ (8001118 <HAL_UART_RxCpltCallback+0x38>)
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_UART_RxCpltCallback+0x40>)
 800110c:	f003 f9e6 	bl	80044dc <HAL_UART_Receive_DMA>
	// explicó, pueden asumir un orden máximo para los filtros que se ejecutan
	// en el Nucleo-F446RE (ej.: orden 4). Y pueden ajustar sus programas de Matlab y del
	// Nucleo-F446RE para siempre enviar y recibir el mismo número de coeficientes. Si se
	// diseña un filtro de orden menor al máximo, los coeficientes "faltantes" los
	// igualarían a cero.
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000368 	.word	0x20000368
 800111c:	20000004 	.word	0x20000004
 8001120:	2000029c 	.word	0x2000029c

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f000 fcc6 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f822 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 f9a4 	bl	800147c <MX_GPIO_Init>
  MX_DMA_Init();
 8001134:	f000 f982 	bl	800143c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001138:	f000 f956 	bl	80013e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800113c:	f000 f888 	bl	8001250 <MX_ADC1_Init>
  MX_DAC_Init();
 8001140:	f000 f8d8 	bl	80012f4 <MX_DAC_Init>
  MX_TIM10_Init();
 8001144:	f000 f900 	bl	8001348 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); //Inicializa el Canal 1 del DAC
 8001148:	2100      	movs	r1, #0
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <main+0x40>)
 800114c:	f001 fa35 	bl	80025ba <HAL_DAC_Start>
  HAL_UART_Receive_DMA(&huart2, rec, COEF_SIZE); //Se configura la recepción del UART con DMA
 8001150:	2208      	movs	r2, #8
 8001152:	4905      	ldr	r1, [pc, #20]	@ (8001168 <main+0x44>)
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <main+0x48>)
 8001156:	f003 f9c1 	bl	80044dc <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim10); //Esto inicializa el TIM10 y habilita la interrupción
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <main+0x4c>)
 800115c:	f002 fef0 	bl	8003f40 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <main+0x3c>
 8001164:	20000240 	.word	0x20000240
 8001168:	20000368 	.word	0x20000368
 800116c:	2000029c 	.word	0x2000029c
 8001170:	20000254 	.word	0x20000254

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	@ 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2234      	movs	r2, #52	@ 0x34
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f005 f997 	bl	80064b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <SystemClock_Config+0xd4>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	4a29      	ldr	r2, [pc, #164]	@ (8001248 <SystemClock_Config+0xd4>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a8:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <SystemClock_Config+0xd4>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <SystemClock_Config+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c0:	4a22      	ldr	r2, [pc, #136]	@ (800124c <SystemClock_Config+0xd8>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b20      	ldr	r3, [pc, #128]	@ (800124c <SystemClock_Config+0xd8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011e8:	2310      	movs	r3, #16
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011f2:	2304      	movs	r3, #4
 80011f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4618      	mov	r0, r3
 8001204:	f002 fbae 	bl	8003964 <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800120e:	f000 f9a3 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2302      	movs	r3, #2
 8001218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2102      	movs	r1, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f002 f84e 	bl	80032d0 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800123a:	f000 f98d 	bl	8001558 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	@ 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001262:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001264:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <MX_ADC1_Init+0x9c>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800126a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800126e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001292:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <MX_ADC1_Init+0xa0>)
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_ADC1_Init+0x98>)
 800129e:	2201      	movs	r2, #1
 80012a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012b2:	f000 fc73 	bl	8001b9c <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 f94c 	bl	8001558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_ADC1_Init+0x98>)
 80012d2:	f000 fe11 	bl	8001ef8 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012dc:	f000 f93c 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001f8 	.word	0x200001f8
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_DAC_Init+0x4c>)
 8001304:	4a0f      	ldr	r2, [pc, #60]	@ (8001344 <MX_DAC_Init+0x50>)
 8001306:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001308:	480d      	ldr	r0, [pc, #52]	@ (8001340 <MX_DAC_Init+0x4c>)
 800130a:	f001 f934 	bl	8002576 <HAL_DAC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001314:	f000 f920 	bl	8001558 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	@ (8001340 <MX_DAC_Init+0x4c>)
 8001328:	f001 f9c8 	bl	80026bc <HAL_DAC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001332:	f000 f911 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000240 	.word	0x20000240
 8001344:	40007400 	.word	0x40007400

08001348 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */
	//Se obtiene la frecuencia del CLK que controla el TIM10
	pclk = HAL_RCC_GetPCLK2Freq();
 800134c:	f002 f8c6 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8001350:	4603      	mov	r3, r0
 8001352:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <MX_TIM10_Init+0x88>)
 8001354:	6013      	str	r3, [r2, #0]
	if ((RCC->CFGR & RCC_CFGR_PPRE2) != RCC_CFGR_PPRE2_DIV1) {
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <MX_TIM10_Init+0x8c>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <MX_TIM10_Init+0x26>
		timer_clk = pclk * 2;  // Si el divisor del CLK es diferente a 1, se duplica la frecuencia del reloj
 8001362:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <MX_TIM10_Init+0x88>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <MX_TIM10_Init+0x90>)
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e003      	b.n	8001376 <MX_TIM10_Init+0x2e>
	} else {
		timer_clk = pclk; //Si el divisor es 1, se mantiene igual
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_TIM10_Init+0x88>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a19      	ldr	r2, [pc, #100]	@ (80013d8 <MX_TIM10_Init+0x90>)
 8001374:	6013      	str	r3, [r2, #0]
	}

	htim10.Init.Prescaler = 8399;
 8001376:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001378:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800137c:	605a      	str	r2, [r3, #4]
	//OJO: Gracias a la siguiente línea de código es modificar la frecuencia del timer al sólo cambiar freq_timer.
	//Note que la línea que configura el período está comentada en la sección de configuración del TIM10 (más abajo).
	//Si se genera nuevo código, debe comentar la línea en donde se asigna el valor del htim10.Init.Period en la
	//configuración del TIM10.
	htim10.Init.Period = ((timer_clk / (htim10.Init.Prescaler + 1)) / freq_timer) - 1;
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_TIM10_Init+0x90>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	3301      	adds	r3, #1
 8001388:	fbb2 f3f3 	udiv	r3, r2, r3
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <MX_TIM10_Init+0x98>)
 800138e:	8812      	ldrh	r2, [r2, #0]
 8001390:	fbb3 f3f2 	udiv	r3, r3, r2
 8001394:	3b01      	subs	r3, #1
 8001396:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <MX_TIM10_Init+0x94>)
 8001398:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <MX_TIM10_Init+0x94>)
 800139c:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <MX_TIM10_Init+0x9c>)
 800139e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_TIM10_Init+0x94>)
 80013a2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_TIM10_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  //htim10.Init.Period = 65535;
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_TIM10_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_TIM10_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013ba:	4808      	ldr	r0, [pc, #32]	@ (80013dc <MX_TIM10_Init+0x94>)
 80013bc:	f002 fd70 	bl	8003ea0 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 80013c6:	f000 f8c7 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000378 	.word	0x20000378
 80013d4:	40023800 	.word	0x40023800
 80013d8:	20000374 	.word	0x20000374
 80013dc:	20000254 	.word	0x20000254
 80013e0:	20000000 	.word	0x20000000
 80013e4:	40014400 	.word	0x40014400

080013e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_USART2_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USART2_UART_Init+0x4c>)
 8001420:	f002 ffd6 	bl	80043d0 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f895 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000029c 	.word	0x2000029c
 8001438:	40004400 	.word	0x40004400

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_DMA_Init+0x3c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <MX_DMA_Init+0x3c>)
 800144c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_DMA_Init+0x3c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2010      	movs	r0, #16
 8001464:	f001 f851 	bl	800250a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001468:	2010      	movs	r0, #16
 800146a:	f001 f86a 	bl	8002542 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <MX_GPIO_Init+0xd0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a2c      	ldr	r2, [pc, #176]	@ (800154c <MX_GPIO_Init+0xd0>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b2a      	ldr	r3, [pc, #168]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a25      	ldr	r2, [pc, #148]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b23      	ldr	r3, [pc, #140]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a17      	ldr	r2, [pc, #92]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2120      	movs	r1, #32
 8001506:	4812      	ldr	r0, [pc, #72]	@ (8001550 <MX_GPIO_Init+0xd4>)
 8001508:	f001 fec8 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	480c      	ldr	r0, [pc, #48]	@ (8001554 <MX_GPIO_Init+0xd8>)
 8001524:	f001 fd26 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001528:	2320      	movs	r3, #32
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4804      	ldr	r0, [pc, #16]	@ (8001550 <MX_GPIO_Init+0xd4>)
 8001540:	f001 fd18 	bl	8002f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	@ 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020800 	.word	0x40020800

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <Error_Handler+0x8>

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80015a2:	2006      	movs	r0, #6
 80015a4:	f000 ffa6 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <HAL_ADC_MspInit+0x7c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d127      	bne.n	8001626 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_ADC_MspInit+0x80>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a15      	ldr	r2, [pc, #84]	@ (8001634 <HAL_ADC_MspInit+0x80>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <HAL_ADC_MspInit+0x80>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_ADC_MspInit+0x80>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <HAL_ADC_MspInit+0x80>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <HAL_ADC_MspInit+0x80>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001612:	2303      	movs	r3, #3
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_ADC_MspInit+0x84>)
 8001622:	f001 fca7 	bl	8002f74 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40012000 	.word	0x40012000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_DAC_MspInit+0x7c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d127      	bne.n	80016ae <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_DAC_MspInit+0x80>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <HAL_DAC_MspInit+0x80>)
 8001668:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <HAL_DAC_MspInit+0x80>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <HAL_DAC_MspInit+0x80>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <HAL_DAC_MspInit+0x80>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_DAC_MspInit+0x80>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001696:	2310      	movs	r3, #16
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169a:	2303      	movs	r3, #3
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <HAL_DAC_MspInit+0x84>)
 80016aa:	f001 fc63 	bl	8002f74 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40007400 	.word	0x40007400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_TIM_Base_MspInit+0x48>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d115      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_TIM_Base_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	2019      	movs	r0, #25
 80016f8:	f000 ff07 	bl	800250a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016fc:	2019      	movs	r0, #25
 80016fe:	f000 ff20 	bl	8002542 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40014400 	.word	0x40014400
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a34      	ldr	r2, [pc, #208]	@ (8001804 <HAL_UART_MspInit+0xf0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d161      	bne.n	80017fa <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <HAL_UART_MspInit+0xf4>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a32      	ldr	r2, [pc, #200]	@ (8001808 <HAL_UART_MspInit+0xf4>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <HAL_UART_MspInit+0xf4>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <HAL_UART_MspInit+0xf4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a2b      	ldr	r2, [pc, #172]	@ (8001808 <HAL_UART_MspInit+0xf4>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <HAL_UART_MspInit+0xf4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800176e:	230c      	movs	r3, #12
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177e:	2307      	movs	r3, #7
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4820      	ldr	r0, [pc, #128]	@ (800180c <HAL_UART_MspInit+0xf8>)
 800178a:	f001 fbf3 	bl	8002f74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800178e:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 8001790:	4a20      	ldr	r2, [pc, #128]	@ (8001814 <HAL_UART_MspInit+0x100>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001794:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 8001796:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800179a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179c:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b0:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b6:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017bc:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017ce:	4810      	ldr	r0, [pc, #64]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017d0:	f000 ffce 	bl	8002770 <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80017da:	f7ff febd 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_UART_MspInit+0xfc>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2026      	movs	r0, #38	@ 0x26
 80017f0:	f000 fe8b 	bl	800250a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017f4:	2026      	movs	r0, #38	@ 0x26
 80017f6:	f000 fea4 	bl	8002542 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	@ 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40004400 	.word	0x40004400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	200002e4 	.word	0x200002e4
 8001814:	40026088 	.word	0x40026088

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <NMI_Handler+0x4>

08001820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <MemManage_Handler+0x4>

08001830 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <UsageFault_Handler+0x4>

08001840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186e:	f000 f975 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <DMA1_Stream5_IRQHandler+0x10>)
 800187e:	f001 f90f 	bl	8002aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002e4 	.word	0x200002e4

0800188c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001892:	f002 fbc5 	bl	8004020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000254 	.word	0x20000254

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <USART2_IRQHandler+0x10>)
 80018a6:	f002 fe3f 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000029c 	.word	0x2000029c

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_kill>:

int _kill(int pid, int sig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ce:	f004 fe53 	bl	8006578 <__errno>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2216      	movs	r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
  return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f6:	bf00      	nop
 80018f8:	e7fd      	b.n	80018f6 <_exit+0x12>

080018fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e00a      	b.n	8001922 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800190c:	f3af 8000 	nop.w
 8001910:	4601      	mov	r1, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	60ba      	str	r2, [r7, #8]
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbf0      	blt.n	800190c <_read+0x12>
  }

  return len;
 800192a:	687b      	ldr	r3, [r7, #4]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	e009      	b.n	800195a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	60ba      	str	r2, [r7, #8]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	dbf1      	blt.n	8001946 <_write+0x12>
  }
  return len;
 8001962:	687b      	ldr	r3, [r7, #4]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_close>:

int _close(int file)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001994:	605a      	str	r2, [r3, #4]
  return 0;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_isatty>:

int _isatty(int file)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	@ (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f004 fdb8 	bl	8006578 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20020000 	.word	0x20020000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	20000384 	.word	0x20000384
 8001a3c:	200004d8 	.word	0x200004d8

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <SystemInit+0x20>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <SystemInit+0x20>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a68:	f7ff ffea 	bl	8001a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a6e:	490d      	ldr	r1, [pc, #52]	@ (8001aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a84:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f004 fd77 	bl	8006584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a96:	f7ff fb45 	bl	8001124 <main>
  bx  lr    
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001aa8:	080089c4 	.word	0x080089c4
  ldr r2, =_sbss
 8001aac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ab0:	200004d8 	.word	0x200004d8

08001ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <HAL_Init+0x40>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <HAL_Init+0x40>)
 8001ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <HAL_Init+0x40>)
 8001ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 fd07 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 f808 	bl	8001afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aec:	f7ff fd3a 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_InitTick+0x54>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_InitTick+0x58>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fd1f 	bl	800255e <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f000 fce7 	bl	800250a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <HAL_InitTick+0x5c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000010 	.word	0x20000010
 8001b58:	2000000c 	.word	0x2000000c

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000010 	.word	0x20000010
 8001b80:	20000388 	.word	0x20000388

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000388 	.word	0x20000388

08001b9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e033      	b.n	8001c1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fcfa 	bl	80015b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001be2:	f023 0302 	bic.w	r3, r3, #2
 8001be6:	f043 0202 	orr.w	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fab4 	bl	800215c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c0a:	e001      	b.n	8001c10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Start+0x1a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e0b2      	b.n	8001da4 <HAL_ADC_Start+0x180>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d018      	beq.n	8001c86 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c64:	4b52      	ldr	r3, [pc, #328]	@ (8001db0 <HAL_ADC_Start+0x18c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_ADC_Start+0x190>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0c9a      	lsrs	r2, r3, #18
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c78:	e002      	b.n	8001c80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f9      	bne.n	8001c7a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d17a      	bne.n	8001d8a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cbe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd8:	f023 0206 	bic.w	r2, r3, #6
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf0:	4b31      	ldr	r3, [pc, #196]	@ (8001db8 <HAL_ADC_Start+0x194>)
 8001cf2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d12a      	bne.n	8001d60 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dbc <HAL_ADC_Start+0x198>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d015      	beq.n	8001d40 <HAL_ADC_Start+0x11c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a29      	ldr	r2, [pc, #164]	@ (8001dc0 <HAL_ADC_Start+0x19c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_Start+0x106>
 8001d1e:	4b26      	ldr	r3, [pc, #152]	@ (8001db8 <HAL_ADC_Start+0x194>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a25      	ldr	r2, [pc, #148]	@ (8001dc4 <HAL_ADC_Start+0x1a0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d136      	bne.n	8001da2 <HAL_ADC_Start+0x17e>
 8001d34:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_ADC_Start+0x194>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d130      	bne.n	8001da2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d129      	bne.n	8001da2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	e020      	b.n	8001da2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a15      	ldr	r2, [pc, #84]	@ (8001dbc <HAL_ADC_Start+0x198>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d11b      	bne.n	8001da2 <HAL_ADC_Start+0x17e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d114      	bne.n	8001da2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	e00b      	b.n	8001da2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20000008 	.word	0x20000008
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	40012300 	.word	0x40012300
 8001dbc:	40012000 	.word	0x40012000
 8001dc0:	40012100 	.word	0x40012100
 8001dc4:	40012200 	.word	0x40012200

08001dc8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de4:	d113      	bne.n	8001e0e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001df4:	d10b      	bne.n	8001e0e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f043 0220 	orr.w	r2, r3, #32
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e063      	b.n	8001ed6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0e:	f7ff feb9 	bl	8001b84 <HAL_GetTick>
 8001e12:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e14:	e021      	b.n	8001e5a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d01d      	beq.n	8001e5a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_ADC_PollForConversion+0x6c>
 8001e24:	f7ff feae 	bl	8001b84 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d212      	bcs.n	8001e5a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d00b      	beq.n	8001e5a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f043 0204 	orr.w	r2, r3, #4
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e03d      	b.n	8001ed6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d1d6      	bne.n	8001e16 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0212 	mvn.w	r2, #18
 8001e70:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d123      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11f      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d111      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e113      	b.n	800213c <HAL_ADC_ConfigChannel+0x244>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d925      	bls.n	8001f70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	3b1e      	subs	r3, #30
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43da      	mvns	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	400a      	ands	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68d9      	ldr	r1, [r3, #12]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4403      	add	r3, r0
 8001f62:	3b1e      	subs	r3, #30
 8001f64:	409a      	lsls	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	e022      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6919      	ldr	r1, [r3, #16]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	2207      	movs	r2, #7
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	400a      	ands	r2, r1
 8001f92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6919      	ldr	r1, [r3, #16]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4403      	add	r3, r0
 8001fac:	409a      	lsls	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d824      	bhi.n	8002008 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b05      	subs	r3, #5
 8001fd0:	221f      	movs	r2, #31
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b05      	subs	r3, #5
 8001ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34
 8002006:	e04c      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d824      	bhi.n	800205a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b23      	subs	r3, #35	@ 0x23
 8002022:	221f      	movs	r2, #31
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43da      	mvns	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	400a      	ands	r2, r1
 8002030:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b23      	subs	r3, #35	@ 0x23
 800204c:	fa00 f203 	lsl.w	r2, r0, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
 8002058:	e023      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b41      	subs	r3, #65	@ 0x41
 800206c:	221f      	movs	r2, #31
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	400a      	ands	r2, r1
 800207a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b41      	subs	r3, #65	@ 0x41
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_ADC_ConfigChannel+0x250>)
 80020a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a28      	ldr	r2, [pc, #160]	@ (800214c <HAL_ADC_ConfigChannel+0x254>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d10f      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1d8>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d10b      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <HAL_ADC_ConfigChannel+0x254>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d12b      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x23a>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <HAL_ADC_ConfigChannel+0x258>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x1f4>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b11      	cmp	r3, #17
 80020ea:	d122      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_ADC_ConfigChannel+0x258>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d111      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_ADC_ConfigChannel+0x25c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a11      	ldr	r2, [pc, #68]	@ (8002158 <HAL_ADC_ConfigChannel+0x260>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	0c9a      	lsrs	r2, r3, #18
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002124:	e002      	b.n	800212c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3b01      	subs	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40012300 	.word	0x40012300
 800214c:	40012000 	.word	0x40012000
 8002150:	10000012 	.word	0x10000012
 8002154:	20000008 	.word	0x20000008
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002164:	4b79      	ldr	r3, [pc, #484]	@ (800234c <ADC_Init+0x1f0>)
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	431a      	orrs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	021a      	lsls	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6899      	ldr	r1, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	4a58      	ldr	r2, [pc, #352]	@ (8002350 <ADC_Init+0x1f4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d022      	beq.n	800223a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002202:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6899      	ldr	r1, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e00f      	b.n	800225a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002258:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0202 	bic.w	r2, r2, #2
 8002268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e1b      	ldrb	r3, [r3, #24]
 8002274:	005a      	lsls	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01b      	beq.n	80022c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002296:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	3b01      	subs	r3, #1
 80022b4:	035a      	lsls	r2, r3, #13
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e007      	b.n	80022d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	051a      	lsls	r2, r3, #20
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6899      	ldr	r1, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002312:	025a      	lsls	r2, r3, #9
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	029a      	lsls	r2, r3, #10
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40012300 	.word	0x40012300
 8002350:	0f000001 	.word	0x0f000001

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4907      	ldr	r1, [pc, #28]	@ (80023f0 <__NVIC_EnableIRQ+0x38>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	@ (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	@ (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c0:	d301      	bcc.n	80024c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c6:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <SysTick_Config+0x40>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ce:	210f      	movs	r1, #15
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f7ff ff8e 	bl	80023f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <SysTick_Config+0x40>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <SysTick_Config+0x40>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff29 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff3e 	bl	800239c <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff8e 	bl	8002448 <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5d 	bl	80023f4 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff31 	bl	80023b8 <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffa2 	bl	80024b0 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e014      	b.n	80025b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	791b      	ldrb	r3, [r3, #4]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff f84f 	bl	800163c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e046      	b.n	800265c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	795b      	ldrb	r3, [r3, #5]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_DAC_Start+0x20>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e040      	b.n	800265c <HAL_DAC_Start+0xa2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10f      	bne.n	8002624 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800260e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002610:	d11d      	bne.n	800264e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	e014      	b.n	800264e <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	213c      	movs	r1, #60	@ 0x3c
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	429a      	cmp	r2, r3
 800263c:	d107      	bne.n	800264e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0202 	orr.w	r2, r2, #2
 800264c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e015      	b.n	80026b0 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	3308      	adds	r3, #8
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e004      	b.n	80026a6 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3314      	adds	r3, #20
 80026a4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_DAC_ConfigChannel+0x1c>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e042      	b.n	8002762 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	795b      	ldrb	r3, [r3, #5]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_DAC_ConfigChannel+0x2c>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e03c      	b.n	8002762 <HAL_DAC_ConfigChannel+0xa6>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2202      	movs	r2, #2
 80026f2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	22c0      	movs	r2, #192	@ 0xc0
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002760:	7ffb      	ldrb	r3, [r7, #31]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff fa02 	bl	8001b84 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e099      	b.n	80028c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ac:	e00f      	b.n	80027ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ae:	f7ff f9e9 	bl	8001b84 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d908      	bls.n	80027ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e078      	b.n	80028c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e8      	bne.n	80027ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4b38      	ldr	r3, [pc, #224]	@ (80028c8 <HAL_DMA_Init+0x158>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	2b04      	cmp	r3, #4
 8002826:	d107      	bne.n	8002838 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	4313      	orrs	r3, r2
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f023 0307 	bic.w	r3, r3, #7
 800284e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	2b04      	cmp	r3, #4
 8002860:	d117      	bne.n	8002892 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fb01 	bl	8002e7c <DMA_CheckFifoParam>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2240      	movs	r2, #64	@ 0x40
 8002884:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800288e:	2301      	movs	r3, #1
 8002890:	e016      	b.n	80028c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fab8 	bl	8002e10 <DMA_CalcBaseAndBitshift>
 80028a0:	4603      	mov	r3, r0
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	223f      	movs	r2, #63	@ 0x3f
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	f010803f 	.word	0xf010803f

080028cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_DMA_Start_IT+0x26>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e040      	b.n	8002974 <HAL_DMA_Start_IT+0xa8>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d12f      	bne.n	8002966 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fa4a 	bl	8002db4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	223f      	movs	r2, #63	@ 0x3f
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0216 	orr.w	r2, r2, #22
 800293a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0208 	orr.w	r2, r2, #8
 8002952:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e005      	b.n	8002972 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800296e:	2302      	movs	r3, #2
 8002970:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002972:	7dfb      	ldrb	r3, [r7, #23]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800298a:	f7ff f8fb 	bl	8001b84 <HAL_GetTick>
 800298e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d008      	beq.n	80029ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2280      	movs	r2, #128	@ 0x80
 80029a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e052      	b.n	8002a54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0216 	bic.w	r2, r2, #22
 80029bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_DMA_Abort+0x62>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fe:	e013      	b.n	8002a28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a00:	f7ff f8c0 	bl	8001b84 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d90c      	bls.n	8002a28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2203      	movs	r2, #3
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e015      	b.n	8002a54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e4      	bne.n	8002a00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3a:	223f      	movs	r2, #63	@ 0x3f
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e00c      	b.n	8002a94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002aac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce8 <HAL_DMA_IRQHandler+0x248>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a8e      	ldr	r2, [pc, #568]	@ (8002cec <HAL_DMA_IRQHandler+0x24c>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0a9b      	lsrs	r3, r3, #10
 8002ab8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	2208      	movs	r2, #8
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01a      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	2208      	movs	r2, #8
 8002afa:	409a      	lsls	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	2201      	movs	r2, #1
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d012      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2e:	2201      	movs	r2, #1
 8002b30:	409a      	lsls	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b46:	2204      	movs	r2, #4
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	2204      	movs	r2, #4
 8002b66:	409a      	lsls	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d043      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03c      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d108      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d024      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
 8002bce:	e01f      	b.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01b      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
 8002be0:	e016      	b.n	8002c10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0208 	bic.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	2220      	movs	r2, #32
 8002c16:	409a      	lsls	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 808f 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8087 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	2220      	movs	r2, #32
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d136      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0216 	bic.w	r2, r2, #22
 8002c58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <HAL_DMA_IRQHandler+0x1da>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0208 	bic.w	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	223f      	movs	r2, #63	@ 0x3f
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d07e      	beq.n	8002dac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
        }
        return;
 8002cb6:	e079      	b.n	8002dac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01d      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d031      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
 8002ce4:	e02c      	b.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
 8002ce6:	bf00      	nop
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d023      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
 8002d00:	e01e      	b.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0210 	bic.w	r2, r2, #16
 8002d1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d032      	beq.n	8002dae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2205      	movs	r2, #5
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d307      	bcc.n	8002d88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f2      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x2cc>
 8002d86:	e000      	b.n	8002d8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
 8002daa:	e000      	b.n	8002dae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dac:	bf00      	nop
    }
  }
}
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d108      	bne.n	8002df4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002df2:	e007      	b.n	8002e04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3b10      	subs	r3, #16
 8002e20:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <DMA_CalcBaseAndBitshift+0x64>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2a:	4a13      	ldr	r2, [pc, #76]	@ (8002e78 <DMA_CalcBaseAndBitshift+0x68>)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d909      	bls.n	8002e52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	1d1a      	adds	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e50:	e007      	b.n	8002e62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	aaaaaaab 	.word	0xaaaaaaab
 8002e78:	080085ec 	.word	0x080085ec

08002e7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11f      	bne.n	8002ed6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d856      	bhi.n	8002f4a <DMA_CheckFifoParam+0xce>
 8002e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <DMA_CheckFifoParam+0x28>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ec7 	.word	0x08002ec7
 8002eac:	08002eb5 	.word	0x08002eb5
 8002eb0:	08002f4b 	.word	0x08002f4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d046      	beq.n	8002f4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec4:	e043      	b.n	8002f4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ece:	d140      	bne.n	8002f52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed4:	e03d      	b.n	8002f52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ede:	d121      	bne.n	8002f24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d837      	bhi.n	8002f56 <DMA_CheckFifoParam+0xda>
 8002ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <DMA_CheckFifoParam+0x70>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f03 	.word	0x08002f03
 8002ef4:	08002efd 	.word	0x08002efd
 8002ef8:	08002f15 	.word	0x08002f15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e030      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d025      	beq.n	8002f5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f12:	e022      	b.n	8002f5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f1c:	d11f      	bne.n	8002f5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f22:	e01c      	b.n	8002f5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d903      	bls.n	8002f32 <DMA_CheckFifoParam+0xb6>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d003      	beq.n	8002f38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f30:	e018      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
      break;
 8002f36:	e015      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      break;
 8002f48:	e00b      	b.n	8002f62 <DMA_CheckFifoParam+0xe6>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e00a      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e008      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e006      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e004      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
    }
  } 
  
  return status; 
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e165      	b.n	800325c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8154 	bne.w	8003256 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80ae 	beq.w	8003256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003274 <HAL_GPIO_Init+0x300>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	4a5c      	ldr	r2, [pc, #368]	@ (8003274 <HAL_GPIO_Init+0x300>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003108:	6453      	str	r3, [r2, #68]	@ 0x44
 800310a:	4b5a      	ldr	r3, [pc, #360]	@ (8003274 <HAL_GPIO_Init+0x300>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003116:	4a58      	ldr	r2, [pc, #352]	@ (8003278 <HAL_GPIO_Init+0x304>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	@ (800327c <HAL_GPIO_Init+0x308>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d025      	beq.n	800318e <HAL_GPIO_Init+0x21a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4e      	ldr	r2, [pc, #312]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_Init+0x216>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4d      	ldr	r2, [pc, #308]	@ (8003284 <HAL_GPIO_Init+0x310>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x212>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4c      	ldr	r2, [pc, #304]	@ (8003288 <HAL_GPIO_Init+0x314>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4b      	ldr	r2, [pc, #300]	@ (800328c <HAL_GPIO_Init+0x318>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x20a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4a      	ldr	r2, [pc, #296]	@ (8003290 <HAL_GPIO_Init+0x31c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x206>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a49      	ldr	r2, [pc, #292]	@ (8003294 <HAL_GPIO_Init+0x320>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x202>
 8003172:	2306      	movs	r3, #6
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 8003176:	2307      	movs	r3, #7
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	@ (8003278 <HAL_GPIO_Init+0x304>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a31      	ldr	r2, [pc, #196]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a26      	ldr	r2, [pc, #152]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b25      	ldr	r3, [pc, #148]	@ (8003298 <HAL_GPIO_Init+0x324>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_GPIO_Init+0x324>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_GPIO_Init+0x324>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a11      	ldr	r2, [pc, #68]	@ (8003298 <HAL_GPIO_Init+0x324>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae96 	bls.w	8002f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b8:	e003      	b.n	80032c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	041a      	lsls	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	619a      	str	r2, [r3, #24]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0cc      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b68      	ldr	r3, [pc, #416]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d90c      	bls.n	800330c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b65      	ldr	r3, [pc, #404]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a58      	ldr	r2, [pc, #352]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800332e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a52      	ldr	r2, [pc, #328]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d044      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d119      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	2b03      	cmp	r3, #3
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b3f      	ldr	r3, [pc, #252]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3b      	ldr	r3, [pc, #236]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e067      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b37      	ldr	r3, [pc, #220]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4934      	ldr	r1, [pc, #208]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe fbe0 	bl	8001b84 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe fbdc 	bl	8001b84 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e04f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2b      	ldr	r3, [pc, #172]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b25      	ldr	r3, [pc, #148]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d20c      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b22      	ldr	r3, [pc, #136]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003442:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f855 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fb40 	bl	8001afc <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00
 800348c:	40023800 	.word	0x40023800
 8003490:	080085d4 	.word	0x080085d4
 8003494:	20000008 	.word	0x20000008
 8003498:	2000000c 	.word	0x2000000c

0800349c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000008 	.word	0x20000008

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a9b      	lsrs	r3, r3, #10
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	080085e4 	.word	0x080085e4

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e0:	f7ff ffdc 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	080085e4 	.word	0x080085e4

08003504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003508:	b0ae      	sub	sp, #184	@ 0xb8
 800350a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352a:	4bcb      	ldr	r3, [pc, #812]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b0c      	cmp	r3, #12
 8003534:	f200 8206 	bhi.w	8003944 <HAL_RCC_GetSysClockFreq+0x440>
 8003538:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <HAL_RCC_GetSysClockFreq+0x3c>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003575 	.word	0x08003575
 8003544:	08003945 	.word	0x08003945
 8003548:	08003945 	.word	0x08003945
 800354c:	08003945 	.word	0x08003945
 8003550:	0800357d 	.word	0x0800357d
 8003554:	08003945 	.word	0x08003945
 8003558:	08003945 	.word	0x08003945
 800355c:	08003945 	.word	0x08003945
 8003560:	08003585 	.word	0x08003585
 8003564:	08003945 	.word	0x08003945
 8003568:	08003945 	.word	0x08003945
 800356c:	08003945 	.word	0x08003945
 8003570:	08003775 	.word	0x08003775
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4bb9      	ldr	r3, [pc, #740]	@ (800385c <HAL_RCC_GetSysClockFreq+0x358>)
 8003576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800357a:	e1e7      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800357c:	4bb8      	ldr	r3, [pc, #736]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x35c>)
 800357e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003582:	e1e3      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003584:	4bb4      	ldr	r3, [pc, #720]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800358c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003590:	4bb1      	ldr	r3, [pc, #708]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d071      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4bae      	ldr	r3, [pc, #696]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4621      	mov	r1, r4
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	6439      	str	r1, [r7, #64]	@ 0x40
 80035e0:	4629      	mov	r1, r5
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035f4:	4649      	mov	r1, r9
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fe:	4641      	mov	r1, r8
 8003600:	018a      	lsls	r2, r1, #6
 8003602:	4641      	mov	r1, r8
 8003604:	1a51      	subs	r1, r2, r1
 8003606:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003608:	4649      	mov	r1, r9
 800360a:	eb63 0301 	sbc.w	r3, r3, r1
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800361c:	4649      	mov	r1, r9
 800361e:	00cb      	lsls	r3, r1, #3
 8003620:	4641      	mov	r1, r8
 8003622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003626:	4641      	mov	r1, r8
 8003628:	00ca      	lsls	r2, r1, #3
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	4603      	mov	r3, r0
 8003630:	4622      	mov	r2, r4
 8003632:	189b      	adds	r3, r3, r2
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
 8003636:	462b      	mov	r3, r5
 8003638:	460a      	mov	r2, r1
 800363a:	eb42 0303 	adc.w	r3, r2, r3
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800364c:	4629      	mov	r1, r5
 800364e:	024b      	lsls	r3, r1, #9
 8003650:	4621      	mov	r1, r4
 8003652:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003656:	4621      	mov	r1, r4
 8003658:	024a      	lsls	r2, r1, #9
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003662:	2200      	movs	r2, #0
 8003664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003668:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800366c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003670:	f7fd faec 	bl	8000c4c <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4613      	mov	r3, r2
 800367a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800367e:	e067      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003680:	4b75      	ldr	r3, [pc, #468]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	099b      	lsrs	r3, r3, #6
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800368c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003690:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800369a:	2300      	movs	r3, #0
 800369c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800369e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80036a2:	4622      	mov	r2, r4
 80036a4:	462b      	mov	r3, r5
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b4:	0150      	lsls	r0, r2, #5
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4621      	mov	r1, r4
 80036bc:	1a51      	subs	r1, r2, r1
 80036be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036c0:	4629      	mov	r1, r5
 80036c2:	eb63 0301 	sbc.w	r3, r3, r1
 80036c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80036d4:	4649      	mov	r1, r9
 80036d6:	018b      	lsls	r3, r1, #6
 80036d8:	4641      	mov	r1, r8
 80036da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036de:	4641      	mov	r1, r8
 80036e0:	018a      	lsls	r2, r1, #6
 80036e2:	4641      	mov	r1, r8
 80036e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e8:	4649      	mov	r1, r9
 80036ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003702:	4692      	mov	sl, r2
 8003704:	469b      	mov	fp, r3
 8003706:	4623      	mov	r3, r4
 8003708:	eb1a 0303 	adds.w	r3, sl, r3
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	462b      	mov	r3, r5
 8003710:	eb4b 0303 	adc.w	r3, fp, r3
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003722:	4629      	mov	r1, r5
 8003724:	028b      	lsls	r3, r1, #10
 8003726:	4621      	mov	r1, r4
 8003728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800372c:	4621      	mov	r1, r4
 800372e:	028a      	lsls	r2, r1, #10
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003738:	2200      	movs	r2, #0
 800373a:	673b      	str	r3, [r7, #112]	@ 0x70
 800373c:	677a      	str	r2, [r7, #116]	@ 0x74
 800373e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003742:	f7fd fa83 	bl	8000c4c <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4613      	mov	r3, r2
 800374c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003750:	4b41      	ldr	r3, [pc, #260]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	3301      	adds	r3, #1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003772:	e0eb      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003774:	4b38      	ldr	r3, [pc, #224]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800377c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003780:	4b35      	ldr	r3, [pc, #212]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d06b      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378c:	4b32      	ldr	r3, [pc, #200]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x354>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	2200      	movs	r2, #0
 8003794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	663b      	str	r3, [r7, #96]	@ 0x60
 80037a0:	2300      	movs	r3, #0
 80037a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80037a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037a8:	4622      	mov	r2, r4
 80037aa:	462b      	mov	r3, r5
 80037ac:	f04f 0000 	mov.w	r0, #0
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	0159      	lsls	r1, r3, #5
 80037b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ba:	0150      	lsls	r0, r2, #5
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4621      	mov	r1, r4
 80037c2:	1a51      	subs	r1, r2, r1
 80037c4:	61b9      	str	r1, [r7, #24]
 80037c6:	4629      	mov	r1, r5
 80037c8:	eb63 0301 	sbc.w	r3, r3, r1
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037da:	4659      	mov	r1, fp
 80037dc:	018b      	lsls	r3, r1, #6
 80037de:	4651      	mov	r1, sl
 80037e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e4:	4651      	mov	r1, sl
 80037e6:	018a      	lsls	r2, r1, #6
 80037e8:	4651      	mov	r1, sl
 80037ea:	ebb2 0801 	subs.w	r8, r2, r1
 80037ee:	4659      	mov	r1, fp
 80037f0:	eb63 0901 	sbc.w	r9, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003800:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003804:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003808:	4690      	mov	r8, r2
 800380a:	4699      	mov	r9, r3
 800380c:	4623      	mov	r3, r4
 800380e:	eb18 0303 	adds.w	r3, r8, r3
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	462b      	mov	r3, r5
 8003816:	eb49 0303 	adc.w	r3, r9, r3
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003828:	4629      	mov	r1, r5
 800382a:	024b      	lsls	r3, r1, #9
 800382c:	4621      	mov	r1, r4
 800382e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003832:	4621      	mov	r1, r4
 8003834:	024a      	lsls	r2, r1, #9
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800383e:	2200      	movs	r2, #0
 8003840:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003842:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003844:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003848:	f7fd fa00 	bl	8000c4c <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003856:	e065      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x420>
 8003858:	40023800 	.word	0x40023800
 800385c:	00f42400 	.word	0x00f42400
 8003860:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003864:	4b3d      	ldr	r3, [pc, #244]	@ (800395c <HAL_RCC_GetSysClockFreq+0x458>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	2200      	movs	r2, #0
 800386c:	4618      	mov	r0, r3
 800386e:	4611      	mov	r1, r2
 8003870:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003874:	653b      	str	r3, [r7, #80]	@ 0x50
 8003876:	2300      	movs	r3, #0
 8003878:	657b      	str	r3, [r7, #84]	@ 0x54
 800387a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800387e:	4642      	mov	r2, r8
 8003880:	464b      	mov	r3, r9
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	0159      	lsls	r1, r3, #5
 800388c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003890:	0150      	lsls	r0, r2, #5
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4641      	mov	r1, r8
 8003898:	1a51      	subs	r1, r2, r1
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	4649      	mov	r1, r9
 800389e:	eb63 0301 	sbc.w	r3, r3, r1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038b0:	4659      	mov	r1, fp
 80038b2:	018b      	lsls	r3, r1, #6
 80038b4:	4651      	mov	r1, sl
 80038b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ba:	4651      	mov	r1, sl
 80038bc:	018a      	lsls	r2, r1, #6
 80038be:	4651      	mov	r1, sl
 80038c0:	1a54      	subs	r4, r2, r1
 80038c2:	4659      	mov	r1, fp
 80038c4:	eb63 0501 	sbc.w	r5, r3, r1
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	00eb      	lsls	r3, r5, #3
 80038d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d6:	00e2      	lsls	r2, r4, #3
 80038d8:	4614      	mov	r4, r2
 80038da:	461d      	mov	r5, r3
 80038dc:	4643      	mov	r3, r8
 80038de:	18e3      	adds	r3, r4, r3
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	464b      	mov	r3, r9
 80038e4:	eb45 0303 	adc.w	r3, r5, r3
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f6:	4629      	mov	r1, r5
 80038f8:	028b      	lsls	r3, r1, #10
 80038fa:	4621      	mov	r1, r4
 80038fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003900:	4621      	mov	r1, r4
 8003902:	028a      	lsls	r2, r1, #10
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800390c:	2200      	movs	r2, #0
 800390e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003910:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003912:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003916:	f7fd f999 	bl	8000c4c <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4613      	mov	r3, r2
 8003920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003924:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <HAL_RCC_GetSysClockFreq+0x458>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0f1b      	lsrs	r3, r3, #28
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003942:	e003      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800394a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003950:	4618      	mov	r0, r3
 8003952:	37b8      	adds	r7, #184	@ 0xb8
 8003954:	46bd      	mov	sp, r7
 8003956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	00f42400 	.word	0x00f42400

08003964 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e28d      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8083 	beq.w	8003a8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003984:	4b94      	ldr	r3, [pc, #592]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b04      	cmp	r3, #4
 800398e:	d019      	beq.n	80039c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003990:	4b91      	ldr	r3, [pc, #580]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
        || \
 8003998:	2b08      	cmp	r3, #8
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800399c:	4b8e      	ldr	r3, [pc, #568]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a8:	d00c      	beq.n	80039c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b8b      	ldr	r3, [pc, #556]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d112      	bne.n	80039dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4b88      	ldr	r3, [pc, #544]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b84      	ldr	r3, [pc, #528]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05b      	beq.n	8003a88 <HAL_RCC_OscConfig+0x124>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d157      	bne.n	8003a88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e25a      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x90>
 80039e6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7b      	ldr	r2, [pc, #492]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xcc>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0xb4>
 80039fe:	4b76      	ldr	r3, [pc, #472]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a75      	ldr	r2, [pc, #468]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b73      	ldr	r3, [pc, #460]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a72      	ldr	r2, [pc, #456]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xcc>
 8003a18:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f8a4 	bl	8001b84 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe f8a0 	bl	8001b84 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	@ 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e21f      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b61      	ldr	r3, [pc, #388]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xdc>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe f890 	bl	8001b84 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe f88c 	bl	8001b84 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	@ 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e20b      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	4b57      	ldr	r3, [pc, #348]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x104>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d06f      	beq.n	8003b76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a96:	4b50      	ldr	r3, [pc, #320]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d017      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d105      	bne.n	8003aba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003aae:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aba:	4b47      	ldr	r3, [pc, #284]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d11c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac6:	4b44      	ldr	r3, [pc, #272]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	4b41      	ldr	r3, [pc, #260]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_RCC_OscConfig+0x186>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e1d3      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aea:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4937      	ldr	r1, [pc, #220]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	e03a      	b.n	8003b76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b08:	4b34      	ldr	r3, [pc, #208]	@ (8003bdc <HAL_RCC_OscConfig+0x278>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fe f839 	bl	8001b84 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fe f835 	bl	8001b84 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1b4      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b28:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b28      	ldr	r3, [pc, #160]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4925      	ldr	r1, [pc, #148]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
 8003b48:	e015      	b.n	8003b76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <HAL_RCC_OscConfig+0x278>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fe f818 	bl	8001b84 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fe f814 	bl	8001b84 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e193      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d036      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <HAL_RCC_OscConfig+0x27c>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd fff8 	bl	8001b84 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fd fff4 	bl	8001b84 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e173      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003baa:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x234>
 8003bb6:	e01b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb8:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fd ffe1 	bl	8001b84 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc4:	e00e      	b.n	8003be4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc6:	f7fd ffdd 	bl	8001b84 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d907      	bls.n	8003be4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e15c      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	42470000 	.word	0x42470000
 8003be0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be4:	4b8a      	ldr	r3, [pc, #552]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ea      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8097 	beq.w	8003d2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c02:	4b83      	ldr	r3, [pc, #524]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	4b7f      	ldr	r3, [pc, #508]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	4a7e      	ldr	r2, [pc, #504]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2e:	4b79      	ldr	r3, [pc, #484]	@ (8003e14 <HAL_RCC_OscConfig+0x4b0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d118      	bne.n	8003c6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3a:	4b76      	ldr	r3, [pc, #472]	@ (8003e14 <HAL_RCC_OscConfig+0x4b0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a75      	ldr	r2, [pc, #468]	@ (8003e14 <HAL_RCC_OscConfig+0x4b0>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c46:	f7fd ff9d 	bl	8001b84 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4e:	f7fd ff99 	bl	8001b84 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e118      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c60:	4b6c      	ldr	r3, [pc, #432]	@ (8003e14 <HAL_RCC_OscConfig+0x4b0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x31e>
 8003c74:	4b66      	ldr	r3, [pc, #408]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c78:	4a65      	ldr	r2, [pc, #404]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c80:	e01c      	b.n	8003cbc <HAL_RCC_OscConfig+0x358>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x340>
 8003c8a:	4b61      	ldr	r3, [pc, #388]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8e:	4a60      	ldr	r2, [pc, #384]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	f043 0304 	orr.w	r3, r3, #4
 8003c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c96:	4b5e      	ldr	r3, [pc, #376]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0x358>
 8003ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a59      	ldr	r2, [pc, #356]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb0:	4b57      	ldr	r3, [pc, #348]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	4a56      	ldr	r2, [pc, #344]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003cb6:	f023 0304 	bic.w	r3, r3, #4
 8003cba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d015      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd ff5e 	bl	8001b84 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fd ff5a 	bl	8001b84 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0d7      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ee      	beq.n	8003ccc <HAL_RCC_OscConfig+0x368>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd ff48 	bl	8001b84 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fd ff44 	bl	8001b84 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0c1      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0e:	4b40      	ldr	r3, [pc, #256]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ee      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d20:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	4a3a      	ldr	r2, [pc, #232]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80ad 	beq.w	8003e90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d36:	4b36      	ldr	r3, [pc, #216]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d060      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d145      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <HAL_RCC_OscConfig+0x4b4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd ff18 	bl	8001b84 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fd ff14 	bl	8001b84 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e093      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	4b29      	ldr	r3, [pc, #164]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	019b      	lsls	r3, r3, #6
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da0:	071b      	lsls	r3, r3, #28
 8003da2:	491b      	ldr	r1, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x4b4>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fd fee9 	bl	8001b84 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fd fee5 	bl	8001b84 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e064      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x452>
 8003dd4:	e05c      	b.n	8003e90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_OscConfig+0x4b4>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fed2 	bl	8001b84 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fece 	bl	8001b84 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e04d      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x480>
 8003e02:	e045      	b.n	8003e90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e040      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e9c <HAL_RCC_OscConfig+0x538>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d030      	beq.n	8003e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d129      	bne.n	8003e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d122      	bne.n	8003e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d119      	bne.n	8003e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d10f      	bne.n	8003e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800

08003ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e041      	b.n	8003f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fbfc 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f000 f9b6 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d001      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e04e      	b.n	8003ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a23      	ldr	r2, [pc, #140]	@ (8004004 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d022      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f82:	d01d      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1f      	ldr	r2, [pc, #124]	@ (8004008 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d018      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <HAL_TIM_Base_Start_IT+0xcc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004010 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8004014 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	@ (8004018 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a18      	ldr	r2, [pc, #96]	@ (800401c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d111      	bne.n	8003fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d010      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	e007      	b.n	8003ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40010400 	.word	0x40010400
 8004018:	40014000 	.word	0x40014000
 800401c:	40001800 	.word	0x40001800

08004020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0202 	mvn.w	r2, #2
 8004054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8d2 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8c4 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f8d5 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d020      	beq.n	80040d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01b      	beq.n	80040d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0204 	mvn.w	r2, #4
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8ac 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f89e 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8af 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d020      	beq.n	800411c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0208 	mvn.w	r2, #8
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f886 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f878 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f889 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d020      	beq.n	8004168 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2208      	movs	r2, #8
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f860 	bl	8004214 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f852 	bl	8004200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f863 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0201 	mvn.w	r2, #1
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc ff2c 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f906 	bl	80043bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f834 	bl	800423c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0220 	mvn.w	r2, #32
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8d8 	bl	80043a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a46      	ldr	r2, [pc, #280]	@ (800437c <TIM_Base_SetConfig+0x12c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426e:	d00f      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a43      	ldr	r2, [pc, #268]	@ (8004380 <TIM_Base_SetConfig+0x130>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a42      	ldr	r2, [pc, #264]	@ (8004384 <TIM_Base_SetConfig+0x134>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a41      	ldr	r2, [pc, #260]	@ (8004388 <TIM_Base_SetConfig+0x138>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a40      	ldr	r2, [pc, #256]	@ (800438c <TIM_Base_SetConfig+0x13c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a35      	ldr	r2, [pc, #212]	@ (800437c <TIM_Base_SetConfig+0x12c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b0:	d027      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a32      	ldr	r2, [pc, #200]	@ (8004380 <TIM_Base_SetConfig+0x130>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d023      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a31      	ldr	r2, [pc, #196]	@ (8004384 <TIM_Base_SetConfig+0x134>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a30      	ldr	r2, [pc, #192]	@ (8004388 <TIM_Base_SetConfig+0x138>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2f      	ldr	r2, [pc, #188]	@ (800438c <TIM_Base_SetConfig+0x13c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d017      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004390 <TIM_Base_SetConfig+0x140>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004394 <TIM_Base_SetConfig+0x144>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00f      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004398 <TIM_Base_SetConfig+0x148>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	@ (800439c <TIM_Base_SetConfig+0x14c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2a      	ldr	r2, [pc, #168]	@ (80043a0 <TIM_Base_SetConfig+0x150>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a29      	ldr	r2, [pc, #164]	@ (80043a4 <TIM_Base_SetConfig+0x154>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a10      	ldr	r2, [pc, #64]	@ (800437c <TIM_Base_SetConfig+0x12c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0xf8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a12      	ldr	r2, [pc, #72]	@ (800438c <TIM_Base_SetConfig+0x13c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d103      	bne.n	8004350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	611a      	str	r2, [r3, #16]
  }
}
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00
 800438c:	40010400 	.word	0x40010400
 8004390:	40014000 	.word	0x40014000
 8004394:	40014400 	.word	0x40014400
 8004398:	40014800 	.word	0x40014800
 800439c:	40001800 	.word	0x40001800
 80043a0:	40001c00 	.word	0x40001c00
 80043a4:	40002000 	.word	0x40002000

080043a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e042      	b.n	8004468 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd f98c 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	@ 0x24
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fea1 	bl	800515c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4613      	mov	r3, r2
 800447c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b20      	cmp	r3, #32
 8004488:	d121      	bne.n	80044ce <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_UART_Transmit_IT+0x26>
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e01a      	b.n	80044d0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2221      	movs	r2, #33	@ 0x21
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d112      	bne.n	800451c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Receive_DMA+0x26>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e00b      	b.n	800451e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	461a      	mov	r2, r3
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fbc2 	bl	8004c9c <UART_Start_Receive_DMA>
 8004518:	4603      	mov	r3, r0
 800451a:	e000      	b.n	800451e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0ba      	sub	sp, #232	@ 0xe8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fd29 	bl	8004fde <UART_Receive_IT>
      return;
 800458c:	e25b      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800458e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80de 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
 8004598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80d1 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
 80045e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
 8004606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d011      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 81f2 	beq.w	8004a3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fcb4 	bl	8004fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004680:	2b40      	cmp	r3, #64	@ 0x40
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_UART_IRQHandler+0x17a>
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04f      	beq.n	8004742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fbbc 	bl	8004e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b40      	cmp	r3, #64	@ 0x40
 80046b4:	d141      	bne.n	800473a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1d9      	bne.n	80046b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d013      	beq.n	8004732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	4a7e      	ldr	r2, [pc, #504]	@ (8004908 <HAL_UART_IRQHandler+0x3e0>)
 8004710:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f9a0 	bl	8002a5c <HAL_DMA_Abort_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800472c:	4610      	mov	r0, r2
 800472e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00e      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f99e 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00a      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f99a 	bl	8004a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e006      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f996 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800474e:	e175      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	bf00      	nop
    return;
 8004752:	e173      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 814f 	bne.w	80049fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8148 	beq.w	80049fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8141 	beq.w	80049fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479a:	2b40      	cmp	r3, #64	@ 0x40
 800479c:	f040 80b6 	bne.w	800490c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8145 	beq.w	8004a40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047be:	429a      	cmp	r2, r3
 80047c0:	f080 813e 	bcs.w	8004a40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d6:	f000 8088 	beq.w	80048ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004806:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004812:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1d9      	bne.n	80047da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800484a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800484e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004852:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800485c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e1      	bne.n	8004826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3314      	adds	r3, #20
 8004868:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004888:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800488c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e3      	bne.n	8004862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e3      	bne.n	80048a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe f849 	bl	800297c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8c1 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004906:	e09b      	b.n	8004a40 <HAL_UART_IRQHandler+0x518>
 8004908:	08004ee7 	.word	0x08004ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004914:	b29b      	uxth	r3, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 808e 	beq.w	8004a44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8089 	beq.w	8004a44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004956:	647a      	str	r2, [r7, #68]	@ 0x44
 8004958:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800495c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e3      	bne.n	8004932 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3314      	adds	r3, #20
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	623b      	str	r3, [r7, #32]
   return(result);
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3314      	adds	r3, #20
 800498a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800498e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800499c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e3      	bne.n	800496a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0310 	bic.w	r3, r3, #16
 80049c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049d4:	61fa      	str	r2, [r7, #28]
 80049d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	617b      	str	r3, [r7, #20]
   return(result);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e3      	bne.n	80049b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f847 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049fa:	e023      	b.n	8004a44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d009      	beq.n	8004a1c <HAL_UART_IRQHandler+0x4f4>
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fa7a 	bl	8004f0e <UART_Transmit_IT>
    return;
 8004a1a:	e014      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <HAL_UART_IRQHandler+0x51e>
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 faba 	bl	8004fae <UART_EndTransmit_IT>
    return;
 8004a3a:	e004      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a3c:	bf00      	nop
 8004a3e:	e002      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a40:	bf00      	nop
 8004a42:	e000      	b.n	8004a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a44:	bf00      	nop
  }
}
 8004a46:	37e8      	adds	r7, #232	@ 0xe8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b09c      	sub	sp, #112	@ 0x70
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aac:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d172      	bne.n	8004ba2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004abe:	2200      	movs	r2, #0
 8004ac0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ae2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ae4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ae8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b16:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e5      	bne.n	8004b2a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d119      	bne.n	8004ba2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0310 	bic.w	r3, r3, #16
 8004b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	69b9      	ldr	r1, [r7, #24]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e5      	bne.n	8004b6e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bb8:	f7ff ff66 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bbc:	e002      	b.n	8004bc4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004bbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bc0:	f7fc fa8e 	bl	80010e0 <HAL_UART_RxCpltCallback>
}
 8004bc4:	bf00      	nop
 8004bc6:	3770      	adds	r7, #112	@ 0x70
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d108      	bne.n	8004bfa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ff48 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bf8:	e002      	b.n	8004c00 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff ff30 	bl	8004a60 <HAL_UART_RxHalfCpltCallback>
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c24:	2b80      	cmp	r3, #128	@ 0x80
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b21      	cmp	r3, #33	@ 0x21
 8004c3a:	d108      	bne.n	8004c4e <UART_DMAError+0x46>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c48:	68b8      	ldr	r0, [r7, #8]
 8004c4a:	f000 f8c1 	bl	8004dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c58:	2b40      	cmp	r3, #64	@ 0x40
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b22      	cmp	r3, #34	@ 0x22
 8004c6e:	d108      	bne.n	8004c82 <UART_DMAError+0x7a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f8cf 	bl	8004e20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	f043 0210 	orr.w	r2, r3, #16
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c8e:	68b8      	ldr	r0, [r7, #8]
 8004c90:	f7ff fef0 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b098      	sub	sp, #96	@ 0x60
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	88fa      	ldrh	r2, [r7, #6]
 8004cb4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2222      	movs	r2, #34	@ 0x22
 8004cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc4 <UART_Start_Receive_DMA+0x128>)
 8004cca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc8 <UART_Start_Receive_DMA+0x12c>)
 8004cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dcc <UART_Start_Receive_DMA+0x130>)
 8004cda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	f7fd fde6 	bl	80028cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d019      	beq.n	8004d52 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d3e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e5      	bne.n	8004d1e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3314      	adds	r3, #20
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d72:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	617b      	str	r3, [r7, #20]
   return(result);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004da6:	627a      	str	r2, [r7, #36]	@ 0x24
 8004da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6a39      	ldr	r1, [r7, #32]
 8004dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3760      	adds	r7, #96	@ 0x60
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08004aa1 	.word	0x08004aa1
 8004dc8:	08004bcd 	.word	0x08004bcd
 8004dcc:	08004c09 	.word	0x08004c09

08004dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	@ 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	61ba      	str	r2, [r7, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6979      	ldr	r1, [r7, #20]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	613b      	str	r3, [r7, #16]
   return(result);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004e14:	bf00      	nop
 8004e16:	3724      	adds	r7, #36	@ 0x24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b095      	sub	sp, #84	@ 0x54
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e48:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d119      	bne.n	8004ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f023 0310 	bic.w	r3, r3, #16
 8004eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eb8:	61ba      	str	r2, [r7, #24]
 8004eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004eda:	bf00      	nop
 8004edc:	3754      	adds	r7, #84	@ 0x54
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fdb7 	bl	8004a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b21      	cmp	r3, #33	@ 0x21
 8004f20:	d13e      	bne.n	8004fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2a:	d114      	bne.n	8004f56 <UART_Transmit_IT+0x48>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d110      	bne.n	8004f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	621a      	str	r2, [r3, #32]
 8004f54:	e008      	b.n	8004f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6211      	str	r1, [r2, #32]
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4619      	mov	r1, r3
 8004f76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10f      	bne.n	8004f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff fd3c 	bl	8004a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08c      	sub	sp, #48	@ 0x30
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b22      	cmp	r3, #34	@ 0x22
 8004ff0:	f040 80ae 	bne.w	8005150 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ffc:	d117      	bne.n	800502e <UART_Receive_IT+0x50>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d113      	bne.n	800502e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501c:	b29a      	uxth	r2, r3
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	1c9a      	adds	r2, r3, #2
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28
 800502c:	e026      	b.n	800507c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005040:	d007      	beq.n	8005052 <UART_Receive_IT+0x74>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10a      	bne.n	8005060 <UART_Receive_IT+0x82>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e008      	b.n	8005072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506c:	b2da      	uxtb	r2, r3
 800506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4619      	mov	r1, r3
 800508a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800508c:	2b00      	cmp	r3, #0
 800508e:	d15d      	bne.n	800514c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0220 	bic.w	r2, r2, #32
 800509e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d135      	bne.n	8005142 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	330c      	adds	r3, #12
 80050e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	613b      	str	r3, [r7, #16]
   return(result);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 0310 	bic.w	r3, r3, #16
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fc:	623a      	str	r2, [r7, #32]
 80050fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	69f9      	ldr	r1, [r7, #28]
 8005102:	6a3a      	ldr	r2, [r7, #32]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	61bb      	str	r3, [r7, #24]
   return(result);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b10      	cmp	r3, #16
 800511c:	d10a      	bne.n	8005134 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fca4 	bl	8004a88 <HAL_UARTEx_RxEventCallback>
 8005140:	e002      	b.n	8005148 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb ffcc 	bl	80010e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e002      	b.n	8005152 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3730      	adds	r7, #48	@ 0x30
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800515c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005160:	b0c0      	sub	sp, #256	@ 0x100
 8005162:	af00      	add	r7, sp, #0
 8005164:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	68d9      	ldr	r1, [r3, #12]
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	ea40 0301 	orr.w	r3, r0, r1
 8005184:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	431a      	orrs	r2, r3
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	431a      	orrs	r2, r3
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051b4:	f021 010c 	bic.w	r1, r1, #12
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051c2:	430b      	orrs	r3, r1
 80051c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d6:	6999      	ldr	r1, [r3, #24]
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	ea40 0301 	orr.w	r3, r0, r1
 80051e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005428 <UART_SetConfig+0x2cc>)
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d005      	beq.n	80051fc <UART_SetConfig+0xa0>
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b8d      	ldr	r3, [pc, #564]	@ (800542c <UART_SetConfig+0x2d0>)
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d104      	bne.n	8005206 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7fe f96e 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8005200:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005204:	e003      	b.n	800520e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005206:	f7fe f955 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 800520a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005218:	f040 810c 	bne.w	8005434 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800521c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005220:	2200      	movs	r2, #0
 8005222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005226:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800522a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800522e:	4622      	mov	r2, r4
 8005230:	462b      	mov	r3, r5
 8005232:	1891      	adds	r1, r2, r2
 8005234:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005236:	415b      	adcs	r3, r3
 8005238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800523a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800523e:	4621      	mov	r1, r4
 8005240:	eb12 0801 	adds.w	r8, r2, r1
 8005244:	4629      	mov	r1, r5
 8005246:	eb43 0901 	adc.w	r9, r3, r1
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800525a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525e:	4690      	mov	r8, r2
 8005260:	4699      	mov	r9, r3
 8005262:	4623      	mov	r3, r4
 8005264:	eb18 0303 	adds.w	r3, r8, r3
 8005268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800526c:	462b      	mov	r3, r5
 800526e:	eb49 0303 	adc.w	r3, r9, r3
 8005272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005282:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005286:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800528a:	460b      	mov	r3, r1
 800528c:	18db      	adds	r3, r3, r3
 800528e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005290:	4613      	mov	r3, r2
 8005292:	eb42 0303 	adc.w	r3, r2, r3
 8005296:	657b      	str	r3, [r7, #84]	@ 0x54
 8005298:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800529c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052a0:	f7fb fcd4 	bl	8000c4c <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4b61      	ldr	r3, [pc, #388]	@ (8005430 <UART_SetConfig+0x2d4>)
 80052aa:	fba3 2302 	umull	r2, r3, r3, r2
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	011c      	lsls	r4, r3, #4
 80052b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	1891      	adds	r1, r2, r2
 80052ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052cc:	415b      	adcs	r3, r3
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052d4:	4641      	mov	r1, r8
 80052d6:	eb12 0a01 	adds.w	sl, r2, r1
 80052da:	4649      	mov	r1, r9
 80052dc:	eb43 0b01 	adc.w	fp, r3, r1
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052f4:	4692      	mov	sl, r2
 80052f6:	469b      	mov	fp, r3
 80052f8:	4643      	mov	r3, r8
 80052fa:	eb1a 0303 	adds.w	r3, sl, r3
 80052fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005302:	464b      	mov	r3, r9
 8005304:	eb4b 0303 	adc.w	r3, fp, r3
 8005308:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005318:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800531c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005320:	460b      	mov	r3, r1
 8005322:	18db      	adds	r3, r3, r3
 8005324:	643b      	str	r3, [r7, #64]	@ 0x40
 8005326:	4613      	mov	r3, r2
 8005328:	eb42 0303 	adc.w	r3, r2, r3
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005332:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005336:	f7fb fc89 	bl	8000c4c <__aeabi_uldivmod>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4611      	mov	r1, r2
 8005340:	4b3b      	ldr	r3, [pc, #236]	@ (8005430 <UART_SetConfig+0x2d4>)
 8005342:	fba3 2301 	umull	r2, r3, r3, r1
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	2264      	movs	r2, #100	@ 0x64
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	1acb      	subs	r3, r1, r3
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005356:	4b36      	ldr	r3, [pc, #216]	@ (8005430 <UART_SetConfig+0x2d4>)
 8005358:	fba3 2302 	umull	r2, r3, r3, r2
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005364:	441c      	add	r4, r3
 8005366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800536a:	2200      	movs	r2, #0
 800536c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005370:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005374:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	1891      	adds	r1, r2, r2
 800537e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005380:	415b      	adcs	r3, r3
 8005382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005388:	4641      	mov	r1, r8
 800538a:	1851      	adds	r1, r2, r1
 800538c:	6339      	str	r1, [r7, #48]	@ 0x30
 800538e:	4649      	mov	r1, r9
 8005390:	414b      	adcs	r3, r1
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053a0:	4659      	mov	r1, fp
 80053a2:	00cb      	lsls	r3, r1, #3
 80053a4:	4651      	mov	r1, sl
 80053a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053aa:	4651      	mov	r1, sl
 80053ac:	00ca      	lsls	r2, r1, #3
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	4642      	mov	r2, r8
 80053b6:	189b      	adds	r3, r3, r2
 80053b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053bc:	464b      	mov	r3, r9
 80053be:	460a      	mov	r2, r1
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053dc:	460b      	mov	r3, r1
 80053de:	18db      	adds	r3, r3, r3
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053e2:	4613      	mov	r3, r2
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053f2:	f7fb fc2b 	bl	8000c4c <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005430 <UART_SetConfig+0x2d4>)
 80053fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	2164      	movs	r1, #100	@ 0x64
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	3332      	adds	r3, #50	@ 0x32
 800540e:	4a08      	ldr	r2, [pc, #32]	@ (8005430 <UART_SetConfig+0x2d4>)
 8005410:	fba2 2303 	umull	r2, r3, r2, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	f003 0207 	and.w	r2, r3, #7
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4422      	add	r2, r4
 8005422:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005424:	e106      	b.n	8005634 <UART_SetConfig+0x4d8>
 8005426:	bf00      	nop
 8005428:	40011000 	.word	0x40011000
 800542c:	40011400 	.word	0x40011400
 8005430:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005438:	2200      	movs	r2, #0
 800543a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800543e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005442:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005446:	4642      	mov	r2, r8
 8005448:	464b      	mov	r3, r9
 800544a:	1891      	adds	r1, r2, r2
 800544c:	6239      	str	r1, [r7, #32]
 800544e:	415b      	adcs	r3, r3
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
 8005452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005456:	4641      	mov	r1, r8
 8005458:	1854      	adds	r4, r2, r1
 800545a:	4649      	mov	r1, r9
 800545c:	eb43 0501 	adc.w	r5, r3, r1
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	00eb      	lsls	r3, r5, #3
 800546a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546e:	00e2      	lsls	r2, r4, #3
 8005470:	4614      	mov	r4, r2
 8005472:	461d      	mov	r5, r3
 8005474:	4643      	mov	r3, r8
 8005476:	18e3      	adds	r3, r4, r3
 8005478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800547c:	464b      	mov	r3, r9
 800547e:	eb45 0303 	adc.w	r3, r5, r3
 8005482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005492:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054a2:	4629      	mov	r1, r5
 80054a4:	008b      	lsls	r3, r1, #2
 80054a6:	4621      	mov	r1, r4
 80054a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ac:	4621      	mov	r1, r4
 80054ae:	008a      	lsls	r2, r1, #2
 80054b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054b4:	f7fb fbca 	bl	8000c4c <__aeabi_uldivmod>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4b60      	ldr	r3, [pc, #384]	@ (8005640 <UART_SetConfig+0x4e4>)
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	011c      	lsls	r4, r3, #4
 80054c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	1891      	adds	r1, r2, r2
 80054de:	61b9      	str	r1, [r7, #24]
 80054e0:	415b      	adcs	r3, r3
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e8:	4641      	mov	r1, r8
 80054ea:	1851      	adds	r1, r2, r1
 80054ec:	6139      	str	r1, [r7, #16]
 80054ee:	4649      	mov	r1, r9
 80054f0:	414b      	adcs	r3, r1
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005500:	4659      	mov	r1, fp
 8005502:	00cb      	lsls	r3, r1, #3
 8005504:	4651      	mov	r1, sl
 8005506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800550a:	4651      	mov	r1, sl
 800550c:	00ca      	lsls	r2, r1, #3
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	4603      	mov	r3, r0
 8005514:	4642      	mov	r2, r8
 8005516:	189b      	adds	r3, r3, r2
 8005518:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800551c:	464b      	mov	r3, r9
 800551e:	460a      	mov	r2, r1
 8005520:	eb42 0303 	adc.w	r3, r2, r3
 8005524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005532:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005540:	4649      	mov	r1, r9
 8005542:	008b      	lsls	r3, r1, #2
 8005544:	4641      	mov	r1, r8
 8005546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800554a:	4641      	mov	r1, r8
 800554c:	008a      	lsls	r2, r1, #2
 800554e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005552:	f7fb fb7b 	bl	8000c4c <__aeabi_uldivmod>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4611      	mov	r1, r2
 800555c:	4b38      	ldr	r3, [pc, #224]	@ (8005640 <UART_SetConfig+0x4e4>)
 800555e:	fba3 2301 	umull	r2, r3, r3, r1
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	2264      	movs	r2, #100	@ 0x64
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	1acb      	subs	r3, r1, r3
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	3332      	adds	r3, #50	@ 0x32
 8005570:	4a33      	ldr	r2, [pc, #204]	@ (8005640 <UART_SetConfig+0x4e4>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800557c:	441c      	add	r4, r3
 800557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005582:	2200      	movs	r2, #0
 8005584:	673b      	str	r3, [r7, #112]	@ 0x70
 8005586:	677a      	str	r2, [r7, #116]	@ 0x74
 8005588:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	1891      	adds	r1, r2, r2
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	415b      	adcs	r3, r3
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800559c:	4641      	mov	r1, r8
 800559e:	1851      	adds	r1, r2, r1
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	4649      	mov	r1, r9
 80055a4:	414b      	adcs	r3, r1
 80055a6:	607b      	str	r3, [r7, #4]
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055b4:	4659      	mov	r1, fp
 80055b6:	00cb      	lsls	r3, r1, #3
 80055b8:	4651      	mov	r1, sl
 80055ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055be:	4651      	mov	r1, sl
 80055c0:	00ca      	lsls	r2, r1, #3
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	4642      	mov	r2, r8
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ce:	464b      	mov	r3, r9
 80055d0:	460a      	mov	r2, r1
 80055d2:	eb42 0303 	adc.w	r3, r2, r3
 80055d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055f0:	4649      	mov	r1, r9
 80055f2:	008b      	lsls	r3, r1, #2
 80055f4:	4641      	mov	r1, r8
 80055f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055fa:	4641      	mov	r1, r8
 80055fc:	008a      	lsls	r2, r1, #2
 80055fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005602:	f7fb fb23 	bl	8000c4c <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <UART_SetConfig+0x4e4>)
 800560c:	fba3 1302 	umull	r1, r3, r3, r2
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	2164      	movs	r1, #100	@ 0x64
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	3332      	adds	r3, #50	@ 0x32
 800561e:	4a08      	ldr	r2, [pc, #32]	@ (8005640 <UART_SetConfig+0x4e4>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	f003 020f 	and.w	r2, r3, #15
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4422      	add	r2, r4
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	bf00      	nop
 8005636:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800563a:	46bd      	mov	sp, r7
 800563c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005640:	51eb851f 	.word	0x51eb851f

08005644 <atof>:
 8005644:	2100      	movs	r1, #0
 8005646:	f000 be03 	b.w	8006250 <strtod>

0800564a <sulp>:
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	4604      	mov	r4, r0
 800564e:	460d      	mov	r5, r1
 8005650:	ec45 4b10 	vmov	d0, r4, r5
 8005654:	4616      	mov	r6, r2
 8005656:	f001 ff83 	bl	8007560 <__ulp>
 800565a:	ec51 0b10 	vmov	r0, r1, d0
 800565e:	b17e      	cbz	r6, 8005680 <sulp+0x36>
 8005660:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005664:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005668:	2b00      	cmp	r3, #0
 800566a:	dd09      	ble.n	8005680 <sulp+0x36>
 800566c:	051b      	lsls	r3, r3, #20
 800566e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005672:	2400      	movs	r4, #0
 8005674:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ffdc 	bl	8000638 <__aeabi_dmul>
 8005680:	ec41 0b10 	vmov	d0, r0, r1
 8005684:	bd70      	pop	{r4, r5, r6, pc}
	...

08005688 <_strtod_l>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	b09f      	sub	sp, #124	@ 0x7c
 800568e:	460c      	mov	r4, r1
 8005690:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005692:	2200      	movs	r2, #0
 8005694:	921a      	str	r2, [sp, #104]	@ 0x68
 8005696:	9005      	str	r0, [sp, #20]
 8005698:	f04f 0a00 	mov.w	sl, #0
 800569c:	f04f 0b00 	mov.w	fp, #0
 80056a0:	460a      	mov	r2, r1
 80056a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80056a4:	7811      	ldrb	r1, [r2, #0]
 80056a6:	292b      	cmp	r1, #43	@ 0x2b
 80056a8:	d04a      	beq.n	8005740 <_strtod_l+0xb8>
 80056aa:	d838      	bhi.n	800571e <_strtod_l+0x96>
 80056ac:	290d      	cmp	r1, #13
 80056ae:	d832      	bhi.n	8005716 <_strtod_l+0x8e>
 80056b0:	2908      	cmp	r1, #8
 80056b2:	d832      	bhi.n	800571a <_strtod_l+0x92>
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d03b      	beq.n	8005730 <_strtod_l+0xa8>
 80056b8:	2200      	movs	r2, #0
 80056ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80056bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80056be:	782a      	ldrb	r2, [r5, #0]
 80056c0:	2a30      	cmp	r2, #48	@ 0x30
 80056c2:	f040 80b2 	bne.w	800582a <_strtod_l+0x1a2>
 80056c6:	786a      	ldrb	r2, [r5, #1]
 80056c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80056cc:	2a58      	cmp	r2, #88	@ 0x58
 80056ce:	d16e      	bne.n	80057ae <_strtod_l+0x126>
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4a8f      	ldr	r2, [pc, #572]	@ (8005918 <_strtod_l+0x290>)
 80056dc:	9805      	ldr	r0, [sp, #20]
 80056de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80056e0:	a919      	add	r1, sp, #100	@ 0x64
 80056e2:	f001 f83f 	bl	8006764 <__gethex>
 80056e6:	f010 060f 	ands.w	r6, r0, #15
 80056ea:	4604      	mov	r4, r0
 80056ec:	d005      	beq.n	80056fa <_strtod_l+0x72>
 80056ee:	2e06      	cmp	r6, #6
 80056f0:	d128      	bne.n	8005744 <_strtod_l+0xbc>
 80056f2:	3501      	adds	r5, #1
 80056f4:	2300      	movs	r3, #0
 80056f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80056f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80056fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f040 858e 	bne.w	800621e <_strtod_l+0xb96>
 8005702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005704:	b1cb      	cbz	r3, 800573a <_strtod_l+0xb2>
 8005706:	4652      	mov	r2, sl
 8005708:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800570c:	ec43 2b10 	vmov	d0, r2, r3
 8005710:	b01f      	add	sp, #124	@ 0x7c
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005716:	2920      	cmp	r1, #32
 8005718:	d1ce      	bne.n	80056b8 <_strtod_l+0x30>
 800571a:	3201      	adds	r2, #1
 800571c:	e7c1      	b.n	80056a2 <_strtod_l+0x1a>
 800571e:	292d      	cmp	r1, #45	@ 0x2d
 8005720:	d1ca      	bne.n	80056b8 <_strtod_l+0x30>
 8005722:	2101      	movs	r1, #1
 8005724:	910e      	str	r1, [sp, #56]	@ 0x38
 8005726:	1c51      	adds	r1, r2, #1
 8005728:	9119      	str	r1, [sp, #100]	@ 0x64
 800572a:	7852      	ldrb	r2, [r2, #1]
 800572c:	2a00      	cmp	r2, #0
 800572e:	d1c5      	bne.n	80056bc <_strtod_l+0x34>
 8005730:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005732:	9419      	str	r4, [sp, #100]	@ 0x64
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 8570 	bne.w	800621a <_strtod_l+0xb92>
 800573a:	4652      	mov	r2, sl
 800573c:	465b      	mov	r3, fp
 800573e:	e7e5      	b.n	800570c <_strtod_l+0x84>
 8005740:	2100      	movs	r1, #0
 8005742:	e7ef      	b.n	8005724 <_strtod_l+0x9c>
 8005744:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005746:	b13a      	cbz	r2, 8005758 <_strtod_l+0xd0>
 8005748:	2135      	movs	r1, #53	@ 0x35
 800574a:	a81c      	add	r0, sp, #112	@ 0x70
 800574c:	f002 f802 	bl	8007754 <__copybits>
 8005750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005752:	9805      	ldr	r0, [sp, #20]
 8005754:	f001 fbd8 	bl	8006f08 <_Bfree>
 8005758:	3e01      	subs	r6, #1
 800575a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800575c:	2e04      	cmp	r6, #4
 800575e:	d806      	bhi.n	800576e <_strtod_l+0xe6>
 8005760:	e8df f006 	tbb	[pc, r6]
 8005764:	201d0314 	.word	0x201d0314
 8005768:	14          	.byte	0x14
 8005769:	00          	.byte	0x00
 800576a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800576e:	05e1      	lsls	r1, r4, #23
 8005770:	bf48      	it	mi
 8005772:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800577a:	0d1b      	lsrs	r3, r3, #20
 800577c:	051b      	lsls	r3, r3, #20
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1bb      	bne.n	80056fa <_strtod_l+0x72>
 8005782:	f000 fef9 	bl	8006578 <__errno>
 8005786:	2322      	movs	r3, #34	@ 0x22
 8005788:	6003      	str	r3, [r0, #0]
 800578a:	e7b6      	b.n	80056fa <_strtod_l+0x72>
 800578c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005790:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005794:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005798:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800579c:	e7e7      	b.n	800576e <_strtod_l+0xe6>
 800579e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005920 <_strtod_l+0x298>
 80057a2:	e7e4      	b.n	800576e <_strtod_l+0xe6>
 80057a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80057a8:	f04f 3aff 	mov.w	sl, #4294967295
 80057ac:	e7df      	b.n	800576e <_strtod_l+0xe6>
 80057ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	2b30      	cmp	r3, #48	@ 0x30
 80057b8:	d0f9      	beq.n	80057ae <_strtod_l+0x126>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d09d      	beq.n	80056fa <_strtod_l+0x72>
 80057be:	2301      	movs	r3, #1
 80057c0:	2700      	movs	r7, #0
 80057c2:	9308      	str	r3, [sp, #32]
 80057c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80057c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80057c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80057ca:	46b9      	mov	r9, r7
 80057cc:	220a      	movs	r2, #10
 80057ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80057d0:	7805      	ldrb	r5, [r0, #0]
 80057d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80057d6:	b2d9      	uxtb	r1, r3
 80057d8:	2909      	cmp	r1, #9
 80057da:	d928      	bls.n	800582e <_strtod_l+0x1a6>
 80057dc:	494f      	ldr	r1, [pc, #316]	@ (800591c <_strtod_l+0x294>)
 80057de:	2201      	movs	r2, #1
 80057e0:	f000 fe71 	bl	80064c6 <strncmp>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d032      	beq.n	800584e <_strtod_l+0x1c6>
 80057e8:	2000      	movs	r0, #0
 80057ea:	462a      	mov	r2, r5
 80057ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80057ee:	464d      	mov	r5, r9
 80057f0:	4603      	mov	r3, r0
 80057f2:	2a65      	cmp	r2, #101	@ 0x65
 80057f4:	d001      	beq.n	80057fa <_strtod_l+0x172>
 80057f6:	2a45      	cmp	r2, #69	@ 0x45
 80057f8:	d114      	bne.n	8005824 <_strtod_l+0x19c>
 80057fa:	b91d      	cbnz	r5, 8005804 <_strtod_l+0x17c>
 80057fc:	9a08      	ldr	r2, [sp, #32]
 80057fe:	4302      	orrs	r2, r0
 8005800:	d096      	beq.n	8005730 <_strtod_l+0xa8>
 8005802:	2500      	movs	r5, #0
 8005804:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005806:	1c62      	adds	r2, r4, #1
 8005808:	9219      	str	r2, [sp, #100]	@ 0x64
 800580a:	7862      	ldrb	r2, [r4, #1]
 800580c:	2a2b      	cmp	r2, #43	@ 0x2b
 800580e:	d07a      	beq.n	8005906 <_strtod_l+0x27e>
 8005810:	2a2d      	cmp	r2, #45	@ 0x2d
 8005812:	d07e      	beq.n	8005912 <_strtod_l+0x28a>
 8005814:	f04f 0c00 	mov.w	ip, #0
 8005818:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800581c:	2909      	cmp	r1, #9
 800581e:	f240 8085 	bls.w	800592c <_strtod_l+0x2a4>
 8005822:	9419      	str	r4, [sp, #100]	@ 0x64
 8005824:	f04f 0800 	mov.w	r8, #0
 8005828:	e0a5      	b.n	8005976 <_strtod_l+0x2ee>
 800582a:	2300      	movs	r3, #0
 800582c:	e7c8      	b.n	80057c0 <_strtod_l+0x138>
 800582e:	f1b9 0f08 	cmp.w	r9, #8
 8005832:	bfd8      	it	le
 8005834:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005836:	f100 0001 	add.w	r0, r0, #1
 800583a:	bfda      	itte	le
 800583c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005840:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005842:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005846:	f109 0901 	add.w	r9, r9, #1
 800584a:	9019      	str	r0, [sp, #100]	@ 0x64
 800584c:	e7bf      	b.n	80057ce <_strtod_l+0x146>
 800584e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	9219      	str	r2, [sp, #100]	@ 0x64
 8005854:	785a      	ldrb	r2, [r3, #1]
 8005856:	f1b9 0f00 	cmp.w	r9, #0
 800585a:	d03b      	beq.n	80058d4 <_strtod_l+0x24c>
 800585c:	900a      	str	r0, [sp, #40]	@ 0x28
 800585e:	464d      	mov	r5, r9
 8005860:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005864:	2b09      	cmp	r3, #9
 8005866:	d912      	bls.n	800588e <_strtod_l+0x206>
 8005868:	2301      	movs	r3, #1
 800586a:	e7c2      	b.n	80057f2 <_strtod_l+0x16a>
 800586c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	9219      	str	r2, [sp, #100]	@ 0x64
 8005872:	785a      	ldrb	r2, [r3, #1]
 8005874:	3001      	adds	r0, #1
 8005876:	2a30      	cmp	r2, #48	@ 0x30
 8005878:	d0f8      	beq.n	800586c <_strtod_l+0x1e4>
 800587a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800587e:	2b08      	cmp	r3, #8
 8005880:	f200 84d2 	bhi.w	8006228 <_strtod_l+0xba0>
 8005884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005886:	900a      	str	r0, [sp, #40]	@ 0x28
 8005888:	2000      	movs	r0, #0
 800588a:	930c      	str	r3, [sp, #48]	@ 0x30
 800588c:	4605      	mov	r5, r0
 800588e:	3a30      	subs	r2, #48	@ 0x30
 8005890:	f100 0301 	add.w	r3, r0, #1
 8005894:	d018      	beq.n	80058c8 <_strtod_l+0x240>
 8005896:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005898:	4419      	add	r1, r3
 800589a:	910a      	str	r1, [sp, #40]	@ 0x28
 800589c:	462e      	mov	r6, r5
 800589e:	f04f 0e0a 	mov.w	lr, #10
 80058a2:	1c71      	adds	r1, r6, #1
 80058a4:	eba1 0c05 	sub.w	ip, r1, r5
 80058a8:	4563      	cmp	r3, ip
 80058aa:	dc15      	bgt.n	80058d8 <_strtod_l+0x250>
 80058ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80058b0:	182b      	adds	r3, r5, r0
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	f105 0501 	add.w	r5, r5, #1
 80058b8:	4405      	add	r5, r0
 80058ba:	dc1a      	bgt.n	80058f2 <_strtod_l+0x26a>
 80058bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058be:	230a      	movs	r3, #10
 80058c0:	fb03 2301 	mla	r3, r3, r1, r2
 80058c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058c6:	2300      	movs	r3, #0
 80058c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80058ca:	1c51      	adds	r1, r2, #1
 80058cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80058ce:	7852      	ldrb	r2, [r2, #1]
 80058d0:	4618      	mov	r0, r3
 80058d2:	e7c5      	b.n	8005860 <_strtod_l+0x1d8>
 80058d4:	4648      	mov	r0, r9
 80058d6:	e7ce      	b.n	8005876 <_strtod_l+0x1ee>
 80058d8:	2e08      	cmp	r6, #8
 80058da:	dc05      	bgt.n	80058e8 <_strtod_l+0x260>
 80058dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80058de:	fb0e f606 	mul.w	r6, lr, r6
 80058e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80058e4:	460e      	mov	r6, r1
 80058e6:	e7dc      	b.n	80058a2 <_strtod_l+0x21a>
 80058e8:	2910      	cmp	r1, #16
 80058ea:	bfd8      	it	le
 80058ec:	fb0e f707 	mulle.w	r7, lr, r7
 80058f0:	e7f8      	b.n	80058e4 <_strtod_l+0x25c>
 80058f2:	2b0f      	cmp	r3, #15
 80058f4:	bfdc      	itt	le
 80058f6:	230a      	movle	r3, #10
 80058f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80058fc:	e7e3      	b.n	80058c6 <_strtod_l+0x23e>
 80058fe:	2300      	movs	r3, #0
 8005900:	930a      	str	r3, [sp, #40]	@ 0x28
 8005902:	2301      	movs	r3, #1
 8005904:	e77a      	b.n	80057fc <_strtod_l+0x174>
 8005906:	f04f 0c00 	mov.w	ip, #0
 800590a:	1ca2      	adds	r2, r4, #2
 800590c:	9219      	str	r2, [sp, #100]	@ 0x64
 800590e:	78a2      	ldrb	r2, [r4, #2]
 8005910:	e782      	b.n	8005818 <_strtod_l+0x190>
 8005912:	f04f 0c01 	mov.w	ip, #1
 8005916:	e7f8      	b.n	800590a <_strtod_l+0x282>
 8005918:	08008770 	.word	0x08008770
 800591c:	080085f4 	.word	0x080085f4
 8005920:	7ff00000 	.word	0x7ff00000
 8005924:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005926:	1c51      	adds	r1, r2, #1
 8005928:	9119      	str	r1, [sp, #100]	@ 0x64
 800592a:	7852      	ldrb	r2, [r2, #1]
 800592c:	2a30      	cmp	r2, #48	@ 0x30
 800592e:	d0f9      	beq.n	8005924 <_strtod_l+0x29c>
 8005930:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005934:	2908      	cmp	r1, #8
 8005936:	f63f af75 	bhi.w	8005824 <_strtod_l+0x19c>
 800593a:	3a30      	subs	r2, #48	@ 0x30
 800593c:	9209      	str	r2, [sp, #36]	@ 0x24
 800593e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005940:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005942:	f04f 080a 	mov.w	r8, #10
 8005946:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005948:	1c56      	adds	r6, r2, #1
 800594a:	9619      	str	r6, [sp, #100]	@ 0x64
 800594c:	7852      	ldrb	r2, [r2, #1]
 800594e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005952:	f1be 0f09 	cmp.w	lr, #9
 8005956:	d939      	bls.n	80059cc <_strtod_l+0x344>
 8005958:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800595a:	1a76      	subs	r6, r6, r1
 800595c:	2e08      	cmp	r6, #8
 800595e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005962:	dc03      	bgt.n	800596c <_strtod_l+0x2e4>
 8005964:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005966:	4588      	cmp	r8, r1
 8005968:	bfa8      	it	ge
 800596a:	4688      	movge	r8, r1
 800596c:	f1bc 0f00 	cmp.w	ip, #0
 8005970:	d001      	beq.n	8005976 <_strtod_l+0x2ee>
 8005972:	f1c8 0800 	rsb	r8, r8, #0
 8005976:	2d00      	cmp	r5, #0
 8005978:	d14e      	bne.n	8005a18 <_strtod_l+0x390>
 800597a:	9908      	ldr	r1, [sp, #32]
 800597c:	4308      	orrs	r0, r1
 800597e:	f47f aebc 	bne.w	80056fa <_strtod_l+0x72>
 8005982:	2b00      	cmp	r3, #0
 8005984:	f47f aed4 	bne.w	8005730 <_strtod_l+0xa8>
 8005988:	2a69      	cmp	r2, #105	@ 0x69
 800598a:	d028      	beq.n	80059de <_strtod_l+0x356>
 800598c:	dc25      	bgt.n	80059da <_strtod_l+0x352>
 800598e:	2a49      	cmp	r2, #73	@ 0x49
 8005990:	d025      	beq.n	80059de <_strtod_l+0x356>
 8005992:	2a4e      	cmp	r2, #78	@ 0x4e
 8005994:	f47f aecc 	bne.w	8005730 <_strtod_l+0xa8>
 8005998:	499a      	ldr	r1, [pc, #616]	@ (8005c04 <_strtod_l+0x57c>)
 800599a:	a819      	add	r0, sp, #100	@ 0x64
 800599c:	f001 f904 	bl	8006ba8 <__match>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f43f aec5 	beq.w	8005730 <_strtod_l+0xa8>
 80059a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b28      	cmp	r3, #40	@ 0x28
 80059ac:	d12e      	bne.n	8005a0c <_strtod_l+0x384>
 80059ae:	4996      	ldr	r1, [pc, #600]	@ (8005c08 <_strtod_l+0x580>)
 80059b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80059b2:	a819      	add	r0, sp, #100	@ 0x64
 80059b4:	f001 f90c 	bl	8006bd0 <__hexnan>
 80059b8:	2805      	cmp	r0, #5
 80059ba:	d127      	bne.n	8005a0c <_strtod_l+0x384>
 80059bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80059be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80059c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80059c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80059ca:	e696      	b.n	80056fa <_strtod_l+0x72>
 80059cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059ce:	fb08 2101 	mla	r1, r8, r1, r2
 80059d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80059d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80059d8:	e7b5      	b.n	8005946 <_strtod_l+0x2be>
 80059da:	2a6e      	cmp	r2, #110	@ 0x6e
 80059dc:	e7da      	b.n	8005994 <_strtod_l+0x30c>
 80059de:	498b      	ldr	r1, [pc, #556]	@ (8005c0c <_strtod_l+0x584>)
 80059e0:	a819      	add	r0, sp, #100	@ 0x64
 80059e2:	f001 f8e1 	bl	8006ba8 <__match>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f43f aea2 	beq.w	8005730 <_strtod_l+0xa8>
 80059ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059ee:	4988      	ldr	r1, [pc, #544]	@ (8005c10 <_strtod_l+0x588>)
 80059f0:	3b01      	subs	r3, #1
 80059f2:	a819      	add	r0, sp, #100	@ 0x64
 80059f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80059f6:	f001 f8d7 	bl	8006ba8 <__match>
 80059fa:	b910      	cbnz	r0, 8005a02 <_strtod_l+0x37a>
 80059fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059fe:	3301      	adds	r3, #1
 8005a00:	9319      	str	r3, [sp, #100]	@ 0x64
 8005a02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005c20 <_strtod_l+0x598>
 8005a06:	f04f 0a00 	mov.w	sl, #0
 8005a0a:	e676      	b.n	80056fa <_strtod_l+0x72>
 8005a0c:	4881      	ldr	r0, [pc, #516]	@ (8005c14 <_strtod_l+0x58c>)
 8005a0e:	f000 fdef 	bl	80065f0 <nan>
 8005a12:	ec5b ab10 	vmov	sl, fp, d0
 8005a16:	e670      	b.n	80056fa <_strtod_l+0x72>
 8005a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005a1c:	eba8 0303 	sub.w	r3, r8, r3
 8005a20:	f1b9 0f00 	cmp.w	r9, #0
 8005a24:	bf08      	it	eq
 8005a26:	46a9      	moveq	r9, r5
 8005a28:	2d10      	cmp	r5, #16
 8005a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a2c:	462c      	mov	r4, r5
 8005a2e:	bfa8      	it	ge
 8005a30:	2410      	movge	r4, #16
 8005a32:	f7fa fd87 	bl	8000544 <__aeabi_ui2d>
 8005a36:	2d09      	cmp	r5, #9
 8005a38:	4682      	mov	sl, r0
 8005a3a:	468b      	mov	fp, r1
 8005a3c:	dc13      	bgt.n	8005a66 <_strtod_l+0x3de>
 8005a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f43f ae5a 	beq.w	80056fa <_strtod_l+0x72>
 8005a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a48:	dd78      	ble.n	8005b3c <_strtod_l+0x4b4>
 8005a4a:	2b16      	cmp	r3, #22
 8005a4c:	dc5f      	bgt.n	8005b0e <_strtod_l+0x486>
 8005a4e:	4972      	ldr	r1, [pc, #456]	@ (8005c18 <_strtod_l+0x590>)
 8005a50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a58:	4652      	mov	r2, sl
 8005a5a:	465b      	mov	r3, fp
 8005a5c:	f7fa fdec 	bl	8000638 <__aeabi_dmul>
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	e649      	b.n	80056fa <_strtod_l+0x72>
 8005a66:	4b6c      	ldr	r3, [pc, #432]	@ (8005c18 <_strtod_l+0x590>)
 8005a68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005a70:	f7fa fde2 	bl	8000638 <__aeabi_dmul>
 8005a74:	4682      	mov	sl, r0
 8005a76:	4638      	mov	r0, r7
 8005a78:	468b      	mov	fp, r1
 8005a7a:	f7fa fd63 	bl	8000544 <__aeabi_ui2d>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4650      	mov	r0, sl
 8005a84:	4659      	mov	r1, fp
 8005a86:	f7fa fc21 	bl	80002cc <__adddf3>
 8005a8a:	2d0f      	cmp	r5, #15
 8005a8c:	4682      	mov	sl, r0
 8005a8e:	468b      	mov	fp, r1
 8005a90:	ddd5      	ble.n	8005a3e <_strtod_l+0x3b6>
 8005a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a94:	1b2c      	subs	r4, r5, r4
 8005a96:	441c      	add	r4, r3
 8005a98:	2c00      	cmp	r4, #0
 8005a9a:	f340 8093 	ble.w	8005bc4 <_strtod_l+0x53c>
 8005a9e:	f014 030f 	ands.w	r3, r4, #15
 8005aa2:	d00a      	beq.n	8005aba <_strtod_l+0x432>
 8005aa4:	495c      	ldr	r1, [pc, #368]	@ (8005c18 <_strtod_l+0x590>)
 8005aa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005aaa:	4652      	mov	r2, sl
 8005aac:	465b      	mov	r3, fp
 8005aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ab2:	f7fa fdc1 	bl	8000638 <__aeabi_dmul>
 8005ab6:	4682      	mov	sl, r0
 8005ab8:	468b      	mov	fp, r1
 8005aba:	f034 040f 	bics.w	r4, r4, #15
 8005abe:	d073      	beq.n	8005ba8 <_strtod_l+0x520>
 8005ac0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005ac4:	dd49      	ble.n	8005b5a <_strtod_l+0x4d2>
 8005ac6:	2400      	movs	r4, #0
 8005ac8:	46a0      	mov	r8, r4
 8005aca:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005acc:	46a1      	mov	r9, r4
 8005ace:	9a05      	ldr	r2, [sp, #20]
 8005ad0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005c20 <_strtod_l+0x598>
 8005ad4:	2322      	movs	r3, #34	@ 0x22
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	f04f 0a00 	mov.w	sl, #0
 8005adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f43f ae0b 	beq.w	80056fa <_strtod_l+0x72>
 8005ae4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ae6:	9805      	ldr	r0, [sp, #20]
 8005ae8:	f001 fa0e 	bl	8006f08 <_Bfree>
 8005aec:	9805      	ldr	r0, [sp, #20]
 8005aee:	4649      	mov	r1, r9
 8005af0:	f001 fa0a 	bl	8006f08 <_Bfree>
 8005af4:	9805      	ldr	r0, [sp, #20]
 8005af6:	4641      	mov	r1, r8
 8005af8:	f001 fa06 	bl	8006f08 <_Bfree>
 8005afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005afe:	9805      	ldr	r0, [sp, #20]
 8005b00:	f001 fa02 	bl	8006f08 <_Bfree>
 8005b04:	9805      	ldr	r0, [sp, #20]
 8005b06:	4621      	mov	r1, r4
 8005b08:	f001 f9fe 	bl	8006f08 <_Bfree>
 8005b0c:	e5f5      	b.n	80056fa <_strtod_l+0x72>
 8005b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005b14:	4293      	cmp	r3, r2
 8005b16:	dbbc      	blt.n	8005a92 <_strtod_l+0x40a>
 8005b18:	4c3f      	ldr	r4, [pc, #252]	@ (8005c18 <_strtod_l+0x590>)
 8005b1a:	f1c5 050f 	rsb	r5, r5, #15
 8005b1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005b22:	4652      	mov	r2, sl
 8005b24:	465b      	mov	r3, fp
 8005b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b2a:	f7fa fd85 	bl	8000638 <__aeabi_dmul>
 8005b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b30:	1b5d      	subs	r5, r3, r5
 8005b32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b3a:	e78f      	b.n	8005a5c <_strtod_l+0x3d4>
 8005b3c:	3316      	adds	r3, #22
 8005b3e:	dba8      	blt.n	8005a92 <_strtod_l+0x40a>
 8005b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b42:	eba3 0808 	sub.w	r8, r3, r8
 8005b46:	4b34      	ldr	r3, [pc, #208]	@ (8005c18 <_strtod_l+0x590>)
 8005b48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005b4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005b50:	4650      	mov	r0, sl
 8005b52:	4659      	mov	r1, fp
 8005b54:	f7fa fe9a 	bl	800088c <__aeabi_ddiv>
 8005b58:	e782      	b.n	8005a60 <_strtod_l+0x3d8>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4f2f      	ldr	r7, [pc, #188]	@ (8005c1c <_strtod_l+0x594>)
 8005b5e:	1124      	asrs	r4, r4, #4
 8005b60:	4650      	mov	r0, sl
 8005b62:	4659      	mov	r1, fp
 8005b64:	461e      	mov	r6, r3
 8005b66:	2c01      	cmp	r4, #1
 8005b68:	dc21      	bgt.n	8005bae <_strtod_l+0x526>
 8005b6a:	b10b      	cbz	r3, 8005b70 <_strtod_l+0x4e8>
 8005b6c:	4682      	mov	sl, r0
 8005b6e:	468b      	mov	fp, r1
 8005b70:	492a      	ldr	r1, [pc, #168]	@ (8005c1c <_strtod_l+0x594>)
 8005b72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005b76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	465b      	mov	r3, fp
 8005b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b82:	f7fa fd59 	bl	8000638 <__aeabi_dmul>
 8005b86:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <_strtod_l+0x598>)
 8005b88:	460a      	mov	r2, r1
 8005b8a:	400b      	ands	r3, r1
 8005b8c:	4925      	ldr	r1, [pc, #148]	@ (8005c24 <_strtod_l+0x59c>)
 8005b8e:	428b      	cmp	r3, r1
 8005b90:	4682      	mov	sl, r0
 8005b92:	d898      	bhi.n	8005ac6 <_strtod_l+0x43e>
 8005b94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf86      	itte	hi
 8005b9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005c28 <_strtod_l+0x5a0>
 8005ba0:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ba4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9308      	str	r3, [sp, #32]
 8005bac:	e076      	b.n	8005c9c <_strtod_l+0x614>
 8005bae:	07e2      	lsls	r2, r4, #31
 8005bb0:	d504      	bpl.n	8005bbc <_strtod_l+0x534>
 8005bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb6:	f7fa fd3f 	bl	8000638 <__aeabi_dmul>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	1064      	asrs	r4, r4, #1
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	e7d0      	b.n	8005b66 <_strtod_l+0x4de>
 8005bc4:	d0f0      	beq.n	8005ba8 <_strtod_l+0x520>
 8005bc6:	4264      	negs	r4, r4
 8005bc8:	f014 020f 	ands.w	r2, r4, #15
 8005bcc:	d00a      	beq.n	8005be4 <_strtod_l+0x55c>
 8005bce:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <_strtod_l+0x590>)
 8005bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	4659      	mov	r1, fp
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fe56 	bl	800088c <__aeabi_ddiv>
 8005be0:	4682      	mov	sl, r0
 8005be2:	468b      	mov	fp, r1
 8005be4:	1124      	asrs	r4, r4, #4
 8005be6:	d0df      	beq.n	8005ba8 <_strtod_l+0x520>
 8005be8:	2c1f      	cmp	r4, #31
 8005bea:	dd1f      	ble.n	8005c2c <_strtod_l+0x5a4>
 8005bec:	2400      	movs	r4, #0
 8005bee:	46a0      	mov	r8, r4
 8005bf0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005bf2:	46a1      	mov	r9, r4
 8005bf4:	9a05      	ldr	r2, [sp, #20]
 8005bf6:	2322      	movs	r3, #34	@ 0x22
 8005bf8:	f04f 0a00 	mov.w	sl, #0
 8005bfc:	f04f 0b00 	mov.w	fp, #0
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	e76b      	b.n	8005adc <_strtod_l+0x454>
 8005c04:	080085ff 	.word	0x080085ff
 8005c08:	0800875c 	.word	0x0800875c
 8005c0c:	080085f6 	.word	0x080085f6
 8005c10:	080085f9 	.word	0x080085f9
 8005c14:	08008759 	.word	0x08008759
 8005c18:	080087e8 	.word	0x080087e8
 8005c1c:	080087c0 	.word	0x080087c0
 8005c20:	7ff00000 	.word	0x7ff00000
 8005c24:	7ca00000 	.word	0x7ca00000
 8005c28:	7fefffff 	.word	0x7fefffff
 8005c2c:	f014 0310 	ands.w	r3, r4, #16
 8005c30:	bf18      	it	ne
 8005c32:	236a      	movne	r3, #106	@ 0x6a
 8005c34:	4ea9      	ldr	r6, [pc, #676]	@ (8005edc <_strtod_l+0x854>)
 8005c36:	9308      	str	r3, [sp, #32]
 8005c38:	4650      	mov	r0, sl
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	07e7      	lsls	r7, r4, #31
 8005c40:	d504      	bpl.n	8005c4c <_strtod_l+0x5c4>
 8005c42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c46:	f7fa fcf7 	bl	8000638 <__aeabi_dmul>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	1064      	asrs	r4, r4, #1
 8005c4e:	f106 0608 	add.w	r6, r6, #8
 8005c52:	d1f4      	bne.n	8005c3e <_strtod_l+0x5b6>
 8005c54:	b10b      	cbz	r3, 8005c5a <_strtod_l+0x5d2>
 8005c56:	4682      	mov	sl, r0
 8005c58:	468b      	mov	fp, r1
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	b1b3      	cbz	r3, 8005c8c <_strtod_l+0x604>
 8005c5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005c62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	4659      	mov	r1, fp
 8005c6a:	dd0f      	ble.n	8005c8c <_strtod_l+0x604>
 8005c6c:	2b1f      	cmp	r3, #31
 8005c6e:	dd56      	ble.n	8005d1e <_strtod_l+0x696>
 8005c70:	2b34      	cmp	r3, #52	@ 0x34
 8005c72:	bfde      	ittt	le
 8005c74:	f04f 33ff 	movle.w	r3, #4294967295
 8005c78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005c7c:	4093      	lslle	r3, r2
 8005c7e:	f04f 0a00 	mov.w	sl, #0
 8005c82:	bfcc      	ite	gt
 8005c84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005c88:	ea03 0b01 	andle.w	fp, r3, r1
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2300      	movs	r3, #0
 8005c90:	4650      	mov	r0, sl
 8005c92:	4659      	mov	r1, fp
 8005c94:	f7fa ff38 	bl	8000b08 <__aeabi_dcmpeq>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d1a7      	bne.n	8005bec <_strtod_l+0x564>
 8005c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005ca2:	9805      	ldr	r0, [sp, #20]
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	464a      	mov	r2, r9
 8005ca8:	f001 f996 	bl	8006fd8 <__s2b>
 8005cac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f43f af09 	beq.w	8005ac6 <_strtod_l+0x43e>
 8005cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cb8:	2a00      	cmp	r2, #0
 8005cba:	eba3 0308 	sub.w	r3, r3, r8
 8005cbe:	bfa8      	it	ge
 8005cc0:	2300      	movge	r3, #0
 8005cc2:	9312      	str	r3, [sp, #72]	@ 0x48
 8005cc4:	2400      	movs	r4, #0
 8005cc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005cca:	9316      	str	r3, [sp, #88]	@ 0x58
 8005ccc:	46a0      	mov	r8, r4
 8005cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cd0:	9805      	ldr	r0, [sp, #20]
 8005cd2:	6859      	ldr	r1, [r3, #4]
 8005cd4:	f001 f8d8 	bl	8006e88 <_Balloc>
 8005cd8:	4681      	mov	r9, r0
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	f43f aef7 	beq.w	8005ace <_strtod_l+0x446>
 8005ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	3202      	adds	r2, #2
 8005ce6:	f103 010c 	add.w	r1, r3, #12
 8005cea:	0092      	lsls	r2, r2, #2
 8005cec:	300c      	adds	r0, #12
 8005cee:	f000 fc70 	bl	80065d2 <memcpy>
 8005cf2:	ec4b ab10 	vmov	d0, sl, fp
 8005cf6:	9805      	ldr	r0, [sp, #20]
 8005cf8:	aa1c      	add	r2, sp, #112	@ 0x70
 8005cfa:	a91b      	add	r1, sp, #108	@ 0x6c
 8005cfc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005d00:	f001 fc9e 	bl	8007640 <__d2b>
 8005d04:	901a      	str	r0, [sp, #104]	@ 0x68
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f43f aee1 	beq.w	8005ace <_strtod_l+0x446>
 8005d0c:	9805      	ldr	r0, [sp, #20]
 8005d0e:	2101      	movs	r1, #1
 8005d10:	f001 f9f8 	bl	8007104 <__i2b>
 8005d14:	4680      	mov	r8, r0
 8005d16:	b948      	cbnz	r0, 8005d2c <_strtod_l+0x6a4>
 8005d18:	f04f 0800 	mov.w	r8, #0
 8005d1c:	e6d7      	b.n	8005ace <_strtod_l+0x446>
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	ea03 0a0a 	and.w	sl, r3, sl
 8005d2a:	e7af      	b.n	8005c8c <_strtod_l+0x604>
 8005d2c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005d2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005d30:	2d00      	cmp	r5, #0
 8005d32:	bfab      	itete	ge
 8005d34:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005d36:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005d38:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005d3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005d3c:	bfac      	ite	ge
 8005d3e:	18ef      	addge	r7, r5, r3
 8005d40:	1b5e      	sublt	r6, r3, r5
 8005d42:	9b08      	ldr	r3, [sp, #32]
 8005d44:	1aed      	subs	r5, r5, r3
 8005d46:	4415      	add	r5, r2
 8005d48:	4b65      	ldr	r3, [pc, #404]	@ (8005ee0 <_strtod_l+0x858>)
 8005d4a:	3d01      	subs	r5, #1
 8005d4c:	429d      	cmp	r5, r3
 8005d4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005d52:	da50      	bge.n	8005df6 <_strtod_l+0x76e>
 8005d54:	1b5b      	subs	r3, r3, r5
 8005d56:	2b1f      	cmp	r3, #31
 8005d58:	eba2 0203 	sub.w	r2, r2, r3
 8005d5c:	f04f 0101 	mov.w	r1, #1
 8005d60:	dc3d      	bgt.n	8005dde <_strtod_l+0x756>
 8005d62:	fa01 f303 	lsl.w	r3, r1, r3
 8005d66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005d6c:	18bd      	adds	r5, r7, r2
 8005d6e:	9b08      	ldr	r3, [sp, #32]
 8005d70:	42af      	cmp	r7, r5
 8005d72:	4416      	add	r6, r2
 8005d74:	441e      	add	r6, r3
 8005d76:	463b      	mov	r3, r7
 8005d78:	bfa8      	it	ge
 8005d7a:	462b      	movge	r3, r5
 8005d7c:	42b3      	cmp	r3, r6
 8005d7e:	bfa8      	it	ge
 8005d80:	4633      	movge	r3, r6
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bfc2      	ittt	gt
 8005d86:	1aed      	subgt	r5, r5, r3
 8005d88:	1af6      	subgt	r6, r6, r3
 8005d8a:	1aff      	subgt	r7, r7, r3
 8005d8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	dd16      	ble.n	8005dc0 <_strtod_l+0x738>
 8005d92:	4641      	mov	r1, r8
 8005d94:	9805      	ldr	r0, [sp, #20]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f001 fa6c 	bl	8007274 <__pow5mult>
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d0ba      	beq.n	8005d18 <_strtod_l+0x690>
 8005da2:	4601      	mov	r1, r0
 8005da4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005da6:	9805      	ldr	r0, [sp, #20]
 8005da8:	f001 f9c2 	bl	8007130 <__multiply>
 8005dac:	900a      	str	r0, [sp, #40]	@ 0x28
 8005dae:	2800      	cmp	r0, #0
 8005db0:	f43f ae8d 	beq.w	8005ace <_strtod_l+0x446>
 8005db4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005db6:	9805      	ldr	r0, [sp, #20]
 8005db8:	f001 f8a6 	bl	8006f08 <_Bfree>
 8005dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	dc1d      	bgt.n	8005e00 <_strtod_l+0x778>
 8005dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dd23      	ble.n	8005e12 <_strtod_l+0x78a>
 8005dca:	4649      	mov	r1, r9
 8005dcc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005dce:	9805      	ldr	r0, [sp, #20]
 8005dd0:	f001 fa50 	bl	8007274 <__pow5mult>
 8005dd4:	4681      	mov	r9, r0
 8005dd6:	b9e0      	cbnz	r0, 8005e12 <_strtod_l+0x78a>
 8005dd8:	f04f 0900 	mov.w	r9, #0
 8005ddc:	e677      	b.n	8005ace <_strtod_l+0x446>
 8005dde:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005de2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005de6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005dea:	35e2      	adds	r5, #226	@ 0xe2
 8005dec:	fa01 f305 	lsl.w	r3, r1, r5
 8005df0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005df2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005df4:	e7ba      	b.n	8005d6c <_strtod_l+0x6e4>
 8005df6:	2300      	movs	r3, #0
 8005df8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dfe:	e7b5      	b.n	8005d6c <_strtod_l+0x6e4>
 8005e00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e02:	9805      	ldr	r0, [sp, #20]
 8005e04:	462a      	mov	r2, r5
 8005e06:	f001 fa8f 	bl	8007328 <__lshift>
 8005e0a:	901a      	str	r0, [sp, #104]	@ 0x68
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d1d9      	bne.n	8005dc4 <_strtod_l+0x73c>
 8005e10:	e65d      	b.n	8005ace <_strtod_l+0x446>
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	dd07      	ble.n	8005e26 <_strtod_l+0x79e>
 8005e16:	4649      	mov	r1, r9
 8005e18:	9805      	ldr	r0, [sp, #20]
 8005e1a:	4632      	mov	r2, r6
 8005e1c:	f001 fa84 	bl	8007328 <__lshift>
 8005e20:	4681      	mov	r9, r0
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d0d8      	beq.n	8005dd8 <_strtod_l+0x750>
 8005e26:	2f00      	cmp	r7, #0
 8005e28:	dd08      	ble.n	8005e3c <_strtod_l+0x7b4>
 8005e2a:	4641      	mov	r1, r8
 8005e2c:	9805      	ldr	r0, [sp, #20]
 8005e2e:	463a      	mov	r2, r7
 8005e30:	f001 fa7a 	bl	8007328 <__lshift>
 8005e34:	4680      	mov	r8, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f43f ae49 	beq.w	8005ace <_strtod_l+0x446>
 8005e3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e3e:	9805      	ldr	r0, [sp, #20]
 8005e40:	464a      	mov	r2, r9
 8005e42:	f001 faf9 	bl	8007438 <__mdiff>
 8005e46:	4604      	mov	r4, r0
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f43f ae40 	beq.w	8005ace <_strtod_l+0x446>
 8005e4e:	68c3      	ldr	r3, [r0, #12]
 8005e50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e52:	2300      	movs	r3, #0
 8005e54:	60c3      	str	r3, [r0, #12]
 8005e56:	4641      	mov	r1, r8
 8005e58:	f001 fad2 	bl	8007400 <__mcmp>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	da45      	bge.n	8005eec <_strtod_l+0x864>
 8005e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e62:	ea53 030a 	orrs.w	r3, r3, sl
 8005e66:	d16b      	bne.n	8005f40 <_strtod_l+0x8b8>
 8005e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d167      	bne.n	8005f40 <_strtod_l+0x8b8>
 8005e70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005e74:	0d1b      	lsrs	r3, r3, #20
 8005e76:	051b      	lsls	r3, r3, #20
 8005e78:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005e7c:	d960      	bls.n	8005f40 <_strtod_l+0x8b8>
 8005e7e:	6963      	ldr	r3, [r4, #20]
 8005e80:	b913      	cbnz	r3, 8005e88 <_strtod_l+0x800>
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	dd5b      	ble.n	8005f40 <_strtod_l+0x8b8>
 8005e88:	4621      	mov	r1, r4
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	9805      	ldr	r0, [sp, #20]
 8005e8e:	f001 fa4b 	bl	8007328 <__lshift>
 8005e92:	4641      	mov	r1, r8
 8005e94:	4604      	mov	r4, r0
 8005e96:	f001 fab3 	bl	8007400 <__mcmp>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	dd50      	ble.n	8005f40 <_strtod_l+0x8b8>
 8005e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ea2:	9a08      	ldr	r2, [sp, #32]
 8005ea4:	0d1b      	lsrs	r3, r3, #20
 8005ea6:	051b      	lsls	r3, r3, #20
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	d06a      	beq.n	8005f82 <_strtod_l+0x8fa>
 8005eac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005eb0:	d867      	bhi.n	8005f82 <_strtod_l+0x8fa>
 8005eb2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005eb6:	f67f ae9d 	bls.w	8005bf4 <_strtod_l+0x56c>
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <_strtod_l+0x85c>)
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f7fa fbb9 	bl	8000638 <__aeabi_dmul>
 8005ec6:	4b08      	ldr	r3, [pc, #32]	@ (8005ee8 <_strtod_l+0x860>)
 8005ec8:	400b      	ands	r3, r1
 8005eca:	4682      	mov	sl, r0
 8005ecc:	468b      	mov	fp, r1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f47f ae08 	bne.w	8005ae4 <_strtod_l+0x45c>
 8005ed4:	9a05      	ldr	r2, [sp, #20]
 8005ed6:	2322      	movs	r3, #34	@ 0x22
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e603      	b.n	8005ae4 <_strtod_l+0x45c>
 8005edc:	08008788 	.word	0x08008788
 8005ee0:	fffffc02 	.word	0xfffffc02
 8005ee4:	39500000 	.word	0x39500000
 8005ee8:	7ff00000 	.word	0x7ff00000
 8005eec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005ef0:	d165      	bne.n	8005fbe <_strtod_l+0x936>
 8005ef2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005ef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ef8:	b35a      	cbz	r2, 8005f52 <_strtod_l+0x8ca>
 8005efa:	4a9f      	ldr	r2, [pc, #636]	@ (8006178 <_strtod_l+0xaf0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d12b      	bne.n	8005f58 <_strtod_l+0x8d0>
 8005f00:	9b08      	ldr	r3, [sp, #32]
 8005f02:	4651      	mov	r1, sl
 8005f04:	b303      	cbz	r3, 8005f48 <_strtod_l+0x8c0>
 8005f06:	4b9d      	ldr	r3, [pc, #628]	@ (800617c <_strtod_l+0xaf4>)
 8005f08:	465a      	mov	r2, fp
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	d81b      	bhi.n	8005f4e <_strtod_l+0x8c6>
 8005f16:	0d1b      	lsrs	r3, r3, #20
 8005f18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d119      	bne.n	8005f58 <_strtod_l+0x8d0>
 8005f24:	4b96      	ldr	r3, [pc, #600]	@ (8006180 <_strtod_l+0xaf8>)
 8005f26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d102      	bne.n	8005f32 <_strtod_l+0x8aa>
 8005f2c:	3101      	adds	r1, #1
 8005f2e:	f43f adce 	beq.w	8005ace <_strtod_l+0x446>
 8005f32:	4b92      	ldr	r3, [pc, #584]	@ (800617c <_strtod_l+0xaf4>)
 8005f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f36:	401a      	ands	r2, r3
 8005f38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005f3c:	f04f 0a00 	mov.w	sl, #0
 8005f40:	9b08      	ldr	r3, [sp, #32]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1b9      	bne.n	8005eba <_strtod_l+0x832>
 8005f46:	e5cd      	b.n	8005ae4 <_strtod_l+0x45c>
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4c:	e7e8      	b.n	8005f20 <_strtod_l+0x898>
 8005f4e:	4613      	mov	r3, r2
 8005f50:	e7e6      	b.n	8005f20 <_strtod_l+0x898>
 8005f52:	ea53 030a 	orrs.w	r3, r3, sl
 8005f56:	d0a2      	beq.n	8005e9e <_strtod_l+0x816>
 8005f58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f5a:	b1db      	cbz	r3, 8005f94 <_strtod_l+0x90c>
 8005f5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f5e:	4213      	tst	r3, r2
 8005f60:	d0ee      	beq.n	8005f40 <_strtod_l+0x8b8>
 8005f62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f64:	9a08      	ldr	r2, [sp, #32]
 8005f66:	4650      	mov	r0, sl
 8005f68:	4659      	mov	r1, fp
 8005f6a:	b1bb      	cbz	r3, 8005f9c <_strtod_l+0x914>
 8005f6c:	f7ff fb6d 	bl	800564a <sulp>
 8005f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f74:	ec53 2b10 	vmov	r2, r3, d0
 8005f78:	f7fa f9a8 	bl	80002cc <__adddf3>
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	468b      	mov	fp, r1
 8005f80:	e7de      	b.n	8005f40 <_strtod_l+0x8b8>
 8005f82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005f86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005f8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005f8e:	f04f 3aff 	mov.w	sl, #4294967295
 8005f92:	e7d5      	b.n	8005f40 <_strtod_l+0x8b8>
 8005f94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f96:	ea13 0f0a 	tst.w	r3, sl
 8005f9a:	e7e1      	b.n	8005f60 <_strtod_l+0x8d8>
 8005f9c:	f7ff fb55 	bl	800564a <sulp>
 8005fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fa4:	ec53 2b10 	vmov	r2, r3, d0
 8005fa8:	f7fa f98e 	bl	80002c8 <__aeabi_dsub>
 8005fac:	2200      	movs	r2, #0
 8005fae:	2300      	movs	r3, #0
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	468b      	mov	fp, r1
 8005fb4:	f7fa fda8 	bl	8000b08 <__aeabi_dcmpeq>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d0c1      	beq.n	8005f40 <_strtod_l+0x8b8>
 8005fbc:	e61a      	b.n	8005bf4 <_strtod_l+0x56c>
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f001 fb95 	bl	80076f0 <__ratio>
 8005fc6:	ec57 6b10 	vmov	r6, r7, d0
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa fdac 	bl	8000b30 <__aeabi_dcmple>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d06f      	beq.n	80060bc <_strtod_l+0xa34>
 8005fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d17a      	bne.n	80060d8 <_strtod_l+0xa50>
 8005fe2:	f1ba 0f00 	cmp.w	sl, #0
 8005fe6:	d158      	bne.n	800609a <_strtod_l+0xa12>
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d15a      	bne.n	80060a8 <_strtod_l+0xa20>
 8005ff2:	4b64      	ldr	r3, [pc, #400]	@ (8006184 <_strtod_l+0xafc>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	f7fa fd8f 	bl	8000b1c <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d159      	bne.n	80060b6 <_strtod_l+0xa2e>
 8006002:	4630      	mov	r0, r6
 8006004:	4639      	mov	r1, r7
 8006006:	4b60      	ldr	r3, [pc, #384]	@ (8006188 <_strtod_l+0xb00>)
 8006008:	2200      	movs	r2, #0
 800600a:	f7fa fb15 	bl	8000638 <__aeabi_dmul>
 800600e:	4606      	mov	r6, r0
 8006010:	460f      	mov	r7, r1
 8006012:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006016:	9606      	str	r6, [sp, #24]
 8006018:	9307      	str	r3, [sp, #28]
 800601a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800601e:	4d57      	ldr	r5, [pc, #348]	@ (800617c <_strtod_l+0xaf4>)
 8006020:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006026:	401d      	ands	r5, r3
 8006028:	4b58      	ldr	r3, [pc, #352]	@ (800618c <_strtod_l+0xb04>)
 800602a:	429d      	cmp	r5, r3
 800602c:	f040 80b2 	bne.w	8006194 <_strtod_l+0xb0c>
 8006030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006032:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006036:	ec4b ab10 	vmov	d0, sl, fp
 800603a:	f001 fa91 	bl	8007560 <__ulp>
 800603e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006042:	ec51 0b10 	vmov	r0, r1, d0
 8006046:	f7fa faf7 	bl	8000638 <__aeabi_dmul>
 800604a:	4652      	mov	r2, sl
 800604c:	465b      	mov	r3, fp
 800604e:	f7fa f93d 	bl	80002cc <__adddf3>
 8006052:	460b      	mov	r3, r1
 8006054:	4949      	ldr	r1, [pc, #292]	@ (800617c <_strtod_l+0xaf4>)
 8006056:	4a4e      	ldr	r2, [pc, #312]	@ (8006190 <_strtod_l+0xb08>)
 8006058:	4019      	ands	r1, r3
 800605a:	4291      	cmp	r1, r2
 800605c:	4682      	mov	sl, r0
 800605e:	d942      	bls.n	80060e6 <_strtod_l+0xa5e>
 8006060:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006062:	4b47      	ldr	r3, [pc, #284]	@ (8006180 <_strtod_l+0xaf8>)
 8006064:	429a      	cmp	r2, r3
 8006066:	d103      	bne.n	8006070 <_strtod_l+0x9e8>
 8006068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800606a:	3301      	adds	r3, #1
 800606c:	f43f ad2f 	beq.w	8005ace <_strtod_l+0x446>
 8006070:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006180 <_strtod_l+0xaf8>
 8006074:	f04f 3aff 	mov.w	sl, #4294967295
 8006078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800607a:	9805      	ldr	r0, [sp, #20]
 800607c:	f000 ff44 	bl	8006f08 <_Bfree>
 8006080:	9805      	ldr	r0, [sp, #20]
 8006082:	4649      	mov	r1, r9
 8006084:	f000 ff40 	bl	8006f08 <_Bfree>
 8006088:	9805      	ldr	r0, [sp, #20]
 800608a:	4641      	mov	r1, r8
 800608c:	f000 ff3c 	bl	8006f08 <_Bfree>
 8006090:	9805      	ldr	r0, [sp, #20]
 8006092:	4621      	mov	r1, r4
 8006094:	f000 ff38 	bl	8006f08 <_Bfree>
 8006098:	e619      	b.n	8005cce <_strtod_l+0x646>
 800609a:	f1ba 0f01 	cmp.w	sl, #1
 800609e:	d103      	bne.n	80060a8 <_strtod_l+0xa20>
 80060a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f43f ada6 	beq.w	8005bf4 <_strtod_l+0x56c>
 80060a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006158 <_strtod_l+0xad0>
 80060ac:	4f35      	ldr	r7, [pc, #212]	@ (8006184 <_strtod_l+0xafc>)
 80060ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80060b2:	2600      	movs	r6, #0
 80060b4:	e7b1      	b.n	800601a <_strtod_l+0x992>
 80060b6:	4f34      	ldr	r7, [pc, #208]	@ (8006188 <_strtod_l+0xb00>)
 80060b8:	2600      	movs	r6, #0
 80060ba:	e7aa      	b.n	8006012 <_strtod_l+0x98a>
 80060bc:	4b32      	ldr	r3, [pc, #200]	@ (8006188 <_strtod_l+0xb00>)
 80060be:	4630      	mov	r0, r6
 80060c0:	4639      	mov	r1, r7
 80060c2:	2200      	movs	r2, #0
 80060c4:	f7fa fab8 	bl	8000638 <__aeabi_dmul>
 80060c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d09f      	beq.n	8006012 <_strtod_l+0x98a>
 80060d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80060d6:	e7a0      	b.n	800601a <_strtod_l+0x992>
 80060d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006160 <_strtod_l+0xad8>
 80060dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80060e0:	ec57 6b17 	vmov	r6, r7, d7
 80060e4:	e799      	b.n	800601a <_strtod_l+0x992>
 80060e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80060ea:	9b08      	ldr	r3, [sp, #32]
 80060ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1c1      	bne.n	8006078 <_strtod_l+0x9f0>
 80060f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80060f8:	0d1b      	lsrs	r3, r3, #20
 80060fa:	051b      	lsls	r3, r3, #20
 80060fc:	429d      	cmp	r5, r3
 80060fe:	d1bb      	bne.n	8006078 <_strtod_l+0x9f0>
 8006100:	4630      	mov	r0, r6
 8006102:	4639      	mov	r1, r7
 8006104:	f7fa fdba 	bl	8000c7c <__aeabi_d2lz>
 8006108:	f7fa fa68 	bl	80005dc <__aeabi_l2d>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa f8d8 	bl	80002c8 <__aeabi_dsub>
 8006118:	460b      	mov	r3, r1
 800611a:	4602      	mov	r2, r0
 800611c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006120:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006126:	ea46 060a 	orr.w	r6, r6, sl
 800612a:	431e      	orrs	r6, r3
 800612c:	d06f      	beq.n	800620e <_strtod_l+0xb86>
 800612e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006168 <_strtod_l+0xae0>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa fcf2 	bl	8000b1c <__aeabi_dcmplt>
 8006138:	2800      	cmp	r0, #0
 800613a:	f47f acd3 	bne.w	8005ae4 <_strtod_l+0x45c>
 800613e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006170 <_strtod_l+0xae8>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006148:	f7fa fd06 	bl	8000b58 <__aeabi_dcmpgt>
 800614c:	2800      	cmp	r0, #0
 800614e:	d093      	beq.n	8006078 <_strtod_l+0x9f0>
 8006150:	e4c8      	b.n	8005ae4 <_strtod_l+0x45c>
 8006152:	bf00      	nop
 8006154:	f3af 8000 	nop.w
 8006158:	00000000 	.word	0x00000000
 800615c:	bff00000 	.word	0xbff00000
 8006160:	00000000 	.word	0x00000000
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	94a03595 	.word	0x94a03595
 800616c:	3fdfffff 	.word	0x3fdfffff
 8006170:	35afe535 	.word	0x35afe535
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	000fffff 	.word	0x000fffff
 800617c:	7ff00000 	.word	0x7ff00000
 8006180:	7fefffff 	.word	0x7fefffff
 8006184:	3ff00000 	.word	0x3ff00000
 8006188:	3fe00000 	.word	0x3fe00000
 800618c:	7fe00000 	.word	0x7fe00000
 8006190:	7c9fffff 	.word	0x7c9fffff
 8006194:	9b08      	ldr	r3, [sp, #32]
 8006196:	b323      	cbz	r3, 80061e2 <_strtod_l+0xb5a>
 8006198:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800619c:	d821      	bhi.n	80061e2 <_strtod_l+0xb5a>
 800619e:	a328      	add	r3, pc, #160	@ (adr r3, 8006240 <_strtod_l+0xbb8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	4630      	mov	r0, r6
 80061a6:	4639      	mov	r1, r7
 80061a8:	f7fa fcc2 	bl	8000b30 <__aeabi_dcmple>
 80061ac:	b1a0      	cbz	r0, 80061d8 <_strtod_l+0xb50>
 80061ae:	4639      	mov	r1, r7
 80061b0:	4630      	mov	r0, r6
 80061b2:	f7fa fcdb 	bl	8000b6c <__aeabi_d2uiz>
 80061b6:	2801      	cmp	r0, #1
 80061b8:	bf38      	it	cc
 80061ba:	2001      	movcc	r0, #1
 80061bc:	f7fa f9c2 	bl	8000544 <__aeabi_ui2d>
 80061c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061c2:	4606      	mov	r6, r0
 80061c4:	460f      	mov	r7, r1
 80061c6:	b9fb      	cbnz	r3, 8006208 <_strtod_l+0xb80>
 80061c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80061ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80061d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80061d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80061d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80061da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80061de:	1b5b      	subs	r3, r3, r5
 80061e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80061e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80061ea:	f001 f9b9 	bl	8007560 <__ulp>
 80061ee:	4650      	mov	r0, sl
 80061f0:	ec53 2b10 	vmov	r2, r3, d0
 80061f4:	4659      	mov	r1, fp
 80061f6:	f7fa fa1f 	bl	8000638 <__aeabi_dmul>
 80061fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80061fe:	f7fa f865 	bl	80002cc <__adddf3>
 8006202:	4682      	mov	sl, r0
 8006204:	468b      	mov	fp, r1
 8006206:	e770      	b.n	80060ea <_strtod_l+0xa62>
 8006208:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800620c:	e7e0      	b.n	80061d0 <_strtod_l+0xb48>
 800620e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006248 <_strtod_l+0xbc0>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa fc82 	bl	8000b1c <__aeabi_dcmplt>
 8006218:	e798      	b.n	800614c <_strtod_l+0xac4>
 800621a:	2300      	movs	r3, #0
 800621c:	930e      	str	r3, [sp, #56]	@ 0x38
 800621e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	f7ff ba6d 	b.w	8005702 <_strtod_l+0x7a>
 8006228:	2a65      	cmp	r2, #101	@ 0x65
 800622a:	f43f ab68 	beq.w	80058fe <_strtod_l+0x276>
 800622e:	2a45      	cmp	r2, #69	@ 0x45
 8006230:	f43f ab65 	beq.w	80058fe <_strtod_l+0x276>
 8006234:	2301      	movs	r3, #1
 8006236:	f7ff bba0 	b.w	800597a <_strtod_l+0x2f2>
 800623a:	bf00      	nop
 800623c:	f3af 8000 	nop.w
 8006240:	ffc00000 	.word	0xffc00000
 8006244:	41dfffff 	.word	0x41dfffff
 8006248:	94a03595 	.word	0x94a03595
 800624c:	3fcfffff 	.word	0x3fcfffff

08006250 <strtod>:
 8006250:	460a      	mov	r2, r1
 8006252:	4601      	mov	r1, r0
 8006254:	4802      	ldr	r0, [pc, #8]	@ (8006260 <strtod+0x10>)
 8006256:	4b03      	ldr	r3, [pc, #12]	@ (8006264 <strtod+0x14>)
 8006258:	6800      	ldr	r0, [r0, #0]
 800625a:	f7ff ba15 	b.w	8005688 <_strtod_l>
 800625e:	bf00      	nop
 8006260:	2000018c 	.word	0x2000018c
 8006264:	20000020 	.word	0x20000020

08006268 <std>:
 8006268:	2300      	movs	r3, #0
 800626a:	b510      	push	{r4, lr}
 800626c:	4604      	mov	r4, r0
 800626e:	e9c0 3300 	strd	r3, r3, [r0]
 8006272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006276:	6083      	str	r3, [r0, #8]
 8006278:	8181      	strh	r1, [r0, #12]
 800627a:	6643      	str	r3, [r0, #100]	@ 0x64
 800627c:	81c2      	strh	r2, [r0, #14]
 800627e:	6183      	str	r3, [r0, #24]
 8006280:	4619      	mov	r1, r3
 8006282:	2208      	movs	r2, #8
 8006284:	305c      	adds	r0, #92	@ 0x5c
 8006286:	f000 f916 	bl	80064b6 <memset>
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <std+0x58>)
 800628c:	6263      	str	r3, [r4, #36]	@ 0x24
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <std+0x5c>)
 8006290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <std+0x60>)
 8006294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006296:	4b0d      	ldr	r3, [pc, #52]	@ (80062cc <std+0x64>)
 8006298:	6323      	str	r3, [r4, #48]	@ 0x30
 800629a:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <std+0x68>)
 800629c:	6224      	str	r4, [r4, #32]
 800629e:	429c      	cmp	r4, r3
 80062a0:	d006      	beq.n	80062b0 <std+0x48>
 80062a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062a6:	4294      	cmp	r4, r2
 80062a8:	d002      	beq.n	80062b0 <std+0x48>
 80062aa:	33d0      	adds	r3, #208	@ 0xd0
 80062ac:	429c      	cmp	r4, r3
 80062ae:	d105      	bne.n	80062bc <std+0x54>
 80062b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b8:	f000 b988 	b.w	80065cc <__retarget_lock_init_recursive>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	bf00      	nop
 80062c0:	08006431 	.word	0x08006431
 80062c4:	08006453 	.word	0x08006453
 80062c8:	0800648b 	.word	0x0800648b
 80062cc:	080064af 	.word	0x080064af
 80062d0:	2000038c 	.word	0x2000038c

080062d4 <stdio_exit_handler>:
 80062d4:	4a02      	ldr	r2, [pc, #8]	@ (80062e0 <stdio_exit_handler+0xc>)
 80062d6:	4903      	ldr	r1, [pc, #12]	@ (80062e4 <stdio_exit_handler+0x10>)
 80062d8:	4803      	ldr	r0, [pc, #12]	@ (80062e8 <stdio_exit_handler+0x14>)
 80062da:	f000 b869 	b.w	80063b0 <_fwalk_sglue>
 80062de:	bf00      	nop
 80062e0:	20000014 	.word	0x20000014
 80062e4:	08007ec5 	.word	0x08007ec5
 80062e8:	20000190 	.word	0x20000190

080062ec <cleanup_stdio>:
 80062ec:	6841      	ldr	r1, [r0, #4]
 80062ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <cleanup_stdio+0x34>)
 80062f0:	4299      	cmp	r1, r3
 80062f2:	b510      	push	{r4, lr}
 80062f4:	4604      	mov	r4, r0
 80062f6:	d001      	beq.n	80062fc <cleanup_stdio+0x10>
 80062f8:	f001 fde4 	bl	8007ec4 <_fflush_r>
 80062fc:	68a1      	ldr	r1, [r4, #8]
 80062fe:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <cleanup_stdio+0x38>)
 8006300:	4299      	cmp	r1, r3
 8006302:	d002      	beq.n	800630a <cleanup_stdio+0x1e>
 8006304:	4620      	mov	r0, r4
 8006306:	f001 fddd 	bl	8007ec4 <_fflush_r>
 800630a:	68e1      	ldr	r1, [r4, #12]
 800630c:	4b06      	ldr	r3, [pc, #24]	@ (8006328 <cleanup_stdio+0x3c>)
 800630e:	4299      	cmp	r1, r3
 8006310:	d004      	beq.n	800631c <cleanup_stdio+0x30>
 8006312:	4620      	mov	r0, r4
 8006314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006318:	f001 bdd4 	b.w	8007ec4 <_fflush_r>
 800631c:	bd10      	pop	{r4, pc}
 800631e:	bf00      	nop
 8006320:	2000038c 	.word	0x2000038c
 8006324:	200003f4 	.word	0x200003f4
 8006328:	2000045c 	.word	0x2000045c

0800632c <global_stdio_init.part.0>:
 800632c:	b510      	push	{r4, lr}
 800632e:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <global_stdio_init.part.0+0x30>)
 8006330:	4c0b      	ldr	r4, [pc, #44]	@ (8006360 <global_stdio_init.part.0+0x34>)
 8006332:	4a0c      	ldr	r2, [pc, #48]	@ (8006364 <global_stdio_init.part.0+0x38>)
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	4620      	mov	r0, r4
 8006338:	2200      	movs	r2, #0
 800633a:	2104      	movs	r1, #4
 800633c:	f7ff ff94 	bl	8006268 <std>
 8006340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006344:	2201      	movs	r2, #1
 8006346:	2109      	movs	r1, #9
 8006348:	f7ff ff8e 	bl	8006268 <std>
 800634c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006350:	2202      	movs	r2, #2
 8006352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006356:	2112      	movs	r1, #18
 8006358:	f7ff bf86 	b.w	8006268 <std>
 800635c:	200004c4 	.word	0x200004c4
 8006360:	2000038c 	.word	0x2000038c
 8006364:	080062d5 	.word	0x080062d5

08006368 <__sfp_lock_acquire>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__sfp_lock_acquire+0x8>)
 800636a:	f000 b930 	b.w	80065ce <__retarget_lock_acquire_recursive>
 800636e:	bf00      	nop
 8006370:	200004cd 	.word	0x200004cd

08006374 <__sfp_lock_release>:
 8006374:	4801      	ldr	r0, [pc, #4]	@ (800637c <__sfp_lock_release+0x8>)
 8006376:	f000 b92b 	b.w	80065d0 <__retarget_lock_release_recursive>
 800637a:	bf00      	nop
 800637c:	200004cd 	.word	0x200004cd

08006380 <__sinit>:
 8006380:	b510      	push	{r4, lr}
 8006382:	4604      	mov	r4, r0
 8006384:	f7ff fff0 	bl	8006368 <__sfp_lock_acquire>
 8006388:	6a23      	ldr	r3, [r4, #32]
 800638a:	b11b      	cbz	r3, 8006394 <__sinit+0x14>
 800638c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006390:	f7ff bff0 	b.w	8006374 <__sfp_lock_release>
 8006394:	4b04      	ldr	r3, [pc, #16]	@ (80063a8 <__sinit+0x28>)
 8006396:	6223      	str	r3, [r4, #32]
 8006398:	4b04      	ldr	r3, [pc, #16]	@ (80063ac <__sinit+0x2c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f5      	bne.n	800638c <__sinit+0xc>
 80063a0:	f7ff ffc4 	bl	800632c <global_stdio_init.part.0>
 80063a4:	e7f2      	b.n	800638c <__sinit+0xc>
 80063a6:	bf00      	nop
 80063a8:	080062ed 	.word	0x080062ed
 80063ac:	200004c4 	.word	0x200004c4

080063b0 <_fwalk_sglue>:
 80063b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b4:	4607      	mov	r7, r0
 80063b6:	4688      	mov	r8, r1
 80063b8:	4614      	mov	r4, r2
 80063ba:	2600      	movs	r6, #0
 80063bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063c0:	f1b9 0901 	subs.w	r9, r9, #1
 80063c4:	d505      	bpl.n	80063d2 <_fwalk_sglue+0x22>
 80063c6:	6824      	ldr	r4, [r4, #0]
 80063c8:	2c00      	cmp	r4, #0
 80063ca:	d1f7      	bne.n	80063bc <_fwalk_sglue+0xc>
 80063cc:	4630      	mov	r0, r6
 80063ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063d2:	89ab      	ldrh	r3, [r5, #12]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d907      	bls.n	80063e8 <_fwalk_sglue+0x38>
 80063d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063dc:	3301      	adds	r3, #1
 80063de:	d003      	beq.n	80063e8 <_fwalk_sglue+0x38>
 80063e0:	4629      	mov	r1, r5
 80063e2:	4638      	mov	r0, r7
 80063e4:	47c0      	blx	r8
 80063e6:	4306      	orrs	r6, r0
 80063e8:	3568      	adds	r5, #104	@ 0x68
 80063ea:	e7e9      	b.n	80063c0 <_fwalk_sglue+0x10>

080063ec <siprintf>:
 80063ec:	b40e      	push	{r1, r2, r3}
 80063ee:	b510      	push	{r4, lr}
 80063f0:	b09d      	sub	sp, #116	@ 0x74
 80063f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80063f4:	9002      	str	r0, [sp, #8]
 80063f6:	9006      	str	r0, [sp, #24]
 80063f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063fc:	480a      	ldr	r0, [pc, #40]	@ (8006428 <siprintf+0x3c>)
 80063fe:	9107      	str	r1, [sp, #28]
 8006400:	9104      	str	r1, [sp, #16]
 8006402:	490a      	ldr	r1, [pc, #40]	@ (800642c <siprintf+0x40>)
 8006404:	f853 2b04 	ldr.w	r2, [r3], #4
 8006408:	9105      	str	r1, [sp, #20]
 800640a:	2400      	movs	r4, #0
 800640c:	a902      	add	r1, sp, #8
 800640e:	6800      	ldr	r0, [r0, #0]
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006414:	f001 fa4a 	bl	80078ac <_svfiprintf_r>
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	701c      	strb	r4, [r3, #0]
 800641c:	b01d      	add	sp, #116	@ 0x74
 800641e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006422:	b003      	add	sp, #12
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	2000018c 	.word	0x2000018c
 800642c:	ffff0208 	.word	0xffff0208

08006430 <__sread>:
 8006430:	b510      	push	{r4, lr}
 8006432:	460c      	mov	r4, r1
 8006434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006438:	f000 f87a 	bl	8006530 <_read_r>
 800643c:	2800      	cmp	r0, #0
 800643e:	bfab      	itete	ge
 8006440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006442:	89a3      	ldrhlt	r3, [r4, #12]
 8006444:	181b      	addge	r3, r3, r0
 8006446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800644a:	bfac      	ite	ge
 800644c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800644e:	81a3      	strhlt	r3, [r4, #12]
 8006450:	bd10      	pop	{r4, pc}

08006452 <__swrite>:
 8006452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006456:	461f      	mov	r7, r3
 8006458:	898b      	ldrh	r3, [r1, #12]
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	4605      	mov	r5, r0
 800645e:	460c      	mov	r4, r1
 8006460:	4616      	mov	r6, r2
 8006462:	d505      	bpl.n	8006470 <__swrite+0x1e>
 8006464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006468:	2302      	movs	r3, #2
 800646a:	2200      	movs	r2, #0
 800646c:	f000 f84e 	bl	800650c <_lseek_r>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	4628      	mov	r0, r5
 8006482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006486:	f000 b865 	b.w	8006554 <_write_r>

0800648a <__sseek>:
 800648a:	b510      	push	{r4, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006492:	f000 f83b 	bl	800650c <_lseek_r>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	bf15      	itete	ne
 800649c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800649e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064a6:	81a3      	strheq	r3, [r4, #12]
 80064a8:	bf18      	it	ne
 80064aa:	81a3      	strhne	r3, [r4, #12]
 80064ac:	bd10      	pop	{r4, pc}

080064ae <__sclose>:
 80064ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b2:	f000 b81b 	b.w	80064ec <_close_r>

080064b6 <memset>:
 80064b6:	4402      	add	r2, r0
 80064b8:	4603      	mov	r3, r0
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d100      	bne.n	80064c0 <memset+0xa>
 80064be:	4770      	bx	lr
 80064c0:	f803 1b01 	strb.w	r1, [r3], #1
 80064c4:	e7f9      	b.n	80064ba <memset+0x4>

080064c6 <strncmp>:
 80064c6:	b510      	push	{r4, lr}
 80064c8:	b16a      	cbz	r2, 80064e6 <strncmp+0x20>
 80064ca:	3901      	subs	r1, #1
 80064cc:	1884      	adds	r4, r0, r2
 80064ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d103      	bne.n	80064e2 <strncmp+0x1c>
 80064da:	42a0      	cmp	r0, r4
 80064dc:	d001      	beq.n	80064e2 <strncmp+0x1c>
 80064de:	2a00      	cmp	r2, #0
 80064e0:	d1f5      	bne.n	80064ce <strncmp+0x8>
 80064e2:	1ad0      	subs	r0, r2, r3
 80064e4:	bd10      	pop	{r4, pc}
 80064e6:	4610      	mov	r0, r2
 80064e8:	e7fc      	b.n	80064e4 <strncmp+0x1e>
	...

080064ec <_close_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4d06      	ldr	r5, [pc, #24]	@ (8006508 <_close_r+0x1c>)
 80064f0:	2300      	movs	r3, #0
 80064f2:	4604      	mov	r4, r0
 80064f4:	4608      	mov	r0, r1
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	f7fb fa38 	bl	800196c <_close>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_close_r+0x1a>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	b103      	cbz	r3, 8006506 <_close_r+0x1a>
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	200004c8 	.word	0x200004c8

0800650c <_lseek_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	@ (800652c <_lseek_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fb fa4d 	bl	80019ba <_lseek>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_lseek_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_lseek_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	200004c8 	.word	0x200004c8

08006530 <_read_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d07      	ldr	r5, [pc, #28]	@ (8006550 <_read_r+0x20>)
 8006534:	4604      	mov	r4, r0
 8006536:	4608      	mov	r0, r1
 8006538:	4611      	mov	r1, r2
 800653a:	2200      	movs	r2, #0
 800653c:	602a      	str	r2, [r5, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	f7fb f9db 	bl	80018fa <_read>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_read_r+0x1e>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_read_r+0x1e>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	200004c8 	.word	0x200004c8

08006554 <_write_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	@ (8006574 <_write_r+0x20>)
 8006558:	4604      	mov	r4, r0
 800655a:	4608      	mov	r0, r1
 800655c:	4611      	mov	r1, r2
 800655e:	2200      	movs	r2, #0
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	f7fb f9e6 	bl	8001934 <_write>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_write_r+0x1e>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_write_r+0x1e>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	200004c8 	.word	0x200004c8

08006578 <__errno>:
 8006578:	4b01      	ldr	r3, [pc, #4]	@ (8006580 <__errno+0x8>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	2000018c 	.word	0x2000018c

08006584 <__libc_init_array>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	4d0d      	ldr	r5, [pc, #52]	@ (80065bc <__libc_init_array+0x38>)
 8006588:	4c0d      	ldr	r4, [pc, #52]	@ (80065c0 <__libc_init_array+0x3c>)
 800658a:	1b64      	subs	r4, r4, r5
 800658c:	10a4      	asrs	r4, r4, #2
 800658e:	2600      	movs	r6, #0
 8006590:	42a6      	cmp	r6, r4
 8006592:	d109      	bne.n	80065a8 <__libc_init_array+0x24>
 8006594:	4d0b      	ldr	r5, [pc, #44]	@ (80065c4 <__libc_init_array+0x40>)
 8006596:	4c0c      	ldr	r4, [pc, #48]	@ (80065c8 <__libc_init_array+0x44>)
 8006598:	f002 f80c 	bl	80085b4 <_init>
 800659c:	1b64      	subs	r4, r4, r5
 800659e:	10a4      	asrs	r4, r4, #2
 80065a0:	2600      	movs	r6, #0
 80065a2:	42a6      	cmp	r6, r4
 80065a4:	d105      	bne.n	80065b2 <__libc_init_array+0x2e>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ac:	4798      	blx	r3
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7ee      	b.n	8006590 <__libc_init_array+0xc>
 80065b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b6:	4798      	blx	r3
 80065b8:	3601      	adds	r6, #1
 80065ba:	e7f2      	b.n	80065a2 <__libc_init_array+0x1e>
 80065bc:	080089bc 	.word	0x080089bc
 80065c0:	080089bc 	.word	0x080089bc
 80065c4:	080089bc 	.word	0x080089bc
 80065c8:	080089c0 	.word	0x080089c0

080065cc <__retarget_lock_init_recursive>:
 80065cc:	4770      	bx	lr

080065ce <__retarget_lock_acquire_recursive>:
 80065ce:	4770      	bx	lr

080065d0 <__retarget_lock_release_recursive>:
 80065d0:	4770      	bx	lr

080065d2 <memcpy>:
 80065d2:	440a      	add	r2, r1
 80065d4:	4291      	cmp	r1, r2
 80065d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80065da:	d100      	bne.n	80065de <memcpy+0xc>
 80065dc:	4770      	bx	lr
 80065de:	b510      	push	{r4, lr}
 80065e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e8:	4291      	cmp	r1, r2
 80065ea:	d1f9      	bne.n	80065e0 <memcpy+0xe>
 80065ec:	bd10      	pop	{r4, pc}
	...

080065f0 <nan>:
 80065f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80065f8 <nan+0x8>
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	00000000 	.word	0x00000000
 80065fc:	7ff80000 	.word	0x7ff80000

08006600 <_free_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4605      	mov	r5, r0
 8006604:	2900      	cmp	r1, #0
 8006606:	d041      	beq.n	800668c <_free_r+0x8c>
 8006608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660c:	1f0c      	subs	r4, r1, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfb8      	it	lt
 8006612:	18e4      	addlt	r4, r4, r3
 8006614:	f000 fc2c 	bl	8006e70 <__malloc_lock>
 8006618:	4a1d      	ldr	r2, [pc, #116]	@ (8006690 <_free_r+0x90>)
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	b933      	cbnz	r3, 800662c <_free_r+0x2c>
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	6014      	str	r4, [r2, #0]
 8006622:	4628      	mov	r0, r5
 8006624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006628:	f000 bc28 	b.w	8006e7c <__malloc_unlock>
 800662c:	42a3      	cmp	r3, r4
 800662e:	d908      	bls.n	8006642 <_free_r+0x42>
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	1821      	adds	r1, r4, r0
 8006634:	428b      	cmp	r3, r1
 8006636:	bf01      	itttt	eq
 8006638:	6819      	ldreq	r1, [r3, #0]
 800663a:	685b      	ldreq	r3, [r3, #4]
 800663c:	1809      	addeq	r1, r1, r0
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	e7ed      	b.n	800661e <_free_r+0x1e>
 8006642:	461a      	mov	r2, r3
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	b10b      	cbz	r3, 800664c <_free_r+0x4c>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d9fa      	bls.n	8006642 <_free_r+0x42>
 800664c:	6811      	ldr	r1, [r2, #0]
 800664e:	1850      	adds	r0, r2, r1
 8006650:	42a0      	cmp	r0, r4
 8006652:	d10b      	bne.n	800666c <_free_r+0x6c>
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	4401      	add	r1, r0
 8006658:	1850      	adds	r0, r2, r1
 800665a:	4283      	cmp	r3, r0
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	d1e0      	bne.n	8006622 <_free_r+0x22>
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	6053      	str	r3, [r2, #4]
 8006666:	4408      	add	r0, r1
 8006668:	6010      	str	r0, [r2, #0]
 800666a:	e7da      	b.n	8006622 <_free_r+0x22>
 800666c:	d902      	bls.n	8006674 <_free_r+0x74>
 800666e:	230c      	movs	r3, #12
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	e7d6      	b.n	8006622 <_free_r+0x22>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	1821      	adds	r1, r4, r0
 8006678:	428b      	cmp	r3, r1
 800667a:	bf04      	itt	eq
 800667c:	6819      	ldreq	r1, [r3, #0]
 800667e:	685b      	ldreq	r3, [r3, #4]
 8006680:	6063      	str	r3, [r4, #4]
 8006682:	bf04      	itt	eq
 8006684:	1809      	addeq	r1, r1, r0
 8006686:	6021      	streq	r1, [r4, #0]
 8006688:	6054      	str	r4, [r2, #4]
 800668a:	e7ca      	b.n	8006622 <_free_r+0x22>
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	200004d4 	.word	0x200004d4

08006694 <rshift>:
 8006694:	6903      	ldr	r3, [r0, #16]
 8006696:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800669a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800669e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80066a2:	f100 0414 	add.w	r4, r0, #20
 80066a6:	dd45      	ble.n	8006734 <rshift+0xa0>
 80066a8:	f011 011f 	ands.w	r1, r1, #31
 80066ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80066b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80066b4:	d10c      	bne.n	80066d0 <rshift+0x3c>
 80066b6:	f100 0710 	add.w	r7, r0, #16
 80066ba:	4629      	mov	r1, r5
 80066bc:	42b1      	cmp	r1, r6
 80066be:	d334      	bcc.n	800672a <rshift+0x96>
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	1eea      	subs	r2, r5, #3
 80066c6:	4296      	cmp	r6, r2
 80066c8:	bf38      	it	cc
 80066ca:	2300      	movcc	r3, #0
 80066cc:	4423      	add	r3, r4
 80066ce:	e015      	b.n	80066fc <rshift+0x68>
 80066d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80066d4:	f1c1 0820 	rsb	r8, r1, #32
 80066d8:	40cf      	lsrs	r7, r1
 80066da:	f105 0e04 	add.w	lr, r5, #4
 80066de:	46a1      	mov	r9, r4
 80066e0:	4576      	cmp	r6, lr
 80066e2:	46f4      	mov	ip, lr
 80066e4:	d815      	bhi.n	8006712 <rshift+0x7e>
 80066e6:	1a9a      	subs	r2, r3, r2
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	3a04      	subs	r2, #4
 80066ec:	3501      	adds	r5, #1
 80066ee:	42ae      	cmp	r6, r5
 80066f0:	bf38      	it	cc
 80066f2:	2200      	movcc	r2, #0
 80066f4:	18a3      	adds	r3, r4, r2
 80066f6:	50a7      	str	r7, [r4, r2]
 80066f8:	b107      	cbz	r7, 80066fc <rshift+0x68>
 80066fa:	3304      	adds	r3, #4
 80066fc:	1b1a      	subs	r2, r3, r4
 80066fe:	42a3      	cmp	r3, r4
 8006700:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006704:	bf08      	it	eq
 8006706:	2300      	moveq	r3, #0
 8006708:	6102      	str	r2, [r0, #16]
 800670a:	bf08      	it	eq
 800670c:	6143      	streq	r3, [r0, #20]
 800670e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006712:	f8dc c000 	ldr.w	ip, [ip]
 8006716:	fa0c fc08 	lsl.w	ip, ip, r8
 800671a:	ea4c 0707 	orr.w	r7, ip, r7
 800671e:	f849 7b04 	str.w	r7, [r9], #4
 8006722:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006726:	40cf      	lsrs	r7, r1
 8006728:	e7da      	b.n	80066e0 <rshift+0x4c>
 800672a:	f851 cb04 	ldr.w	ip, [r1], #4
 800672e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006732:	e7c3      	b.n	80066bc <rshift+0x28>
 8006734:	4623      	mov	r3, r4
 8006736:	e7e1      	b.n	80066fc <rshift+0x68>

08006738 <__hexdig_fun>:
 8006738:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800673c:	2b09      	cmp	r3, #9
 800673e:	d802      	bhi.n	8006746 <__hexdig_fun+0xe>
 8006740:	3820      	subs	r0, #32
 8006742:	b2c0      	uxtb	r0, r0
 8006744:	4770      	bx	lr
 8006746:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800674a:	2b05      	cmp	r3, #5
 800674c:	d801      	bhi.n	8006752 <__hexdig_fun+0x1a>
 800674e:	3847      	subs	r0, #71	@ 0x47
 8006750:	e7f7      	b.n	8006742 <__hexdig_fun+0xa>
 8006752:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006756:	2b05      	cmp	r3, #5
 8006758:	d801      	bhi.n	800675e <__hexdig_fun+0x26>
 800675a:	3827      	subs	r0, #39	@ 0x27
 800675c:	e7f1      	b.n	8006742 <__hexdig_fun+0xa>
 800675e:	2000      	movs	r0, #0
 8006760:	4770      	bx	lr
	...

08006764 <__gethex>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	b085      	sub	sp, #20
 800676a:	468a      	mov	sl, r1
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	680b      	ldr	r3, [r1, #0]
 8006770:	9001      	str	r0, [sp, #4]
 8006772:	4690      	mov	r8, r2
 8006774:	1c9c      	adds	r4, r3, #2
 8006776:	46a1      	mov	r9, r4
 8006778:	f814 0b01 	ldrb.w	r0, [r4], #1
 800677c:	2830      	cmp	r0, #48	@ 0x30
 800677e:	d0fa      	beq.n	8006776 <__gethex+0x12>
 8006780:	eba9 0303 	sub.w	r3, r9, r3
 8006784:	f1a3 0b02 	sub.w	fp, r3, #2
 8006788:	f7ff ffd6 	bl	8006738 <__hexdig_fun>
 800678c:	4605      	mov	r5, r0
 800678e:	2800      	cmp	r0, #0
 8006790:	d168      	bne.n	8006864 <__gethex+0x100>
 8006792:	49a0      	ldr	r1, [pc, #640]	@ (8006a14 <__gethex+0x2b0>)
 8006794:	2201      	movs	r2, #1
 8006796:	4648      	mov	r0, r9
 8006798:	f7ff fe95 	bl	80064c6 <strncmp>
 800679c:	4607      	mov	r7, r0
 800679e:	2800      	cmp	r0, #0
 80067a0:	d167      	bne.n	8006872 <__gethex+0x10e>
 80067a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80067a6:	4626      	mov	r6, r4
 80067a8:	f7ff ffc6 	bl	8006738 <__hexdig_fun>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d062      	beq.n	8006876 <__gethex+0x112>
 80067b0:	4623      	mov	r3, r4
 80067b2:	7818      	ldrb	r0, [r3, #0]
 80067b4:	2830      	cmp	r0, #48	@ 0x30
 80067b6:	4699      	mov	r9, r3
 80067b8:	f103 0301 	add.w	r3, r3, #1
 80067bc:	d0f9      	beq.n	80067b2 <__gethex+0x4e>
 80067be:	f7ff ffbb 	bl	8006738 <__hexdig_fun>
 80067c2:	fab0 f580 	clz	r5, r0
 80067c6:	096d      	lsrs	r5, r5, #5
 80067c8:	f04f 0b01 	mov.w	fp, #1
 80067cc:	464a      	mov	r2, r9
 80067ce:	4616      	mov	r6, r2
 80067d0:	3201      	adds	r2, #1
 80067d2:	7830      	ldrb	r0, [r6, #0]
 80067d4:	f7ff ffb0 	bl	8006738 <__hexdig_fun>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d1f8      	bne.n	80067ce <__gethex+0x6a>
 80067dc:	498d      	ldr	r1, [pc, #564]	@ (8006a14 <__gethex+0x2b0>)
 80067de:	2201      	movs	r2, #1
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff fe70 	bl	80064c6 <strncmp>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d13f      	bne.n	800686a <__gethex+0x106>
 80067ea:	b944      	cbnz	r4, 80067fe <__gethex+0x9a>
 80067ec:	1c74      	adds	r4, r6, #1
 80067ee:	4622      	mov	r2, r4
 80067f0:	4616      	mov	r6, r2
 80067f2:	3201      	adds	r2, #1
 80067f4:	7830      	ldrb	r0, [r6, #0]
 80067f6:	f7ff ff9f 	bl	8006738 <__hexdig_fun>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d1f8      	bne.n	80067f0 <__gethex+0x8c>
 80067fe:	1ba4      	subs	r4, r4, r6
 8006800:	00a7      	lsls	r7, r4, #2
 8006802:	7833      	ldrb	r3, [r6, #0]
 8006804:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006808:	2b50      	cmp	r3, #80	@ 0x50
 800680a:	d13e      	bne.n	800688a <__gethex+0x126>
 800680c:	7873      	ldrb	r3, [r6, #1]
 800680e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006810:	d033      	beq.n	800687a <__gethex+0x116>
 8006812:	2b2d      	cmp	r3, #45	@ 0x2d
 8006814:	d034      	beq.n	8006880 <__gethex+0x11c>
 8006816:	1c71      	adds	r1, r6, #1
 8006818:	2400      	movs	r4, #0
 800681a:	7808      	ldrb	r0, [r1, #0]
 800681c:	f7ff ff8c 	bl	8006738 <__hexdig_fun>
 8006820:	1e43      	subs	r3, r0, #1
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b18      	cmp	r3, #24
 8006826:	d830      	bhi.n	800688a <__gethex+0x126>
 8006828:	f1a0 0210 	sub.w	r2, r0, #16
 800682c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006830:	f7ff ff82 	bl	8006738 <__hexdig_fun>
 8006834:	f100 3cff 	add.w	ip, r0, #4294967295
 8006838:	fa5f fc8c 	uxtb.w	ip, ip
 800683c:	f1bc 0f18 	cmp.w	ip, #24
 8006840:	f04f 030a 	mov.w	r3, #10
 8006844:	d91e      	bls.n	8006884 <__gethex+0x120>
 8006846:	b104      	cbz	r4, 800684a <__gethex+0xe6>
 8006848:	4252      	negs	r2, r2
 800684a:	4417      	add	r7, r2
 800684c:	f8ca 1000 	str.w	r1, [sl]
 8006850:	b1ed      	cbz	r5, 800688e <__gethex+0x12a>
 8006852:	f1bb 0f00 	cmp.w	fp, #0
 8006856:	bf0c      	ite	eq
 8006858:	2506      	moveq	r5, #6
 800685a:	2500      	movne	r5, #0
 800685c:	4628      	mov	r0, r5
 800685e:	b005      	add	sp, #20
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006864:	2500      	movs	r5, #0
 8006866:	462c      	mov	r4, r5
 8006868:	e7b0      	b.n	80067cc <__gethex+0x68>
 800686a:	2c00      	cmp	r4, #0
 800686c:	d1c7      	bne.n	80067fe <__gethex+0x9a>
 800686e:	4627      	mov	r7, r4
 8006870:	e7c7      	b.n	8006802 <__gethex+0x9e>
 8006872:	464e      	mov	r6, r9
 8006874:	462f      	mov	r7, r5
 8006876:	2501      	movs	r5, #1
 8006878:	e7c3      	b.n	8006802 <__gethex+0x9e>
 800687a:	2400      	movs	r4, #0
 800687c:	1cb1      	adds	r1, r6, #2
 800687e:	e7cc      	b.n	800681a <__gethex+0xb6>
 8006880:	2401      	movs	r4, #1
 8006882:	e7fb      	b.n	800687c <__gethex+0x118>
 8006884:	fb03 0002 	mla	r0, r3, r2, r0
 8006888:	e7ce      	b.n	8006828 <__gethex+0xc4>
 800688a:	4631      	mov	r1, r6
 800688c:	e7de      	b.n	800684c <__gethex+0xe8>
 800688e:	eba6 0309 	sub.w	r3, r6, r9
 8006892:	3b01      	subs	r3, #1
 8006894:	4629      	mov	r1, r5
 8006896:	2b07      	cmp	r3, #7
 8006898:	dc0a      	bgt.n	80068b0 <__gethex+0x14c>
 800689a:	9801      	ldr	r0, [sp, #4]
 800689c:	f000 faf4 	bl	8006e88 <_Balloc>
 80068a0:	4604      	mov	r4, r0
 80068a2:	b940      	cbnz	r0, 80068b6 <__gethex+0x152>
 80068a4:	4b5c      	ldr	r3, [pc, #368]	@ (8006a18 <__gethex+0x2b4>)
 80068a6:	4602      	mov	r2, r0
 80068a8:	21e4      	movs	r1, #228	@ 0xe4
 80068aa:	485c      	ldr	r0, [pc, #368]	@ (8006a1c <__gethex+0x2b8>)
 80068ac:	f001 fb5c 	bl	8007f68 <__assert_func>
 80068b0:	3101      	adds	r1, #1
 80068b2:	105b      	asrs	r3, r3, #1
 80068b4:	e7ef      	b.n	8006896 <__gethex+0x132>
 80068b6:	f100 0a14 	add.w	sl, r0, #20
 80068ba:	2300      	movs	r3, #0
 80068bc:	4655      	mov	r5, sl
 80068be:	469b      	mov	fp, r3
 80068c0:	45b1      	cmp	r9, r6
 80068c2:	d337      	bcc.n	8006934 <__gethex+0x1d0>
 80068c4:	f845 bb04 	str.w	fp, [r5], #4
 80068c8:	eba5 050a 	sub.w	r5, r5, sl
 80068cc:	10ad      	asrs	r5, r5, #2
 80068ce:	6125      	str	r5, [r4, #16]
 80068d0:	4658      	mov	r0, fp
 80068d2:	f000 fbcb 	bl	800706c <__hi0bits>
 80068d6:	016d      	lsls	r5, r5, #5
 80068d8:	f8d8 6000 	ldr.w	r6, [r8]
 80068dc:	1a2d      	subs	r5, r5, r0
 80068de:	42b5      	cmp	r5, r6
 80068e0:	dd54      	ble.n	800698c <__gethex+0x228>
 80068e2:	1bad      	subs	r5, r5, r6
 80068e4:	4629      	mov	r1, r5
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 ff57 	bl	800779a <__any_on>
 80068ec:	4681      	mov	r9, r0
 80068ee:	b178      	cbz	r0, 8006910 <__gethex+0x1ac>
 80068f0:	1e6b      	subs	r3, r5, #1
 80068f2:	1159      	asrs	r1, r3, #5
 80068f4:	f003 021f 	and.w	r2, r3, #31
 80068f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80068fc:	f04f 0901 	mov.w	r9, #1
 8006900:	fa09 f202 	lsl.w	r2, r9, r2
 8006904:	420a      	tst	r2, r1
 8006906:	d003      	beq.n	8006910 <__gethex+0x1ac>
 8006908:	454b      	cmp	r3, r9
 800690a:	dc36      	bgt.n	800697a <__gethex+0x216>
 800690c:	f04f 0902 	mov.w	r9, #2
 8006910:	4629      	mov	r1, r5
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff febe 	bl	8006694 <rshift>
 8006918:	442f      	add	r7, r5
 800691a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800691e:	42bb      	cmp	r3, r7
 8006920:	da42      	bge.n	80069a8 <__gethex+0x244>
 8006922:	9801      	ldr	r0, [sp, #4]
 8006924:	4621      	mov	r1, r4
 8006926:	f000 faef 	bl	8006f08 <_Bfree>
 800692a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800692c:	2300      	movs	r3, #0
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	25a3      	movs	r5, #163	@ 0xa3
 8006932:	e793      	b.n	800685c <__gethex+0xf8>
 8006934:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006938:	2a2e      	cmp	r2, #46	@ 0x2e
 800693a:	d012      	beq.n	8006962 <__gethex+0x1fe>
 800693c:	2b20      	cmp	r3, #32
 800693e:	d104      	bne.n	800694a <__gethex+0x1e6>
 8006940:	f845 bb04 	str.w	fp, [r5], #4
 8006944:	f04f 0b00 	mov.w	fp, #0
 8006948:	465b      	mov	r3, fp
 800694a:	7830      	ldrb	r0, [r6, #0]
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	f7ff fef3 	bl	8006738 <__hexdig_fun>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	f000 000f 	and.w	r0, r0, #15
 8006958:	4098      	lsls	r0, r3
 800695a:	ea4b 0b00 	orr.w	fp, fp, r0
 800695e:	3304      	adds	r3, #4
 8006960:	e7ae      	b.n	80068c0 <__gethex+0x15c>
 8006962:	45b1      	cmp	r9, r6
 8006964:	d8ea      	bhi.n	800693c <__gethex+0x1d8>
 8006966:	492b      	ldr	r1, [pc, #172]	@ (8006a14 <__gethex+0x2b0>)
 8006968:	9303      	str	r3, [sp, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff fdaa 	bl	80064c6 <strncmp>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	2800      	cmp	r0, #0
 8006976:	d1e1      	bne.n	800693c <__gethex+0x1d8>
 8006978:	e7a2      	b.n	80068c0 <__gethex+0x15c>
 800697a:	1ea9      	subs	r1, r5, #2
 800697c:	4620      	mov	r0, r4
 800697e:	f000 ff0c 	bl	800779a <__any_on>
 8006982:	2800      	cmp	r0, #0
 8006984:	d0c2      	beq.n	800690c <__gethex+0x1a8>
 8006986:	f04f 0903 	mov.w	r9, #3
 800698a:	e7c1      	b.n	8006910 <__gethex+0x1ac>
 800698c:	da09      	bge.n	80069a2 <__gethex+0x23e>
 800698e:	1b75      	subs	r5, r6, r5
 8006990:	4621      	mov	r1, r4
 8006992:	9801      	ldr	r0, [sp, #4]
 8006994:	462a      	mov	r2, r5
 8006996:	f000 fcc7 	bl	8007328 <__lshift>
 800699a:	1b7f      	subs	r7, r7, r5
 800699c:	4604      	mov	r4, r0
 800699e:	f100 0a14 	add.w	sl, r0, #20
 80069a2:	f04f 0900 	mov.w	r9, #0
 80069a6:	e7b8      	b.n	800691a <__gethex+0x1b6>
 80069a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80069ac:	42bd      	cmp	r5, r7
 80069ae:	dd6f      	ble.n	8006a90 <__gethex+0x32c>
 80069b0:	1bed      	subs	r5, r5, r7
 80069b2:	42ae      	cmp	r6, r5
 80069b4:	dc34      	bgt.n	8006a20 <__gethex+0x2bc>
 80069b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d022      	beq.n	8006a04 <__gethex+0x2a0>
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d024      	beq.n	8006a0c <__gethex+0x2a8>
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d115      	bne.n	80069f2 <__gethex+0x28e>
 80069c6:	42ae      	cmp	r6, r5
 80069c8:	d113      	bne.n	80069f2 <__gethex+0x28e>
 80069ca:	2e01      	cmp	r6, #1
 80069cc:	d10b      	bne.n	80069e6 <__gethex+0x282>
 80069ce:	9a02      	ldr	r2, [sp, #8]
 80069d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	2301      	movs	r3, #1
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	f8ca 3000 	str.w	r3, [sl]
 80069de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069e0:	2562      	movs	r5, #98	@ 0x62
 80069e2:	601c      	str	r4, [r3, #0]
 80069e4:	e73a      	b.n	800685c <__gethex+0xf8>
 80069e6:	1e71      	subs	r1, r6, #1
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fed6 	bl	800779a <__any_on>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d1ed      	bne.n	80069ce <__gethex+0x26a>
 80069f2:	9801      	ldr	r0, [sp, #4]
 80069f4:	4621      	mov	r1, r4
 80069f6:	f000 fa87 	bl	8006f08 <_Bfree>
 80069fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069fc:	2300      	movs	r3, #0
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	2550      	movs	r5, #80	@ 0x50
 8006a02:	e72b      	b.n	800685c <__gethex+0xf8>
 8006a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f3      	bne.n	80069f2 <__gethex+0x28e>
 8006a0a:	e7e0      	b.n	80069ce <__gethex+0x26a>
 8006a0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1dd      	bne.n	80069ce <__gethex+0x26a>
 8006a12:	e7ee      	b.n	80069f2 <__gethex+0x28e>
 8006a14:	080085f4 	.word	0x080085f4
 8006a18:	0800860a 	.word	0x0800860a
 8006a1c:	0800861b 	.word	0x0800861b
 8006a20:	1e6f      	subs	r7, r5, #1
 8006a22:	f1b9 0f00 	cmp.w	r9, #0
 8006a26:	d130      	bne.n	8006a8a <__gethex+0x326>
 8006a28:	b127      	cbz	r7, 8006a34 <__gethex+0x2d0>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 feb4 	bl	800779a <__any_on>
 8006a32:	4681      	mov	r9, r0
 8006a34:	117a      	asrs	r2, r7, #5
 8006a36:	2301      	movs	r3, #1
 8006a38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006a3c:	f007 071f 	and.w	r7, r7, #31
 8006a40:	40bb      	lsls	r3, r7
 8006a42:	4213      	tst	r3, r2
 8006a44:	4629      	mov	r1, r5
 8006a46:	4620      	mov	r0, r4
 8006a48:	bf18      	it	ne
 8006a4a:	f049 0902 	orrne.w	r9, r9, #2
 8006a4e:	f7ff fe21 	bl	8006694 <rshift>
 8006a52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006a56:	1b76      	subs	r6, r6, r5
 8006a58:	2502      	movs	r5, #2
 8006a5a:	f1b9 0f00 	cmp.w	r9, #0
 8006a5e:	d047      	beq.n	8006af0 <__gethex+0x38c>
 8006a60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d015      	beq.n	8006a94 <__gethex+0x330>
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d017      	beq.n	8006a9c <__gethex+0x338>
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d109      	bne.n	8006a84 <__gethex+0x320>
 8006a70:	f019 0f02 	tst.w	r9, #2
 8006a74:	d006      	beq.n	8006a84 <__gethex+0x320>
 8006a76:	f8da 3000 	ldr.w	r3, [sl]
 8006a7a:	ea49 0903 	orr.w	r9, r9, r3
 8006a7e:	f019 0f01 	tst.w	r9, #1
 8006a82:	d10e      	bne.n	8006aa2 <__gethex+0x33e>
 8006a84:	f045 0510 	orr.w	r5, r5, #16
 8006a88:	e032      	b.n	8006af0 <__gethex+0x38c>
 8006a8a:	f04f 0901 	mov.w	r9, #1
 8006a8e:	e7d1      	b.n	8006a34 <__gethex+0x2d0>
 8006a90:	2501      	movs	r5, #1
 8006a92:	e7e2      	b.n	8006a5a <__gethex+0x2f6>
 8006a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a96:	f1c3 0301 	rsb	r3, r3, #1
 8006a9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <__gethex+0x320>
 8006aa2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006aa6:	f104 0314 	add.w	r3, r4, #20
 8006aaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006aae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006ab2:	f04f 0c00 	mov.w	ip, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006ac0:	d01b      	beq.n	8006afa <__gethex+0x396>
 8006ac2:	3201      	adds	r2, #1
 8006ac4:	6002      	str	r2, [r0, #0]
 8006ac6:	2d02      	cmp	r5, #2
 8006ac8:	f104 0314 	add.w	r3, r4, #20
 8006acc:	d13c      	bne.n	8006b48 <__gethex+0x3e4>
 8006ace:	f8d8 2000 	ldr.w	r2, [r8]
 8006ad2:	3a01      	subs	r2, #1
 8006ad4:	42b2      	cmp	r2, r6
 8006ad6:	d109      	bne.n	8006aec <__gethex+0x388>
 8006ad8:	1171      	asrs	r1, r6, #5
 8006ada:	2201      	movs	r2, #1
 8006adc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ae0:	f006 061f 	and.w	r6, r6, #31
 8006ae4:	fa02 f606 	lsl.w	r6, r2, r6
 8006ae8:	421e      	tst	r6, r3
 8006aea:	d13a      	bne.n	8006b62 <__gethex+0x3fe>
 8006aec:	f045 0520 	orr.w	r5, r5, #32
 8006af0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006af2:	601c      	str	r4, [r3, #0]
 8006af4:	9b02      	ldr	r3, [sp, #8]
 8006af6:	601f      	str	r7, [r3, #0]
 8006af8:	e6b0      	b.n	800685c <__gethex+0xf8>
 8006afa:	4299      	cmp	r1, r3
 8006afc:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b00:	d8d9      	bhi.n	8006ab6 <__gethex+0x352>
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	459b      	cmp	fp, r3
 8006b06:	db17      	blt.n	8006b38 <__gethex+0x3d4>
 8006b08:	6861      	ldr	r1, [r4, #4]
 8006b0a:	9801      	ldr	r0, [sp, #4]
 8006b0c:	3101      	adds	r1, #1
 8006b0e:	f000 f9bb 	bl	8006e88 <_Balloc>
 8006b12:	4681      	mov	r9, r0
 8006b14:	b918      	cbnz	r0, 8006b1e <__gethex+0x3ba>
 8006b16:	4b1a      	ldr	r3, [pc, #104]	@ (8006b80 <__gethex+0x41c>)
 8006b18:	4602      	mov	r2, r0
 8006b1a:	2184      	movs	r1, #132	@ 0x84
 8006b1c:	e6c5      	b.n	80068aa <__gethex+0x146>
 8006b1e:	6922      	ldr	r2, [r4, #16]
 8006b20:	3202      	adds	r2, #2
 8006b22:	f104 010c 	add.w	r1, r4, #12
 8006b26:	0092      	lsls	r2, r2, #2
 8006b28:	300c      	adds	r0, #12
 8006b2a:	f7ff fd52 	bl	80065d2 <memcpy>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	9801      	ldr	r0, [sp, #4]
 8006b32:	f000 f9e9 	bl	8006f08 <_Bfree>
 8006b36:	464c      	mov	r4, r9
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b40:	6122      	str	r2, [r4, #16]
 8006b42:	2201      	movs	r2, #1
 8006b44:	615a      	str	r2, [r3, #20]
 8006b46:	e7be      	b.n	8006ac6 <__gethex+0x362>
 8006b48:	6922      	ldr	r2, [r4, #16]
 8006b4a:	455a      	cmp	r2, fp
 8006b4c:	dd0b      	ble.n	8006b66 <__gethex+0x402>
 8006b4e:	2101      	movs	r1, #1
 8006b50:	4620      	mov	r0, r4
 8006b52:	f7ff fd9f 	bl	8006694 <rshift>
 8006b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b5a:	3701      	adds	r7, #1
 8006b5c:	42bb      	cmp	r3, r7
 8006b5e:	f6ff aee0 	blt.w	8006922 <__gethex+0x1be>
 8006b62:	2501      	movs	r5, #1
 8006b64:	e7c2      	b.n	8006aec <__gethex+0x388>
 8006b66:	f016 061f 	ands.w	r6, r6, #31
 8006b6a:	d0fa      	beq.n	8006b62 <__gethex+0x3fe>
 8006b6c:	4453      	add	r3, sl
 8006b6e:	f1c6 0620 	rsb	r6, r6, #32
 8006b72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006b76:	f000 fa79 	bl	800706c <__hi0bits>
 8006b7a:	42b0      	cmp	r0, r6
 8006b7c:	dbe7      	blt.n	8006b4e <__gethex+0x3ea>
 8006b7e:	e7f0      	b.n	8006b62 <__gethex+0x3fe>
 8006b80:	0800860a 	.word	0x0800860a

08006b84 <L_shift>:
 8006b84:	f1c2 0208 	rsb	r2, r2, #8
 8006b88:	0092      	lsls	r2, r2, #2
 8006b8a:	b570      	push	{r4, r5, r6, lr}
 8006b8c:	f1c2 0620 	rsb	r6, r2, #32
 8006b90:	6843      	ldr	r3, [r0, #4]
 8006b92:	6804      	ldr	r4, [r0, #0]
 8006b94:	fa03 f506 	lsl.w	r5, r3, r6
 8006b98:	432c      	orrs	r4, r5
 8006b9a:	40d3      	lsrs	r3, r2
 8006b9c:	6004      	str	r4, [r0, #0]
 8006b9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006ba2:	4288      	cmp	r0, r1
 8006ba4:	d3f4      	bcc.n	8006b90 <L_shift+0xc>
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}

08006ba8 <__match>:
 8006ba8:	b530      	push	{r4, r5, lr}
 8006baa:	6803      	ldr	r3, [r0, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb2:	b914      	cbnz	r4, 8006bba <__match+0x12>
 8006bb4:	6003      	str	r3, [r0, #0]
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	bd30      	pop	{r4, r5, pc}
 8006bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006bc2:	2d19      	cmp	r5, #25
 8006bc4:	bf98      	it	ls
 8006bc6:	3220      	addls	r2, #32
 8006bc8:	42a2      	cmp	r2, r4
 8006bca:	d0f0      	beq.n	8006bae <__match+0x6>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e7f3      	b.n	8006bb8 <__match+0x10>

08006bd0 <__hexnan>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	680b      	ldr	r3, [r1, #0]
 8006bd6:	6801      	ldr	r1, [r0, #0]
 8006bd8:	115e      	asrs	r6, r3, #5
 8006bda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006bde:	f013 031f 	ands.w	r3, r3, #31
 8006be2:	b087      	sub	sp, #28
 8006be4:	bf18      	it	ne
 8006be6:	3604      	addne	r6, #4
 8006be8:	2500      	movs	r5, #0
 8006bea:	1f37      	subs	r7, r6, #4
 8006bec:	4682      	mov	sl, r0
 8006bee:	4690      	mov	r8, r2
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8006bf6:	46b9      	mov	r9, r7
 8006bf8:	463c      	mov	r4, r7
 8006bfa:	9502      	str	r5, [sp, #8]
 8006bfc:	46ab      	mov	fp, r5
 8006bfe:	784a      	ldrb	r2, [r1, #1]
 8006c00:	1c4b      	adds	r3, r1, #1
 8006c02:	9303      	str	r3, [sp, #12]
 8006c04:	b342      	cbz	r2, 8006c58 <__hexnan+0x88>
 8006c06:	4610      	mov	r0, r2
 8006c08:	9105      	str	r1, [sp, #20]
 8006c0a:	9204      	str	r2, [sp, #16]
 8006c0c:	f7ff fd94 	bl	8006738 <__hexdig_fun>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d151      	bne.n	8006cb8 <__hexnan+0xe8>
 8006c14:	9a04      	ldr	r2, [sp, #16]
 8006c16:	9905      	ldr	r1, [sp, #20]
 8006c18:	2a20      	cmp	r2, #32
 8006c1a:	d818      	bhi.n	8006c4e <__hexnan+0x7e>
 8006c1c:	9b02      	ldr	r3, [sp, #8]
 8006c1e:	459b      	cmp	fp, r3
 8006c20:	dd13      	ble.n	8006c4a <__hexnan+0x7a>
 8006c22:	454c      	cmp	r4, r9
 8006c24:	d206      	bcs.n	8006c34 <__hexnan+0x64>
 8006c26:	2d07      	cmp	r5, #7
 8006c28:	dc04      	bgt.n	8006c34 <__hexnan+0x64>
 8006c2a:	462a      	mov	r2, r5
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f7ff ffa8 	bl	8006b84 <L_shift>
 8006c34:	4544      	cmp	r4, r8
 8006c36:	d952      	bls.n	8006cde <__hexnan+0x10e>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f1a4 0904 	sub.w	r9, r4, #4
 8006c3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c42:	f8cd b008 	str.w	fp, [sp, #8]
 8006c46:	464c      	mov	r4, r9
 8006c48:	461d      	mov	r5, r3
 8006c4a:	9903      	ldr	r1, [sp, #12]
 8006c4c:	e7d7      	b.n	8006bfe <__hexnan+0x2e>
 8006c4e:	2a29      	cmp	r2, #41	@ 0x29
 8006c50:	d157      	bne.n	8006d02 <__hexnan+0x132>
 8006c52:	3102      	adds	r1, #2
 8006c54:	f8ca 1000 	str.w	r1, [sl]
 8006c58:	f1bb 0f00 	cmp.w	fp, #0
 8006c5c:	d051      	beq.n	8006d02 <__hexnan+0x132>
 8006c5e:	454c      	cmp	r4, r9
 8006c60:	d206      	bcs.n	8006c70 <__hexnan+0xa0>
 8006c62:	2d07      	cmp	r5, #7
 8006c64:	dc04      	bgt.n	8006c70 <__hexnan+0xa0>
 8006c66:	462a      	mov	r2, r5
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff ff8a 	bl	8006b84 <L_shift>
 8006c70:	4544      	cmp	r4, r8
 8006c72:	d936      	bls.n	8006ce2 <__hexnan+0x112>
 8006c74:	f1a8 0204 	sub.w	r2, r8, #4
 8006c78:	4623      	mov	r3, r4
 8006c7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c82:	429f      	cmp	r7, r3
 8006c84:	d2f9      	bcs.n	8006c7a <__hexnan+0xaa>
 8006c86:	1b3b      	subs	r3, r7, r4
 8006c88:	f023 0303 	bic.w	r3, r3, #3
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	3401      	adds	r4, #1
 8006c90:	3e03      	subs	r6, #3
 8006c92:	42b4      	cmp	r4, r6
 8006c94:	bf88      	it	hi
 8006c96:	2304      	movhi	r3, #4
 8006c98:	4443      	add	r3, r8
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f843 2b04 	str.w	r2, [r3], #4
 8006ca0:	429f      	cmp	r7, r3
 8006ca2:	d2fb      	bcs.n	8006c9c <__hexnan+0xcc>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	b91b      	cbnz	r3, 8006cb0 <__hexnan+0xe0>
 8006ca8:	4547      	cmp	r7, r8
 8006caa:	d128      	bne.n	8006cfe <__hexnan+0x12e>
 8006cac:	2301      	movs	r3, #1
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	2005      	movs	r0, #5
 8006cb2:	b007      	add	sp, #28
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	3501      	adds	r5, #1
 8006cba:	2d08      	cmp	r5, #8
 8006cbc:	f10b 0b01 	add.w	fp, fp, #1
 8006cc0:	dd06      	ble.n	8006cd0 <__hexnan+0x100>
 8006cc2:	4544      	cmp	r4, r8
 8006cc4:	d9c1      	bls.n	8006c4a <__hexnan+0x7a>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ccc:	2501      	movs	r5, #1
 8006cce:	3c04      	subs	r4, #4
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	f000 000f 	and.w	r0, r0, #15
 8006cd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006cda:	6020      	str	r0, [r4, #0]
 8006cdc:	e7b5      	b.n	8006c4a <__hexnan+0x7a>
 8006cde:	2508      	movs	r5, #8
 8006ce0:	e7b3      	b.n	8006c4a <__hexnan+0x7a>
 8006ce2:	9b01      	ldr	r3, [sp, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0dd      	beq.n	8006ca4 <__hexnan+0xd4>
 8006ce8:	f1c3 0320 	rsb	r3, r3, #32
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	40da      	lsrs	r2, r3
 8006cf2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	f846 3c04 	str.w	r3, [r6, #-4]
 8006cfc:	e7d2      	b.n	8006ca4 <__hexnan+0xd4>
 8006cfe:	3f04      	subs	r7, #4
 8006d00:	e7d0      	b.n	8006ca4 <__hexnan+0xd4>
 8006d02:	2004      	movs	r0, #4
 8006d04:	e7d5      	b.n	8006cb2 <__hexnan+0xe2>
	...

08006d08 <sbrk_aligned>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4e0f      	ldr	r6, [pc, #60]	@ (8006d48 <sbrk_aligned+0x40>)
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	6831      	ldr	r1, [r6, #0]
 8006d10:	4605      	mov	r5, r0
 8006d12:	b911      	cbnz	r1, 8006d1a <sbrk_aligned+0x12>
 8006d14:	f001 f918 	bl	8007f48 <_sbrk_r>
 8006d18:	6030      	str	r0, [r6, #0]
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f001 f913 	bl	8007f48 <_sbrk_r>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	d103      	bne.n	8006d2e <sbrk_aligned+0x26>
 8006d26:	f04f 34ff 	mov.w	r4, #4294967295
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	1cc4      	adds	r4, r0, #3
 8006d30:	f024 0403 	bic.w	r4, r4, #3
 8006d34:	42a0      	cmp	r0, r4
 8006d36:	d0f8      	beq.n	8006d2a <sbrk_aligned+0x22>
 8006d38:	1a21      	subs	r1, r4, r0
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f001 f904 	bl	8007f48 <_sbrk_r>
 8006d40:	3001      	adds	r0, #1
 8006d42:	d1f2      	bne.n	8006d2a <sbrk_aligned+0x22>
 8006d44:	e7ef      	b.n	8006d26 <sbrk_aligned+0x1e>
 8006d46:	bf00      	nop
 8006d48:	200004d0 	.word	0x200004d0

08006d4c <_malloc_r>:
 8006d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d50:	1ccd      	adds	r5, r1, #3
 8006d52:	f025 0503 	bic.w	r5, r5, #3
 8006d56:	3508      	adds	r5, #8
 8006d58:	2d0c      	cmp	r5, #12
 8006d5a:	bf38      	it	cc
 8006d5c:	250c      	movcc	r5, #12
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	4606      	mov	r6, r0
 8006d62:	db01      	blt.n	8006d68 <_malloc_r+0x1c>
 8006d64:	42a9      	cmp	r1, r5
 8006d66:	d904      	bls.n	8006d72 <_malloc_r+0x26>
 8006d68:	230c      	movs	r3, #12
 8006d6a:	6033      	str	r3, [r6, #0]
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e48 <_malloc_r+0xfc>
 8006d76:	f000 f87b 	bl	8006e70 <__malloc_lock>
 8006d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d7e:	461c      	mov	r4, r3
 8006d80:	bb44      	cbnz	r4, 8006dd4 <_malloc_r+0x88>
 8006d82:	4629      	mov	r1, r5
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff ffbf 	bl	8006d08 <sbrk_aligned>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	d158      	bne.n	8006e42 <_malloc_r+0xf6>
 8006d90:	f8d8 4000 	ldr.w	r4, [r8]
 8006d94:	4627      	mov	r7, r4
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	d143      	bne.n	8006e22 <_malloc_r+0xd6>
 8006d9a:	2c00      	cmp	r4, #0
 8006d9c:	d04b      	beq.n	8006e36 <_malloc_r+0xea>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	4639      	mov	r1, r7
 8006da2:	4630      	mov	r0, r6
 8006da4:	eb04 0903 	add.w	r9, r4, r3
 8006da8:	f001 f8ce 	bl	8007f48 <_sbrk_r>
 8006dac:	4581      	cmp	r9, r0
 8006dae:	d142      	bne.n	8006e36 <_malloc_r+0xea>
 8006db0:	6821      	ldr	r1, [r4, #0]
 8006db2:	1a6d      	subs	r5, r5, r1
 8006db4:	4629      	mov	r1, r5
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7ff ffa6 	bl	8006d08 <sbrk_aligned>
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d03a      	beq.n	8006e36 <_malloc_r+0xea>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	442b      	add	r3, r5
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	bb62      	cbnz	r2, 8006e28 <_malloc_r+0xdc>
 8006dce:	f8c8 7000 	str.w	r7, [r8]
 8006dd2:	e00f      	b.n	8006df4 <_malloc_r+0xa8>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	1b52      	subs	r2, r2, r5
 8006dd8:	d420      	bmi.n	8006e1c <_malloc_r+0xd0>
 8006dda:	2a0b      	cmp	r2, #11
 8006ddc:	d917      	bls.n	8006e0e <_malloc_r+0xc2>
 8006dde:	1961      	adds	r1, r4, r5
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	6025      	str	r5, [r4, #0]
 8006de4:	bf18      	it	ne
 8006de6:	6059      	strne	r1, [r3, #4]
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	bf08      	it	eq
 8006dec:	f8c8 1000 	streq.w	r1, [r8]
 8006df0:	5162      	str	r2, [r4, r5]
 8006df2:	604b      	str	r3, [r1, #4]
 8006df4:	4630      	mov	r0, r6
 8006df6:	f000 f841 	bl	8006e7c <__malloc_unlock>
 8006dfa:	f104 000b 	add.w	r0, r4, #11
 8006dfe:	1d23      	adds	r3, r4, #4
 8006e00:	f020 0007 	bic.w	r0, r0, #7
 8006e04:	1ac2      	subs	r2, r0, r3
 8006e06:	bf1c      	itt	ne
 8006e08:	1a1b      	subne	r3, r3, r0
 8006e0a:	50a3      	strne	r3, [r4, r2]
 8006e0c:	e7af      	b.n	8006d6e <_malloc_r+0x22>
 8006e0e:	6862      	ldr	r2, [r4, #4]
 8006e10:	42a3      	cmp	r3, r4
 8006e12:	bf0c      	ite	eq
 8006e14:	f8c8 2000 	streq.w	r2, [r8]
 8006e18:	605a      	strne	r2, [r3, #4]
 8006e1a:	e7eb      	b.n	8006df4 <_malloc_r+0xa8>
 8006e1c:	4623      	mov	r3, r4
 8006e1e:	6864      	ldr	r4, [r4, #4]
 8006e20:	e7ae      	b.n	8006d80 <_malloc_r+0x34>
 8006e22:	463c      	mov	r4, r7
 8006e24:	687f      	ldr	r7, [r7, #4]
 8006e26:	e7b6      	b.n	8006d96 <_malloc_r+0x4a>
 8006e28:	461a      	mov	r2, r3
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d1fb      	bne.n	8006e28 <_malloc_r+0xdc>
 8006e30:	2300      	movs	r3, #0
 8006e32:	6053      	str	r3, [r2, #4]
 8006e34:	e7de      	b.n	8006df4 <_malloc_r+0xa8>
 8006e36:	230c      	movs	r3, #12
 8006e38:	6033      	str	r3, [r6, #0]
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f000 f81e 	bl	8006e7c <__malloc_unlock>
 8006e40:	e794      	b.n	8006d6c <_malloc_r+0x20>
 8006e42:	6005      	str	r5, [r0, #0]
 8006e44:	e7d6      	b.n	8006df4 <_malloc_r+0xa8>
 8006e46:	bf00      	nop
 8006e48:	200004d4 	.word	0x200004d4

08006e4c <__ascii_mbtowc>:
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	b901      	cbnz	r1, 8006e52 <__ascii_mbtowc+0x6>
 8006e50:	a901      	add	r1, sp, #4
 8006e52:	b142      	cbz	r2, 8006e66 <__ascii_mbtowc+0x1a>
 8006e54:	b14b      	cbz	r3, 8006e6a <__ascii_mbtowc+0x1e>
 8006e56:	7813      	ldrb	r3, [r2, #0]
 8006e58:	600b      	str	r3, [r1, #0]
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	1e10      	subs	r0, r2, #0
 8006e5e:	bf18      	it	ne
 8006e60:	2001      	movne	r0, #1
 8006e62:	b002      	add	sp, #8
 8006e64:	4770      	bx	lr
 8006e66:	4610      	mov	r0, r2
 8006e68:	e7fb      	b.n	8006e62 <__ascii_mbtowc+0x16>
 8006e6a:	f06f 0001 	mvn.w	r0, #1
 8006e6e:	e7f8      	b.n	8006e62 <__ascii_mbtowc+0x16>

08006e70 <__malloc_lock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	@ (8006e78 <__malloc_lock+0x8>)
 8006e72:	f7ff bbac 	b.w	80065ce <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	200004cc 	.word	0x200004cc

08006e7c <__malloc_unlock>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	@ (8006e84 <__malloc_unlock+0x8>)
 8006e7e:	f7ff bba7 	b.w	80065d0 <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	200004cc 	.word	0x200004cc

08006e88 <_Balloc>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	69c6      	ldr	r6, [r0, #28]
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	460d      	mov	r5, r1
 8006e90:	b976      	cbnz	r6, 8006eb0 <_Balloc+0x28>
 8006e92:	2010      	movs	r0, #16
 8006e94:	f001 f89a 	bl	8007fcc <malloc>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	61e0      	str	r0, [r4, #28]
 8006e9c:	b920      	cbnz	r0, 8006ea8 <_Balloc+0x20>
 8006e9e:	4b18      	ldr	r3, [pc, #96]	@ (8006f00 <_Balloc+0x78>)
 8006ea0:	4818      	ldr	r0, [pc, #96]	@ (8006f04 <_Balloc+0x7c>)
 8006ea2:	216b      	movs	r1, #107	@ 0x6b
 8006ea4:	f001 f860 	bl	8007f68 <__assert_func>
 8006ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006eac:	6006      	str	r6, [r0, #0]
 8006eae:	60c6      	str	r6, [r0, #12]
 8006eb0:	69e6      	ldr	r6, [r4, #28]
 8006eb2:	68f3      	ldr	r3, [r6, #12]
 8006eb4:	b183      	cbz	r3, 8006ed8 <_Balloc+0x50>
 8006eb6:	69e3      	ldr	r3, [r4, #28]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ebe:	b9b8      	cbnz	r0, 8006ef0 <_Balloc+0x68>
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ec6:	1d72      	adds	r2, r6, #5
 8006ec8:	0092      	lsls	r2, r2, #2
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f001 f86a 	bl	8007fa4 <_calloc_r>
 8006ed0:	b160      	cbz	r0, 8006eec <_Balloc+0x64>
 8006ed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ed6:	e00e      	b.n	8006ef6 <_Balloc+0x6e>
 8006ed8:	2221      	movs	r2, #33	@ 0x21
 8006eda:	2104      	movs	r1, #4
 8006edc:	4620      	mov	r0, r4
 8006ede:	f001 f861 	bl	8007fa4 <_calloc_r>
 8006ee2:	69e3      	ldr	r3, [r4, #28]
 8006ee4:	60f0      	str	r0, [r6, #12]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e4      	bne.n	8006eb6 <_Balloc+0x2e>
 8006eec:	2000      	movs	r0, #0
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	6802      	ldr	r2, [r0, #0]
 8006ef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006efc:	e7f7      	b.n	8006eee <_Balloc+0x66>
 8006efe:	bf00      	nop
 8006f00:	0800867b 	.word	0x0800867b
 8006f04:	08008692 	.word	0x08008692

08006f08 <_Bfree>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	69c6      	ldr	r6, [r0, #28]
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b976      	cbnz	r6, 8006f30 <_Bfree+0x28>
 8006f12:	2010      	movs	r0, #16
 8006f14:	f001 f85a 	bl	8007fcc <malloc>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	61e8      	str	r0, [r5, #28]
 8006f1c:	b920      	cbnz	r0, 8006f28 <_Bfree+0x20>
 8006f1e:	4b09      	ldr	r3, [pc, #36]	@ (8006f44 <_Bfree+0x3c>)
 8006f20:	4809      	ldr	r0, [pc, #36]	@ (8006f48 <_Bfree+0x40>)
 8006f22:	218f      	movs	r1, #143	@ 0x8f
 8006f24:	f001 f820 	bl	8007f68 <__assert_func>
 8006f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f2c:	6006      	str	r6, [r0, #0]
 8006f2e:	60c6      	str	r6, [r0, #12]
 8006f30:	b13c      	cbz	r4, 8006f42 <_Bfree+0x3a>
 8006f32:	69eb      	ldr	r3, [r5, #28]
 8006f34:	6862      	ldr	r2, [r4, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f3c:	6021      	str	r1, [r4, #0]
 8006f3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	0800867b 	.word	0x0800867b
 8006f48:	08008692 	.word	0x08008692

08006f4c <__multadd>:
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	690d      	ldr	r5, [r1, #16]
 8006f52:	4607      	mov	r7, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	461e      	mov	r6, r3
 8006f58:	f101 0c14 	add.w	ip, r1, #20
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	f8dc 3000 	ldr.w	r3, [ip]
 8006f62:	b299      	uxth	r1, r3
 8006f64:	fb02 6101 	mla	r1, r2, r1, r6
 8006f68:	0c1e      	lsrs	r6, r3, #16
 8006f6a:	0c0b      	lsrs	r3, r1, #16
 8006f6c:	fb02 3306 	mla	r3, r2, r6, r3
 8006f70:	b289      	uxth	r1, r1
 8006f72:	3001      	adds	r0, #1
 8006f74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f78:	4285      	cmp	r5, r0
 8006f7a:	f84c 1b04 	str.w	r1, [ip], #4
 8006f7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f82:	dcec      	bgt.n	8006f5e <__multadd+0x12>
 8006f84:	b30e      	cbz	r6, 8006fca <__multadd+0x7e>
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	42ab      	cmp	r3, r5
 8006f8a:	dc19      	bgt.n	8006fc0 <__multadd+0x74>
 8006f8c:	6861      	ldr	r1, [r4, #4]
 8006f8e:	4638      	mov	r0, r7
 8006f90:	3101      	adds	r1, #1
 8006f92:	f7ff ff79 	bl	8006e88 <_Balloc>
 8006f96:	4680      	mov	r8, r0
 8006f98:	b928      	cbnz	r0, 8006fa6 <__multadd+0x5a>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <__multadd+0x84>)
 8006f9e:	480d      	ldr	r0, [pc, #52]	@ (8006fd4 <__multadd+0x88>)
 8006fa0:	21ba      	movs	r1, #186	@ 0xba
 8006fa2:	f000 ffe1 	bl	8007f68 <__assert_func>
 8006fa6:	6922      	ldr	r2, [r4, #16]
 8006fa8:	3202      	adds	r2, #2
 8006faa:	f104 010c 	add.w	r1, r4, #12
 8006fae:	0092      	lsls	r2, r2, #2
 8006fb0:	300c      	adds	r0, #12
 8006fb2:	f7ff fb0e 	bl	80065d2 <memcpy>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f7ff ffa5 	bl	8006f08 <_Bfree>
 8006fbe:	4644      	mov	r4, r8
 8006fc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fc4:	3501      	adds	r5, #1
 8006fc6:	615e      	str	r6, [r3, #20]
 8006fc8:	6125      	str	r5, [r4, #16]
 8006fca:	4620      	mov	r0, r4
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd0:	0800860a 	.word	0x0800860a
 8006fd4:	08008692 	.word	0x08008692

08006fd8 <__s2b>:
 8006fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	4615      	mov	r5, r2
 8006fe0:	461f      	mov	r7, r3
 8006fe2:	2209      	movs	r2, #9
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fec:	2100      	movs	r1, #0
 8006fee:	2201      	movs	r2, #1
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	db09      	blt.n	8007008 <__s2b+0x30>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7ff ff47 	bl	8006e88 <_Balloc>
 8006ffa:	b940      	cbnz	r0, 800700e <__s2b+0x36>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <__s2b+0x8c>)
 8007000:	4819      	ldr	r0, [pc, #100]	@ (8007068 <__s2b+0x90>)
 8007002:	21d3      	movs	r1, #211	@ 0xd3
 8007004:	f000 ffb0 	bl	8007f68 <__assert_func>
 8007008:	0052      	lsls	r2, r2, #1
 800700a:	3101      	adds	r1, #1
 800700c:	e7f0      	b.n	8006ff0 <__s2b+0x18>
 800700e:	9b08      	ldr	r3, [sp, #32]
 8007010:	6143      	str	r3, [r0, #20]
 8007012:	2d09      	cmp	r5, #9
 8007014:	f04f 0301 	mov.w	r3, #1
 8007018:	6103      	str	r3, [r0, #16]
 800701a:	dd16      	ble.n	800704a <__s2b+0x72>
 800701c:	f104 0909 	add.w	r9, r4, #9
 8007020:	46c8      	mov	r8, r9
 8007022:	442c      	add	r4, r5
 8007024:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007028:	4601      	mov	r1, r0
 800702a:	3b30      	subs	r3, #48	@ 0x30
 800702c:	220a      	movs	r2, #10
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ff8c 	bl	8006f4c <__multadd>
 8007034:	45a0      	cmp	r8, r4
 8007036:	d1f5      	bne.n	8007024 <__s2b+0x4c>
 8007038:	f1a5 0408 	sub.w	r4, r5, #8
 800703c:	444c      	add	r4, r9
 800703e:	1b2d      	subs	r5, r5, r4
 8007040:	1963      	adds	r3, r4, r5
 8007042:	42bb      	cmp	r3, r7
 8007044:	db04      	blt.n	8007050 <__s2b+0x78>
 8007046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704a:	340a      	adds	r4, #10
 800704c:	2509      	movs	r5, #9
 800704e:	e7f6      	b.n	800703e <__s2b+0x66>
 8007050:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007054:	4601      	mov	r1, r0
 8007056:	3b30      	subs	r3, #48	@ 0x30
 8007058:	220a      	movs	r2, #10
 800705a:	4630      	mov	r0, r6
 800705c:	f7ff ff76 	bl	8006f4c <__multadd>
 8007060:	e7ee      	b.n	8007040 <__s2b+0x68>
 8007062:	bf00      	nop
 8007064:	0800860a 	.word	0x0800860a
 8007068:	08008692 	.word	0x08008692

0800706c <__hi0bits>:
 800706c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007070:	4603      	mov	r3, r0
 8007072:	bf36      	itet	cc
 8007074:	0403      	lslcc	r3, r0, #16
 8007076:	2000      	movcs	r0, #0
 8007078:	2010      	movcc	r0, #16
 800707a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800707e:	bf3c      	itt	cc
 8007080:	021b      	lslcc	r3, r3, #8
 8007082:	3008      	addcc	r0, #8
 8007084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007088:	bf3c      	itt	cc
 800708a:	011b      	lslcc	r3, r3, #4
 800708c:	3004      	addcc	r0, #4
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007092:	bf3c      	itt	cc
 8007094:	009b      	lslcc	r3, r3, #2
 8007096:	3002      	addcc	r0, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	db05      	blt.n	80070a8 <__hi0bits+0x3c>
 800709c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070a0:	f100 0001 	add.w	r0, r0, #1
 80070a4:	bf08      	it	eq
 80070a6:	2020      	moveq	r0, #32
 80070a8:	4770      	bx	lr

080070aa <__lo0bits>:
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	4602      	mov	r2, r0
 80070ae:	f013 0007 	ands.w	r0, r3, #7
 80070b2:	d00b      	beq.n	80070cc <__lo0bits+0x22>
 80070b4:	07d9      	lsls	r1, r3, #31
 80070b6:	d421      	bmi.n	80070fc <__lo0bits+0x52>
 80070b8:	0798      	lsls	r0, r3, #30
 80070ba:	bf49      	itett	mi
 80070bc:	085b      	lsrmi	r3, r3, #1
 80070be:	089b      	lsrpl	r3, r3, #2
 80070c0:	2001      	movmi	r0, #1
 80070c2:	6013      	strmi	r3, [r2, #0]
 80070c4:	bf5c      	itt	pl
 80070c6:	6013      	strpl	r3, [r2, #0]
 80070c8:	2002      	movpl	r0, #2
 80070ca:	4770      	bx	lr
 80070cc:	b299      	uxth	r1, r3
 80070ce:	b909      	cbnz	r1, 80070d4 <__lo0bits+0x2a>
 80070d0:	0c1b      	lsrs	r3, r3, #16
 80070d2:	2010      	movs	r0, #16
 80070d4:	b2d9      	uxtb	r1, r3
 80070d6:	b909      	cbnz	r1, 80070dc <__lo0bits+0x32>
 80070d8:	3008      	adds	r0, #8
 80070da:	0a1b      	lsrs	r3, r3, #8
 80070dc:	0719      	lsls	r1, r3, #28
 80070de:	bf04      	itt	eq
 80070e0:	091b      	lsreq	r3, r3, #4
 80070e2:	3004      	addeq	r0, #4
 80070e4:	0799      	lsls	r1, r3, #30
 80070e6:	bf04      	itt	eq
 80070e8:	089b      	lsreq	r3, r3, #2
 80070ea:	3002      	addeq	r0, #2
 80070ec:	07d9      	lsls	r1, r3, #31
 80070ee:	d403      	bmi.n	80070f8 <__lo0bits+0x4e>
 80070f0:	085b      	lsrs	r3, r3, #1
 80070f2:	f100 0001 	add.w	r0, r0, #1
 80070f6:	d003      	beq.n	8007100 <__lo0bits+0x56>
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	4770      	bx	lr
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr
 8007100:	2020      	movs	r0, #32
 8007102:	4770      	bx	lr

08007104 <__i2b>:
 8007104:	b510      	push	{r4, lr}
 8007106:	460c      	mov	r4, r1
 8007108:	2101      	movs	r1, #1
 800710a:	f7ff febd 	bl	8006e88 <_Balloc>
 800710e:	4602      	mov	r2, r0
 8007110:	b928      	cbnz	r0, 800711e <__i2b+0x1a>
 8007112:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <__i2b+0x24>)
 8007114:	4805      	ldr	r0, [pc, #20]	@ (800712c <__i2b+0x28>)
 8007116:	f240 1145 	movw	r1, #325	@ 0x145
 800711a:	f000 ff25 	bl	8007f68 <__assert_func>
 800711e:	2301      	movs	r3, #1
 8007120:	6144      	str	r4, [r0, #20]
 8007122:	6103      	str	r3, [r0, #16]
 8007124:	bd10      	pop	{r4, pc}
 8007126:	bf00      	nop
 8007128:	0800860a 	.word	0x0800860a
 800712c:	08008692 	.word	0x08008692

08007130 <__multiply>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	4617      	mov	r7, r2
 8007136:	690a      	ldr	r2, [r1, #16]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	429a      	cmp	r2, r3
 800713c:	bfa8      	it	ge
 800713e:	463b      	movge	r3, r7
 8007140:	4689      	mov	r9, r1
 8007142:	bfa4      	itt	ge
 8007144:	460f      	movge	r7, r1
 8007146:	4699      	movge	r9, r3
 8007148:	693d      	ldr	r5, [r7, #16]
 800714a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	eb05 060a 	add.w	r6, r5, sl
 8007156:	42b3      	cmp	r3, r6
 8007158:	b085      	sub	sp, #20
 800715a:	bfb8      	it	lt
 800715c:	3101      	addlt	r1, #1
 800715e:	f7ff fe93 	bl	8006e88 <_Balloc>
 8007162:	b930      	cbnz	r0, 8007172 <__multiply+0x42>
 8007164:	4602      	mov	r2, r0
 8007166:	4b41      	ldr	r3, [pc, #260]	@ (800726c <__multiply+0x13c>)
 8007168:	4841      	ldr	r0, [pc, #260]	@ (8007270 <__multiply+0x140>)
 800716a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800716e:	f000 fefb 	bl	8007f68 <__assert_func>
 8007172:	f100 0414 	add.w	r4, r0, #20
 8007176:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800717a:	4623      	mov	r3, r4
 800717c:	2200      	movs	r2, #0
 800717e:	4573      	cmp	r3, lr
 8007180:	d320      	bcc.n	80071c4 <__multiply+0x94>
 8007182:	f107 0814 	add.w	r8, r7, #20
 8007186:	f109 0114 	add.w	r1, r9, #20
 800718a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800718e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007192:	9302      	str	r3, [sp, #8]
 8007194:	1beb      	subs	r3, r5, r7
 8007196:	3b15      	subs	r3, #21
 8007198:	f023 0303 	bic.w	r3, r3, #3
 800719c:	3304      	adds	r3, #4
 800719e:	3715      	adds	r7, #21
 80071a0:	42bd      	cmp	r5, r7
 80071a2:	bf38      	it	cc
 80071a4:	2304      	movcc	r3, #4
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	9103      	str	r1, [sp, #12]
 80071ac:	428b      	cmp	r3, r1
 80071ae:	d80c      	bhi.n	80071ca <__multiply+0x9a>
 80071b0:	2e00      	cmp	r6, #0
 80071b2:	dd03      	ble.n	80071bc <__multiply+0x8c>
 80071b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d055      	beq.n	8007268 <__multiply+0x138>
 80071bc:	6106      	str	r6, [r0, #16]
 80071be:	b005      	add	sp, #20
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	f843 2b04 	str.w	r2, [r3], #4
 80071c8:	e7d9      	b.n	800717e <__multiply+0x4e>
 80071ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80071ce:	f1ba 0f00 	cmp.w	sl, #0
 80071d2:	d01f      	beq.n	8007214 <__multiply+0xe4>
 80071d4:	46c4      	mov	ip, r8
 80071d6:	46a1      	mov	r9, r4
 80071d8:	2700      	movs	r7, #0
 80071da:	f85c 2b04 	ldr.w	r2, [ip], #4
 80071de:	f8d9 3000 	ldr.w	r3, [r9]
 80071e2:	fa1f fb82 	uxth.w	fp, r2
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80071ec:	443b      	add	r3, r7
 80071ee:	f8d9 7000 	ldr.w	r7, [r9]
 80071f2:	0c12      	lsrs	r2, r2, #16
 80071f4:	0c3f      	lsrs	r7, r7, #16
 80071f6:	fb0a 7202 	mla	r2, sl, r2, r7
 80071fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007204:	4565      	cmp	r5, ip
 8007206:	f849 3b04 	str.w	r3, [r9], #4
 800720a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800720e:	d8e4      	bhi.n	80071da <__multiply+0xaa>
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	50e7      	str	r7, [r4, r3]
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800721a:	3104      	adds	r1, #4
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	d020      	beq.n	8007264 <__multiply+0x134>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	4647      	mov	r7, r8
 8007226:	46a4      	mov	ip, r4
 8007228:	f04f 0a00 	mov.w	sl, #0
 800722c:	f8b7 b000 	ldrh.w	fp, [r7]
 8007230:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007234:	fb09 220b 	mla	r2, r9, fp, r2
 8007238:	4452      	add	r2, sl
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007240:	f84c 3b04 	str.w	r3, [ip], #4
 8007244:	f857 3b04 	ldr.w	r3, [r7], #4
 8007248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800724c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007250:	fb09 330a 	mla	r3, r9, sl, r3
 8007254:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007258:	42bd      	cmp	r5, r7
 800725a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800725e:	d8e5      	bhi.n	800722c <__multiply+0xfc>
 8007260:	9a01      	ldr	r2, [sp, #4]
 8007262:	50a3      	str	r3, [r4, r2]
 8007264:	3404      	adds	r4, #4
 8007266:	e79f      	b.n	80071a8 <__multiply+0x78>
 8007268:	3e01      	subs	r6, #1
 800726a:	e7a1      	b.n	80071b0 <__multiply+0x80>
 800726c:	0800860a 	.word	0x0800860a
 8007270:	08008692 	.word	0x08008692

08007274 <__pow5mult>:
 8007274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007278:	4615      	mov	r5, r2
 800727a:	f012 0203 	ands.w	r2, r2, #3
 800727e:	4607      	mov	r7, r0
 8007280:	460e      	mov	r6, r1
 8007282:	d007      	beq.n	8007294 <__pow5mult+0x20>
 8007284:	4c25      	ldr	r4, [pc, #148]	@ (800731c <__pow5mult+0xa8>)
 8007286:	3a01      	subs	r2, #1
 8007288:	2300      	movs	r3, #0
 800728a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800728e:	f7ff fe5d 	bl	8006f4c <__multadd>
 8007292:	4606      	mov	r6, r0
 8007294:	10ad      	asrs	r5, r5, #2
 8007296:	d03d      	beq.n	8007314 <__pow5mult+0xa0>
 8007298:	69fc      	ldr	r4, [r7, #28]
 800729a:	b97c      	cbnz	r4, 80072bc <__pow5mult+0x48>
 800729c:	2010      	movs	r0, #16
 800729e:	f000 fe95 	bl	8007fcc <malloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	61f8      	str	r0, [r7, #28]
 80072a6:	b928      	cbnz	r0, 80072b4 <__pow5mult+0x40>
 80072a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007320 <__pow5mult+0xac>)
 80072aa:	481e      	ldr	r0, [pc, #120]	@ (8007324 <__pow5mult+0xb0>)
 80072ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072b0:	f000 fe5a 	bl	8007f68 <__assert_func>
 80072b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b8:	6004      	str	r4, [r0, #0]
 80072ba:	60c4      	str	r4, [r0, #12]
 80072bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c4:	b94c      	cbnz	r4, 80072da <__pow5mult+0x66>
 80072c6:	f240 2171 	movw	r1, #625	@ 0x271
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ff1a 	bl	8007104 <__i2b>
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80072d6:	4604      	mov	r4, r0
 80072d8:	6003      	str	r3, [r0, #0]
 80072da:	f04f 0900 	mov.w	r9, #0
 80072de:	07eb      	lsls	r3, r5, #31
 80072e0:	d50a      	bpl.n	80072f8 <__pow5mult+0x84>
 80072e2:	4631      	mov	r1, r6
 80072e4:	4622      	mov	r2, r4
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ff22 	bl	8007130 <__multiply>
 80072ec:	4631      	mov	r1, r6
 80072ee:	4680      	mov	r8, r0
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7ff fe09 	bl	8006f08 <_Bfree>
 80072f6:	4646      	mov	r6, r8
 80072f8:	106d      	asrs	r5, r5, #1
 80072fa:	d00b      	beq.n	8007314 <__pow5mult+0xa0>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	b938      	cbnz	r0, 8007310 <__pow5mult+0x9c>
 8007300:	4622      	mov	r2, r4
 8007302:	4621      	mov	r1, r4
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff ff13 	bl	8007130 <__multiply>
 800730a:	6020      	str	r0, [r4, #0]
 800730c:	f8c0 9000 	str.w	r9, [r0]
 8007310:	4604      	mov	r4, r0
 8007312:	e7e4      	b.n	80072de <__pow5mult+0x6a>
 8007314:	4630      	mov	r0, r6
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731a:	bf00      	nop
 800731c:	080087b0 	.word	0x080087b0
 8007320:	0800867b 	.word	0x0800867b
 8007324:	08008692 	.word	0x08008692

08007328 <__lshift>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	6849      	ldr	r1, [r1, #4]
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	4607      	mov	r7, r0
 800733a:	4691      	mov	r9, r2
 800733c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007340:	f108 0601 	add.w	r6, r8, #1
 8007344:	42b3      	cmp	r3, r6
 8007346:	db0b      	blt.n	8007360 <__lshift+0x38>
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff fd9d 	bl	8006e88 <_Balloc>
 800734e:	4605      	mov	r5, r0
 8007350:	b948      	cbnz	r0, 8007366 <__lshift+0x3e>
 8007352:	4602      	mov	r2, r0
 8007354:	4b28      	ldr	r3, [pc, #160]	@ (80073f8 <__lshift+0xd0>)
 8007356:	4829      	ldr	r0, [pc, #164]	@ (80073fc <__lshift+0xd4>)
 8007358:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800735c:	f000 fe04 	bl	8007f68 <__assert_func>
 8007360:	3101      	adds	r1, #1
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	e7ee      	b.n	8007344 <__lshift+0x1c>
 8007366:	2300      	movs	r3, #0
 8007368:	f100 0114 	add.w	r1, r0, #20
 800736c:	f100 0210 	add.w	r2, r0, #16
 8007370:	4618      	mov	r0, r3
 8007372:	4553      	cmp	r3, sl
 8007374:	db33      	blt.n	80073de <__lshift+0xb6>
 8007376:	6920      	ldr	r0, [r4, #16]
 8007378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800737c:	f104 0314 	add.w	r3, r4, #20
 8007380:	f019 091f 	ands.w	r9, r9, #31
 8007384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800738c:	d02b      	beq.n	80073e6 <__lshift+0xbe>
 800738e:	f1c9 0e20 	rsb	lr, r9, #32
 8007392:	468a      	mov	sl, r1
 8007394:	2200      	movs	r2, #0
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	fa00 f009 	lsl.w	r0, r0, r9
 800739c:	4310      	orrs	r0, r2
 800739e:	f84a 0b04 	str.w	r0, [sl], #4
 80073a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a6:	459c      	cmp	ip, r3
 80073a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80073ac:	d8f3      	bhi.n	8007396 <__lshift+0x6e>
 80073ae:	ebac 0304 	sub.w	r3, ip, r4
 80073b2:	3b15      	subs	r3, #21
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	3304      	adds	r3, #4
 80073ba:	f104 0015 	add.w	r0, r4, #21
 80073be:	4560      	cmp	r0, ip
 80073c0:	bf88      	it	hi
 80073c2:	2304      	movhi	r3, #4
 80073c4:	50ca      	str	r2, [r1, r3]
 80073c6:	b10a      	cbz	r2, 80073cc <__lshift+0xa4>
 80073c8:	f108 0602 	add.w	r6, r8, #2
 80073cc:	3e01      	subs	r6, #1
 80073ce:	4638      	mov	r0, r7
 80073d0:	612e      	str	r6, [r5, #16]
 80073d2:	4621      	mov	r1, r4
 80073d4:	f7ff fd98 	bl	8006f08 <_Bfree>
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	f842 0f04 	str.w	r0, [r2, #4]!
 80073e2:	3301      	adds	r3, #1
 80073e4:	e7c5      	b.n	8007372 <__lshift+0x4a>
 80073e6:	3904      	subs	r1, #4
 80073e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80073f0:	459c      	cmp	ip, r3
 80073f2:	d8f9      	bhi.n	80073e8 <__lshift+0xc0>
 80073f4:	e7ea      	b.n	80073cc <__lshift+0xa4>
 80073f6:	bf00      	nop
 80073f8:	0800860a 	.word	0x0800860a
 80073fc:	08008692 	.word	0x08008692

08007400 <__mcmp>:
 8007400:	690a      	ldr	r2, [r1, #16]
 8007402:	4603      	mov	r3, r0
 8007404:	6900      	ldr	r0, [r0, #16]
 8007406:	1a80      	subs	r0, r0, r2
 8007408:	b530      	push	{r4, r5, lr}
 800740a:	d10e      	bne.n	800742a <__mcmp+0x2a>
 800740c:	3314      	adds	r3, #20
 800740e:	3114      	adds	r1, #20
 8007410:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007414:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800741c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007420:	4295      	cmp	r5, r2
 8007422:	d003      	beq.n	800742c <__mcmp+0x2c>
 8007424:	d205      	bcs.n	8007432 <__mcmp+0x32>
 8007426:	f04f 30ff 	mov.w	r0, #4294967295
 800742a:	bd30      	pop	{r4, r5, pc}
 800742c:	42a3      	cmp	r3, r4
 800742e:	d3f3      	bcc.n	8007418 <__mcmp+0x18>
 8007430:	e7fb      	b.n	800742a <__mcmp+0x2a>
 8007432:	2001      	movs	r0, #1
 8007434:	e7f9      	b.n	800742a <__mcmp+0x2a>
	...

08007438 <__mdiff>:
 8007438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	4689      	mov	r9, r1
 800743e:	4606      	mov	r6, r0
 8007440:	4611      	mov	r1, r2
 8007442:	4648      	mov	r0, r9
 8007444:	4614      	mov	r4, r2
 8007446:	f7ff ffdb 	bl	8007400 <__mcmp>
 800744a:	1e05      	subs	r5, r0, #0
 800744c:	d112      	bne.n	8007474 <__mdiff+0x3c>
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff fd19 	bl	8006e88 <_Balloc>
 8007456:	4602      	mov	r2, r0
 8007458:	b928      	cbnz	r0, 8007466 <__mdiff+0x2e>
 800745a:	4b3f      	ldr	r3, [pc, #252]	@ (8007558 <__mdiff+0x120>)
 800745c:	f240 2137 	movw	r1, #567	@ 0x237
 8007460:	483e      	ldr	r0, [pc, #248]	@ (800755c <__mdiff+0x124>)
 8007462:	f000 fd81 	bl	8007f68 <__assert_func>
 8007466:	2301      	movs	r3, #1
 8007468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800746c:	4610      	mov	r0, r2
 800746e:	b003      	add	sp, #12
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	bfbc      	itt	lt
 8007476:	464b      	movlt	r3, r9
 8007478:	46a1      	movlt	r9, r4
 800747a:	4630      	mov	r0, r6
 800747c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007480:	bfba      	itte	lt
 8007482:	461c      	movlt	r4, r3
 8007484:	2501      	movlt	r5, #1
 8007486:	2500      	movge	r5, #0
 8007488:	f7ff fcfe 	bl	8006e88 <_Balloc>
 800748c:	4602      	mov	r2, r0
 800748e:	b918      	cbnz	r0, 8007498 <__mdiff+0x60>
 8007490:	4b31      	ldr	r3, [pc, #196]	@ (8007558 <__mdiff+0x120>)
 8007492:	f240 2145 	movw	r1, #581	@ 0x245
 8007496:	e7e3      	b.n	8007460 <__mdiff+0x28>
 8007498:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800749c:	6926      	ldr	r6, [r4, #16]
 800749e:	60c5      	str	r5, [r0, #12]
 80074a0:	f109 0310 	add.w	r3, r9, #16
 80074a4:	f109 0514 	add.w	r5, r9, #20
 80074a8:	f104 0e14 	add.w	lr, r4, #20
 80074ac:	f100 0b14 	add.w	fp, r0, #20
 80074b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	46d9      	mov	r9, fp
 80074bc:	f04f 0c00 	mov.w	ip, #0
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074ca:	9301      	str	r3, [sp, #4]
 80074cc:	fa1f f38a 	uxth.w	r3, sl
 80074d0:	4619      	mov	r1, r3
 80074d2:	b283      	uxth	r3, r0
 80074d4:	1acb      	subs	r3, r1, r3
 80074d6:	0c00      	lsrs	r0, r0, #16
 80074d8:	4463      	add	r3, ip
 80074da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074e8:	4576      	cmp	r6, lr
 80074ea:	f849 3b04 	str.w	r3, [r9], #4
 80074ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074f2:	d8e5      	bhi.n	80074c0 <__mdiff+0x88>
 80074f4:	1b33      	subs	r3, r6, r4
 80074f6:	3b15      	subs	r3, #21
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	3415      	adds	r4, #21
 80074fe:	3304      	adds	r3, #4
 8007500:	42a6      	cmp	r6, r4
 8007502:	bf38      	it	cc
 8007504:	2304      	movcc	r3, #4
 8007506:	441d      	add	r5, r3
 8007508:	445b      	add	r3, fp
 800750a:	461e      	mov	r6, r3
 800750c:	462c      	mov	r4, r5
 800750e:	4544      	cmp	r4, r8
 8007510:	d30e      	bcc.n	8007530 <__mdiff+0xf8>
 8007512:	f108 0103 	add.w	r1, r8, #3
 8007516:	1b49      	subs	r1, r1, r5
 8007518:	f021 0103 	bic.w	r1, r1, #3
 800751c:	3d03      	subs	r5, #3
 800751e:	45a8      	cmp	r8, r5
 8007520:	bf38      	it	cc
 8007522:	2100      	movcc	r1, #0
 8007524:	440b      	add	r3, r1
 8007526:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800752a:	b191      	cbz	r1, 8007552 <__mdiff+0x11a>
 800752c:	6117      	str	r7, [r2, #16]
 800752e:	e79d      	b.n	800746c <__mdiff+0x34>
 8007530:	f854 1b04 	ldr.w	r1, [r4], #4
 8007534:	46e6      	mov	lr, ip
 8007536:	0c08      	lsrs	r0, r1, #16
 8007538:	fa1c fc81 	uxtah	ip, ip, r1
 800753c:	4471      	add	r1, lr
 800753e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007542:	b289      	uxth	r1, r1
 8007544:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007548:	f846 1b04 	str.w	r1, [r6], #4
 800754c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007550:	e7dd      	b.n	800750e <__mdiff+0xd6>
 8007552:	3f01      	subs	r7, #1
 8007554:	e7e7      	b.n	8007526 <__mdiff+0xee>
 8007556:	bf00      	nop
 8007558:	0800860a 	.word	0x0800860a
 800755c:	08008692 	.word	0x08008692

08007560 <__ulp>:
 8007560:	b082      	sub	sp, #8
 8007562:	ed8d 0b00 	vstr	d0, [sp]
 8007566:	9a01      	ldr	r2, [sp, #4]
 8007568:	4b0f      	ldr	r3, [pc, #60]	@ (80075a8 <__ulp+0x48>)
 800756a:	4013      	ands	r3, r2
 800756c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007570:	2b00      	cmp	r3, #0
 8007572:	dc08      	bgt.n	8007586 <__ulp+0x26>
 8007574:	425b      	negs	r3, r3
 8007576:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800757a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800757e:	da04      	bge.n	800758a <__ulp+0x2a>
 8007580:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007584:	4113      	asrs	r3, r2
 8007586:	2200      	movs	r2, #0
 8007588:	e008      	b.n	800759c <__ulp+0x3c>
 800758a:	f1a2 0314 	sub.w	r3, r2, #20
 800758e:	2b1e      	cmp	r3, #30
 8007590:	bfda      	itte	le
 8007592:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007596:	40da      	lsrle	r2, r3
 8007598:	2201      	movgt	r2, #1
 800759a:	2300      	movs	r3, #0
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	ec41 0b10 	vmov	d0, r0, r1
 80075a4:	b002      	add	sp, #8
 80075a6:	4770      	bx	lr
 80075a8:	7ff00000 	.word	0x7ff00000

080075ac <__b2d>:
 80075ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	6906      	ldr	r6, [r0, #16]
 80075b2:	f100 0814 	add.w	r8, r0, #20
 80075b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80075ba:	1f37      	subs	r7, r6, #4
 80075bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80075c0:	4610      	mov	r0, r2
 80075c2:	f7ff fd53 	bl	800706c <__hi0bits>
 80075c6:	f1c0 0320 	rsb	r3, r0, #32
 80075ca:	280a      	cmp	r0, #10
 80075cc:	600b      	str	r3, [r1, #0]
 80075ce:	491b      	ldr	r1, [pc, #108]	@ (800763c <__b2d+0x90>)
 80075d0:	dc15      	bgt.n	80075fe <__b2d+0x52>
 80075d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80075d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80075da:	45b8      	cmp	r8, r7
 80075dc:	ea43 0501 	orr.w	r5, r3, r1
 80075e0:	bf34      	ite	cc
 80075e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80075e6:	2300      	movcs	r3, #0
 80075e8:	3015      	adds	r0, #21
 80075ea:	fa02 f000 	lsl.w	r0, r2, r0
 80075ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80075f2:	4303      	orrs	r3, r0
 80075f4:	461c      	mov	r4, r3
 80075f6:	ec45 4b10 	vmov	d0, r4, r5
 80075fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075fe:	45b8      	cmp	r8, r7
 8007600:	bf3a      	itte	cc
 8007602:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007606:	f1a6 0708 	subcc.w	r7, r6, #8
 800760a:	2300      	movcs	r3, #0
 800760c:	380b      	subs	r0, #11
 800760e:	d012      	beq.n	8007636 <__b2d+0x8a>
 8007610:	f1c0 0120 	rsb	r1, r0, #32
 8007614:	fa23 f401 	lsr.w	r4, r3, r1
 8007618:	4082      	lsls	r2, r0
 800761a:	4322      	orrs	r2, r4
 800761c:	4547      	cmp	r7, r8
 800761e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007622:	bf8c      	ite	hi
 8007624:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007628:	2200      	movls	r2, #0
 800762a:	4083      	lsls	r3, r0
 800762c:	40ca      	lsrs	r2, r1
 800762e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007632:	4313      	orrs	r3, r2
 8007634:	e7de      	b.n	80075f4 <__b2d+0x48>
 8007636:	ea42 0501 	orr.w	r5, r2, r1
 800763a:	e7db      	b.n	80075f4 <__b2d+0x48>
 800763c:	3ff00000 	.word	0x3ff00000

08007640 <__d2b>:
 8007640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007644:	460f      	mov	r7, r1
 8007646:	2101      	movs	r1, #1
 8007648:	ec59 8b10 	vmov	r8, r9, d0
 800764c:	4616      	mov	r6, r2
 800764e:	f7ff fc1b 	bl	8006e88 <_Balloc>
 8007652:	4604      	mov	r4, r0
 8007654:	b930      	cbnz	r0, 8007664 <__d2b+0x24>
 8007656:	4602      	mov	r2, r0
 8007658:	4b23      	ldr	r3, [pc, #140]	@ (80076e8 <__d2b+0xa8>)
 800765a:	4824      	ldr	r0, [pc, #144]	@ (80076ec <__d2b+0xac>)
 800765c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007660:	f000 fc82 	bl	8007f68 <__assert_func>
 8007664:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800766c:	b10d      	cbz	r5, 8007672 <__d2b+0x32>
 800766e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	f1b8 0300 	subs.w	r3, r8, #0
 8007678:	d023      	beq.n	80076c2 <__d2b+0x82>
 800767a:	4668      	mov	r0, sp
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	f7ff fd14 	bl	80070aa <__lo0bits>
 8007682:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007686:	b1d0      	cbz	r0, 80076be <__d2b+0x7e>
 8007688:	f1c0 0320 	rsb	r3, r0, #32
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	430b      	orrs	r3, r1
 8007692:	40c2      	lsrs	r2, r0
 8007694:	6163      	str	r3, [r4, #20]
 8007696:	9201      	str	r2, [sp, #4]
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	61a3      	str	r3, [r4, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	bf0c      	ite	eq
 80076a0:	2201      	moveq	r2, #1
 80076a2:	2202      	movne	r2, #2
 80076a4:	6122      	str	r2, [r4, #16]
 80076a6:	b1a5      	cbz	r5, 80076d2 <__d2b+0x92>
 80076a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80076ac:	4405      	add	r5, r0
 80076ae:	603d      	str	r5, [r7, #0]
 80076b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80076b4:	6030      	str	r0, [r6, #0]
 80076b6:	4620      	mov	r0, r4
 80076b8:	b003      	add	sp, #12
 80076ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076be:	6161      	str	r1, [r4, #20]
 80076c0:	e7ea      	b.n	8007698 <__d2b+0x58>
 80076c2:	a801      	add	r0, sp, #4
 80076c4:	f7ff fcf1 	bl	80070aa <__lo0bits>
 80076c8:	9b01      	ldr	r3, [sp, #4]
 80076ca:	6163      	str	r3, [r4, #20]
 80076cc:	3020      	adds	r0, #32
 80076ce:	2201      	movs	r2, #1
 80076d0:	e7e8      	b.n	80076a4 <__d2b+0x64>
 80076d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80076da:	6038      	str	r0, [r7, #0]
 80076dc:	6918      	ldr	r0, [r3, #16]
 80076de:	f7ff fcc5 	bl	800706c <__hi0bits>
 80076e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076e6:	e7e5      	b.n	80076b4 <__d2b+0x74>
 80076e8:	0800860a 	.word	0x0800860a
 80076ec:	08008692 	.word	0x08008692

080076f0 <__ratio>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	b085      	sub	sp, #20
 80076f6:	e9cd 1000 	strd	r1, r0, [sp]
 80076fa:	a902      	add	r1, sp, #8
 80076fc:	f7ff ff56 	bl	80075ac <__b2d>
 8007700:	9800      	ldr	r0, [sp, #0]
 8007702:	a903      	add	r1, sp, #12
 8007704:	ec55 4b10 	vmov	r4, r5, d0
 8007708:	f7ff ff50 	bl	80075ac <__b2d>
 800770c:	9b01      	ldr	r3, [sp, #4]
 800770e:	6919      	ldr	r1, [r3, #16]
 8007710:	9b00      	ldr	r3, [sp, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	1ac9      	subs	r1, r1, r3
 8007716:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	ec5b ab10 	vmov	sl, fp, d0
 8007720:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfce      	itee	gt
 8007728:	462a      	movgt	r2, r5
 800772a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800772e:	465a      	movle	r2, fp
 8007730:	462f      	mov	r7, r5
 8007732:	46d9      	mov	r9, fp
 8007734:	bfcc      	ite	gt
 8007736:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800773a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800773e:	464b      	mov	r3, r9
 8007740:	4652      	mov	r2, sl
 8007742:	4620      	mov	r0, r4
 8007744:	4639      	mov	r1, r7
 8007746:	f7f9 f8a1 	bl	800088c <__aeabi_ddiv>
 800774a:	ec41 0b10 	vmov	d0, r0, r1
 800774e:	b005      	add	sp, #20
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007754 <__copybits>:
 8007754:	3901      	subs	r1, #1
 8007756:	b570      	push	{r4, r5, r6, lr}
 8007758:	1149      	asrs	r1, r1, #5
 800775a:	6914      	ldr	r4, [r2, #16]
 800775c:	3101      	adds	r1, #1
 800775e:	f102 0314 	add.w	r3, r2, #20
 8007762:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007766:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800776a:	1f05      	subs	r5, r0, #4
 800776c:	42a3      	cmp	r3, r4
 800776e:	d30c      	bcc.n	800778a <__copybits+0x36>
 8007770:	1aa3      	subs	r3, r4, r2
 8007772:	3b11      	subs	r3, #17
 8007774:	f023 0303 	bic.w	r3, r3, #3
 8007778:	3211      	adds	r2, #17
 800777a:	42a2      	cmp	r2, r4
 800777c:	bf88      	it	hi
 800777e:	2300      	movhi	r3, #0
 8007780:	4418      	add	r0, r3
 8007782:	2300      	movs	r3, #0
 8007784:	4288      	cmp	r0, r1
 8007786:	d305      	bcc.n	8007794 <__copybits+0x40>
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	f853 6b04 	ldr.w	r6, [r3], #4
 800778e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007792:	e7eb      	b.n	800776c <__copybits+0x18>
 8007794:	f840 3b04 	str.w	r3, [r0], #4
 8007798:	e7f4      	b.n	8007784 <__copybits+0x30>

0800779a <__any_on>:
 800779a:	f100 0214 	add.w	r2, r0, #20
 800779e:	6900      	ldr	r0, [r0, #16]
 80077a0:	114b      	asrs	r3, r1, #5
 80077a2:	4298      	cmp	r0, r3
 80077a4:	b510      	push	{r4, lr}
 80077a6:	db11      	blt.n	80077cc <__any_on+0x32>
 80077a8:	dd0a      	ble.n	80077c0 <__any_on+0x26>
 80077aa:	f011 011f 	ands.w	r1, r1, #31
 80077ae:	d007      	beq.n	80077c0 <__any_on+0x26>
 80077b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077b4:	fa24 f001 	lsr.w	r0, r4, r1
 80077b8:	fa00 f101 	lsl.w	r1, r0, r1
 80077bc:	428c      	cmp	r4, r1
 80077be:	d10b      	bne.n	80077d8 <__any_on+0x3e>
 80077c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d803      	bhi.n	80077d0 <__any_on+0x36>
 80077c8:	2000      	movs	r0, #0
 80077ca:	bd10      	pop	{r4, pc}
 80077cc:	4603      	mov	r3, r0
 80077ce:	e7f7      	b.n	80077c0 <__any_on+0x26>
 80077d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d0f5      	beq.n	80077c4 <__any_on+0x2a>
 80077d8:	2001      	movs	r0, #1
 80077da:	e7f6      	b.n	80077ca <__any_on+0x30>

080077dc <__ascii_wctomb>:
 80077dc:	4603      	mov	r3, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	b141      	cbz	r1, 80077f4 <__ascii_wctomb+0x18>
 80077e2:	2aff      	cmp	r2, #255	@ 0xff
 80077e4:	d904      	bls.n	80077f0 <__ascii_wctomb+0x14>
 80077e6:	228a      	movs	r2, #138	@ 0x8a
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295
 80077ee:	4770      	bx	lr
 80077f0:	700a      	strb	r2, [r1, #0]
 80077f2:	2001      	movs	r0, #1
 80077f4:	4770      	bx	lr

080077f6 <__ssputs_r>:
 80077f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fa:	688e      	ldr	r6, [r1, #8]
 80077fc:	461f      	mov	r7, r3
 80077fe:	42be      	cmp	r6, r7
 8007800:	680b      	ldr	r3, [r1, #0]
 8007802:	4682      	mov	sl, r0
 8007804:	460c      	mov	r4, r1
 8007806:	4690      	mov	r8, r2
 8007808:	d82d      	bhi.n	8007866 <__ssputs_r+0x70>
 800780a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800780e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007812:	d026      	beq.n	8007862 <__ssputs_r+0x6c>
 8007814:	6965      	ldr	r5, [r4, #20]
 8007816:	6909      	ldr	r1, [r1, #16]
 8007818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800781c:	eba3 0901 	sub.w	r9, r3, r1
 8007820:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007824:	1c7b      	adds	r3, r7, #1
 8007826:	444b      	add	r3, r9
 8007828:	106d      	asrs	r5, r5, #1
 800782a:	429d      	cmp	r5, r3
 800782c:	bf38      	it	cc
 800782e:	461d      	movcc	r5, r3
 8007830:	0553      	lsls	r3, r2, #21
 8007832:	d527      	bpl.n	8007884 <__ssputs_r+0x8e>
 8007834:	4629      	mov	r1, r5
 8007836:	f7ff fa89 	bl	8006d4c <_malloc_r>
 800783a:	4606      	mov	r6, r0
 800783c:	b360      	cbz	r0, 8007898 <__ssputs_r+0xa2>
 800783e:	6921      	ldr	r1, [r4, #16]
 8007840:	464a      	mov	r2, r9
 8007842:	f7fe fec6 	bl	80065d2 <memcpy>
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800784c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	6126      	str	r6, [r4, #16]
 8007854:	6165      	str	r5, [r4, #20]
 8007856:	444e      	add	r6, r9
 8007858:	eba5 0509 	sub.w	r5, r5, r9
 800785c:	6026      	str	r6, [r4, #0]
 800785e:	60a5      	str	r5, [r4, #8]
 8007860:	463e      	mov	r6, r7
 8007862:	42be      	cmp	r6, r7
 8007864:	d900      	bls.n	8007868 <__ssputs_r+0x72>
 8007866:	463e      	mov	r6, r7
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	4632      	mov	r2, r6
 800786c:	4641      	mov	r1, r8
 800786e:	f000 fb51 	bl	8007f14 <memmove>
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	1b9b      	subs	r3, r3, r6
 8007876:	60a3      	str	r3, [r4, #8]
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	4433      	add	r3, r6
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	2000      	movs	r0, #0
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	462a      	mov	r2, r5
 8007886:	f000 fba9 	bl	8007fdc <_realloc_r>
 800788a:	4606      	mov	r6, r0
 800788c:	2800      	cmp	r0, #0
 800788e:	d1e0      	bne.n	8007852 <__ssputs_r+0x5c>
 8007890:	6921      	ldr	r1, [r4, #16]
 8007892:	4650      	mov	r0, sl
 8007894:	f7fe feb4 	bl	8006600 <_free_r>
 8007898:	230c      	movs	r3, #12
 800789a:	f8ca 3000 	str.w	r3, [sl]
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295
 80078aa:	e7e9      	b.n	8007880 <__ssputs_r+0x8a>

080078ac <_svfiprintf_r>:
 80078ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	4698      	mov	r8, r3
 80078b2:	898b      	ldrh	r3, [r1, #12]
 80078b4:	061b      	lsls	r3, r3, #24
 80078b6:	b09d      	sub	sp, #116	@ 0x74
 80078b8:	4607      	mov	r7, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	d510      	bpl.n	80078e2 <_svfiprintf_r+0x36>
 80078c0:	690b      	ldr	r3, [r1, #16]
 80078c2:	b973      	cbnz	r3, 80078e2 <_svfiprintf_r+0x36>
 80078c4:	2140      	movs	r1, #64	@ 0x40
 80078c6:	f7ff fa41 	bl	8006d4c <_malloc_r>
 80078ca:	6028      	str	r0, [r5, #0]
 80078cc:	6128      	str	r0, [r5, #16]
 80078ce:	b930      	cbnz	r0, 80078de <_svfiprintf_r+0x32>
 80078d0:	230c      	movs	r3, #12
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	b01d      	add	sp, #116	@ 0x74
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	2340      	movs	r3, #64	@ 0x40
 80078e0:	616b      	str	r3, [r5, #20]
 80078e2:	2300      	movs	r3, #0
 80078e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e6:	2320      	movs	r3, #32
 80078e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f0:	2330      	movs	r3, #48	@ 0x30
 80078f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a90 <_svfiprintf_r+0x1e4>
 80078f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078fa:	f04f 0901 	mov.w	r9, #1
 80078fe:	4623      	mov	r3, r4
 8007900:	469a      	mov	sl, r3
 8007902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007906:	b10a      	cbz	r2, 800790c <_svfiprintf_r+0x60>
 8007908:	2a25      	cmp	r2, #37	@ 0x25
 800790a:	d1f9      	bne.n	8007900 <_svfiprintf_r+0x54>
 800790c:	ebba 0b04 	subs.w	fp, sl, r4
 8007910:	d00b      	beq.n	800792a <_svfiprintf_r+0x7e>
 8007912:	465b      	mov	r3, fp
 8007914:	4622      	mov	r2, r4
 8007916:	4629      	mov	r1, r5
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ff6c 	bl	80077f6 <__ssputs_r>
 800791e:	3001      	adds	r0, #1
 8007920:	f000 80a7 	beq.w	8007a72 <_svfiprintf_r+0x1c6>
 8007924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007926:	445a      	add	r2, fp
 8007928:	9209      	str	r2, [sp, #36]	@ 0x24
 800792a:	f89a 3000 	ldrb.w	r3, [sl]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 809f 	beq.w	8007a72 <_svfiprintf_r+0x1c6>
 8007934:	2300      	movs	r3, #0
 8007936:	f04f 32ff 	mov.w	r2, #4294967295
 800793a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800793e:	f10a 0a01 	add.w	sl, sl, #1
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	9307      	str	r3, [sp, #28]
 8007946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800794a:	931a      	str	r3, [sp, #104]	@ 0x68
 800794c:	4654      	mov	r4, sl
 800794e:	2205      	movs	r2, #5
 8007950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007954:	484e      	ldr	r0, [pc, #312]	@ (8007a90 <_svfiprintf_r+0x1e4>)
 8007956:	f7f8 fc63 	bl	8000220 <memchr>
 800795a:	9a04      	ldr	r2, [sp, #16]
 800795c:	b9d8      	cbnz	r0, 8007996 <_svfiprintf_r+0xea>
 800795e:	06d0      	lsls	r0, r2, #27
 8007960:	bf44      	itt	mi
 8007962:	2320      	movmi	r3, #32
 8007964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007968:	0711      	lsls	r1, r2, #28
 800796a:	bf44      	itt	mi
 800796c:	232b      	movmi	r3, #43	@ 0x2b
 800796e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007972:	f89a 3000 	ldrb.w	r3, [sl]
 8007976:	2b2a      	cmp	r3, #42	@ 0x2a
 8007978:	d015      	beq.n	80079a6 <_svfiprintf_r+0xfa>
 800797a:	9a07      	ldr	r2, [sp, #28]
 800797c:	4654      	mov	r4, sl
 800797e:	2000      	movs	r0, #0
 8007980:	f04f 0c0a 	mov.w	ip, #10
 8007984:	4621      	mov	r1, r4
 8007986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798a:	3b30      	subs	r3, #48	@ 0x30
 800798c:	2b09      	cmp	r3, #9
 800798e:	d94b      	bls.n	8007a28 <_svfiprintf_r+0x17c>
 8007990:	b1b0      	cbz	r0, 80079c0 <_svfiprintf_r+0x114>
 8007992:	9207      	str	r2, [sp, #28]
 8007994:	e014      	b.n	80079c0 <_svfiprintf_r+0x114>
 8007996:	eba0 0308 	sub.w	r3, r0, r8
 800799a:	fa09 f303 	lsl.w	r3, r9, r3
 800799e:	4313      	orrs	r3, r2
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	46a2      	mov	sl, r4
 80079a4:	e7d2      	b.n	800794c <_svfiprintf_r+0xa0>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	1d19      	adds	r1, r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	9103      	str	r1, [sp, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfbb      	ittet	lt
 80079b2:	425b      	neglt	r3, r3
 80079b4:	f042 0202 	orrlt.w	r2, r2, #2
 80079b8:	9307      	strge	r3, [sp, #28]
 80079ba:	9307      	strlt	r3, [sp, #28]
 80079bc:	bfb8      	it	lt
 80079be:	9204      	strlt	r2, [sp, #16]
 80079c0:	7823      	ldrb	r3, [r4, #0]
 80079c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80079c4:	d10a      	bne.n	80079dc <_svfiprintf_r+0x130>
 80079c6:	7863      	ldrb	r3, [r4, #1]
 80079c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ca:	d132      	bne.n	8007a32 <_svfiprintf_r+0x186>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	1d1a      	adds	r2, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	9203      	str	r2, [sp, #12]
 80079d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079d8:	3402      	adds	r4, #2
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007aa0 <_svfiprintf_r+0x1f4>
 80079e0:	7821      	ldrb	r1, [r4, #0]
 80079e2:	2203      	movs	r2, #3
 80079e4:	4650      	mov	r0, sl
 80079e6:	f7f8 fc1b 	bl	8000220 <memchr>
 80079ea:	b138      	cbz	r0, 80079fc <_svfiprintf_r+0x150>
 80079ec:	9b04      	ldr	r3, [sp, #16]
 80079ee:	eba0 000a 	sub.w	r0, r0, sl
 80079f2:	2240      	movs	r2, #64	@ 0x40
 80079f4:	4082      	lsls	r2, r0
 80079f6:	4313      	orrs	r3, r2
 80079f8:	3401      	adds	r4, #1
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a00:	4824      	ldr	r0, [pc, #144]	@ (8007a94 <_svfiprintf_r+0x1e8>)
 8007a02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a06:	2206      	movs	r2, #6
 8007a08:	f7f8 fc0a 	bl	8000220 <memchr>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d036      	beq.n	8007a7e <_svfiprintf_r+0x1d2>
 8007a10:	4b21      	ldr	r3, [pc, #132]	@ (8007a98 <_svfiprintf_r+0x1ec>)
 8007a12:	bb1b      	cbnz	r3, 8007a5c <_svfiprintf_r+0x1b0>
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	3307      	adds	r3, #7
 8007a18:	f023 0307 	bic.w	r3, r3, #7
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	9303      	str	r3, [sp, #12]
 8007a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a22:	4433      	add	r3, r6
 8007a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a26:	e76a      	b.n	80078fe <_svfiprintf_r+0x52>
 8007a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	2001      	movs	r0, #1
 8007a30:	e7a8      	b.n	8007984 <_svfiprintf_r+0xd8>
 8007a32:	2300      	movs	r3, #0
 8007a34:	3401      	adds	r4, #1
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f04f 0c0a 	mov.w	ip, #10
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a44:	3a30      	subs	r2, #48	@ 0x30
 8007a46:	2a09      	cmp	r2, #9
 8007a48:	d903      	bls.n	8007a52 <_svfiprintf_r+0x1a6>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0c6      	beq.n	80079dc <_svfiprintf_r+0x130>
 8007a4e:	9105      	str	r1, [sp, #20]
 8007a50:	e7c4      	b.n	80079dc <_svfiprintf_r+0x130>
 8007a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a56:	4604      	mov	r4, r0
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e7f0      	b.n	8007a3e <_svfiprintf_r+0x192>
 8007a5c:	ab03      	add	r3, sp, #12
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	462a      	mov	r2, r5
 8007a62:	4b0e      	ldr	r3, [pc, #56]	@ (8007a9c <_svfiprintf_r+0x1f0>)
 8007a64:	a904      	add	r1, sp, #16
 8007a66:	4638      	mov	r0, r7
 8007a68:	f3af 8000 	nop.w
 8007a6c:	1c42      	adds	r2, r0, #1
 8007a6e:	4606      	mov	r6, r0
 8007a70:	d1d6      	bne.n	8007a20 <_svfiprintf_r+0x174>
 8007a72:	89ab      	ldrh	r3, [r5, #12]
 8007a74:	065b      	lsls	r3, r3, #25
 8007a76:	f53f af2d 	bmi.w	80078d4 <_svfiprintf_r+0x28>
 8007a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a7c:	e72c      	b.n	80078d8 <_svfiprintf_r+0x2c>
 8007a7e:	ab03      	add	r3, sp, #12
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	462a      	mov	r2, r5
 8007a84:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <_svfiprintf_r+0x1f0>)
 8007a86:	a904      	add	r1, sp, #16
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f000 f879 	bl	8007b80 <_printf_i>
 8007a8e:	e7ed      	b.n	8007a6c <_svfiprintf_r+0x1c0>
 8007a90:	080086eb 	.word	0x080086eb
 8007a94:	080086f5 	.word	0x080086f5
 8007a98:	00000000 	.word	0x00000000
 8007a9c:	080077f7 	.word	0x080077f7
 8007aa0:	080086f1 	.word	0x080086f1

08007aa4 <_printf_common>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	4616      	mov	r6, r2
 8007aaa:	4698      	mov	r8, r3
 8007aac:	688a      	ldr	r2, [r1, #8]
 8007aae:	690b      	ldr	r3, [r1, #16]
 8007ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bfb8      	it	lt
 8007ab8:	4613      	movlt	r3, r2
 8007aba:	6033      	str	r3, [r6, #0]
 8007abc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	b10a      	cbz	r2, 8007aca <_printf_common+0x26>
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	0699      	lsls	r1, r3, #26
 8007ace:	bf42      	ittt	mi
 8007ad0:	6833      	ldrmi	r3, [r6, #0]
 8007ad2:	3302      	addmi	r3, #2
 8007ad4:	6033      	strmi	r3, [r6, #0]
 8007ad6:	6825      	ldr	r5, [r4, #0]
 8007ad8:	f015 0506 	ands.w	r5, r5, #6
 8007adc:	d106      	bne.n	8007aec <_printf_common+0x48>
 8007ade:	f104 0a19 	add.w	sl, r4, #25
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	6832      	ldr	r2, [r6, #0]
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dc26      	bgt.n	8007b3a <_printf_common+0x96>
 8007aec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007af0:	6822      	ldr	r2, [r4, #0]
 8007af2:	3b00      	subs	r3, #0
 8007af4:	bf18      	it	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	0692      	lsls	r2, r2, #26
 8007afa:	d42b      	bmi.n	8007b54 <_printf_common+0xb0>
 8007afc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b00:	4641      	mov	r1, r8
 8007b02:	4638      	mov	r0, r7
 8007b04:	47c8      	blx	r9
 8007b06:	3001      	adds	r0, #1
 8007b08:	d01e      	beq.n	8007b48 <_printf_common+0xa4>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	f003 0306 	and.w	r3, r3, #6
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	bf02      	ittt	eq
 8007b16:	68e5      	ldreq	r5, [r4, #12]
 8007b18:	6833      	ldreq	r3, [r6, #0]
 8007b1a:	1aed      	subeq	r5, r5, r3
 8007b1c:	68a3      	ldr	r3, [r4, #8]
 8007b1e:	bf0c      	ite	eq
 8007b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b24:	2500      	movne	r5, #0
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bfc4      	itt	gt
 8007b2a:	1a9b      	subgt	r3, r3, r2
 8007b2c:	18ed      	addgt	r5, r5, r3
 8007b2e:	2600      	movs	r6, #0
 8007b30:	341a      	adds	r4, #26
 8007b32:	42b5      	cmp	r5, r6
 8007b34:	d11a      	bne.n	8007b6c <_printf_common+0xc8>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e008      	b.n	8007b4c <_printf_common+0xa8>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	4641      	mov	r1, r8
 8007b40:	4638      	mov	r0, r7
 8007b42:	47c8      	blx	r9
 8007b44:	3001      	adds	r0, #1
 8007b46:	d103      	bne.n	8007b50 <_printf_common+0xac>
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b50:	3501      	adds	r5, #1
 8007b52:	e7c6      	b.n	8007ae2 <_printf_common+0x3e>
 8007b54:	18e1      	adds	r1, r4, r3
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	2030      	movs	r0, #48	@ 0x30
 8007b5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b5e:	4422      	add	r2, r4
 8007b60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b68:	3302      	adds	r3, #2
 8007b6a:	e7c7      	b.n	8007afc <_printf_common+0x58>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4622      	mov	r2, r4
 8007b70:	4641      	mov	r1, r8
 8007b72:	4638      	mov	r0, r7
 8007b74:	47c8      	blx	r9
 8007b76:	3001      	adds	r0, #1
 8007b78:	d0e6      	beq.n	8007b48 <_printf_common+0xa4>
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7d9      	b.n	8007b32 <_printf_common+0x8e>
	...

08007b80 <_printf_i>:
 8007b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b84:	7e0f      	ldrb	r7, [r1, #24]
 8007b86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b88:	2f78      	cmp	r7, #120	@ 0x78
 8007b8a:	4691      	mov	r9, r2
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	469a      	mov	sl, r3
 8007b92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b96:	d807      	bhi.n	8007ba8 <_printf_i+0x28>
 8007b98:	2f62      	cmp	r7, #98	@ 0x62
 8007b9a:	d80a      	bhi.n	8007bb2 <_printf_i+0x32>
 8007b9c:	2f00      	cmp	r7, #0
 8007b9e:	f000 80d1 	beq.w	8007d44 <_printf_i+0x1c4>
 8007ba2:	2f58      	cmp	r7, #88	@ 0x58
 8007ba4:	f000 80b8 	beq.w	8007d18 <_printf_i+0x198>
 8007ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bb0:	e03a      	b.n	8007c28 <_printf_i+0xa8>
 8007bb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bb6:	2b15      	cmp	r3, #21
 8007bb8:	d8f6      	bhi.n	8007ba8 <_printf_i+0x28>
 8007bba:	a101      	add	r1, pc, #4	@ (adr r1, 8007bc0 <_printf_i+0x40>)
 8007bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc0:	08007c19 	.word	0x08007c19
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007ba9 	.word	0x08007ba9
 8007bcc:	08007ba9 	.word	0x08007ba9
 8007bd0:	08007ba9 	.word	0x08007ba9
 8007bd4:	08007ba9 	.word	0x08007ba9
 8007bd8:	08007c2d 	.word	0x08007c2d
 8007bdc:	08007ba9 	.word	0x08007ba9
 8007be0:	08007ba9 	.word	0x08007ba9
 8007be4:	08007ba9 	.word	0x08007ba9
 8007be8:	08007ba9 	.word	0x08007ba9
 8007bec:	08007d2b 	.word	0x08007d2b
 8007bf0:	08007c57 	.word	0x08007c57
 8007bf4:	08007ce5 	.word	0x08007ce5
 8007bf8:	08007ba9 	.word	0x08007ba9
 8007bfc:	08007ba9 	.word	0x08007ba9
 8007c00:	08007d4d 	.word	0x08007d4d
 8007c04:	08007ba9 	.word	0x08007ba9
 8007c08:	08007c57 	.word	0x08007c57
 8007c0c:	08007ba9 	.word	0x08007ba9
 8007c10:	08007ba9 	.word	0x08007ba9
 8007c14:	08007ced 	.word	0x08007ced
 8007c18:	6833      	ldr	r3, [r6, #0]
 8007c1a:	1d1a      	adds	r2, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6032      	str	r2, [r6, #0]
 8007c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e09c      	b.n	8007d66 <_printf_i+0x1e6>
 8007c2c:	6833      	ldr	r3, [r6, #0]
 8007c2e:	6820      	ldr	r0, [r4, #0]
 8007c30:	1d19      	adds	r1, r3, #4
 8007c32:	6031      	str	r1, [r6, #0]
 8007c34:	0606      	lsls	r6, r0, #24
 8007c36:	d501      	bpl.n	8007c3c <_printf_i+0xbc>
 8007c38:	681d      	ldr	r5, [r3, #0]
 8007c3a:	e003      	b.n	8007c44 <_printf_i+0xc4>
 8007c3c:	0645      	lsls	r5, r0, #25
 8007c3e:	d5fb      	bpl.n	8007c38 <_printf_i+0xb8>
 8007c40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	da03      	bge.n	8007c50 <_printf_i+0xd0>
 8007c48:	232d      	movs	r3, #45	@ 0x2d
 8007c4a:	426d      	negs	r5, r5
 8007c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c50:	4858      	ldr	r0, [pc, #352]	@ (8007db4 <_printf_i+0x234>)
 8007c52:	230a      	movs	r3, #10
 8007c54:	e011      	b.n	8007c7a <_printf_i+0xfa>
 8007c56:	6821      	ldr	r1, [r4, #0]
 8007c58:	6833      	ldr	r3, [r6, #0]
 8007c5a:	0608      	lsls	r0, r1, #24
 8007c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c60:	d402      	bmi.n	8007c68 <_printf_i+0xe8>
 8007c62:	0649      	lsls	r1, r1, #25
 8007c64:	bf48      	it	mi
 8007c66:	b2ad      	uxthmi	r5, r5
 8007c68:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c6a:	4852      	ldr	r0, [pc, #328]	@ (8007db4 <_printf_i+0x234>)
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	bf14      	ite	ne
 8007c70:	230a      	movne	r3, #10
 8007c72:	2308      	moveq	r3, #8
 8007c74:	2100      	movs	r1, #0
 8007c76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c7a:	6866      	ldr	r6, [r4, #4]
 8007c7c:	60a6      	str	r6, [r4, #8]
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	db05      	blt.n	8007c8e <_printf_i+0x10e>
 8007c82:	6821      	ldr	r1, [r4, #0]
 8007c84:	432e      	orrs	r6, r5
 8007c86:	f021 0104 	bic.w	r1, r1, #4
 8007c8a:	6021      	str	r1, [r4, #0]
 8007c8c:	d04b      	beq.n	8007d26 <_printf_i+0x1a6>
 8007c8e:	4616      	mov	r6, r2
 8007c90:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c94:	fb03 5711 	mls	r7, r3, r1, r5
 8007c98:	5dc7      	ldrb	r7, [r0, r7]
 8007c9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c9e:	462f      	mov	r7, r5
 8007ca0:	42bb      	cmp	r3, r7
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	d9f4      	bls.n	8007c90 <_printf_i+0x110>
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d10b      	bne.n	8007cc2 <_printf_i+0x142>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	07df      	lsls	r7, r3, #31
 8007cae:	d508      	bpl.n	8007cc2 <_printf_i+0x142>
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	6861      	ldr	r1, [r4, #4]
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	bfde      	ittt	le
 8007cb8:	2330      	movle	r3, #48	@ 0x30
 8007cba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cc2:	1b92      	subs	r2, r2, r6
 8007cc4:	6122      	str	r2, [r4, #16]
 8007cc6:	f8cd a000 	str.w	sl, [sp]
 8007cca:	464b      	mov	r3, r9
 8007ccc:	aa03      	add	r2, sp, #12
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	f7ff fee7 	bl	8007aa4 <_printf_common>
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d14a      	bne.n	8007d70 <_printf_i+0x1f0>
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	b004      	add	sp, #16
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	f043 0320 	orr.w	r3, r3, #32
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	4832      	ldr	r0, [pc, #200]	@ (8007db8 <_printf_i+0x238>)
 8007cee:	2778      	movs	r7, #120	@ 0x78
 8007cf0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	6831      	ldr	r1, [r6, #0]
 8007cf8:	061f      	lsls	r7, r3, #24
 8007cfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cfe:	d402      	bmi.n	8007d06 <_printf_i+0x186>
 8007d00:	065f      	lsls	r7, r3, #25
 8007d02:	bf48      	it	mi
 8007d04:	b2ad      	uxthmi	r5, r5
 8007d06:	6031      	str	r1, [r6, #0]
 8007d08:	07d9      	lsls	r1, r3, #31
 8007d0a:	bf44      	itt	mi
 8007d0c:	f043 0320 	orrmi.w	r3, r3, #32
 8007d10:	6023      	strmi	r3, [r4, #0]
 8007d12:	b11d      	cbz	r5, 8007d1c <_printf_i+0x19c>
 8007d14:	2310      	movs	r3, #16
 8007d16:	e7ad      	b.n	8007c74 <_printf_i+0xf4>
 8007d18:	4826      	ldr	r0, [pc, #152]	@ (8007db4 <_printf_i+0x234>)
 8007d1a:	e7e9      	b.n	8007cf0 <_printf_i+0x170>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	f023 0320 	bic.w	r3, r3, #32
 8007d22:	6023      	str	r3, [r4, #0]
 8007d24:	e7f6      	b.n	8007d14 <_printf_i+0x194>
 8007d26:	4616      	mov	r6, r2
 8007d28:	e7bd      	b.n	8007ca6 <_printf_i+0x126>
 8007d2a:	6833      	ldr	r3, [r6, #0]
 8007d2c:	6825      	ldr	r5, [r4, #0]
 8007d2e:	6961      	ldr	r1, [r4, #20]
 8007d30:	1d18      	adds	r0, r3, #4
 8007d32:	6030      	str	r0, [r6, #0]
 8007d34:	062e      	lsls	r6, r5, #24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	d501      	bpl.n	8007d3e <_printf_i+0x1be>
 8007d3a:	6019      	str	r1, [r3, #0]
 8007d3c:	e002      	b.n	8007d44 <_printf_i+0x1c4>
 8007d3e:	0668      	lsls	r0, r5, #25
 8007d40:	d5fb      	bpl.n	8007d3a <_printf_i+0x1ba>
 8007d42:	8019      	strh	r1, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	4616      	mov	r6, r2
 8007d4a:	e7bc      	b.n	8007cc6 <_printf_i+0x146>
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	1d1a      	adds	r2, r3, #4
 8007d50:	6032      	str	r2, [r6, #0]
 8007d52:	681e      	ldr	r6, [r3, #0]
 8007d54:	6862      	ldr	r2, [r4, #4]
 8007d56:	2100      	movs	r1, #0
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7f8 fa61 	bl	8000220 <memchr>
 8007d5e:	b108      	cbz	r0, 8007d64 <_printf_i+0x1e4>
 8007d60:	1b80      	subs	r0, r0, r6
 8007d62:	6060      	str	r0, [r4, #4]
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	6123      	str	r3, [r4, #16]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d6e:	e7aa      	b.n	8007cc6 <_printf_i+0x146>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	4632      	mov	r2, r6
 8007d74:	4649      	mov	r1, r9
 8007d76:	4640      	mov	r0, r8
 8007d78:	47d0      	blx	sl
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d0ad      	beq.n	8007cda <_printf_i+0x15a>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	079b      	lsls	r3, r3, #30
 8007d82:	d413      	bmi.n	8007dac <_printf_i+0x22c>
 8007d84:	68e0      	ldr	r0, [r4, #12]
 8007d86:	9b03      	ldr	r3, [sp, #12]
 8007d88:	4298      	cmp	r0, r3
 8007d8a:	bfb8      	it	lt
 8007d8c:	4618      	movlt	r0, r3
 8007d8e:	e7a6      	b.n	8007cde <_printf_i+0x15e>
 8007d90:	2301      	movs	r3, #1
 8007d92:	4632      	mov	r2, r6
 8007d94:	4649      	mov	r1, r9
 8007d96:	4640      	mov	r0, r8
 8007d98:	47d0      	blx	sl
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d09d      	beq.n	8007cda <_printf_i+0x15a>
 8007d9e:	3501      	adds	r5, #1
 8007da0:	68e3      	ldr	r3, [r4, #12]
 8007da2:	9903      	ldr	r1, [sp, #12]
 8007da4:	1a5b      	subs	r3, r3, r1
 8007da6:	42ab      	cmp	r3, r5
 8007da8:	dcf2      	bgt.n	8007d90 <_printf_i+0x210>
 8007daa:	e7eb      	b.n	8007d84 <_printf_i+0x204>
 8007dac:	2500      	movs	r5, #0
 8007dae:	f104 0619 	add.w	r6, r4, #25
 8007db2:	e7f5      	b.n	8007da0 <_printf_i+0x220>
 8007db4:	080086fc 	.word	0x080086fc
 8007db8:	0800870d 	.word	0x0800870d

08007dbc <__sflush_r>:
 8007dbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	0716      	lsls	r6, r2, #28
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	d454      	bmi.n	8007e76 <__sflush_r+0xba>
 8007dcc:	684b      	ldr	r3, [r1, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dc02      	bgt.n	8007dd8 <__sflush_r+0x1c>
 8007dd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd48      	ble.n	8007e6a <__sflush_r+0xae>
 8007dd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dda:	2e00      	cmp	r6, #0
 8007ddc:	d045      	beq.n	8007e6a <__sflush_r+0xae>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007de4:	682f      	ldr	r7, [r5, #0]
 8007de6:	6a21      	ldr	r1, [r4, #32]
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	d030      	beq.n	8007e4e <__sflush_r+0x92>
 8007dec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	0759      	lsls	r1, r3, #29
 8007df2:	d505      	bpl.n	8007e00 <__sflush_r+0x44>
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dfa:	b10b      	cbz	r3, 8007e00 <__sflush_r+0x44>
 8007dfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	2300      	movs	r3, #0
 8007e02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e04:	6a21      	ldr	r1, [r4, #32]
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b0      	blx	r6
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	d106      	bne.n	8007e1e <__sflush_r+0x62>
 8007e10:	6829      	ldr	r1, [r5, #0]
 8007e12:	291d      	cmp	r1, #29
 8007e14:	d82b      	bhi.n	8007e6e <__sflush_r+0xb2>
 8007e16:	4a2a      	ldr	r2, [pc, #168]	@ (8007ec0 <__sflush_r+0x104>)
 8007e18:	40ca      	lsrs	r2, r1
 8007e1a:	07d6      	lsls	r6, r2, #31
 8007e1c:	d527      	bpl.n	8007e6e <__sflush_r+0xb2>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	6062      	str	r2, [r4, #4]
 8007e22:	04d9      	lsls	r1, r3, #19
 8007e24:	6922      	ldr	r2, [r4, #16]
 8007e26:	6022      	str	r2, [r4, #0]
 8007e28:	d504      	bpl.n	8007e34 <__sflush_r+0x78>
 8007e2a:	1c42      	adds	r2, r0, #1
 8007e2c:	d101      	bne.n	8007e32 <__sflush_r+0x76>
 8007e2e:	682b      	ldr	r3, [r5, #0]
 8007e30:	b903      	cbnz	r3, 8007e34 <__sflush_r+0x78>
 8007e32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e36:	602f      	str	r7, [r5, #0]
 8007e38:	b1b9      	cbz	r1, 8007e6a <__sflush_r+0xae>
 8007e3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	d002      	beq.n	8007e48 <__sflush_r+0x8c>
 8007e42:	4628      	mov	r0, r5
 8007e44:	f7fe fbdc 	bl	8006600 <_free_r>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e4c:	e00d      	b.n	8007e6a <__sflush_r+0xae>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b0      	blx	r6
 8007e54:	4602      	mov	r2, r0
 8007e56:	1c50      	adds	r0, r2, #1
 8007e58:	d1c9      	bne.n	8007dee <__sflush_r+0x32>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0c6      	beq.n	8007dee <__sflush_r+0x32>
 8007e60:	2b1d      	cmp	r3, #29
 8007e62:	d001      	beq.n	8007e68 <__sflush_r+0xac>
 8007e64:	2b16      	cmp	r3, #22
 8007e66:	d11e      	bne.n	8007ea6 <__sflush_r+0xea>
 8007e68:	602f      	str	r7, [r5, #0]
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e022      	b.n	8007eb4 <__sflush_r+0xf8>
 8007e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e72:	b21b      	sxth	r3, r3
 8007e74:	e01b      	b.n	8007eae <__sflush_r+0xf2>
 8007e76:	690f      	ldr	r7, [r1, #16]
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	d0f6      	beq.n	8007e6a <__sflush_r+0xae>
 8007e7c:	0793      	lsls	r3, r2, #30
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	bf08      	it	eq
 8007e82:	694b      	ldreq	r3, [r1, #20]
 8007e84:	600f      	str	r7, [r1, #0]
 8007e86:	bf18      	it	ne
 8007e88:	2300      	movne	r3, #0
 8007e8a:	eba6 0807 	sub.w	r8, r6, r7
 8007e8e:	608b      	str	r3, [r1, #8]
 8007e90:	f1b8 0f00 	cmp.w	r8, #0
 8007e94:	dde9      	ble.n	8007e6a <__sflush_r+0xae>
 8007e96:	6a21      	ldr	r1, [r4, #32]
 8007e98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e9a:	4643      	mov	r3, r8
 8007e9c:	463a      	mov	r2, r7
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b0      	blx	r6
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	dc08      	bgt.n	8007eb8 <__sflush_r+0xfc>
 8007ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eae:	81a3      	strh	r3, [r4, #12]
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb8:	4407      	add	r7, r0
 8007eba:	eba8 0800 	sub.w	r8, r8, r0
 8007ebe:	e7e7      	b.n	8007e90 <__sflush_r+0xd4>
 8007ec0:	20400001 	.word	0x20400001

08007ec4 <_fflush_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	690b      	ldr	r3, [r1, #16]
 8007ec8:	4605      	mov	r5, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	b913      	cbnz	r3, 8007ed4 <_fflush_r+0x10>
 8007ece:	2500      	movs	r5, #0
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	b118      	cbz	r0, 8007ede <_fflush_r+0x1a>
 8007ed6:	6a03      	ldr	r3, [r0, #32]
 8007ed8:	b90b      	cbnz	r3, 8007ede <_fflush_r+0x1a>
 8007eda:	f7fe fa51 	bl	8006380 <__sinit>
 8007ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f3      	beq.n	8007ece <_fflush_r+0xa>
 8007ee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ee8:	07d0      	lsls	r0, r2, #31
 8007eea:	d404      	bmi.n	8007ef6 <_fflush_r+0x32>
 8007eec:	0599      	lsls	r1, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_fflush_r+0x32>
 8007ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef2:	f7fe fb6c 	bl	80065ce <__retarget_lock_acquire_recursive>
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	4621      	mov	r1, r4
 8007efa:	f7ff ff5f 	bl	8007dbc <__sflush_r>
 8007efe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f00:	07da      	lsls	r2, r3, #31
 8007f02:	4605      	mov	r5, r0
 8007f04:	d4e4      	bmi.n	8007ed0 <_fflush_r+0xc>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	059b      	lsls	r3, r3, #22
 8007f0a:	d4e1      	bmi.n	8007ed0 <_fflush_r+0xc>
 8007f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f0e:	f7fe fb5f 	bl	80065d0 <__retarget_lock_release_recursive>
 8007f12:	e7dd      	b.n	8007ed0 <_fflush_r+0xc>

08007f14 <memmove>:
 8007f14:	4288      	cmp	r0, r1
 8007f16:	b510      	push	{r4, lr}
 8007f18:	eb01 0402 	add.w	r4, r1, r2
 8007f1c:	d902      	bls.n	8007f24 <memmove+0x10>
 8007f1e:	4284      	cmp	r4, r0
 8007f20:	4623      	mov	r3, r4
 8007f22:	d807      	bhi.n	8007f34 <memmove+0x20>
 8007f24:	1e43      	subs	r3, r0, #1
 8007f26:	42a1      	cmp	r1, r4
 8007f28:	d008      	beq.n	8007f3c <memmove+0x28>
 8007f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f32:	e7f8      	b.n	8007f26 <memmove+0x12>
 8007f34:	4402      	add	r2, r0
 8007f36:	4601      	mov	r1, r0
 8007f38:	428a      	cmp	r2, r1
 8007f3a:	d100      	bne.n	8007f3e <memmove+0x2a>
 8007f3c:	bd10      	pop	{r4, pc}
 8007f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f46:	e7f7      	b.n	8007f38 <memmove+0x24>

08007f48 <_sbrk_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4d06      	ldr	r5, [pc, #24]	@ (8007f64 <_sbrk_r+0x1c>)
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4604      	mov	r4, r0
 8007f50:	4608      	mov	r0, r1
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	f7f9 fd3e 	bl	80019d4 <_sbrk>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_sbrk_r+0x1a>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_sbrk_r+0x1a>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	200004c8 	.word	0x200004c8

08007f68 <__assert_func>:
 8007f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f6a:	4614      	mov	r4, r2
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <__assert_func+0x2c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4605      	mov	r5, r0
 8007f74:	68d8      	ldr	r0, [r3, #12]
 8007f76:	b14c      	cbz	r4, 8007f8c <__assert_func+0x24>
 8007f78:	4b07      	ldr	r3, [pc, #28]	@ (8007f98 <__assert_func+0x30>)
 8007f7a:	9100      	str	r1, [sp, #0]
 8007f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f80:	4906      	ldr	r1, [pc, #24]	@ (8007f9c <__assert_func+0x34>)
 8007f82:	462b      	mov	r3, r5
 8007f84:	f000 f858 	bl	8008038 <fiprintf>
 8007f88:	f000 f868 	bl	800805c <abort>
 8007f8c:	4b04      	ldr	r3, [pc, #16]	@ (8007fa0 <__assert_func+0x38>)
 8007f8e:	461c      	mov	r4, r3
 8007f90:	e7f3      	b.n	8007f7a <__assert_func+0x12>
 8007f92:	bf00      	nop
 8007f94:	2000018c 	.word	0x2000018c
 8007f98:	0800871e 	.word	0x0800871e
 8007f9c:	0800872b 	.word	0x0800872b
 8007fa0:	08008759 	.word	0x08008759

08007fa4 <_calloc_r>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	fba1 5402 	umull	r5, r4, r1, r2
 8007faa:	b934      	cbnz	r4, 8007fba <_calloc_r+0x16>
 8007fac:	4629      	mov	r1, r5
 8007fae:	f7fe fecd 	bl	8006d4c <_malloc_r>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	b928      	cbnz	r0, 8007fc2 <_calloc_r+0x1e>
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	bd70      	pop	{r4, r5, r6, pc}
 8007fba:	220c      	movs	r2, #12
 8007fbc:	6002      	str	r2, [r0, #0]
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	e7f9      	b.n	8007fb6 <_calloc_r+0x12>
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	f7fe fa76 	bl	80064b6 <memset>
 8007fca:	e7f4      	b.n	8007fb6 <_calloc_r+0x12>

08007fcc <malloc>:
 8007fcc:	4b02      	ldr	r3, [pc, #8]	@ (8007fd8 <malloc+0xc>)
 8007fce:	4601      	mov	r1, r0
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f7fe bebb 	b.w	8006d4c <_malloc_r>
 8007fd6:	bf00      	nop
 8007fd8:	2000018c 	.word	0x2000018c

08007fdc <_realloc_r>:
 8007fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	b921      	cbnz	r1, 8007ff2 <_realloc_r+0x16>
 8007fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fec:	4611      	mov	r1, r2
 8007fee:	f7fe bead 	b.w	8006d4c <_malloc_r>
 8007ff2:	b92a      	cbnz	r2, 8008000 <_realloc_r+0x24>
 8007ff4:	f7fe fb04 	bl	8006600 <_free_r>
 8007ff8:	4625      	mov	r5, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008000:	f000 f833 	bl	800806a <_malloc_usable_size_r>
 8008004:	4284      	cmp	r4, r0
 8008006:	4606      	mov	r6, r0
 8008008:	d802      	bhi.n	8008010 <_realloc_r+0x34>
 800800a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800800e:	d8f4      	bhi.n	8007ffa <_realloc_r+0x1e>
 8008010:	4621      	mov	r1, r4
 8008012:	4638      	mov	r0, r7
 8008014:	f7fe fe9a 	bl	8006d4c <_malloc_r>
 8008018:	4680      	mov	r8, r0
 800801a:	b908      	cbnz	r0, 8008020 <_realloc_r+0x44>
 800801c:	4645      	mov	r5, r8
 800801e:	e7ec      	b.n	8007ffa <_realloc_r+0x1e>
 8008020:	42b4      	cmp	r4, r6
 8008022:	4622      	mov	r2, r4
 8008024:	4629      	mov	r1, r5
 8008026:	bf28      	it	cs
 8008028:	4632      	movcs	r2, r6
 800802a:	f7fe fad2 	bl	80065d2 <memcpy>
 800802e:	4629      	mov	r1, r5
 8008030:	4638      	mov	r0, r7
 8008032:	f7fe fae5 	bl	8006600 <_free_r>
 8008036:	e7f1      	b.n	800801c <_realloc_r+0x40>

08008038 <fiprintf>:
 8008038:	b40e      	push	{r1, r2, r3}
 800803a:	b503      	push	{r0, r1, lr}
 800803c:	4601      	mov	r1, r0
 800803e:	ab03      	add	r3, sp, #12
 8008040:	4805      	ldr	r0, [pc, #20]	@ (8008058 <fiprintf+0x20>)
 8008042:	f853 2b04 	ldr.w	r2, [r3], #4
 8008046:	6800      	ldr	r0, [r0, #0]
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	f000 f83f 	bl	80080cc <_vfiprintf_r>
 800804e:	b002      	add	sp, #8
 8008050:	f85d eb04 	ldr.w	lr, [sp], #4
 8008054:	b003      	add	sp, #12
 8008056:	4770      	bx	lr
 8008058:	2000018c 	.word	0x2000018c

0800805c <abort>:
 800805c:	b508      	push	{r3, lr}
 800805e:	2006      	movs	r0, #6
 8008060:	f000 fa08 	bl	8008474 <raise>
 8008064:	2001      	movs	r0, #1
 8008066:	f7f9 fc3d 	bl	80018e4 <_exit>

0800806a <_malloc_usable_size_r>:
 800806a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800806e:	1f18      	subs	r0, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfbc      	itt	lt
 8008074:	580b      	ldrlt	r3, [r1, r0]
 8008076:	18c0      	addlt	r0, r0, r3
 8008078:	4770      	bx	lr

0800807a <__sfputc_r>:
 800807a:	6893      	ldr	r3, [r2, #8]
 800807c:	3b01      	subs	r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	b410      	push	{r4}
 8008082:	6093      	str	r3, [r2, #8]
 8008084:	da08      	bge.n	8008098 <__sfputc_r+0x1e>
 8008086:	6994      	ldr	r4, [r2, #24]
 8008088:	42a3      	cmp	r3, r4
 800808a:	db01      	blt.n	8008090 <__sfputc_r+0x16>
 800808c:	290a      	cmp	r1, #10
 800808e:	d103      	bne.n	8008098 <__sfputc_r+0x1e>
 8008090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008094:	f000 b932 	b.w	80082fc <__swbuf_r>
 8008098:	6813      	ldr	r3, [r2, #0]
 800809a:	1c58      	adds	r0, r3, #1
 800809c:	6010      	str	r0, [r2, #0]
 800809e:	7019      	strb	r1, [r3, #0]
 80080a0:	4608      	mov	r0, r1
 80080a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <__sfputs_r>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	4614      	mov	r4, r2
 80080b0:	18d5      	adds	r5, r2, r3
 80080b2:	42ac      	cmp	r4, r5
 80080b4:	d101      	bne.n	80080ba <__sfputs_r+0x12>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e007      	b.n	80080ca <__sfputs_r+0x22>
 80080ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080be:	463a      	mov	r2, r7
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff ffda 	bl	800807a <__sfputc_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d1f3      	bne.n	80080b2 <__sfputs_r+0xa>
 80080ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080cc <_vfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	460d      	mov	r5, r1
 80080d2:	b09d      	sub	sp, #116	@ 0x74
 80080d4:	4614      	mov	r4, r2
 80080d6:	4698      	mov	r8, r3
 80080d8:	4606      	mov	r6, r0
 80080da:	b118      	cbz	r0, 80080e4 <_vfiprintf_r+0x18>
 80080dc:	6a03      	ldr	r3, [r0, #32]
 80080de:	b90b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x18>
 80080e0:	f7fe f94e 	bl	8006380 <__sinit>
 80080e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	d405      	bmi.n	80080f6 <_vfiprintf_r+0x2a>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	059a      	lsls	r2, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_vfiprintf_r+0x2a>
 80080f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080f2:	f7fe fa6c 	bl	80065ce <__retarget_lock_acquire_recursive>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	071b      	lsls	r3, r3, #28
 80080fa:	d501      	bpl.n	8008100 <_vfiprintf_r+0x34>
 80080fc:	692b      	ldr	r3, [r5, #16]
 80080fe:	b99b      	cbnz	r3, 8008128 <_vfiprintf_r+0x5c>
 8008100:	4629      	mov	r1, r5
 8008102:	4630      	mov	r0, r6
 8008104:	f000 f938 	bl	8008378 <__swsetup_r>
 8008108:	b170      	cbz	r0, 8008128 <_vfiprintf_r+0x5c>
 800810a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800810c:	07dc      	lsls	r4, r3, #31
 800810e:	d504      	bpl.n	800811a <_vfiprintf_r+0x4e>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	b01d      	add	sp, #116	@ 0x74
 8008116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	0598      	lsls	r0, r3, #22
 800811e:	d4f7      	bmi.n	8008110 <_vfiprintf_r+0x44>
 8008120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008122:	f7fe fa55 	bl	80065d0 <__retarget_lock_release_recursive>
 8008126:	e7f3      	b.n	8008110 <_vfiprintf_r+0x44>
 8008128:	2300      	movs	r3, #0
 800812a:	9309      	str	r3, [sp, #36]	@ 0x24
 800812c:	2320      	movs	r3, #32
 800812e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008132:	f8cd 800c 	str.w	r8, [sp, #12]
 8008136:	2330      	movs	r3, #48	@ 0x30
 8008138:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082e8 <_vfiprintf_r+0x21c>
 800813c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008140:	f04f 0901 	mov.w	r9, #1
 8008144:	4623      	mov	r3, r4
 8008146:	469a      	mov	sl, r3
 8008148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814c:	b10a      	cbz	r2, 8008152 <_vfiprintf_r+0x86>
 800814e:	2a25      	cmp	r2, #37	@ 0x25
 8008150:	d1f9      	bne.n	8008146 <_vfiprintf_r+0x7a>
 8008152:	ebba 0b04 	subs.w	fp, sl, r4
 8008156:	d00b      	beq.n	8008170 <_vfiprintf_r+0xa4>
 8008158:	465b      	mov	r3, fp
 800815a:	4622      	mov	r2, r4
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ffa2 	bl	80080a8 <__sfputs_r>
 8008164:	3001      	adds	r0, #1
 8008166:	f000 80a7 	beq.w	80082b8 <_vfiprintf_r+0x1ec>
 800816a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800816c:	445a      	add	r2, fp
 800816e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008170:	f89a 3000 	ldrb.w	r3, [sl]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 809f 	beq.w	80082b8 <_vfiprintf_r+0x1ec>
 800817a:	2300      	movs	r3, #0
 800817c:	f04f 32ff 	mov.w	r2, #4294967295
 8008180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008184:	f10a 0a01 	add.w	sl, sl, #1
 8008188:	9304      	str	r3, [sp, #16]
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008190:	931a      	str	r3, [sp, #104]	@ 0x68
 8008192:	4654      	mov	r4, sl
 8008194:	2205      	movs	r2, #5
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	4853      	ldr	r0, [pc, #332]	@ (80082e8 <_vfiprintf_r+0x21c>)
 800819c:	f7f8 f840 	bl	8000220 <memchr>
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	b9d8      	cbnz	r0, 80081dc <_vfiprintf_r+0x110>
 80081a4:	06d1      	lsls	r1, r2, #27
 80081a6:	bf44      	itt	mi
 80081a8:	2320      	movmi	r3, #32
 80081aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ae:	0713      	lsls	r3, r2, #28
 80081b0:	bf44      	itt	mi
 80081b2:	232b      	movmi	r3, #43	@ 0x2b
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b8:	f89a 3000 	ldrb.w	r3, [sl]
 80081bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081be:	d015      	beq.n	80081ec <_vfiprintf_r+0x120>
 80081c0:	9a07      	ldr	r2, [sp, #28]
 80081c2:	4654      	mov	r4, sl
 80081c4:	2000      	movs	r0, #0
 80081c6:	f04f 0c0a 	mov.w	ip, #10
 80081ca:	4621      	mov	r1, r4
 80081cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d0:	3b30      	subs	r3, #48	@ 0x30
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	d94b      	bls.n	800826e <_vfiprintf_r+0x1a2>
 80081d6:	b1b0      	cbz	r0, 8008206 <_vfiprintf_r+0x13a>
 80081d8:	9207      	str	r2, [sp, #28]
 80081da:	e014      	b.n	8008206 <_vfiprintf_r+0x13a>
 80081dc:	eba0 0308 	sub.w	r3, r0, r8
 80081e0:	fa09 f303 	lsl.w	r3, r9, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	46a2      	mov	sl, r4
 80081ea:	e7d2      	b.n	8008192 <_vfiprintf_r+0xc6>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1d19      	adds	r1, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9103      	str	r1, [sp, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbb      	ittet	lt
 80081f8:	425b      	neglt	r3, r3
 80081fa:	f042 0202 	orrlt.w	r2, r2, #2
 80081fe:	9307      	strge	r3, [sp, #28]
 8008200:	9307      	strlt	r3, [sp, #28]
 8008202:	bfb8      	it	lt
 8008204:	9204      	strlt	r2, [sp, #16]
 8008206:	7823      	ldrb	r3, [r4, #0]
 8008208:	2b2e      	cmp	r3, #46	@ 0x2e
 800820a:	d10a      	bne.n	8008222 <_vfiprintf_r+0x156>
 800820c:	7863      	ldrb	r3, [r4, #1]
 800820e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008210:	d132      	bne.n	8008278 <_vfiprintf_r+0x1ac>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9203      	str	r2, [sp, #12]
 800821a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800821e:	3402      	adds	r4, #2
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082f8 <_vfiprintf_r+0x22c>
 8008226:	7821      	ldrb	r1, [r4, #0]
 8008228:	2203      	movs	r2, #3
 800822a:	4650      	mov	r0, sl
 800822c:	f7f7 fff8 	bl	8000220 <memchr>
 8008230:	b138      	cbz	r0, 8008242 <_vfiprintf_r+0x176>
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	eba0 000a 	sub.w	r0, r0, sl
 8008238:	2240      	movs	r2, #64	@ 0x40
 800823a:	4082      	lsls	r2, r0
 800823c:	4313      	orrs	r3, r2
 800823e:	3401      	adds	r4, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008246:	4829      	ldr	r0, [pc, #164]	@ (80082ec <_vfiprintf_r+0x220>)
 8008248:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800824c:	2206      	movs	r2, #6
 800824e:	f7f7 ffe7 	bl	8000220 <memchr>
 8008252:	2800      	cmp	r0, #0
 8008254:	d03f      	beq.n	80082d6 <_vfiprintf_r+0x20a>
 8008256:	4b26      	ldr	r3, [pc, #152]	@ (80082f0 <_vfiprintf_r+0x224>)
 8008258:	bb1b      	cbnz	r3, 80082a2 <_vfiprintf_r+0x1d6>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	3307      	adds	r3, #7
 800825e:	f023 0307 	bic.w	r3, r3, #7
 8008262:	3308      	adds	r3, #8
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008268:	443b      	add	r3, r7
 800826a:	9309      	str	r3, [sp, #36]	@ 0x24
 800826c:	e76a      	b.n	8008144 <_vfiprintf_r+0x78>
 800826e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008272:	460c      	mov	r4, r1
 8008274:	2001      	movs	r0, #1
 8008276:	e7a8      	b.n	80081ca <_vfiprintf_r+0xfe>
 8008278:	2300      	movs	r3, #0
 800827a:	3401      	adds	r4, #1
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	4619      	mov	r1, r3
 8008280:	f04f 0c0a 	mov.w	ip, #10
 8008284:	4620      	mov	r0, r4
 8008286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828a:	3a30      	subs	r2, #48	@ 0x30
 800828c:	2a09      	cmp	r2, #9
 800828e:	d903      	bls.n	8008298 <_vfiprintf_r+0x1cc>
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0c6      	beq.n	8008222 <_vfiprintf_r+0x156>
 8008294:	9105      	str	r1, [sp, #20]
 8008296:	e7c4      	b.n	8008222 <_vfiprintf_r+0x156>
 8008298:	fb0c 2101 	mla	r1, ip, r1, r2
 800829c:	4604      	mov	r4, r0
 800829e:	2301      	movs	r3, #1
 80082a0:	e7f0      	b.n	8008284 <_vfiprintf_r+0x1b8>
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4b12      	ldr	r3, [pc, #72]	@ (80082f4 <_vfiprintf_r+0x228>)
 80082aa:	a904      	add	r1, sp, #16
 80082ac:	4630      	mov	r0, r6
 80082ae:	f3af 8000 	nop.w
 80082b2:	4607      	mov	r7, r0
 80082b4:	1c78      	adds	r0, r7, #1
 80082b6:	d1d6      	bne.n	8008266 <_vfiprintf_r+0x19a>
 80082b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ba:	07d9      	lsls	r1, r3, #31
 80082bc:	d405      	bmi.n	80082ca <_vfiprintf_r+0x1fe>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	059a      	lsls	r2, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_vfiprintf_r+0x1fe>
 80082c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082c6:	f7fe f983 	bl	80065d0 <__retarget_lock_release_recursive>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	065b      	lsls	r3, r3, #25
 80082ce:	f53f af1f 	bmi.w	8008110 <_vfiprintf_r+0x44>
 80082d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082d4:	e71e      	b.n	8008114 <_vfiprintf_r+0x48>
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <_vfiprintf_r+0x228>)
 80082de:	a904      	add	r1, sp, #16
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff fc4d 	bl	8007b80 <_printf_i>
 80082e6:	e7e4      	b.n	80082b2 <_vfiprintf_r+0x1e6>
 80082e8:	080086eb 	.word	0x080086eb
 80082ec:	080086f5 	.word	0x080086f5
 80082f0:	00000000 	.word	0x00000000
 80082f4:	080080a9 	.word	0x080080a9
 80082f8:	080086f1 	.word	0x080086f1

080082fc <__swbuf_r>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	460e      	mov	r6, r1
 8008300:	4614      	mov	r4, r2
 8008302:	4605      	mov	r5, r0
 8008304:	b118      	cbz	r0, 800830e <__swbuf_r+0x12>
 8008306:	6a03      	ldr	r3, [r0, #32]
 8008308:	b90b      	cbnz	r3, 800830e <__swbuf_r+0x12>
 800830a:	f7fe f839 	bl	8006380 <__sinit>
 800830e:	69a3      	ldr	r3, [r4, #24]
 8008310:	60a3      	str	r3, [r4, #8]
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	071a      	lsls	r2, r3, #28
 8008316:	d501      	bpl.n	800831c <__swbuf_r+0x20>
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	b943      	cbnz	r3, 800832e <__swbuf_r+0x32>
 800831c:	4621      	mov	r1, r4
 800831e:	4628      	mov	r0, r5
 8008320:	f000 f82a 	bl	8008378 <__swsetup_r>
 8008324:	b118      	cbz	r0, 800832e <__swbuf_r+0x32>
 8008326:	f04f 37ff 	mov.w	r7, #4294967295
 800832a:	4638      	mov	r0, r7
 800832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	6922      	ldr	r2, [r4, #16]
 8008332:	1a98      	subs	r0, r3, r2
 8008334:	6963      	ldr	r3, [r4, #20]
 8008336:	b2f6      	uxtb	r6, r6
 8008338:	4283      	cmp	r3, r0
 800833a:	4637      	mov	r7, r6
 800833c:	dc05      	bgt.n	800834a <__swbuf_r+0x4e>
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f7ff fdbf 	bl	8007ec4 <_fflush_r>
 8008346:	2800      	cmp	r0, #0
 8008348:	d1ed      	bne.n	8008326 <__swbuf_r+0x2a>
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	3b01      	subs	r3, #1
 800834e:	60a3      	str	r3, [r4, #8]
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	701e      	strb	r6, [r3, #0]
 8008358:	6962      	ldr	r2, [r4, #20]
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	429a      	cmp	r2, r3
 800835e:	d004      	beq.n	800836a <__swbuf_r+0x6e>
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	07db      	lsls	r3, r3, #31
 8008364:	d5e1      	bpl.n	800832a <__swbuf_r+0x2e>
 8008366:	2e0a      	cmp	r6, #10
 8008368:	d1df      	bne.n	800832a <__swbuf_r+0x2e>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f7ff fda9 	bl	8007ec4 <_fflush_r>
 8008372:	2800      	cmp	r0, #0
 8008374:	d0d9      	beq.n	800832a <__swbuf_r+0x2e>
 8008376:	e7d6      	b.n	8008326 <__swbuf_r+0x2a>

08008378 <__swsetup_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4b29      	ldr	r3, [pc, #164]	@ (8008420 <__swsetup_r+0xa8>)
 800837c:	4605      	mov	r5, r0
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	460c      	mov	r4, r1
 8008382:	b118      	cbz	r0, 800838c <__swsetup_r+0x14>
 8008384:	6a03      	ldr	r3, [r0, #32]
 8008386:	b90b      	cbnz	r3, 800838c <__swsetup_r+0x14>
 8008388:	f7fd fffa 	bl	8006380 <__sinit>
 800838c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008390:	0719      	lsls	r1, r3, #28
 8008392:	d422      	bmi.n	80083da <__swsetup_r+0x62>
 8008394:	06da      	lsls	r2, r3, #27
 8008396:	d407      	bmi.n	80083a8 <__swsetup_r+0x30>
 8008398:	2209      	movs	r2, #9
 800839a:	602a      	str	r2, [r5, #0]
 800839c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	f04f 30ff 	mov.w	r0, #4294967295
 80083a6:	e033      	b.n	8008410 <__swsetup_r+0x98>
 80083a8:	0758      	lsls	r0, r3, #29
 80083aa:	d512      	bpl.n	80083d2 <__swsetup_r+0x5a>
 80083ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083ae:	b141      	cbz	r1, 80083c2 <__swsetup_r+0x4a>
 80083b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083b4:	4299      	cmp	r1, r3
 80083b6:	d002      	beq.n	80083be <__swsetup_r+0x46>
 80083b8:	4628      	mov	r0, r5
 80083ba:	f7fe f921 	bl	8006600 <_free_r>
 80083be:	2300      	movs	r3, #0
 80083c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	2300      	movs	r3, #0
 80083cc:	6063      	str	r3, [r4, #4]
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	f043 0308 	orr.w	r3, r3, #8
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	b94b      	cbnz	r3, 80083f2 <__swsetup_r+0x7a>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083e8:	d003      	beq.n	80083f2 <__swsetup_r+0x7a>
 80083ea:	4621      	mov	r1, r4
 80083ec:	4628      	mov	r0, r5
 80083ee:	f000 f883 	bl	80084f8 <__smakebuf_r>
 80083f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f6:	f013 0201 	ands.w	r2, r3, #1
 80083fa:	d00a      	beq.n	8008412 <__swsetup_r+0x9a>
 80083fc:	2200      	movs	r2, #0
 80083fe:	60a2      	str	r2, [r4, #8]
 8008400:	6962      	ldr	r2, [r4, #20]
 8008402:	4252      	negs	r2, r2
 8008404:	61a2      	str	r2, [r4, #24]
 8008406:	6922      	ldr	r2, [r4, #16]
 8008408:	b942      	cbnz	r2, 800841c <__swsetup_r+0xa4>
 800840a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800840e:	d1c5      	bne.n	800839c <__swsetup_r+0x24>
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	0799      	lsls	r1, r3, #30
 8008414:	bf58      	it	pl
 8008416:	6962      	ldrpl	r2, [r4, #20]
 8008418:	60a2      	str	r2, [r4, #8]
 800841a:	e7f4      	b.n	8008406 <__swsetup_r+0x8e>
 800841c:	2000      	movs	r0, #0
 800841e:	e7f7      	b.n	8008410 <__swsetup_r+0x98>
 8008420:	2000018c 	.word	0x2000018c

08008424 <_raise_r>:
 8008424:	291f      	cmp	r1, #31
 8008426:	b538      	push	{r3, r4, r5, lr}
 8008428:	4605      	mov	r5, r0
 800842a:	460c      	mov	r4, r1
 800842c:	d904      	bls.n	8008438 <_raise_r+0x14>
 800842e:	2316      	movs	r3, #22
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	f04f 30ff 	mov.w	r0, #4294967295
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800843a:	b112      	cbz	r2, 8008442 <_raise_r+0x1e>
 800843c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008440:	b94b      	cbnz	r3, 8008456 <_raise_r+0x32>
 8008442:	4628      	mov	r0, r5
 8008444:	f000 f830 	bl	80084a8 <_getpid_r>
 8008448:	4622      	mov	r2, r4
 800844a:	4601      	mov	r1, r0
 800844c:	4628      	mov	r0, r5
 800844e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008452:	f000 b817 	b.w	8008484 <_kill_r>
 8008456:	2b01      	cmp	r3, #1
 8008458:	d00a      	beq.n	8008470 <_raise_r+0x4c>
 800845a:	1c59      	adds	r1, r3, #1
 800845c:	d103      	bne.n	8008466 <_raise_r+0x42>
 800845e:	2316      	movs	r3, #22
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	2001      	movs	r0, #1
 8008464:	e7e7      	b.n	8008436 <_raise_r+0x12>
 8008466:	2100      	movs	r1, #0
 8008468:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800846c:	4620      	mov	r0, r4
 800846e:	4798      	blx	r3
 8008470:	2000      	movs	r0, #0
 8008472:	e7e0      	b.n	8008436 <_raise_r+0x12>

08008474 <raise>:
 8008474:	4b02      	ldr	r3, [pc, #8]	@ (8008480 <raise+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f7ff bfd3 	b.w	8008424 <_raise_r>
 800847e:	bf00      	nop
 8008480:	2000018c 	.word	0x2000018c

08008484 <_kill_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d07      	ldr	r5, [pc, #28]	@ (80084a4 <_kill_r+0x20>)
 8008488:	2300      	movs	r3, #0
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	f7f9 fa17 	bl	80018c4 <_kill>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	d102      	bne.n	80084a0 <_kill_r+0x1c>
 800849a:	682b      	ldr	r3, [r5, #0]
 800849c:	b103      	cbz	r3, 80084a0 <_kill_r+0x1c>
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	bf00      	nop
 80084a4:	200004c8 	.word	0x200004c8

080084a8 <_getpid_r>:
 80084a8:	f7f9 ba04 	b.w	80018b4 <_getpid>

080084ac <__swhatbuf_r>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	460c      	mov	r4, r1
 80084b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b4:	2900      	cmp	r1, #0
 80084b6:	b096      	sub	sp, #88	@ 0x58
 80084b8:	4615      	mov	r5, r2
 80084ba:	461e      	mov	r6, r3
 80084bc:	da0d      	bge.n	80084da <__swhatbuf_r+0x2e>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084c4:	f04f 0100 	mov.w	r1, #0
 80084c8:	bf14      	ite	ne
 80084ca:	2340      	movne	r3, #64	@ 0x40
 80084cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084d0:	2000      	movs	r0, #0
 80084d2:	6031      	str	r1, [r6, #0]
 80084d4:	602b      	str	r3, [r5, #0]
 80084d6:	b016      	add	sp, #88	@ 0x58
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	466a      	mov	r2, sp
 80084dc:	f000 f848 	bl	8008570 <_fstat_r>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dbec      	blt.n	80084be <__swhatbuf_r+0x12>
 80084e4:	9901      	ldr	r1, [sp, #4]
 80084e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084ee:	4259      	negs	r1, r3
 80084f0:	4159      	adcs	r1, r3
 80084f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084f6:	e7eb      	b.n	80084d0 <__swhatbuf_r+0x24>

080084f8 <__smakebuf_r>:
 80084f8:	898b      	ldrh	r3, [r1, #12]
 80084fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fc:	079d      	lsls	r5, r3, #30
 80084fe:	4606      	mov	r6, r0
 8008500:	460c      	mov	r4, r1
 8008502:	d507      	bpl.n	8008514 <__smakebuf_r+0x1c>
 8008504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	2301      	movs	r3, #1
 800850e:	6163      	str	r3, [r4, #20]
 8008510:	b003      	add	sp, #12
 8008512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008514:	ab01      	add	r3, sp, #4
 8008516:	466a      	mov	r2, sp
 8008518:	f7ff ffc8 	bl	80084ac <__swhatbuf_r>
 800851c:	9f00      	ldr	r7, [sp, #0]
 800851e:	4605      	mov	r5, r0
 8008520:	4639      	mov	r1, r7
 8008522:	4630      	mov	r0, r6
 8008524:	f7fe fc12 	bl	8006d4c <_malloc_r>
 8008528:	b948      	cbnz	r0, 800853e <__smakebuf_r+0x46>
 800852a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800852e:	059a      	lsls	r2, r3, #22
 8008530:	d4ee      	bmi.n	8008510 <__smakebuf_r+0x18>
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	f043 0302 	orr.w	r3, r3, #2
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	e7e2      	b.n	8008504 <__smakebuf_r+0xc>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	6020      	str	r0, [r4, #0]
 8008542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800854e:	b15b      	cbz	r3, 8008568 <__smakebuf_r+0x70>
 8008550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008554:	4630      	mov	r0, r6
 8008556:	f000 f81d 	bl	8008594 <_isatty_r>
 800855a:	b128      	cbz	r0, 8008568 <__smakebuf_r+0x70>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	431d      	orrs	r5, r3
 800856c:	81a5      	strh	r5, [r4, #12]
 800856e:	e7cf      	b.n	8008510 <__smakebuf_r+0x18>

08008570 <_fstat_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d07      	ldr	r5, [pc, #28]	@ (8008590 <_fstat_r+0x20>)
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	f7f9 fa01 	bl	8001984 <_fstat>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	d102      	bne.n	800858c <_fstat_r+0x1c>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	b103      	cbz	r3, 800858c <_fstat_r+0x1c>
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	bf00      	nop
 8008590:	200004c8 	.word	0x200004c8

08008594 <_isatty_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d06      	ldr	r5, [pc, #24]	@ (80085b0 <_isatty_r+0x1c>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	f7f9 fa00 	bl	80019a4 <_isatty>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_isatty_r+0x1a>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_isatty_r+0x1a>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	200004c8 	.word	0x200004c8

080085b4 <_init>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr

080085c0 <_fini>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr
