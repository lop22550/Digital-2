
Master_TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006a4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000006a4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  000006d3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000070b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aa8  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c3  00000000  00000000  00002293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ff  00000000  00000000  00002c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00003658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ad  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084a  00000000  00000000  00003aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000042eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000602  00000602  00000696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000439c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.I2C_Master_Init 000000b8  0000024e  0000024e  000002e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Master_Start 00000010  000005ea  000005ea  0000067e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.I2C_Master_Stop 00000008  000005fa  000005fa  0000068e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.I2C_Master_Write 00000030  000004ea  000004ea  0000057e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_Port 00000092  000003aa  000003aa  0000043e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_CMD 00000024  0000056a  0000056a  000005fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.initLCD8bits 0000006a  0000043c  0000043c  000004d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_Write_Char 00000024  0000058e  0000058e  00000622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_Set_Cursor 00000022  000005b2  000005b2  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.ConvertADC 000000a4  00000306  00000306  0000039a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    0000018c  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.valorI2C 00000001  00800103  00800103  000006a4  2**0
                  ALLOC
 27 .text.libgcc.div 00000028  0000051a  0000051a  000005ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.libgcc.div 00000044  000004a6  000004a6  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.div 00000028  00000542  00000542  000005d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_fini 00000002  0000060a  0000060a  0000069e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_funcs_on_exit 00000002  0000060c  0000060c  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_simulator_exit 00000002  0000060e  0000060e  000006a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.exit    00000016  000005d4  000005d4  00000668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  00000606  00000606  0000069a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
   8:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
   c:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  10:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  14:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  18:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  1c:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  20:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  24:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  28:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  2c:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  30:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  34:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  38:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  3c:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  40:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  44:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  48:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  4c:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  50:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  54:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  58:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  5c:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  60:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>
  64:	0c 94 01 03 	jmp	0x602	; 0x602 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000602 <__bad_interrupt>:
 602:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Master_Init:

0000024e <I2C_Master_Init>:


//********************
//Funcion para inicializar I2C Maestro
//********************
void I2C_Master_Init(unsigned long SCL_Clock,uint8_t Prescaler){
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	8b 01       	movw	r16, r22
 256:	9c 01       	movw	r18, r24
 258:	c4 2f       	mov	r28, r20
	DDRC &= ~((1<<DDC4)|(1<<DDC5));	//Pines de i2c como entradas
 25a:	87 b1       	in	r24, 0x07	; 7
 25c:	8f 7c       	andi	r24, 0xCF	; 207
 25e:	87 b9       	out	0x07, r24	; 7
	
	switch(Prescaler){
 260:	44 30       	cpi	r20, 0x04	; 4
 262:	79 f0       	breq	.+30     	; 0x282 <I2C_Master_Init+0x34>
 264:	18 f4       	brcc	.+6      	; 0x26c <I2C_Master_Init+0x1e>
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	31 f0       	breq	.+12     	; 0x276 <I2C_Master_Init+0x28>
 26a:	23 c0       	rjmp	.+70     	; 0x2b2 <I2C_Master_Init+0x64>
 26c:	40 31       	cpi	r20, 0x10	; 16
 26e:	91 f0       	breq	.+36     	; 0x294 <I2C_Master_Init+0x46>
 270:	40 34       	cpi	r20, 0x40	; 64
 272:	c9 f0       	breq	.+50     	; 0x2a6 <I2C_Master_Init+0x58>
 274:	1e c0       	rjmp	.+60     	; 0x2b2 <I2C_Master_Init+0x64>
		case 1:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
 276:	e9 eb       	ldi	r30, 0xB9	; 185
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	8c 7f       	andi	r24, 0xFC	; 252
 27e:	80 83       	st	Z, r24
		break;
 280:	1e c0       	rjmp	.+60     	; 0x2be <I2C_Master_Init+0x70>
		case 4:
			TWSR &= ~(1<<TWPS1);
 282:	e9 eb       	ldi	r30, 0xB9	; 185
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS0);
 28c:	80 81       	ld	r24, Z
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	80 83       	st	Z, r24
		break;
 292:	15 c0       	rjmp	.+42     	; 0x2be <I2C_Master_Init+0x70>
		case 16:
			TWSR &= ~(1<<TWPS0);
 294:	e9 eb       	ldi	r30, 0xB9	; 185
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS1);
 29e:	80 81       	ld	r24, Z
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	80 83       	st	Z, r24
		break;
 2a4:	0c c0       	rjmp	.+24     	; 0x2be <I2C_Master_Init+0x70>
		case 64:
			TWSR |= ((1<<TWPS1)|(1<<TWPS0));
 2a6:	e9 eb       	ldi	r30, 0xB9	; 185
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	83 60       	ori	r24, 0x03	; 3
 2ae:	80 83       	st	Z, r24
		break;
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <I2C_Master_Init+0x70>
		default:
		TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
 2b2:	e9 eb       	ldi	r30, 0xB9	; 185
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	8c 7f       	andi	r24, 0xFC	; 252
 2ba:	80 83       	st	Z, r24
		Prescaler = 1;
 2bc:	c1 e0       	ldi	r28, 0x01	; 1
		break;
		
	}
	TWBR = ((F_CPU/SCL_Clock)-16)/(2*Prescaler); // must be > 10 for estable operation
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	74 e2       	ldi	r23, 0x24	; 36
 2c2:	84 ef       	ldi	r24, 0xF4	; 244
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	a9 01       	movw	r20, r18
 2c8:	98 01       	movw	r18, r16
 2ca:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodsi4>
 2ce:	ca 01       	movw	r24, r20
 2d0:	b9 01       	movw	r22, r18
 2d2:	60 51       	subi	r22, 0x10	; 16
 2d4:	71 09       	sbc	r23, r1
 2d6:	81 09       	sbc	r24, r1
 2d8:	91 09       	sbc	r25, r1
 2da:	4c 2f       	mov	r20, r28
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	9a 01       	movw	r18, r20
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	03 2e       	mov	r0, r19
 2e6:	00 0c       	add	r0, r0
 2e8:	44 0b       	sbc	r20, r20
 2ea:	55 0b       	sbc	r21, r21
 2ec:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodsi4>
 2f0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 2f4:	ec eb       	ldi	r30, 0xBC	; 188
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	84 60       	ori	r24, 0x04	; 4
 2fc:	80 83       	st	Z, r24
}
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

Disassembly of section .text.I2C_Master_Start:

000005ea <I2C_Master_Start>:
//********************
//Funcion de inicio de la comunicacion I2C
//********************
void I2C_Master_Start(void){
	uint8_t estado;
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Iniciar condicion de start
 5ea:	84 ea       	ldi	r24, 0xA4	; 164
 5ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR &(1<<TWINT))); //espera a que termine la flag TWINT
 5f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5f4:	88 23       	and	r24, r24
 5f6:	e4 f7       	brge	.-8      	; 0x5f0 <I2C_Master_Start+0x6>
}
 5f8:	08 95       	ret

Disassembly of section .text.I2C_Master_Stop:

000005fa <I2C_Master_Stop>:

//********************
//Funcion de parada de la comunicacion I2C
//********************
void I2C_Master_Stop(void){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO); //inicia el envio secuencia parada stop
 5fa:	84 e9       	ldi	r24, 0x94	; 148
 5fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 600:	08 95       	ret

Disassembly of section .text.I2C_Master_Write:

000004ea <I2C_Master_Write>:
//********************
//Funcion de transmision de datos del maestro al esclavo
//********************
uint8_t I2C_Master_Write(uint8_t dato){
	uint8_t estado;
	TWDR = dato; //cargar el dato
 4ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //Inicia el envio
 4ee:	84 e8       	ldi	r24, 0x84	; 132
 4f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT))); //Espera al flag TWINT
 4f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4f8:	88 23       	and	r24, r24
 4fa:	e4 f7       	brge	.-8      	; 0x4f4 <I2C_Master_Write+0xa>
	estado = TWSR & 0xF8; //verificar estado
 4fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 500:	88 7f       	andi	r24, 0xF8	; 248
	//verificar si se transmitio una SLA + W con AFK, SLA + R con ACK, o un Dato con ACK
	if(estado == 0x18 || estado == 0x28 || estado == 0x40){
 502:	88 31       	cpi	r24, 0x18	; 24
 504:	31 f0       	breq	.+12     	; 0x512 <I2C_Master_Write+0x28>
 506:	88 32       	cpi	r24, 0x28	; 40
 508:	31 f0       	breq	.+12     	; 0x516 <I2C_Master_Write+0x2c>
 50a:	80 34       	cpi	r24, 0x40	; 64
 50c:	29 f4       	brne	.+10     	; 0x518 <I2C_Master_Write+0x2e>
		return 1;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	08 95       	ret
 516:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return estado;
	}
}
 518:	08 95       	ret

Disassembly of section .text.LCD_Port:

000003aa <LCD_Port>:
	LCD_CMD(0x0C);
}

void LCD_Shift_Left(void){
	LCD_CMD(0x01);
	LCD_CMD(0x08);
 3aa:	80 ff       	sbrs	r24, 0
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <LCD_Port+0xc>
 3ae:	9b b1       	in	r25, 0x0b	; 11
 3b0:	90 62       	ori	r25, 0x20	; 32
 3b2:	9b b9       	out	0x0b, r25	; 11
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <LCD_Port+0x12>
 3b6:	9b b1       	in	r25, 0x0b	; 11
 3b8:	9f 7d       	andi	r25, 0xDF	; 223
 3ba:	9b b9       	out	0x0b, r25	; 11
 3bc:	81 ff       	sbrs	r24, 1
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <LCD_Port+0x1e>
 3c0:	9b b1       	in	r25, 0x0b	; 11
 3c2:	90 64       	ori	r25, 0x40	; 64
 3c4:	9b b9       	out	0x0b, r25	; 11
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <LCD_Port+0x24>
 3c8:	9b b1       	in	r25, 0x0b	; 11
 3ca:	9f 7b       	andi	r25, 0xBF	; 191
 3cc:	9b b9       	out	0x0b, r25	; 11
 3ce:	82 ff       	sbrs	r24, 2
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <LCD_Port+0x30>
 3d2:	9b b1       	in	r25, 0x0b	; 11
 3d4:	90 68       	ori	r25, 0x80	; 128
 3d6:	9b b9       	out	0x0b, r25	; 11
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <LCD_Port+0x36>
 3da:	9b b1       	in	r25, 0x0b	; 11
 3dc:	9f 77       	andi	r25, 0x7F	; 127
 3de:	9b b9       	out	0x0b, r25	; 11
 3e0:	83 ff       	sbrs	r24, 3
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <LCD_Port+0x42>
 3e4:	95 b1       	in	r25, 0x05	; 5
 3e6:	91 60       	ori	r25, 0x01	; 1
 3e8:	95 b9       	out	0x05, r25	; 5
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <LCD_Port+0x48>
 3ec:	95 b1       	in	r25, 0x05	; 5
 3ee:	9e 7f       	andi	r25, 0xFE	; 254
 3f0:	95 b9       	out	0x05, r25	; 5
 3f2:	84 ff       	sbrs	r24, 4
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <LCD_Port+0x54>
 3f6:	95 b1       	in	r25, 0x05	; 5
 3f8:	92 60       	ori	r25, 0x02	; 2
 3fa:	95 b9       	out	0x05, r25	; 5
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fe:	95 b1       	in	r25, 0x05	; 5
 400:	9d 7f       	andi	r25, 0xFD	; 253
 402:	95 b9       	out	0x05, r25	; 5
 404:	85 ff       	sbrs	r24, 5
 406:	04 c0       	rjmp	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 408:	95 b1       	in	r25, 0x05	; 5
 40a:	94 60       	ori	r25, 0x04	; 4
 40c:	95 b9       	out	0x05, r25	; 5
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 410:	95 b1       	in	r25, 0x05	; 5
 412:	9b 7f       	andi	r25, 0xFB	; 251
 414:	95 b9       	out	0x05, r25	; 5
 416:	86 ff       	sbrs	r24, 6
 418:	04 c0       	rjmp	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41a:	95 b1       	in	r25, 0x05	; 5
 41c:	98 60       	ori	r25, 0x08	; 8
 41e:	95 b9       	out	0x05, r25	; 5
 420:	03 c0       	rjmp	.+6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 422:	95 b1       	in	r25, 0x05	; 5
 424:	97 7f       	andi	r25, 0xF7	; 247
 426:	95 b9       	out	0x05, r25	; 5
 428:	88 23       	and	r24, r24
 42a:	24 f4       	brge	.+8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42c:	85 b1       	in	r24, 0x05	; 5
 42e:	80 61       	ori	r24, 0x10	; 16
 430:	85 b9       	out	0x05, r24	; 5
 432:	08 95       	ret
 434:	85 b1       	in	r24, 0x05	; 5
 436:	8f 7e       	andi	r24, 0xEF	; 239
 438:	85 b9       	out	0x05, r24	; 5
 43a:	08 95       	ret

Disassembly of section .text.LCD_CMD:

0000056a <LCD_CMD>:
 56a:	9b b1       	in	r25, 0x0b	; 11
 56c:	9b 7f       	andi	r25, 0xFB	; 251
 56e:	9b b9       	out	0x0b, r25	; 11
 570:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Port>
 574:	8b b1       	in	r24, 0x0b	; 11
 576:	80 61       	ori	r24, 0x10	; 16
 578:	8b b9       	out	0x0b, r24	; 11
 57a:	8f e7       	ldi	r24, 0x7F	; 127
 57c:	9e e3       	ldi	r25, 0x3E	; 62
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCD_CMD+0x14>
 582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_CMD+0x1a>
 584:	00 00       	nop
 586:	8b b1       	in	r24, 0x0b	; 11
 588:	8f 7e       	andi	r24, 0xEF	; 239
 58a:	8b b9       	out	0x0b, r24	; 11
 58c:	08 95       	ret

Disassembly of section .text.initLCD8bits:

0000043c <initLCD8bits>:
 43c:	8a b1       	in	r24, 0x0a	; 10
 43e:	8c 6f       	ori	r24, 0xFC	; 252
 440:	8a b9       	out	0x0a, r24	; 10
 442:	8b b1       	in	r24, 0x0b	; 11
 444:	83 70       	andi	r24, 0x03	; 3
 446:	8b b9       	out	0x0b, r24	; 11
 448:	84 b1       	in	r24, 0x04	; 4
 44a:	8f 63       	ori	r24, 0x3F	; 63
 44c:	84 b9       	out	0x04, r24	; 4
 44e:	15 b8       	out	0x05, r1	; 5
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Port>
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	89 ef       	ldi	r24, 0xF9	; 249
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <initLCD8bits+0x20>
 464:	00 c0       	rjmp	.+0      	; 0x466 <initLCD8bits+0x2a>
 466:	00 00       	nop
 468:	88 e3       	ldi	r24, 0x38	; 56
 46a:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_CMD>
 46e:	87 eb       	ldi	r24, 0xB7	; 183
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <initLCD8bits+0x36>
 476:	00 c0       	rjmp	.+0      	; 0x478 <initLCD8bits+0x3c>
 478:	00 00       	nop
 47a:	8c e0       	ldi	r24, 0x0C	; 12
 47c:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_CMD>
 480:	87 eb       	ldi	r24, 0xB7	; 183
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <initLCD8bits+0x48>
 488:	00 c0       	rjmp	.+0      	; 0x48a <initLCD8bits+0x4e>
 48a:	00 00       	nop
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_CMD>
 492:	87 eb       	ldi	r24, 0xB7	; 183
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <initLCD8bits+0x5a>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <initLCD8bits+0x60>
 49c:	00 00       	nop
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_CMD>
 4a4:	08 95       	ret

Disassembly of section .text.LCD_Write_Char:

0000058e <LCD_Write_Char>:
 58e:	9b b1       	in	r25, 0x0b	; 11
 590:	94 60       	ori	r25, 0x04	; 4
 592:	9b b9       	out	0x0b, r25	; 11
 594:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Port>
 598:	8b b1       	in	r24, 0x0b	; 11
 59a:	80 61       	ori	r24, 0x10	; 16
 59c:	8b b9       	out	0x0b, r24	; 11
 59e:	8f e3       	ldi	r24, 0x3F	; 63
 5a0:	9c e9       	ldi	r25, 0x9C	; 156
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_Write_Char+0x14>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_Write_Char+0x1a>
 5a8:	00 00       	nop
 5aa:	8b b1       	in	r24, 0x0b	; 11
 5ac:	8f 7e       	andi	r24, 0xEF	; 239
 5ae:	8b b9       	out	0x0b, r24	; 11
 5b0:	08 95       	ret

Disassembly of section .text.LCD_Set_Cursor:

000005b2 <LCD_Set_Cursor>:
}

void LCD_Set_Cursor(int columna, int fila){
	int coordenada = 0;
	if (fila == 1){
 5b2:	61 30       	cpi	r22, 0x01	; 1
 5b4:	71 05       	cpc	r23, r1
 5b6:	19 f4       	brne	.+6      	; 0x5be <LCD_Set_Cursor+0xc>
		coordenada = 0x80 + columna;
 5b8:	80 58       	subi	r24, 0x80	; 128
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 c0       	rjmp	.+16     	; 0x5ce <LCD_Set_Cursor+0x1c>
	} else if (fila == 2)
 5be:	62 30       	cpi	r22, 0x02	; 2
 5c0:	71 05       	cpc	r23, r1
 5c2:	19 f4       	brne	.+6      	; 0x5ca <LCD_Set_Cursor+0x18>
	{
		coordenada = 0xC0 + columna;
 5c4:	80 54       	subi	r24, 0x40	; 64
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <LCD_Set_Cursor+0x1c>
	LCD_CMD(0x01);
	LCD_CMD(0x08);
}

void LCD_Set_Cursor(int columna, int fila){
	int coordenada = 0;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
		coordenada = 0x80 + columna;
	} else if (fila == 2)
	{
		coordenada = 0xC0 + columna;
		}
		LCD_CMD(coordenada);
 5ce:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_CMD>
 5d2:	08 95       	ret

Disassembly of section .text.ConvertADC:

00000306 <ConvertADC>:
		PORTC &= ~(1<<PORTC0);
	}
	
}

void ConvertADC(uint8_t conversionADC){
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
	uint8_t unidades, decenas, centenas;
	
	unidades = conversionADC % 10;						//ej. 156 %10 = 6
 30a:	2d ec       	ldi	r18, 0xCD	; 205
 30c:	82 9f       	mul	r24, r18
 30e:	c1 2d       	mov	r28, r1
 310:	11 24       	eor	r1, r1
 312:	c6 95       	lsr	r28
 314:	c6 95       	lsr	r28
 316:	c6 95       	lsr	r28
 318:	cc 0f       	add	r28, r28
 31a:	9c 2f       	mov	r25, r28
 31c:	99 0f       	add	r25, r25
 31e:	99 0f       	add	r25, r25
 320:	c9 0f       	add	r28, r25
 322:	38 2f       	mov	r19, r24
 324:	3c 1b       	sub	r19, r28
 326:	c3 2f       	mov	r28, r19
	conversionADC = (conversionADC - unidades)/10;		//(156-6)/10 = 150/10 = 15
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	83 1b       	sub	r24, r19
 32c:	91 09       	sbc	r25, r1
 32e:	ea e0       	ldi	r30, 0x0A	; 10
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	bf 01       	movw	r22, r30
 334:	0e 94 8d 02 	call	0x51a	; 0x51a <__divmodhi4>
	decenas = conversionADC % 10;						//15%10 = 5
 338:	62 9f       	mul	r22, r18
 33a:	d1 2d       	mov	r29, r1
 33c:	11 24       	eor	r1, r1
 33e:	d6 95       	lsr	r29
 340:	d6 95       	lsr	r29
 342:	d6 95       	lsr	r29
 344:	dd 0f       	add	r29, r29
 346:	8d 2f       	mov	r24, r29
 348:	88 0f       	add	r24, r24
 34a:	88 0f       	add	r24, r24
 34c:	d8 0f       	add	r29, r24
 34e:	86 2f       	mov	r24, r22
 350:	8d 1b       	sub	r24, r29
 352:	d8 2f       	mov	r29, r24
	conversionADC = (conversionADC - decenas)/10;		//(15-5)/10 = 1
 354:	77 27       	eor	r23, r23
 356:	cb 01       	movw	r24, r22
 358:	8d 1b       	sub	r24, r29
 35a:	91 09       	sbc	r25, r1
 35c:	bf 01       	movw	r22, r30
 35e:	0e 94 8d 02 	call	0x51a	; 0x51a <__divmodhi4>
	centenas = conversionADC % 10;						//1%10 = 1
 362:	62 9f       	mul	r22, r18
 364:	81 2d       	mov	r24, r1
 366:	11 24       	eor	r1, r1
 368:	86 95       	lsr	r24
 36a:	86 95       	lsr	r24
 36c:	86 95       	lsr	r24
 36e:	88 0f       	add	r24, r24
 370:	28 2f       	mov	r18, r24
 372:	22 0f       	add	r18, r18
 374:	22 0f       	add	r18, r18
 376:	82 0f       	add	r24, r18
 378:	68 1b       	sub	r22, r24
 37a:	86 2f       	mov	r24, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	9f ef       	ldi	r25, 0xFF	; 255
 37e:	21 ee       	ldi	r18, 0xE1	; 225
 380:	34 e0       	ldi	r19, 0x04	; 4
 382:	91 50       	subi	r25, 0x01	; 1
 384:	20 40       	sbci	r18, 0x00	; 0
 386:	30 40       	sbci	r19, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <ConvertADC+0x7c>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <ConvertADC+0x86>
 38c:	00 00       	nop
	
	_delay_ms(100);

	LCD_Write_Char(CERO + centenas);
 38e:	80 5d       	subi	r24, 0xD0	; 208
 390:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Write_Char>
	LCD_Write_Char(CERO + decenas);
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	8d 0f       	add	r24, r29
 398:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Write_Char>
	LCD_Write_Char(CERO + unidades);
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	8c 0f       	add	r24, r28
 3a0:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Write_Char>
	
	
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
void initPorts(void){
	// Salidas
	DDRC |= (1<< DDC0)|(1<< DDC1)|(1<< DDC2)|(1<< DDC3);
	DDRD |= (1<< DDD2)|(1<< DDD3)|(1<< DDD4)|(1<< DDD5);
	refreshPORT(0);
	DDRB |= (1<<DDB5);
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	60 ea       	ldi	r22, 0xA0	; 160
  c6:	76 e8       	ldi	r23, 0x86	; 134
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 27 01 	call	0x24e	; 0x24e <I2C_Master_Init>
  d0:	0e 94 1e 02 	call	0x43c	; 0x43c <initLCD8bits>
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_Set_Cursor>
  e0:	83 e5       	ldi	r24, 0x53	; 83
  e2:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Write_Char>
  e6:	81 e3       	ldi	r24, 0x31	; 49
  e8:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Write_Char>
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	87 e0       	ldi	r24, 0x07	; 7
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_Set_Cursor>
  f8:	8f e9       	ldi	r24, 0x9F	; 159
  fa:	9f e0       	ldi	r25, 0x0F	; 15
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x3a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x40>
 102:	00 00       	nop
 104:	83 e5       	ldi	r24, 0x53	; 83
 106:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Write_Char>
 10a:	82 e3       	ldi	r24, 0x32	; 50
 10c:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_Write_Char>
 110:	85 b1       	in	r24, 0x05	; 5
 112:	80 62       	ori	r24, 0x20	; 32
 114:	85 b9       	out	0x05, r24	; 5
 116:	0e 94 f5 02 	call	0x5ea	; 0x5ea <I2C_Master_Start>
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufferI2C>
 120:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_Master_Write>
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	11 f0       	breq	.+4      	; 0x130 <main+0x6e>
 12c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 130:	82 e5       	ldi	r24, 0x52	; 82
 132:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_Master_Write>
 136:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	29 e6       	ldi	r18, 0x69	; 105
 13e:	88 e1       	ldi	r24, 0x18	; 24
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x7e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x88>
 14a:	00 00       	nop
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	8f 7d       	andi	r24, 0xDF	; 223
 150:	85 b9       	out	0x05, r24	; 5
 152:	0e 94 f5 02 	call	0x5ea	; 0x5ea <I2C_Master_Start>
 156:	81 e6       	ldi	r24, 0x61	; 97
 158:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufferI2C>
 15c:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_Master_Write>
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	11 f0       	breq	.+4      	; 0x16c <main+0xaa>
 168:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	88 23       	and	r24, r24
 178:	e4 f7       	brge	.-8      	; 0x172 <main+0xb0>
 17a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 17e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_end>
 182:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_Set_Cursor>
 192:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_end>
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 83 01 	call	0x306	; 0x306 <ConvertADC>
 19c:	9f ef       	ldi	r25, 0xFF	; 255
 19e:	20 e7       	ldi	r18, 0x70	; 112
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	91 50       	subi	r25, 0x01	; 1
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0xe0>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0xea>
 1ac:	00 00       	nop
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <I2C_Master_Start>
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufferI2C>
 1be:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_Master_Write>
 1c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	11 f0       	breq	.+4      	; 0x1ce <main+0x10c>
 1ca:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 1ce:	8c e4       	ldi	r24, 0x4C	; 76
 1d0:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_Master_Write>
 1d4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	29 e6       	ldi	r18, 0x69	; 105
 1dc:	88 e1       	ldi	r24, 0x18	; 24
 1de:	91 50       	subi	r25, 0x01	; 1
 1e0:	20 40       	sbci	r18, 0x00	; 0
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x11c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x126>
 1e8:	00 00       	nop
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	8f 7d       	andi	r24, 0xDF	; 223
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <I2C_Master_Start>
 1f4:	81 e8       	ldi	r24, 0x81	; 129
 1f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufferI2C>
 1fa:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_Master_Write>
 1fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	11 f0       	breq	.+4      	; 0x20a <main+0x148>
 206:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 20a:	84 e8       	ldi	r24, 0x84	; 132
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 210:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 214:	88 23       	and	r24, r24
 216:	e4 f7       	brge	.-8      	; 0x210 <main+0x14e>
 218:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 21c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_end>
 220:	0e 94 fd 02 	call	0x5fa	; 0x5fa <I2C_Master_Stop>
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_Set_Cursor>
 230:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_end>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 83 01 	call	0x306	; 0x306 <ConvertADC>
 23a:	9f ef       	ldi	r25, 0xFF	; 255
 23c:	20 e7       	ldi	r18, 0x70	; 112
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	91 50       	subi	r25, 0x01	; 1
 242:	20 40       	sbci	r18, 0x00	; 0
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x17e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x188>
 24a:	00 00       	nop
 24c:	61 cf       	rjmp	.-318    	; 0x110 <main+0x4e>

Disassembly of section .text.libgcc.div:

0000051a <__divmodhi4>:
 51a:	97 fb       	bst	r25, 7
 51c:	07 2e       	mov	r0, r23
 51e:	16 f4       	brtc	.+4      	; 0x524 <__divmodhi4+0xa>
 520:	00 94       	com	r0
 522:	07 d0       	rcall	.+14     	; 0x532 <__divmodhi4_neg1>
 524:	77 fd       	sbrc	r23, 7
 526:	09 d0       	rcall	.+18     	; 0x53a <__divmodhi4_neg2>
 528:	0e 94 a1 02 	call	0x542	; 0x542 <__udivmodhi4>
 52c:	07 fc       	sbrc	r0, 7
 52e:	05 d0       	rcall	.+10     	; 0x53a <__divmodhi4_neg2>
 530:	3e f4       	brtc	.+14     	; 0x540 <__divmodhi4_exit>

00000532 <__divmodhi4_neg1>:
 532:	90 95       	com	r25
 534:	81 95       	neg	r24
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	08 95       	ret

0000053a <__divmodhi4_neg2>:
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255

00000540 <__divmodhi4_exit>:
 540:	08 95       	ret

Disassembly of section .text.libgcc.div:

000004a6 <__udivmodsi4>:
 4a6:	a1 e2       	ldi	r26, 0x21	; 33
 4a8:	1a 2e       	mov	r1, r26
 4aa:	aa 1b       	sub	r26, r26
 4ac:	bb 1b       	sub	r27, r27
 4ae:	fd 01       	movw	r30, r26
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <__udivmodsi4_ep>

000004b2 <__udivmodsi4_loop>:
 4b2:	aa 1f       	adc	r26, r26
 4b4:	bb 1f       	adc	r27, r27
 4b6:	ee 1f       	adc	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	a2 17       	cp	r26, r18
 4bc:	b3 07       	cpc	r27, r19
 4be:	e4 07       	cpc	r30, r20
 4c0:	f5 07       	cpc	r31, r21
 4c2:	20 f0       	brcs	.+8      	; 0x4cc <__udivmodsi4_ep>
 4c4:	a2 1b       	sub	r26, r18
 4c6:	b3 0b       	sbc	r27, r19
 4c8:	e4 0b       	sbc	r30, r20
 4ca:	f5 0b       	sbc	r31, r21

000004cc <__udivmodsi4_ep>:
 4cc:	66 1f       	adc	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	1a 94       	dec	r1
 4d6:	69 f7       	brne	.-38     	; 0x4b2 <__udivmodsi4_loop>
 4d8:	60 95       	com	r22
 4da:	70 95       	com	r23
 4dc:	80 95       	com	r24
 4de:	90 95       	com	r25
 4e0:	9b 01       	movw	r18, r22
 4e2:	ac 01       	movw	r20, r24
 4e4:	bd 01       	movw	r22, r26
 4e6:	cf 01       	movw	r24, r30
 4e8:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000542 <__udivmodhi4>:
 542:	aa 1b       	sub	r26, r26
 544:	bb 1b       	sub	r27, r27
 546:	51 e1       	ldi	r21, 0x11	; 17
 548:	07 c0       	rjmp	.+14     	; 0x558 <__udivmodhi4_ep>

0000054a <__udivmodhi4_loop>:
 54a:	aa 1f       	adc	r26, r26
 54c:	bb 1f       	adc	r27, r27
 54e:	a6 17       	cp	r26, r22
 550:	b7 07       	cpc	r27, r23
 552:	10 f0       	brcs	.+4      	; 0x558 <__udivmodhi4_ep>
 554:	a6 1b       	sub	r26, r22
 556:	b7 0b       	sbc	r27, r23

00000558 <__udivmodhi4_ep>:
 558:	88 1f       	adc	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	5a 95       	dec	r21
 55e:	a9 f7       	brne	.-22     	; 0x54a <__udivmodhi4_loop>
 560:	80 95       	com	r24
 562:	90 95       	com	r25
 564:	bc 01       	movw	r22, r24
 566:	cd 01       	movw	r24, r26
 568:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000060a <_fini>:
 60a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000060c <__funcs_on_exit>:
 60c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000060e <__simulator_exit>:
 60e:	08 95       	ret

Disassembly of section .text.exit:

000005d4 <exit>:
 5d4:	ec 01       	movw	r28, r24
 5d6:	0e 94 06 03 	call	0x60c	; 0x60c <__funcs_on_exit>
 5da:	0e 94 05 03 	call	0x60a	; 0x60a <_fini>
 5de:	ce 01       	movw	r24, r28
 5e0:	0e 94 07 03 	call	0x60e	; 0x60e <__simulator_exit>
 5e4:	ce 01       	movw	r24, r28
 5e6:	0e 94 03 03 	call	0x606	; 0x606 <_Exit>

Disassembly of section .text._Exit:

00000606 <_Exit>:
 606:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
