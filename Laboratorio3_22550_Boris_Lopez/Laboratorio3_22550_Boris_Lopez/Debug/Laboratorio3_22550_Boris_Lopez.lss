
Laboratorio3_22550_Boris_Lopez.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000045c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  0000048b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000157a  00000000  00000000  0000055f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ab  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000720  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021f  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040d  00000000  00000000  00002e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003b6  000003b6  0000044a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initADC 00000046  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.refreshPORT 00000092  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.initUART9600 00000046  000002d8  000002d8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000066  0000022c  0000022c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_21 00000038  0000031e  0000031e  000003b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_17 0000001e  00000376  00000376  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_18 00000020  00000356  00000356  000003ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.spiValor 00000001  00800100  00800100  0000045c  2**0
                  ALLOC
 22 .bss.bufferRX 00000001  00800101  00800101  0000045c  2**0
                  ALLOC
 23 .bss.valor_adc 00000001  00800102  00800102  0000045c  2**0
                  ALLOC
 24 .text.spiInit 000000ca  000000d0  000000d0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.spiWrite 00000004  000003ba  000003ba  0000044e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.libgcc  0000000c  000003aa  000003aa  0000043e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  000003c2  000003c2  00000456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  000003c4  000003c4  00000458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  000003c6  000003c6  0000045a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  00000394  00000394  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  000003be  000003be  00000452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
   8:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
   c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  14:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  18:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  1c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  20:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  28:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  2c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  30:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  34:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  38:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  3c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  40:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  44:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_17>
  48:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_18>
  4c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  50:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  54:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_21>
  58:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  5c:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  60:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  64:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__bad_interrupt>
  68:	80 00       	.word	0x0080	; ????
  6a:	87 00       	.word	0x0087	; ????
  6c:	8e 00       	.word	0x008e	; ????
  6e:	98 00       	.word	0x0098	; ????
  70:	a2 00       	.word	0x00a2	; ????
  72:	ac 00       	.word	0x00ac	; ????
  74:	b6 00       	.word	0x00b6	; ????

00000076 <.dinit>:
  76:	01 00       	.word	0x0001	; ????
  78:	01 03       	mulsu	r16, r17
  7a:	80 00       	.word	0x0080	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	e6 e7       	ldi	r30, 0x76	; 118
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	17 c0       	rjmp	.+46     	; 0xbe <__do_clear_bss+0x8>
  90:	b5 91       	lpm	r27, Z+
  92:	a5 91       	lpm	r26, Z+
  94:	35 91       	lpm	r19, Z+
  96:	25 91       	lpm	r18, Z+
  98:	05 91       	lpm	r16, Z+
  9a:	07 fd       	sbrc	r16, 7
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <__do_clear_bss>
  9e:	95 91       	lpm	r25, Z+
  a0:	85 91       	lpm	r24, Z+
  a2:	ef 01       	movw	r28, r30
  a4:	f9 2f       	mov	r31, r25
  a6:	e8 2f       	mov	r30, r24
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x20>
  b2:	fe 01       	movw	r30, r28
  b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_clear_bss+0x8>

000000b6 <__do_clear_bss>:
  b6:	1d 92       	st	X+, r1
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__do_clear_bss>
  be:	eb 37       	cpi	r30, 0x7B	; 123
  c0:	f4 07       	cpc	r31, r20
  c2:	31 f7       	brne	.-52     	; 0x90 <__do_copy_data+0x8>
  c4:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  c8:	0c 94 ca 01 	jmp	0x394	; 0x394 <exit>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>

Disassembly of section .text:

000003b6 <__bad_interrupt>:
 3b6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initADC:

00000292 <initADC>:
 #include <avr/io.h>


void initADC (void){
	//Configuración del ADC
	ADMUX |= 0x05; //Selectiona el puerto ADC5
 292:	ec e7       	ldi	r30, 0x7C	; 124
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	85 60       	ori	r24, 0x05	; 5
 29a:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR); //AJUSTE A LA IZQUIERDA (SOLO SE USA ADCH)
 29c:	80 81       	ld	r24, Z
 29e:	80 62       	ori	r24, 0x20	; 32
 2a0:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Selecciona un voltaje interno de referencia de 5V.
 2a2:	80 81       	ld	r24, Z
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 2a8:	80 81       	ld	r24, Z
 2aa:	8f 77       	andi	r24, 0x7F	; 127
 2ac:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 2ae:	ea e7       	ldi	r30, 0x7A	; 122
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	10 82       	st	Z, r1
	//SE ENCIENDE ADC
	ADCSRA |= (1<<ADEN);
 2b4:	80 81       	ld	r24, Z
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	80 83       	st	Z, r24
	
	// SE HABILITA LA INTERRUPCIÓN DEL ADC
	ADCSRA |= (1<<ADIE);
 2ba:	80 81       	ld	r24, Z
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	80 83       	st	Z, r24
	
	//PRESCALER DE 128 (125kHZ)
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2c0:	80 81       	ld	r24, Z
 2c2:	87 60       	ori	r24, 0x07	; 7
 2c4:	80 83       	st	Z, r24
	ADCSRA &= ~((1<<ADPS1)|(1<<ADPS0));
 2c6:	80 81       	ld	r24, Z
 2c8:	8c 7f       	andi	r24, 0xFC	; 252
 2ca:	80 83       	st	Z, r24
	//Deshabilita la entrada digital PC5
	DIDR0 |= (1<<ADC5D);
 2cc:	ee e7       	ldi	r30, 0x7E	; 126
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	80 62       	ori	r24, 0x20	; 32
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret

Disassembly of section .text.refreshPORT:

0000019a <refreshPORT>:
	writeUART(CERO + unidades);
	
	
	writeUART('\n');
	//writeUART('\r');
}
 19a:	88 23       	and	r24, r24
 19c:	24 f4       	brge	.+8      	; 0x1a6 <refreshPORT+0xc>
 19e:	95 b1       	in	r25, 0x05	; 5
 1a0:	92 60       	ori	r25, 0x02	; 2
 1a2:	95 b9       	out	0x05, r25	; 5
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <refreshPORT+0x12>
 1a6:	95 b1       	in	r25, 0x05	; 5
 1a8:	9d 7f       	andi	r25, 0xFD	; 253
 1aa:	95 b9       	out	0x05, r25	; 5
 1ac:	86 ff       	sbrs	r24, 6
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <refreshPORT+0x1e>
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	91 60       	ori	r25, 0x01	; 1
 1b4:	95 b9       	out	0x05, r25	; 5
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <refreshPORT+0x24>
 1b8:	95 b1       	in	r25, 0x05	; 5
 1ba:	9e 7f       	andi	r25, 0xFE	; 254
 1bc:	95 b9       	out	0x05, r25	; 5
 1be:	85 ff       	sbrs	r24, 5
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <refreshPORT+0x30>
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	90 68       	ori	r25, 0x80	; 128
 1c6:	9b b9       	out	0x0b, r25	; 11
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <refreshPORT+0x36>
 1ca:	9b b1       	in	r25, 0x0b	; 11
 1cc:	9f 77       	andi	r25, 0x7F	; 127
 1ce:	9b b9       	out	0x0b, r25	; 11
 1d0:	84 ff       	sbrs	r24, 4
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <refreshPORT+0x42>
 1d4:	9b b1       	in	r25, 0x0b	; 11
 1d6:	90 64       	ori	r25, 0x40	; 64
 1d8:	9b b9       	out	0x0b, r25	; 11
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <refreshPORT+0x48>
 1dc:	9b b1       	in	r25, 0x0b	; 11
 1de:	9f 7b       	andi	r25, 0xBF	; 191
 1e0:	9b b9       	out	0x0b, r25	; 11
 1e2:	83 ff       	sbrs	r24, 3
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <refreshPORT+0x54>
 1e6:	9b b1       	in	r25, 0x0b	; 11
 1e8:	90 62       	ori	r25, 0x20	; 32
 1ea:	9b b9       	out	0x0b, r25	; 11
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <refreshPORT+0x5a>
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	9f 7d       	andi	r25, 0xDF	; 223
 1f2:	9b b9       	out	0x0b, r25	; 11
 1f4:	82 ff       	sbrs	r24, 2
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <refreshPORT+0x66>
 1f8:	9b b1       	in	r25, 0x0b	; 11
 1fa:	90 61       	ori	r25, 0x10	; 16
 1fc:	9b b9       	out	0x0b, r25	; 11
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <refreshPORT+0x6c>
 200:	9b b1       	in	r25, 0x0b	; 11
 202:	9f 7e       	andi	r25, 0xEF	; 239
 204:	9b b9       	out	0x0b, r25	; 11
 206:	81 ff       	sbrs	r24, 1
 208:	04 c0       	rjmp	.+8      	; 0x212 <refreshPORT+0x78>
 20a:	9b b1       	in	r25, 0x0b	; 11
 20c:	98 60       	ori	r25, 0x08	; 8
 20e:	9b b9       	out	0x0b, r25	; 11
 210:	03 c0       	rjmp	.+6      	; 0x218 <refreshPORT+0x7e>
 212:	9b b1       	in	r25, 0x0b	; 11
 214:	97 7f       	andi	r25, 0xF7	; 247
 216:	9b b9       	out	0x0b, r25	; 11
 218:	80 ff       	sbrs	r24, 0
 21a:	04 c0       	rjmp	.+8      	; 0x224 <refreshPORT+0x8a>
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	8b b9       	out	0x0b, r24	; 11
 222:	08 95       	ret
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	8b b9       	out	0x0b, r24	; 11
 22a:	08 95       	ret

Disassembly of section .text.initUART9600:

000002d8 <initUART9600>:
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	8a b1       	in	r24, 0x0a	; 10
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	8a b9       	out	0x0a, r24	; 10
 2e2:	8a b1       	in	r24, 0x0a	; 10
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	8a b9       	out	0x0a, r24	; 10
 2e8:	c0 ec       	ldi	r28, 0xC0	; 192
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 2ec:	18 82       	st	Y, r1
 2ee:	a1 ec       	ldi	r26, 0xC1	; 193
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	1c 92       	st	X, r1
 2f4:	e2 ec       	ldi	r30, 0xC2	; 194
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	10 82       	st	Z, r1
 2fa:	88 81       	ld	r24, Y
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	88 83       	st	Y, r24
 300:	8c 91       	ld	r24, X
 302:	88 69       	ori	r24, 0x98	; 152
 304:	8c 93       	st	X, r24
 306:	80 81       	ld	r24, Z
 308:	86 60       	ori	r24, 0x06	; 6
 30a:	80 83       	st	Z, r24
 30c:	8f ec       	ldi	r24, 0xCF	; 207
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 314:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

Disassembly of section .text.main:

0000022c <main>:
 22c:	f8 94       	cli
 22e:	0e 94 49 01 	call	0x292	; 0x292 <initADC>
 232:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <initUART9600>
 236:	8a b1       	in	r24, 0x0a	; 10
 238:	8c 6f       	ori	r24, 0xFC	; 252
 23a:	8a b9       	out	0x0a, r24	; 10
 23c:	1b b8       	out	0x0b, r1	; 11
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	83 60       	ori	r24, 0x03	; 3
 242:	84 b9       	out	0x04, r24	; 4
 244:	85 b1       	in	r24, 0x05	; 5
 246:	8c 7f       	andi	r24, 0xFC	; 252
 248:	85 b9       	out	0x05, r24	; 5
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	83 e5       	ldi	r24, 0x53	; 83
 252:	0e 94 68 00 	call	0xd0	; 0xd0 <__data_load_end>
 256:	8c b5       	in	r24, 0x2c	; 44
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8c bd       	out	0x2c, r24	; 44
 25c:	78 94       	sei
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 64       	ori	r24, 0x40	; 64
 266:	80 83       	st	Z, r24
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufferRX>
 272:	0e 94 dd 01 	call	0x3ba	; 0x3ba <spiWrite>
 276:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bufferRX>
 27a:	0e 94 cd 00 	call	0x19a	; 0x19a <refreshPORT>
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	81 ee       	ldi	r24, 0xE1	; 225
 282:	94 e0       	ldi	r25, 0x04	; 4
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x58>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x62>
 28e:	00 00       	nop
 290:	eb cf       	rjmp	.-42     	; 0x268 <main+0x3c>

Disassembly of section .text.__vector_21:

0000031e <__vector_21>:


ISR (ADC_vect){
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	
	valor_adc = ADCH; 
 32e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 332:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valor_adc>
	ADCSRA |= (1<<ADIF);
 336:	ea e7       	ldi	r30, 0x7A	; 122
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 340:	80 81       	ld	r24, Z
 342:	80 64       	ori	r24, 0x40	; 64
 344:	80 83       	st	Z, r24
}
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	8f 91       	pop	r24
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

Disassembly of section .text.__vector_17:

00000376 <__vector_17>:


ISR (SPI_STC_vect){
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	8f 93       	push	r24
	spiValor = SPDR;
 382:	8e b5       	in	r24, 0x2e	; 46
 384:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

Disassembly of section .text.__vector_18:

00000356 <__vector_18>:


ISR (USART_RX_vect){
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	8f 93       	push	r24
	bufferRX = UDR0;
 362:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 366:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bufferRX>

 36a:	8f 91       	pop	r24
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

Disassembly of section .text.spiInit:

000000d0 <spiInit>:


#include "SPI.h"


void spiInit(Spi_Type sType, Spi_Data_Order sDataOrder, Spi_Clock_Polarity sClockPolarity, Spi_Clock_Phase sClockPhase){
  d0:	e8 2f       	mov	r30, r24
	//PB2: SS
	//PB3: MOSI
	//PB4: MISO
	//PB5: SCK
	
	if(sType & (1<<MSTR)) //if Master Mode
  d2:	84 ff       	sbrs	r24, 4
  d4:	52 c0       	rjmp	.+164    	; 0x17a <spiInit+0xaa>
	{
		DDRB |= ((1<<DDB3)|(1<<DDB5)|(1<<DDB2)); //MOSI, SCK, Negado_SS
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	8c 62       	ori	r24, 0x2C	; 44
  da:	84 b9       	out	0x04, r24	; 4
		//DDRB |= (1<<DDB3)|(1<<DDB5)|(1<<DDB2);   no estoy seguro si lo puse bien
		DDRB &= ~(1<<DDB4);  //MISO
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8f 7e       	andi	r24, 0xEF	; 239
  e0:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1<<MSTR);   //Master
  e2:	8c b5       	in	r24, 0x2c	; 44
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	8c bd       	out	0x2c, r24	; 44
		
		uint8_t temp = sType & 0b00000111;
  e8:	e7 70       	andi	r30, 0x07	; 7
		switch(temp){
  ea:	8e 2f       	mov	r24, r30
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	87 30       	cpi	r24, 0x07	; 7
  f0:	91 05       	cpc	r25, r1
  f2:	08 f0       	brcs	.+2      	; 0xf6 <spiInit+0x26>
  f4:	4b c0       	rjmp	.+150    	; 0x18c <spiInit+0xbc>
  f6:	fc 01       	movw	r30, r24
  f8:	ec 5c       	subi	r30, 0xCC	; 204
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__tablejump2__>
			case 0: //2
			    SPCR &= ~((1<<SPR1)|(1<<SPR0));
 100:	8c b5       	in	r24, 0x2c	; 44
 102:	8c 7f       	andi	r24, 0xFC	; 252
 104:	8c bd       	out	0x2c, r24	; 44
			    SPSR |= (1<<SPI2X);
 106:	8d b5       	in	r24, 0x2d	; 45
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	8d bd       	out	0x2d, r24	; 45
			break;
 10c:	3f c0       	rjmp	.+126    	; 0x18c <spiInit+0xbc>
			case 1: //4
			    SPCR &= ~((1<<SPR1)|(1<<SPR0));
 10e:	8c b5       	in	r24, 0x2c	; 44
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	8c bd       	out	0x2c, r24	; 44
				SPSR &= ~(1<<SPI2X);
 114:	8d b5       	in	r24, 0x2d	; 45
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8d bd       	out	0x2d, r24	; 45
			break;
 11a:	38 c0       	rjmp	.+112    	; 0x18c <spiInit+0xbc>
			case 2: //8
			   SPCR |= (1<<SPR0);
 11c:	8c b5       	in	r24, 0x2c	; 44
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	8c bd       	out	0x2c, r24	; 44
			   SPCR &= ~(1<<SPR1);
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	8c bd       	out	0x2c, r24	; 44
			   SPSR |= (1<<SPI2X);
 128:	8d b5       	in	r24, 0x2d	; 45
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	8d bd       	out	0x2d, r24	; 45
			break;
 12e:	2e c0       	rjmp	.+92     	; 0x18c <spiInit+0xbc>
			case 3: //16
			   SPCR |= (1<<SPR0);
 130:	8c b5       	in	r24, 0x2c	; 44
 132:	81 60       	ori	r24, 0x01	; 1
 134:	8c bd       	out	0x2c, r24	; 44
			   SPCR &= ~(1<<SPR1);
 136:	8c b5       	in	r24, 0x2c	; 44
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	8c bd       	out	0x2c, r24	; 44
			   SPSR &= ~(1<<SPI2X);
 13c:	8d b5       	in	r24, 0x2d	; 45
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	8d bd       	out	0x2d, r24	; 45
			break;
 142:	24 c0       	rjmp	.+72     	; 0x18c <spiInit+0xbc>
			case 4:  //DIV32
			   SPCR &= ~(1<<SPR0);
 144:	8c b5       	in	r24, 0x2c	; 44
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	8c bd       	out	0x2c, r24	; 44
			   SPCR |= (1<<SPR1);
 14a:	8c b5       	in	r24, 0x2c	; 44
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	8c bd       	out	0x2c, r24	; 44
			   SPSR |= (1<<SPI2X);
 150:	8d b5       	in	r24, 0x2d	; 45
 152:	81 60       	ori	r24, 0x01	; 1
 154:	8d bd       	out	0x2d, r24	; 45
			break;
 156:	1a c0       	rjmp	.+52     	; 0x18c <spiInit+0xbc>
			case 5:  //DIV64
			   SPCR &= ~(1<<SPR0);
 158:	8c b5       	in	r24, 0x2c	; 44
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	8c bd       	out	0x2c, r24	; 44
			   SPCR |= (1<<SPR1);
 15e:	8c b5       	in	r24, 0x2c	; 44
 160:	82 60       	ori	r24, 0x02	; 2
 162:	8c bd       	out	0x2c, r24	; 44
			   SPSR &= ~(1<<SPI2X);
 164:	8d b5       	in	r24, 0x2d	; 45
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	8d bd       	out	0x2d, r24	; 45
			break;
 16a:	10 c0       	rjmp	.+32     	; 0x18c <spiInit+0xbc>
			case 6:  //DIV32
			   SPCR |= ((1<<SPR0)|(1<<SPR1));
 16c:	8c b5       	in	r24, 0x2c	; 44
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	8c bd       	out	0x2c, r24	; 44
			   SPSR &= ~(1<<SPI2X);
 172:	8d b5       	in	r24, 0x2d	; 45
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	8d bd       	out	0x2d, r24	; 45
			break;
 178:	09 c0       	rjmp	.+18     	; 0x18c <spiInit+0xbc>
		}
		
	}
	else {
		DDRB |= (1<<DDB4);  //MISO
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	80 61       	ori	r24, 0x10	; 16
 17e:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~((1<<DDB3)|(1<<DDB5)|(1<<DDB2)); //MOSI, SCK, SS
 180:	84 b1       	in	r24, 0x04	; 4
 182:	83 7d       	andi	r24, 0xD3	; 211
 184:	84 b9       	out	0x04, r24	; 4
		SPCR &= ~(1<<MSTR); //Slave
 186:	8c b5       	in	r24, 0x2c	; 44
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	8c bd       	out	0x2c, r24	; 44
	}
	/*Enable SPI, Data Order, Clock Polarity, Clock Phase */
	SPCR |= (1<<SPE)|sDataOrder|sClockPolarity|sClockPhase;
 18c:	8c b5       	in	r24, 0x2c	; 44
 18e:	46 2b       	or	r20, r22
 190:	24 2b       	or	r18, r20
 192:	28 2b       	or	r18, r24
 194:	20 64       	ori	r18, 0x40	; 64
 196:	2c bd       	out	0x2c, r18	; 44
 198:	08 95       	ret

Disassembly of section .text.spiWrite:

000003ba <spiWrite>:
{
	while (!(SPSR & (1<<SPIF)));  //Wait for Data Receive complete
}

void spiWrite (uint8_t dat){  //Write data to SPI bus
	SPDR = dat;
 3ba:	8e bd       	out	0x2e, r24	; 46
 3bc:	08 95       	ret

Disassembly of section .text.libgcc:

000003aa <__tablejump2__>:
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	05 90       	lpm	r0, Z+
 3b0:	f4 91       	lpm	r31, Z
 3b2:	e0 2d       	mov	r30, r0
 3b4:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000003c2 <_fini>:
 3c2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003c4 <__funcs_on_exit>:
 3c4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003c6 <__simulator_exit>:
 3c6:	08 95       	ret

Disassembly of section .text.exit:

00000394 <exit>:
 394:	ec 01       	movw	r28, r24
 396:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__funcs_on_exit>
 39a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_fini>
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__simulator_exit>
 3a4:	ce 01       	movw	r24, r28
 3a6:	0e 94 df 01 	call	0x3be	; 0x3be <_Exit>

Disassembly of section .text._Exit:

000003be <_Exit>:
 3be:	0e 94 66 00 	call	0xcc	; 0xcc <_exit>
