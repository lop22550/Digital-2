
Proyecto_Parqueos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080049fc  080049fc  000059fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a4c  08004a4c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a54  08004a54  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a54  08004a54  00005a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a58  08004a58  00005a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a5c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08004a68  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08004a68  000060d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b969  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2a  00000000  00000000  000119a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  000134d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000802  00000000  00000000  00013f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002137b  00000000  00000000  00014702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ca  00000000  00000000  00035a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caa61  00000000  00000000  00043447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010dea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a70  00000000  00000000  0010deec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080049e4 	.word	0x080049e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080049e4 	.word	0x080049e4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <DisplayNumber>:
    {GPIOC, G_Pin}
};

// Función para mostrar número (0-8) en el display de 7 segmentos
// Encendiendo segmento por segmento de forma manual con retardo
void DisplayNumber(uint8_t number) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
    // Apagar todos los segmentos antes de mostrar un nuevo número
    for (int i = 0; i < 7; ++i) {
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00f      	b.n	8000560 <DisplayNumber+0x30>
        HAL_GPIO_WritePin(segment_pins[i].port, segment_pins[i].pin, GPIO_PIN_RESET);
 8000540:	4a96      	ldr	r2, [pc, #600]	@ (800079c <DisplayNumber+0x26c>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000548:	4a94      	ldr	r2, [pc, #592]	@ (800079c <DisplayNumber+0x26c>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	4413      	add	r3, r2
 8000550:	889b      	ldrh	r3, [r3, #4]
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	f001 f8af 	bl	80016b8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 7; ++i) {
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b06      	cmp	r3, #6
 8000564:	ddec      	ble.n	8000540 <DisplayNumber+0x10>
    }

    // Encender manualmente los segmentos requeridos para el número
    // Se incluye un pequeño retardo entre cada segmento encendido
    switch (number) {
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b08      	cmp	r3, #8
 800056a:	f200 8111 	bhi.w	8000790 <DisplayNumber+0x260>
 800056e:	a201      	add	r2, pc, #4	@ (adr r2, 8000574 <DisplayNumber+0x44>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	08000599 	.word	0x08000599
 8000578:	080005df 	.word	0x080005df
 800057c:	080005f9 	.word	0x080005f9
 8000580:	08000633 	.word	0x08000633
 8000584:	0800066f 	.word	0x0800066f
 8000588:	0800069d 	.word	0x0800069d
 800058c:	080006d7 	.word	0x080006d7
 8000590:	0800071b 	.word	0x0800071b
 8000594:	08000741 	.word	0x08000741
        case 0:
            HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059e:	4880      	ldr	r0, [pc, #512]	@ (80007a0 <DisplayNumber+0x270>)
 80005a0:	f001 f88a 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005aa:	487d      	ldr	r0, [pc, #500]	@ (80007a0 <DisplayNumber+0x270>)
 80005ac:	f001 f884 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005b6:	487b      	ldr	r0, [pc, #492]	@ (80007a4 <DisplayNumber+0x274>)
 80005b8:	f001 f87e 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c2:	4878      	ldr	r0, [pc, #480]	@ (80007a4 <DisplayNumber+0x274>)
 80005c4:	f001 f878 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2140      	movs	r1, #64	@ 0x40
 80005cc:	4875      	ldr	r0, [pc, #468]	@ (80007a4 <DisplayNumber+0x274>)
 80005ce:	f001 f873 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, F_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2120      	movs	r1, #32
 80005d6:	4872      	ldr	r0, [pc, #456]	@ (80007a0 <DisplayNumber+0x270>)
 80005d8:	f001 f86e 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 80005dc:	e0d9      	b.n	8000792 <DisplayNumber+0x262>
        case 1:
            HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e4:	486e      	ldr	r0, [pc, #440]	@ (80007a0 <DisplayNumber+0x270>)
 80005e6:	f001 f867 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f0:	486c      	ldr	r0, [pc, #432]	@ (80007a4 <DisplayNumber+0x274>)
 80005f2:	f001 f861 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 80005f6:	e0cc      	b.n	8000792 <DisplayNumber+0x262>
        case 2:
            HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fe:	4868      	ldr	r0, [pc, #416]	@ (80007a0 <DisplayNumber+0x270>)
 8000600:	f001 f85a 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800060a:	4865      	ldr	r0, [pc, #404]	@ (80007a0 <DisplayNumber+0x270>)
 800060c:	f001 f854 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, G_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2140      	movs	r1, #64	@ 0x40
 8000614:	4862      	ldr	r0, [pc, #392]	@ (80007a0 <DisplayNumber+0x270>)
 8000616:	f001 f84f 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2140      	movs	r1, #64	@ 0x40
 800061e:	4861      	ldr	r0, [pc, #388]	@ (80007a4 <DisplayNumber+0x274>)
 8000620:	f001 f84a 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800062a:	485e      	ldr	r0, [pc, #376]	@ (80007a4 <DisplayNumber+0x274>)
 800062c:	f001 f844 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 8000630:	e0af      	b.n	8000792 <DisplayNumber+0x262>
        case 3:
            HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000638:	4859      	ldr	r0, [pc, #356]	@ (80007a0 <DisplayNumber+0x270>)
 800063a:	f001 f83d 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000644:	4856      	ldr	r0, [pc, #344]	@ (80007a0 <DisplayNumber+0x270>)
 8000646:	f001 f837 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, G_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	4854      	ldr	r0, [pc, #336]	@ (80007a0 <DisplayNumber+0x270>)
 8000650:	f001 f832 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800065a:	4852      	ldr	r0, [pc, #328]	@ (80007a4 <DisplayNumber+0x274>)
 800065c:	f001 f82c 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000666:	484f      	ldr	r0, [pc, #316]	@ (80007a4 <DisplayNumber+0x274>)
 8000668:	f001 f826 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 800066c:	e091      	b.n	8000792 <DisplayNumber+0x262>
        case 4:
            HAL_GPIO_WritePin(GPIOC, F_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2120      	movs	r1, #32
 8000672:	484b      	ldr	r0, [pc, #300]	@ (80007a0 <DisplayNumber+0x270>)
 8000674:	f001 f820 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, G_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	@ 0x40
 800067c:	4848      	ldr	r0, [pc, #288]	@ (80007a0 <DisplayNumber+0x270>)
 800067e:	f001 f81b 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000688:	4845      	ldr	r0, [pc, #276]	@ (80007a0 <DisplayNumber+0x270>)
 800068a:	f001 f815 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000694:	4843      	ldr	r0, [pc, #268]	@ (80007a4 <DisplayNumber+0x274>)
 8000696:	f001 f80f 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 800069a:	e07a      	b.n	8000792 <DisplayNumber+0x262>
        case 5:
            HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a2:	483f      	ldr	r0, [pc, #252]	@ (80007a0 <DisplayNumber+0x270>)
 80006a4:	f001 f808 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, F_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2120      	movs	r1, #32
 80006ac:	483c      	ldr	r0, [pc, #240]	@ (80007a0 <DisplayNumber+0x270>)
 80006ae:	f001 f803 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, G_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2140      	movs	r1, #64	@ 0x40
 80006b6:	483a      	ldr	r0, [pc, #232]	@ (80007a0 <DisplayNumber+0x270>)
 80006b8:	f000 fffe 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c2:	4838      	ldr	r0, [pc, #224]	@ (80007a4 <DisplayNumber+0x274>)
 80006c4:	f000 fff8 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ce:	4835      	ldr	r0, [pc, #212]	@ (80007a4 <DisplayNumber+0x274>)
 80006d0:	f000 fff2 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 80006d4:	e05d      	b.n	8000792 <DisplayNumber+0x262>
        case 6:
            HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006dc:	4830      	ldr	r0, [pc, #192]	@ (80007a0 <DisplayNumber+0x270>)
 80006de:	f000 ffeb 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, F_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	482e      	ldr	r0, [pc, #184]	@ (80007a0 <DisplayNumber+0x270>)
 80006e8:	f000 ffe6 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, G_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	482b      	ldr	r0, [pc, #172]	@ (80007a0 <DisplayNumber+0x270>)
 80006f2:	f000 ffe1 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2140      	movs	r1, #64	@ 0x40
 80006fa:	482a      	ldr	r0, [pc, #168]	@ (80007a4 <DisplayNumber+0x274>)
 80006fc:	f000 ffdc 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000706:	4827      	ldr	r0, [pc, #156]	@ (80007a4 <DisplayNumber+0x274>)
 8000708:	f000 ffd6 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000712:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <DisplayNumber+0x274>)
 8000714:	f000 ffd0 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 8000718:	e03b      	b.n	8000792 <DisplayNumber+0x262>
        case 7:
            HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000720:	481f      	ldr	r0, [pc, #124]	@ (80007a0 <DisplayNumber+0x270>)
 8000722:	f000 ffc9 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072c:	481c      	ldr	r0, [pc, #112]	@ (80007a0 <DisplayNumber+0x270>)
 800072e:	f000 ffc3 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000738:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <DisplayNumber+0x274>)
 800073a:	f000 ffbd 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 800073e:	e028      	b.n	8000792 <DisplayNumber+0x262>
        case 8:
            HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000746:	4816      	ldr	r0, [pc, #88]	@ (80007a0 <DisplayNumber+0x270>)
 8000748:	f000 ffb6 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000752:	4813      	ldr	r0, [pc, #76]	@ (80007a0 <DisplayNumber+0x270>)
 8000754:	f000 ffb0 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800075e:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <DisplayNumber+0x274>)
 8000760:	f000 ffaa 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, D_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <DisplayNumber+0x274>)
 800076c:	f000 ffa4 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, E_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2140      	movs	r1, #64	@ 0x40
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <DisplayNumber+0x274>)
 8000776:	f000 ff9f 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, F_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2120      	movs	r1, #32
 800077e:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <DisplayNumber+0x270>)
 8000780:	f000 ff9a 	bl	80016b8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, G_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2140      	movs	r1, #64	@ 0x40
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <DisplayNumber+0x270>)
 800078a:	f000 ff95 	bl	80016b8 <HAL_GPIO_WritePin>
            break;
 800078e:	e000      	b.n	8000792 <DisplayNumber+0x262>
        default:
            break;
 8000790:	bf00      	nop
    }
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	080049fc 	.word	0x080049fc
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020000 	.word	0x40020000

080007a8 <CheckLDRs>:


// Función: Lee el valor de cada fotoresistencia, actualiza LEDs RGB, envía datos por I2C y actualiza display
void CheckLDRs(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
    uint8_t valorFotores;
    uint8_t green_count_local = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	71fb      	strb	r3, [r7, #7]

    valorFotores = HAL_GPIO_ReadPin(GPIOC, fotores1_Pin);
 80007b2:	2101      	movs	r1, #1
 80007b4:	4853      	ldr	r0, [pc, #332]	@ (8000904 <CheckLDRs+0x15c>)
 80007b6:	f000 ff67 	bl	8001688 <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	713b      	strb	r3, [r7, #4]
    if (valorFotores) {
 80007be:	793b      	ldrb	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00b      	beq.n	80007dc <CheckLDRs+0x34>
        HAL_GPIO_WritePin(GPIOC, RGB1_R_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ca:	484e      	ldr	r0, [pc, #312]	@ (8000904 <CheckLDRs+0x15c>)
 80007cc:	f000 ff74 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, RGB1_G_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2102      	movs	r1, #2
 80007d4:	484b      	ldr	r0, [pc, #300]	@ (8000904 <CheckLDRs+0x15c>)
 80007d6:	f000 ff6f 	bl	80016b8 <HAL_GPIO_WritePin>
 80007da:	e00d      	b.n	80007f8 <CheckLDRs+0x50>
    } else {
        HAL_GPIO_WritePin(GPIOC, RGB1_R_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007e2:	4848      	ldr	r0, [pc, #288]	@ (8000904 <CheckLDRs+0x15c>)
 80007e4:	f000 ff68 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, RGB1_G_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2102      	movs	r1, #2
 80007ec:	4845      	ldr	r0, [pc, #276]	@ (8000904 <CheckLDRs+0x15c>)
 80007ee:	f000 ff63 	bl	80016b8 <HAL_GPIO_WritePin>
        green_count_local++;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	3301      	adds	r3, #1
 80007f6:	71fb      	strb	r3, [r7, #7]
    }

    valorFotores = HAL_GPIO_ReadPin(GPIOC, fotores2_Pin);
 80007f8:	2108      	movs	r1, #8
 80007fa:	4842      	ldr	r0, [pc, #264]	@ (8000904 <CheckLDRs+0x15c>)
 80007fc:	f000 ff44 	bl	8001688 <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	713b      	strb	r3, [r7, #4]
    if (valorFotores) {
 8000804:	793b      	ldrb	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d00b      	beq.n	8000822 <CheckLDRs+0x7a>
        HAL_GPIO_WritePin(GPIOC, RGB2_R_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000810:	483c      	ldr	r0, [pc, #240]	@ (8000904 <CheckLDRs+0x15c>)
 8000812:	f000 ff51 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, RGB2_G_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2104      	movs	r1, #4
 800081a:	483a      	ldr	r0, [pc, #232]	@ (8000904 <CheckLDRs+0x15c>)
 800081c:	f000 ff4c 	bl	80016b8 <HAL_GPIO_WritePin>
 8000820:	e00d      	b.n	800083e <CheckLDRs+0x96>
    } else {
        HAL_GPIO_WritePin(GPIOC, RGB2_R_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000828:	4836      	ldr	r0, [pc, #216]	@ (8000904 <CheckLDRs+0x15c>)
 800082a:	f000 ff45 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, RGB2_G_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2104      	movs	r1, #4
 8000832:	4834      	ldr	r0, [pc, #208]	@ (8000904 <CheckLDRs+0x15c>)
 8000834:	f000 ff40 	bl	80016b8 <HAL_GPIO_WritePin>
        green_count_local++;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	3301      	adds	r3, #1
 800083c:	71fb      	strb	r3, [r7, #7]
    }

    valorFotores = HAL_GPIO_ReadPin(GPIOA, fotores3_Pin);
 800083e:	2101      	movs	r1, #1
 8000840:	4831      	ldr	r0, [pc, #196]	@ (8000908 <CheckLDRs+0x160>)
 8000842:	f000 ff21 	bl	8001688 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	713b      	strb	r3, [r7, #4]
    if (valorFotores) {
 800084a:	793b      	ldrb	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00b      	beq.n	8000868 <CheckLDRs+0xc0>
        HAL_GPIO_WritePin(GPIOC, RGB3_R_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000856:	482b      	ldr	r0, [pc, #172]	@ (8000904 <CheckLDRs+0x15c>)
 8000858:	f000 ff2e 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, RGB3_G_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2110      	movs	r1, #16
 8000860:	4829      	ldr	r0, [pc, #164]	@ (8000908 <CheckLDRs+0x160>)
 8000862:	f000 ff29 	bl	80016b8 <HAL_GPIO_WritePin>
 8000866:	e00d      	b.n	8000884 <CheckLDRs+0xdc>
    } else {
        HAL_GPIO_WritePin(GPIOC, RGB3_R_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800086e:	4825      	ldr	r0, [pc, #148]	@ (8000904 <CheckLDRs+0x15c>)
 8000870:	f000 ff22 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, RGB3_G_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2110      	movs	r1, #16
 8000878:	4823      	ldr	r0, [pc, #140]	@ (8000908 <CheckLDRs+0x160>)
 800087a:	f000 ff1d 	bl	80016b8 <HAL_GPIO_WritePin>
        green_count_local++;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	3301      	adds	r3, #1
 8000882:	71fb      	strb	r3, [r7, #7]
    }

    valorFotores = HAL_GPIO_ReadPin(GPIOA, fotores4_Pin);
 8000884:	2102      	movs	r1, #2
 8000886:	4820      	ldr	r0, [pc, #128]	@ (8000908 <CheckLDRs+0x160>)
 8000888:	f000 fefe 	bl	8001688 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	713b      	strb	r3, [r7, #4]
    if (valorFotores) {
 8000890:	793b      	ldrb	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00b      	beq.n	80008ae <CheckLDRs+0x106>
        HAL_GPIO_WritePin(GPIOC, RGB4_R_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	4819      	ldr	r0, [pc, #100]	@ (8000904 <CheckLDRs+0x15c>)
 800089e:	f000 ff0b 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, RGB4_G_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	4819      	ldr	r0, [pc, #100]	@ (800090c <CheckLDRs+0x164>)
 80008a8:	f000 ff06 	bl	80016b8 <HAL_GPIO_WritePin>
 80008ac:	e00d      	b.n	80008ca <CheckLDRs+0x122>
    } else {
        HAL_GPIO_WritePin(GPIOC, RGB4_R_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b4:	4813      	ldr	r0, [pc, #76]	@ (8000904 <CheckLDRs+0x15c>)
 80008b6:	f000 feff 	bl	80016b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, RGB4_G_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	4813      	ldr	r0, [pc, #76]	@ (800090c <CheckLDRs+0x164>)
 80008c0:	f000 fefa 	bl	80016b8 <HAL_GPIO_WritePin>
        green_count_local++;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	3301      	adds	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
    }

    aTxBuffer[0] = green_count_local;
 80008ca:	4a11      	ldr	r2, [pc, #68]	@ (8000910 <CheckLDRs+0x168>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	7013      	strb	r3, [r2, #0]

    uint8_t green_count_remote = aRxBuffer[0];
 80008d0:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <CheckLDRs+0x16c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	71bb      	strb	r3, [r7, #6]
    if (green_count_remote > 4) green_count_remote = 4;
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d901      	bls.n	80008e0 <CheckLDRs+0x138>
 80008dc:	2304      	movs	r3, #4
 80008de:	71bb      	strb	r3, [r7, #6]

    uint8_t total_green = green_count_local + green_count_remote;
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	4413      	add	r3, r2
 80008e6:	717b      	strb	r3, [r7, #5]
    if (total_green > 8) total_green = 8;
 80008e8:	797b      	ldrb	r3, [r7, #5]
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d901      	bls.n	80008f2 <CheckLDRs+0x14a>
 80008ee:	2308      	movs	r3, #8
 80008f0:	717b      	strb	r3, [r7, #5]

    DisplayNumber(total_green);
 80008f2:	797b      	ldrb	r3, [r7, #5]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe1b 	bl	8000530 <DisplayNumber>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020800 	.word	0x40020800
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400
 8000910:	200000c4 	.word	0x200000c4
 8000914:	200000c8 	.word	0x200000c8

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fb48 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f818 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f8dc 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000928:	f000 f8b0 	bl	8000a8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800092c:	f000 f880 	bl	8000a30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) {
 8000930:	4807      	ldr	r0, [pc, #28]	@ (8000950 <main+0x38>)
 8000932:	f001 f934 	bl	8001b9e <HAL_I2C_EnableListen_IT>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <main+0x28>
  	  Error_Handler();
 800093c:	f000 f9ea 	bl	8000d14 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CheckLDRs();
 8000940:	f7ff ff32 	bl	80007a8 <CheckLDRs>
	  HAL_Delay(100);
 8000944:	2064      	movs	r0, #100	@ 0x64
 8000946:	f000 fba5 	bl	8001094 <HAL_Delay>
	  CheckLDRs();
 800094a:	bf00      	nop
 800094c:	e7f8      	b.n	8000940 <main+0x28>
 800094e:	bf00      	nop
 8000950:	20000028 	.word	0x20000028

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	@ 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2234      	movs	r2, #52	@ 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 f812 	bl	800498c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <SystemClock_Config+0xd4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a29      	ldr	r2, [pc, #164]	@ (8000a28 <SystemClock_Config+0xd4>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <SystemClock_Config+0xd4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <SystemClock_Config+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009a0:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <SystemClock_Config+0xd8>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <SystemClock_Config+0xd8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009c8:	2310      	movs	r3, #16
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009d2:	2304      	movs	r3, #4
 80009d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009da:	2302      	movs	r3, #2
 80009dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 f928 	bl	8003c38 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ee:	f000 f991 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2302      	movs	r3, #2
 80009f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fdc8 	bl	80035a4 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a1a:	f000 f97b 	bl	8000d14 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3750      	adds	r7, #80	@ 0x50
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a36:	4a13      	ldr	r2, [pc, #76]	@ (8000a84 <MX_I2C1_Init+0x54>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <MX_I2C1_Init+0x58>)
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a48:	22aa      	movs	r2, #170	@ 0xaa
 8000a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_I2C1_Init+0x50>)
 8000a6e:	f000 fe57 	bl	8001720 <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 f94c 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000028 	.word	0x20000028
 8000a84:	40005400 	.word	0x40005400
 8000a88:	000186a0 	.word	0x000186a0

08000a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <MX_USART2_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f003 fb56 	bl	8004174 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f921 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000007c 	.word	0x2000007c
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b47      	ldr	r3, [pc, #284]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a46      	ldr	r2, [pc, #280]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b44      	ldr	r3, [pc, #272]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b40      	ldr	r3, [pc, #256]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b3d      	ldr	r3, [pc, #244]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a38      	ldr	r2, [pc, #224]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b36      	ldr	r3, [pc, #216]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b32      	ldr	r3, [pc, #200]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a31      	ldr	r2, [pc, #196]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <MX_GPIO_Init+0x138>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGB4_R_Pin|RGB1_G_Pin|RGB2_G_Pin|F_Pin
 8000b66:	2200      	movs	r2, #0
 8000b68:	f643 7166 	movw	r1, #16230	@ 0x3f66
 8000b6c:	482b      	ldr	r0, [pc, #172]	@ (8000c1c <MX_GPIO_Init+0x13c>)
 8000b6e:	f000 fda3 	bl	80016b8 <HAL_GPIO_WritePin>
                          |G_Pin|B_Pin|A_Pin|RGB1_R_Pin
                          |RGB2_R_Pin|RGB3_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB3_G_Pin|LD2_Pin|E_Pin|C_Pin
 8000b72:	2200      	movs	r2, #0
 8000b74:	f641 0170 	movw	r1, #6256	@ 0x1870
 8000b78:	4829      	ldr	r0, [pc, #164]	@ (8000c20 <MX_GPIO_Init+0x140>)
 8000b7a:	f000 fd9d 	bl	80016b8 <HAL_GPIO_WritePin>
                          |D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB4_G_GPIO_Port, RGB4_G_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	4828      	ldr	r0, [pc, #160]	@ (8000c24 <MX_GPIO_Init+0x144>)
 8000b84:	f000 fd98 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB4_R_Pin RGB1_G_Pin RGB2_G_Pin F_Pin
                           G_Pin B_Pin A_Pin RGB1_R_Pin
                           RGB2_R_Pin RGB3_R_Pin */
  GPIO_InitStruct.Pin = RGB4_R_Pin|RGB1_G_Pin|RGB2_G_Pin|F_Pin
 8000b88:	f643 7366 	movw	r3, #16230	@ 0x3f66
 8000b8c:	617b      	str	r3, [r7, #20]
                          |G_Pin|B_Pin|A_Pin|RGB1_R_Pin
                          |RGB2_R_Pin|RGB3_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481e      	ldr	r0, [pc, #120]	@ (8000c1c <MX_GPIO_Init+0x13c>)
 8000ba2:	f000 fbdd 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : fotores1_Pin fotores2_Pin */
  GPIO_InitStruct.Pin = fotores1_Pin|fotores2_Pin;
 8000ba6:	2309      	movs	r3, #9
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_GPIO_Init+0x13c>)
 8000bba:	f000 fbd1 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : fotores3_Pin fotores4_Pin */
  GPIO_InitStruct.Pin = fotores3_Pin|fotores4_Pin;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4813      	ldr	r0, [pc, #76]	@ (8000c20 <MX_GPIO_Init+0x140>)
 8000bd2:	f000 fbc5 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB3_G_Pin LD2_Pin E_Pin C_Pin
                           D_Pin */
  GPIO_InitStruct.Pin = RGB3_G_Pin|LD2_Pin|E_Pin|C_Pin
 8000bd6:	f641 0370 	movw	r3, #6256	@ 0x1870
 8000bda:	617b      	str	r3, [r7, #20]
                          |D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <MX_GPIO_Init+0x140>)
 8000bf0:	f000 fbb6 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB4_G_Pin */
  GPIO_InitStruct.Pin = RGB4_G_Pin;
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB4_G_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <MX_GPIO_Init+0x144>)
 8000c0c:	f000 fba8 	bl	8001360 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400

08000c28 <HAL_I2C_ListenCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 ffb4 	bl	8001b9e <HAL_I2C_EnableListen_IT>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_I2C_SlaveTxCpltCallback>:


void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	GPIO_PinState led_state = HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin);
 8000c48:	2120      	movs	r1, #32
 8000c4a:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 8000c4c:	f000 fd1c 	bl	8001688 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]

	    aTxBuffer[0] = (led_state == GPIO_PIN_SET) ? 1 : 0;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	bf0c      	ite	eq
 8000c5a:	2301      	moveq	r3, #1
 8000c5c:	2300      	movne	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020000 	.word	0x40020000
 8000c74:	200000c4 	.word	0x200000c4

08000c78 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHnadle) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, aRxBuffer, 4, 1000);
 8000c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c84:	2204      	movs	r2, #4
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8000c88:	4808      	ldr	r0, [pc, #32]	@ (8000cac <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8000c8a:	f003 fac3 	bl	8004214 <HAL_UART_Transmit>
	if(aRxBuffer[0] == 'S'){
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b53      	cmp	r3, #83	@ 0x53
 8000c94:	d103      	bne.n	8000c9e <HAL_I2C_SlaveRxCpltCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c96:	2120      	movs	r1, #32
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000c9a:	f000 fd26 	bl	80016ea <HAL_GPIO_TogglePin>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000c8 	.word	0x200000c8
 8000cac:	2000007c 	.word	0x2000007c
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_I2C_AddrCallback>:


void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT){
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10b      	bne.n	8000ce2 <HAL_I2C_AddrCallback+0x2e>
		if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t*) aRxBuffer,
 8000cca:	2308      	movs	r3, #8
 8000ccc:	2204      	movs	r2, #4
 8000cce:	490e      	ldr	r1, [pc, #56]	@ (8000d08 <HAL_I2C_AddrCallback+0x54>)
 8000cd0:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <HAL_I2C_AddrCallback+0x58>)
 8000cd2:	f000 fef1 	bl	8001ab8 <HAL_I2C_Slave_Seq_Receive_IT>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d010      	beq.n	8000cfe <HAL_I2C_AddrCallback+0x4a>
				RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) !=HAL_OK) {
			Error_Handler();
 8000cdc:	f000 f81a 	bl	8000d14 <Error_Handler>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) aTxBuffer, 4, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
			Error_Handler();
		}
	}
}
 8000ce0:	e00d      	b.n	8000cfe <HAL_I2C_AddrCallback+0x4a>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10a      	bne.n	8000cfe <HAL_I2C_AddrCallback+0x4a>
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) aTxBuffer, 4, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
 8000ce8:	2308      	movs	r3, #8
 8000cea:	2204      	movs	r2, #4
 8000cec:	4908      	ldr	r1, [pc, #32]	@ (8000d10 <HAL_I2C_AddrCallback+0x5c>)
 8000cee:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <HAL_I2C_AddrCallback+0x58>)
 8000cf0:	f000 fe6f 	bl	80019d2 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_I2C_AddrCallback+0x4a>
			Error_Handler();
 8000cfa:	f000 f80b 	bl	8000d14 <Error_Handler>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000c8 	.word	0x200000c8
 8000d0c:	20000028 	.word	0x20000028
 8000d10:	200000c4 	.word	0x200000c4

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fa8c 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <HAL_I2C_MspInit+0xa4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d13c      	bne.n	8000e0c <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_I2C_MspInit+0xa8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <HAL_I2C_MspInit+0xa8>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <HAL_I2C_MspInit+0xa8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4814      	ldr	r0, [pc, #80]	@ (8000e1c <HAL_I2C_MspInit+0xac>)
 8000dcc:	f000 fac8 	bl	8001360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_I2C_MspInit+0xa8>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <HAL_I2C_MspInit+0xa8>)
 8000dda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_I2C_MspInit+0xa8>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	201f      	movs	r0, #31
 8000df2:	f000 fa4e 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000df6:	201f      	movs	r0, #31
 8000df8:	f000 fa67 	bl	80012ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2020      	movs	r0, #32
 8000e02:	f000 fa46 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e06:	2020      	movs	r0, #32
 8000e08:	f000 fa5f 	bl	80012ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	@ 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400

08000e20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12b      	bne.n	8000e9a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_UART_MspInit+0x8c>)
 8000e96:	f000 fa63 	bl	8001360 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f06:	f000 f8a5 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <I2C1_EV_IRQHandler+0x10>)
 8000f16:	f000 fe78 	bl	8001c0a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000028 	.word	0x20000028

08000f24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <I2C1_ER_IRQHandler+0x10>)
 8000f2a:	f000 ffdf 	bl	8001eec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000028 	.word	0x20000028

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f003 fd07 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fcc3 	bl	8000918 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fa0:	08004a5c 	.word	0x08004a5c
  ldr r2, =_sbss
 8000fa4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fa8:	200000d0 	.word	0x200000d0

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fe9c 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	20000008 	.word	0x20000008
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	200000cc 	.word	0x200000cc

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200000cc 	.word	0x200000cc

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d004      	beq.n	800131c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2280      	movs	r2, #128	@ 0x80
 8001316:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e00c      	b.n	8001336 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2205      	movs	r2, #5
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001350:	b2db      	uxtb	r3, r3
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e165      	b.n	8001648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8154 	bne.w	8001642 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d017      	beq.n	8001450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80ae 	beq.w	8001642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <HAL_GPIO_Init+0x300>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001660 <HAL_GPIO_Init+0x300>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001660 <HAL_GPIO_Init+0x300>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001502:	4a58      	ldr	r2, [pc, #352]	@ (8001664 <HAL_GPIO_Init+0x304>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4f      	ldr	r2, [pc, #316]	@ (8001668 <HAL_GPIO_Init+0x308>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d025      	beq.n	800157a <HAL_GPIO_Init+0x21a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	@ (800166c <HAL_GPIO_Init+0x30c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01f      	beq.n	8001576 <HAL_GPIO_Init+0x216>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4d      	ldr	r2, [pc, #308]	@ (8001670 <HAL_GPIO_Init+0x310>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0x212>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <HAL_GPIO_Init+0x314>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x20e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4b      	ldr	r2, [pc, #300]	@ (8001678 <HAL_GPIO_Init+0x318>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x20a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x31c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x206>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a49      	ldr	r2, [pc, #292]	@ (8001680 <HAL_GPIO_Init+0x320>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x202>
 800155e:	2306      	movs	r3, #6
 8001560:	e00c      	b.n	800157c <HAL_GPIO_Init+0x21c>
 8001562:	2307      	movs	r3, #7
 8001564:	e00a      	b.n	800157c <HAL_GPIO_Init+0x21c>
 8001566:	2305      	movs	r3, #5
 8001568:	e008      	b.n	800157c <HAL_GPIO_Init+0x21c>
 800156a:	2304      	movs	r3, #4
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x21c>
 800156e:	2303      	movs	r3, #3
 8001570:	e004      	b.n	800157c <HAL_GPIO_Init+0x21c>
 8001572:	2302      	movs	r3, #2
 8001574:	e002      	b.n	800157c <HAL_GPIO_Init+0x21c>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x21c>
 800157a:	2300      	movs	r3, #0
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	f002 0203 	and.w	r2, r2, #3
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	4093      	lsls	r3, r2
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800158c:	4935      	ldr	r1, [pc, #212]	@ (8001664 <HAL_GPIO_Init+0x304>)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <HAL_GPIO_Init+0x324>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a31      	ldr	r2, [pc, #196]	@ (8001684 <HAL_GPIO_Init+0x324>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <HAL_GPIO_Init+0x324>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a26      	ldr	r2, [pc, #152]	@ (8001684 <HAL_GPIO_Init+0x324>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <HAL_GPIO_Init+0x324>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_GPIO_Init+0x324>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <HAL_GPIO_Init+0x324>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800163c:	4a11      	ldr	r2, [pc, #68]	@ (8001684 <HAL_GPIO_Init+0x324>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3301      	adds	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	f67f ae96 	bls.w	800137c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3724      	adds	r7, #36	@ 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40013800 	.word	0x40013800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40021000 	.word	0x40021000
 800167c:	40021400 	.word	0x40021400
 8001680:	40021800 	.word	0x40021800
 8001684:	40013c00 	.word	0x40013c00

08001688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016fc:	887a      	ldrh	r2, [r7, #2]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	041a      	lsls	r2, r3, #16
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43d9      	mvns	r1, r3
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	400b      	ands	r3, r1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e12b      	b.n	800198a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fb12 	bl	8000d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	@ 0x24
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001784:	f002 f800 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8001788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a81      	ldr	r2, [pc, #516]	@ (8001994 <HAL_I2C_Init+0x274>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d807      	bhi.n	80017a4 <HAL_I2C_Init+0x84>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4a80      	ldr	r2, [pc, #512]	@ (8001998 <HAL_I2C_Init+0x278>)
 8001798:	4293      	cmp	r3, r2
 800179a:	bf94      	ite	ls
 800179c:	2301      	movls	r3, #1
 800179e:	2300      	movhi	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	e006      	b.n	80017b2 <HAL_I2C_Init+0x92>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4a7d      	ldr	r2, [pc, #500]	@ (800199c <HAL_I2C_Init+0x27c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	bf94      	ite	ls
 80017ac:	2301      	movls	r3, #1
 80017ae:	2300      	movhi	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0e7      	b.n	800198a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a78      	ldr	r2, [pc, #480]	@ (80019a0 <HAL_I2C_Init+0x280>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	0c9b      	lsrs	r3, r3, #18
 80017c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001994 <HAL_I2C_Init+0x274>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d802      	bhi.n	80017f4 <HAL_I2C_Init+0xd4>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	3301      	adds	r3, #1
 80017f2:	e009      	b.n	8001808 <HAL_I2C_Init+0xe8>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	4a69      	ldr	r2, [pc, #420]	@ (80019a4 <HAL_I2C_Init+0x284>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	3301      	adds	r3, #1
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800181a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	495c      	ldr	r1, [pc, #368]	@ (8001994 <HAL_I2C_Init+0x274>)
 8001824:	428b      	cmp	r3, r1
 8001826:	d819      	bhi.n	800185c <HAL_I2C_Init+0x13c>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1e59      	subs	r1, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fbb1 f3f3 	udiv	r3, r1, r3
 8001836:	1c59      	adds	r1, r3, #1
 8001838:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800183c:	400b      	ands	r3, r1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00a      	beq.n	8001858 <HAL_I2C_Init+0x138>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1e59      	subs	r1, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001850:	3301      	adds	r3, #1
 8001852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001856:	e051      	b.n	80018fc <HAL_I2C_Init+0x1dc>
 8001858:	2304      	movs	r3, #4
 800185a:	e04f      	b.n	80018fc <HAL_I2C_Init+0x1dc>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d111      	bne.n	8001888 <HAL_I2C_Init+0x168>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1e58      	subs	r0, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e012      	b.n	80018ae <HAL_I2C_Init+0x18e>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1e58      	subs	r0, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	0099      	lsls	r1, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	fbb0 f3f3 	udiv	r3, r0, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Init+0x196>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e022      	b.n	80018fc <HAL_I2C_Init+0x1dc>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10e      	bne.n	80018dc <HAL_I2C_Init+0x1bc>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1e58      	subs	r0, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6859      	ldr	r1, [r3, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	440b      	add	r3, r1
 80018cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018da:	e00f      	b.n	80018fc <HAL_I2C_Init+0x1dc>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1e58      	subs	r0, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	0099      	lsls	r1, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	6809      	ldr	r1, [r1, #0]
 8001900:	4313      	orrs	r3, r2
 8001902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800192a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6911      	ldr	r1, [r2, #16]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68d2      	ldr	r2, [r2, #12]
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2220      	movs	r2, #32
 8001976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	000186a0 	.word	0x000186a0
 8001998:	001e847f 	.word	0x001e847f
 800199c:	003d08ff 	.word	0x003d08ff
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	10624dd3 	.word	0x10624dd3

080019a8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	2b80      	cmp	r3, #128	@ 0x80
 80019bc:	d103      	bne.n	80019c6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80019ee:	2b28      	cmp	r3, #40	@ 0x28
 80019f0:	d15b      	bne.n	8001aaa <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e054      	b.n	8001aac <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e04d      	b.n	8001aac <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d007      	beq.n	8001a36 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a44:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2229      	movs	r2, #41	@ 0x29
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2220      	movs	r2, #32
 8001a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001aa4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001ad4:	2b28      	cmp	r3, #40	@ 0x28
 8001ad6:	d15b      	bne.n	8001b90 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e054      	b.n	8001b92 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e04d      	b.n	8001b92 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d007      	beq.n	8001b1c <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	222a      	movs	r2, #42	@ 0x2a
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001b8a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d124      	bne.n	8001bfc <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2228      	movs	r2, #40	@ 0x28
 8001bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d007      	beq.n	8001bd8 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001be6:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001bf6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b088      	sub	sp, #32
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c32:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d003      	beq.n	8001c42 <HAL_I2C_EV_IRQHandler+0x38>
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b40      	cmp	r3, #64	@ 0x40
 8001c3e:	f040 80c1 	bne.w	8001dc4 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_I2C_EV_IRQHandler+0x6e>
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001c62:	d003      	beq.n	8001c6c <HAL_I2C_EV_IRQHandler+0x62>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001c6a:	d101      	bne.n	8001c70 <HAL_I2C_EV_IRQHandler+0x66>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_I2C_EV_IRQHandler+0x68>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	f000 8132 	beq.w	8001edc <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_I2C_EV_IRQHandler+0x92>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	0a5b      	lsrs	r3, r3, #9
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f001 fc6c 	bl	800356c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fd6f 	bl	8002778 <I2C_Master_SB>
 8001c9a:	e092      	b.n	8001dc2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d009      	beq.n	8001cbc <HAL_I2C_EV_IRQHandler+0xb2>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	0a5b      	lsrs	r3, r3, #9
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fde5 	bl	8002884 <I2C_Master_ADD10>
 8001cba:	e082      	b.n	8001dc2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d009      	beq.n	8001cdc <HAL_I2C_EV_IRQHandler+0xd2>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	0a5b      	lsrs	r3, r3, #9
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fdff 	bl	80028d8 <I2C_Master_ADDR>
 8001cda:	e072      	b.n	8001dc2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03b      	beq.n	8001d60 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cf6:	f000 80f3 	beq.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	09db      	lsrs	r3, r3, #7
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00f      	beq.n	8001d26 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	0a9b      	lsrs	r3, r3, #10
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f9c7 	bl	80020b2 <I2C_MasterTransmit_TXE>
 8001d24:	e04d      	b.n	8001dc2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80d6 	beq.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	0a5b      	lsrs	r3, r3, #9
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80cf 	beq.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d42:	7bbb      	ldrb	r3, [r7, #14]
 8001d44:	2b21      	cmp	r3, #33	@ 0x21
 8001d46:	d103      	bne.n	8001d50 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fa4e 	bl	80021ea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4e:	e0c7      	b.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	2b40      	cmp	r3, #64	@ 0x40
 8001d54:	f040 80c4 	bne.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fabc 	bl	80022d6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5e:	e0bf      	b.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d6e:	f000 80b7 	beq.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00f      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0x194>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	0a9b      	lsrs	r3, r3, #10
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0x194>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fb35 	bl	8002406 <I2C_MasterReceive_RXNE>
 8001d9c:	e011      	b.n	8001dc2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 809a 	beq.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8093 	beq.w	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fbeb 	bl	8002596 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dc0:	e08e      	b.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dc2:	e08d      	b.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	e007      	b.n	8001de6 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d012      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x20e>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	0a5b      	lsrs	r3, r3, #9
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00c      	beq.n	8001e18 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 ffb0 	bl	8002d76 <I2C_Slave_ADDR>
 8001e16:	e066      	b.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_I2C_EV_IRQHandler+0x22e>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	0a5b      	lsrs	r3, r3, #9
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 ffeb 	bl	8002e0c <I2C_Slave_STOPF>
 8001e36:	e056      	b.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	2b21      	cmp	r3, #33	@ 0x21
 8001e3c:	d002      	beq.n	8001e44 <HAL_I2C_EV_IRQHandler+0x23a>
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	2b29      	cmp	r3, #41	@ 0x29
 8001e42:	d125      	bne.n	8001e90 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	09db      	lsrs	r3, r3, #7
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00f      	beq.n	8001e70 <HAL_I2C_EV_IRQHandler+0x266>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	0a9b      	lsrs	r3, r3, #10
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <HAL_I2C_EV_IRQHandler+0x266>
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d103      	bne.n	8001e70 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fec6 	bl	8002bfa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e6e:	e039      	b.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d033      	beq.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x2da>
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02d      	beq.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fef3 	bl	8002c74 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e8e:	e029      	b.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	099b      	lsrs	r3, r3, #6
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00f      	beq.n	8001ebc <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	0a9b      	lsrs	r3, r3, #10
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d009      	beq.n	8001ebc <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d103      	bne.n	8001ebc <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fefe 	bl	8002cb6 <I2C_SlaveReceive_RXNE>
 8001eba:	e014      	b.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00e      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	0a5b      	lsrs	r3, r3, #9
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 ff2c 	bl	8002d32 <I2C_SlaveReceive_BTF>
 8001eda:	e004      	b.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001edc:	bf00      	nop
 8001ede:	e002      	b.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee0:	bf00      	nop
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ee4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f0e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00e      	beq.n	8001f3a <HAL_I2C_ER_IRQHandler+0x4e>
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	0a5b      	lsrs	r3, r3, #9
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00e      	beq.n	8001f64 <HAL_I2C_ER_IRQHandler+0x78>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001f62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	0a9b      	lsrs	r3, r3, #10
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03f      	beq.n	8001ff0 <HAL_I2C_ER_IRQHandler+0x104>
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d039      	beq.n	8001ff0 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001f7c:	7efb      	ldrb	r3, [r7, #27]
 8001f7e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001f96:	7ebb      	ldrb	r3, [r7, #26]
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d112      	bne.n	8001fc2 <HAL_I2C_ER_IRQHandler+0xd6>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	2b21      	cmp	r3, #33	@ 0x21
 8001fa6:	d008      	beq.n	8001fba <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	2b29      	cmp	r3, #41	@ 0x29
 8001fac:	d005      	beq.n	8001fba <HAL_I2C_ER_IRQHandler+0xce>
 8001fae:	7cfb      	ldrb	r3, [r7, #19]
 8001fb0:	2b28      	cmp	r3, #40	@ 0x28
 8001fb2:	d106      	bne.n	8001fc2 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b21      	cmp	r3, #33	@ 0x21
 8001fb8:	d103      	bne.n	8001fc2 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f001 f856 	bl	800306c <I2C_Slave_AF>
 8001fc0:	e016      	b.n	8001ff0 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fca:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001fd4:	7efb      	ldrb	r3, [r7, #27]
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d002      	beq.n	8001fe0 <HAL_I2C_ER_IRQHandler+0xf4>
 8001fda:	7efb      	ldrb	r3, [r7, #27]
 8001fdc:	2b40      	cmp	r3, #64	@ 0x40
 8001fde:	d107      	bne.n	8001ff0 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fee:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	0adb      	lsrs	r3, r3, #11
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <HAL_I2C_ER_IRQHandler+0x12e>
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002018:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 f891 	bl	8003154 <I2C_ITError>
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	@ 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020c8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d150      	bne.n	800217a <I2C_MasterTransmit_TXE+0xc8>
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b21      	cmp	r3, #33	@ 0x21
 80020dc:	d14d      	bne.n	800217a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d01d      	beq.n	8002120 <I2C_MasterTransmit_TXE+0x6e>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d01a      	beq.n	8002120 <I2C_MasterTransmit_TXE+0x6e>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020f0:	d016      	beq.n	8002120 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002100:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2211      	movs	r2, #17
 8002106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff8e 	bl	800203a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800211e:	e060      	b.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800212e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b40      	cmp	r3, #64	@ 0x40
 8002158:	d107      	bne.n	800216a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff7d 	bl	8002062 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002168:	e03b      	b.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff61 	bl	800203a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002178:	e033      	b.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b21      	cmp	r3, #33	@ 0x21
 800217e:	d005      	beq.n	800218c <I2C_MasterTransmit_TXE+0xda>
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	2b40      	cmp	r3, #64	@ 0x40
 8002184:	d12d      	bne.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b22      	cmp	r3, #34	@ 0x22
 800218a:	d12a      	bne.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d108      	bne.n	80021a8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80021a6:	e01c      	b.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b40      	cmp	r3, #64	@ 0x40
 80021b2:	d103      	bne.n	80021bc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f88e 	bl	80022d6 <I2C_MemoryTransmit_TXE_BTF>
}
 80021ba:	e012      	b.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80021e0:	e7ff      	b.n	80021e2 <I2C_MasterTransmit_TXE+0x130>
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b21      	cmp	r3, #33	@ 0x21
 8002202:	d164      	bne.n	80022ce <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d012      	beq.n	8002234 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002232:	e04c      	b.n	80022ce <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d01d      	beq.n	8002276 <I2C_MasterTransmit_BTF+0x8c>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b20      	cmp	r3, #32
 800223e:	d01a      	beq.n	8002276 <I2C_MasterTransmit_BTF+0x8c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002246:	d016      	beq.n	8002276 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002256:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2211      	movs	r2, #17
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fee3 	bl	800203a <HAL_I2C_MasterTxCpltCallback>
}
 8002274:	e02b      	b.n	80022ce <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002284:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002294:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d107      	bne.n	80022c0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff fed2 	bl	8002062 <HAL_I2C_MemTxCpltCallback>
}
 80022be:	e006      	b.n	80022ce <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff feb6 	bl	800203a <HAL_I2C_MasterTxCpltCallback>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d11d      	bne.n	800232a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10b      	bne.n	800230e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002306:	1c9a      	adds	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800230c:	e077      	b.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002312:	b29b      	uxth	r3, r3
 8002314:	121b      	asrs	r3, r3, #8
 8002316:	b2da      	uxtb	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002328:	e069      	b.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232e:	2b01      	cmp	r3, #1
 8002330:	d10b      	bne.n	800234a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002336:	b2da      	uxtb	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002348:	e059      	b.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234e:	2b02      	cmp	r3, #2
 8002350:	d152      	bne.n	80023f8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b22      	cmp	r3, #34	@ 0x22
 8002356:	d10d      	bne.n	8002374 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002366:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002372:	e044      	b.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b21      	cmp	r3, #33	@ 0x21
 8002382:	d112      	bne.n	80023aa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023a8:	e029      	b.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d124      	bne.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b21      	cmp	r3, #33	@ 0x21
 80023b8:	d121      	bne.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023c8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fe36 	bl	8002062 <HAL_I2C_MemTxCpltCallback>
}
 80023f6:	e002      	b.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fad5 	bl	80019a8 <I2C_Flush_DR>
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b22      	cmp	r3, #34	@ 0x22
 8002418:	f040 80b9 	bne.w	800258e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d921      	bls.n	8002474 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b03      	cmp	r3, #3
 800245e:	f040 8096 	bne.w	800258e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002470:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002472:	e08c      	b.n	800258e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	2b02      	cmp	r3, #2
 800247a:	d07f      	beq.n	800257c <I2C_MasterReceive_RXNE+0x176>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d002      	beq.n	8002488 <I2C_MasterReceive_RXNE+0x82>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d179      	bne.n	800257c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f001 f83d 	bl	8003508 <I2C_WaitOnSTOPRequestThroughIT>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d14c      	bne.n	800252e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b40      	cmp	r3, #64	@ 0x40
 80024ec:	d10a      	bne.n	8002504 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fdba 	bl	8002076 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002502:	e044      	b.n	800258e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d002      	beq.n	8002518 <I2C_MasterReceive_RXNE+0x112>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b20      	cmp	r3, #32
 8002516:	d103      	bne.n	8002520 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
 800251e:	e002      	b.n	8002526 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2212      	movs	r2, #18
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fd91 	bl	800204e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800252c:	e02f      	b.n	800258e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800253c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fd88 	bl	800208a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800257a:	e008      	b.n	800258e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800258a:	605a      	str	r2, [r3, #4]
}
 800258c:	e7ff      	b.n	800258e <I2C_MasterReceive_RXNE+0x188>
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d11b      	bne.n	80025e6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025bc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025e4:	e0c4      	b.n	8002770 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d129      	bne.n	8002644 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025fe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00a      	beq.n	800261c <I2C_MasterReceive_BTF+0x86>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d007      	beq.n	800261c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800261a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002642:	e095      	b.n	8002770 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d17d      	bne.n	800274a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d002      	beq.n	800265a <I2C_MasterReceive_BTF+0xc4>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b10      	cmp	r3, #16
 8002658:	d108      	bne.n	800266c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e016      	b.n	800269a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d002      	beq.n	8002678 <I2C_MasterReceive_BTF+0xe2>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d108      	bne.n	800268a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e007      	b.n	800269a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002698:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b40      	cmp	r3, #64	@ 0x40
 8002708:	d10a      	bne.n	8002720 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fcac 	bl	8002076 <HAL_I2C_MemRxCpltCallback>
}
 800271e:	e027      	b.n	8002770 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d002      	beq.n	8002734 <I2C_MasterReceive_BTF+0x19e>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b20      	cmp	r3, #32
 8002732:	d103      	bne.n	800273c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	@ 0x30
 800273a:	e002      	b.n	8002742 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2212      	movs	r2, #18
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fc83 	bl	800204e <HAL_I2C_MasterRxCpltCallback>
}
 8002748:	e012      	b.n	8002770 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b40      	cmp	r3, #64	@ 0x40
 800278a:	d117      	bne.n	80027bc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027a4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80027a6:	e067      	b.n	8002878 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	611a      	str	r2, [r3, #16]
}
 80027ba:	e05d      	b.n	8002878 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027c4:	d133      	bne.n	800282e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b21      	cmp	r3, #33	@ 0x21
 80027d0:	d109      	bne.n	80027e6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027e2:	611a      	str	r2, [r3, #16]
 80027e4:	e008      	b.n	80027f8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <I2C_Master_SB+0x92>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d032      	beq.n	8002878 <I2C_Master_SB+0x100>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02d      	beq.n	8002878 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800282a:	605a      	str	r2, [r3, #4]
}
 800282c:	e024      	b.n	8002878 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10e      	bne.n	8002854 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	b29b      	uxth	r3, r3
 800283c:	11db      	asrs	r3, r3, #7
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0306 	and.w	r3, r3, #6
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f063 030f 	orn	r3, r3, #15
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]
}
 8002852:	e011      	b.n	8002878 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002858:	2b01      	cmp	r3, #1
 800285a:	d10d      	bne.n	8002878 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	b29b      	uxth	r3, r3
 8002862:	11db      	asrs	r3, r3, #7
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 0306 	and.w	r3, r3, #6
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f063 030e 	orn	r3, r3, #14
 8002870:	b2da      	uxtb	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002890:	b2da      	uxtb	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <I2C_Master_ADD10+0x26>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00c      	beq.n	80028cc <I2C_Master_ADD10+0x48>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ca:	605a      	str	r2, [r3, #4]
  }
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b480      	push	{r7}
 80028da:	b091      	sub	sp, #68	@ 0x44
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b22      	cmp	r3, #34	@ 0x22
 8002900:	f040 8169 	bne.w	8002bd6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10f      	bne.n	800292c <I2C_Master_ADDR+0x54>
 800290c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d10b      	bne.n	800292c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002914:	2300      	movs	r3, #0
 8002916:	633b      	str	r3, [r7, #48]	@ 0x30
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	e160      	b.n	8002bee <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002930:	2b00      	cmp	r3, #0
 8002932:	d11d      	bne.n	8002970 <I2C_Master_ADDR+0x98>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800293c:	d118      	bne.n	8002970 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002962:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	651a      	str	r2, [r3, #80]	@ 0x50
 800296e:	e13e      	b.n	8002bee <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d113      	bne.n	80029a2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e115      	b.n	8002bce <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 808a 	bne.w	8002ac2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029b4:	d137      	bne.n	8002a26 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029d4:	d113      	bne.n	80029fe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029e4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	e0e7      	b.n	8002bce <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e0d3      	b.n	8002bce <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d02e      	beq.n	8002a8a <I2C_Master_ADDR+0x1b2>
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d02b      	beq.n	8002a8a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	2b12      	cmp	r3, #18
 8002a36:	d102      	bne.n	8002a3e <I2C_Master_ADDR+0x166>
 8002a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d125      	bne.n	8002a8a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d00e      	beq.n	8002a62 <I2C_Master_ADDR+0x18a>
 8002a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d00b      	beq.n	8002a62 <I2C_Master_ADDR+0x18a>
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d008      	beq.n	8002a62 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e007      	b.n	8002a72 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a70:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	e0a1      	b.n	8002bce <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a98:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e085      	b.n	8002bce <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d14d      	bne.n	8002b68 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d016      	beq.n	8002b00 <I2C_Master_ADDR+0x228>
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d013      	beq.n	8002b00 <I2C_Master_ADDR+0x228>
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d010      	beq.n	8002b00 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aec:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e007      	b.n	8002b10 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b0e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b1e:	d117      	bne.n	8002b50 <I2C_Master_ADDR+0x278>
 8002b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b26:	d00b      	beq.n	8002b40 <I2C_Master_ADDR+0x268>
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d008      	beq.n	8002b40 <I2C_Master_ADDR+0x268>
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d005      	beq.n	8002b40 <I2C_Master_ADDR+0x268>
 8002b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d002      	beq.n	8002b40 <I2C_Master_ADDR+0x268>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d107      	bne.n	8002b50 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b4e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	e032      	b.n	8002bce <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b76:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b86:	d117      	bne.n	8002bb8 <I2C_Master_ADDR+0x2e0>
 8002b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b8e:	d00b      	beq.n	8002ba8 <I2C_Master_ADDR+0x2d0>
 8002b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d008      	beq.n	8002ba8 <I2C_Master_ADDR+0x2d0>
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d005      	beq.n	8002ba8 <I2C_Master_ADDR+0x2d0>
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d002      	beq.n	8002ba8 <I2C_Master_ADDR+0x2d0>
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d107      	bne.n	8002bb8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bb6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002bd4:	e00b      	b.n	8002bee <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	e7ff      	b.n	8002bee <I2C_Master_ADDR+0x316>
 8002bee:	bf00      	nop
 8002bf0:	3744      	adds	r7, #68	@ 0x44
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02b      	beq.n	8002c6c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d114      	bne.n	8002c6c <I2C_SlaveTransmit_TXE+0x72>
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b29      	cmp	r3, #41	@ 0x29
 8002c46:	d111      	bne.n	8002c6c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c56:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2221      	movs	r2, #33	@ 0x21
 8002c5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2228      	movs	r2, #40	@ 0x28
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd ffea 	bl	8000c40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d011      	beq.n	8002caa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d02c      	beq.n	8002d2a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d114      	bne.n	8002d2a <I2C_SlaveReceive_RXNE+0x74>
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d04:	d111      	bne.n	8002d2a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d14:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2222      	movs	r2, #34	@ 0x22
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2228      	movs	r2, #40	@ 0x28
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fd ffa7 	bl	8000c78 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d90:	2b28      	cmp	r3, #40	@ 0x28
 8002d92:	d127      	bne.n	8002de4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	09db      	lsrs	r3, r3, #7
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d103      	bne.n	8002dc8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	81bb      	strh	r3, [r7, #12]
 8002dc6:	e002      	b.n	8002dce <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002dd6:	89ba      	ldrh	r2, [r7, #12]
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fd ff69 	bl	8000cb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002de2:	e00e      	b.n	8002e02 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e1a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e58:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e68:	d172      	bne.n	8002f50 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b22      	cmp	r3, #34	@ 0x22
 8002e6e:	d002      	beq.n	8002e76 <I2C_Slave_STOPF+0x6a>
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e74:	d135      	bne.n	8002ee2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fa47 	bl	8001342 <HAL_DMA_GetState>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d049      	beq.n	8002f4e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	4a69      	ldr	r2, [pc, #420]	@ (8003064 <I2C_Slave_STOPF+0x258>)
 8002ec0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fa19 	bl	80012fe <HAL_DMA_Abort_IT>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d03d      	beq.n	8002f4e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002edc:	4610      	mov	r0, r2
 8002ede:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ee0:	e035      	b.n	8002f4e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f043 0204 	orr.w	r2, r3, #4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fa11 	bl	8001342 <HAL_DMA_GetState>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d014      	beq.n	8002f50 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003064 <I2C_Slave_STOPF+0x258>)
 8002f2c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe f9e3 	bl	80012fe <HAL_DMA_Abort_IT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4798      	blx	r3
 8002f4c:	e000      	b.n	8002f50 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f4e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d03e      	beq.n	8002fd8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d112      	bne.n	8002f8e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f98:	2b40      	cmp	r3, #64	@ 0x40
 8002f9a:	d112      	bne.n	8002fc2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f8b7 	bl	8003154 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002fe6:	e039      	b.n	800305c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fec:	d109      	bne.n	8003002 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2228      	movs	r2, #40	@ 0x28
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fd fe3b 	bl	8000c78 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b28      	cmp	r3, #40	@ 0x28
 800300c:	d111      	bne.n	8003032 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <I2C_Slave_STOPF+0x25c>)
 8003012:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fdfc 	bl	8000c28 <HAL_I2C_ListenCpltCallback>
}
 8003030:	e014      	b.n	800305c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	2b22      	cmp	r3, #34	@ 0x22
 8003038:	d002      	beq.n	8003040 <I2C_Slave_STOPF+0x234>
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b22      	cmp	r3, #34	@ 0x22
 800303e:	d10d      	bne.n	800305c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fe0e 	bl	8000c78 <HAL_I2C_SlaveRxCpltCallback>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	080033b9 	.word	0x080033b9
 8003068:	ffff0000 	.word	0xffff0000

0800306c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800307a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d002      	beq.n	800308e <I2C_Slave_AF+0x22>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b20      	cmp	r3, #32
 800308c:	d129      	bne.n	80030e2 <I2C_Slave_AF+0x76>
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b28      	cmp	r3, #40	@ 0x28
 8003092:	d126      	bne.n	80030e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a2e      	ldr	r2, [pc, #184]	@ (8003150 <I2C_Slave_AF+0xe4>)
 8003098:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fda4 	bl	8000c28 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030e0:	e031      	b.n	8003146 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b21      	cmp	r3, #33	@ 0x21
 80030e6:	d129      	bne.n	800313c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <I2C_Slave_AF+0xe4>)
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2221      	movs	r2, #33	@ 0x21
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003112:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800311c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe fc3a 	bl	80019a8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7fd fd83 	bl	8000c40 <HAL_I2C_SlaveTxCpltCallback>
}
 800313a:	e004      	b.n	8003146 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003144:	615a      	str	r2, [r3, #20]
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	ffff0000 	.word	0xffff0000

08003154 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003162:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800316a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800316c:	7bbb      	ldrb	r3, [r7, #14]
 800316e:	2b10      	cmp	r3, #16
 8003170:	d002      	beq.n	8003178 <I2C_ITError+0x24>
 8003172:	7bbb      	ldrb	r3, [r7, #14]
 8003174:	2b40      	cmp	r3, #64	@ 0x40
 8003176:	d10a      	bne.n	800318e <I2C_ITError+0x3a>
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b22      	cmp	r3, #34	@ 0x22
 800317c:	d107      	bne.n	800318e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800318c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003194:	2b28      	cmp	r3, #40	@ 0x28
 8003196:	d107      	bne.n	80031a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2228      	movs	r2, #40	@ 0x28
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80031a6:	e015      	b.n	80031d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031b6:	d00a      	beq.n	80031ce <I2C_ITError+0x7a>
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	2b60      	cmp	r3, #96	@ 0x60
 80031bc:	d007      	beq.n	80031ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031e2:	d162      	bne.n	80032aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d020      	beq.n	8003244 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003206:	4a6a      	ldr	r2, [pc, #424]	@ (80033b0 <I2C_ITError+0x25c>)
 8003208:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe f875 	bl	80012fe <HAL_DMA_Abort_IT>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8089 	beq.w	800332e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800323e:	4610      	mov	r0, r2
 8003240:	4798      	blx	r3
 8003242:	e074      	b.n	800332e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	4a59      	ldr	r2, [pc, #356]	@ (80033b0 <I2C_ITError+0x25c>)
 800324a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe f854 	bl	80012fe <HAL_DMA_Abort_IT>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d068      	beq.n	800332e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b40      	cmp	r3, #64	@ 0x40
 8003268:	d10b      	bne.n	8003282 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032a4:	4610      	mov	r0, r2
 80032a6:	4798      	blx	r3
 80032a8:	e041      	b.n	800332e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b60      	cmp	r3, #96	@ 0x60
 80032b4:	d125      	bne.n	8003302 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ce:	2b40      	cmp	r3, #64	@ 0x40
 80032d0:	d10b      	bne.n	80032ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe fecf 	bl	800209e <HAL_I2C_AbortCpltCallback>
 8003300:	e015      	b.n	800332e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	2b40      	cmp	r3, #64	@ 0x40
 800330e:	d10b      	bne.n	8003328 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe feae 	bl	800208a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10e      	bne.n	800335c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003344:	2b00      	cmp	r3, #0
 8003346:	d109      	bne.n	800335c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800336a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003372:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d113      	bne.n	80033a8 <I2C_ITError+0x254>
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b28      	cmp	r3, #40	@ 0x28
 8003384:	d110      	bne.n	80033a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <I2C_ITError+0x260>)
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fc40 	bl	8000c28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	080033b9 	.word	0x080033b9
 80033b4:	ffff0000 	.word	0xffff0000

080033b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003500 <I2C_DMAAbort+0x148>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003504 <I2C_DMAAbort+0x14c>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0a1a      	lsrs	r2, r3, #8
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00da      	lsls	r2, r3, #3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f043 0220 	orr.w	r2, r3, #32
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80033fe:	e00a      	b.n	8003416 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3b01      	subs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003414:	d0ea      	beq.n	80033ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003422:	2200      	movs	r2, #0
 8003424:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	2200      	movs	r2, #0
 8003434:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003444:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	2200      	movs	r2, #0
 800345a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	2200      	movs	r2, #0
 800346a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b60      	cmp	r3, #96	@ 0x60
 8003486:	d10e      	bne.n	80034a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800349e:	6978      	ldr	r0, [r7, #20]
 80034a0:	f7fe fdfd 	bl	800209e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034a4:	e027      	b.n	80034f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034ac:	2b28      	cmp	r3, #40	@ 0x28
 80034ae:	d117      	bne.n	80034e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2228      	movs	r2, #40	@ 0x28
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80034de:	e007      	b.n	80034f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80034f0:	6978      	ldr	r0, [r7, #20]
 80034f2:	f7fe fdca 	bl	800208a <HAL_I2C_ErrorCallback>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000000 	.word	0x20000000
 8003504:	14f8b589 	.word	0x14f8b589

08003508 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	4a13      	ldr	r2, [pc, #76]	@ (8003568 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0a1a      	lsrs	r2, r3, #8
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b01      	subs	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d107      	bne.n	8003546 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e008      	b.n	8003558 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003554:	d0e9      	beq.n	800352a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20000000 	.word	0x20000000
 8003568:	14f8b589 	.word	0x14f8b589

0800356c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800357c:	d103      	bne.n	8003586 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003584:	e007      	b.n	8003596 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800358e:	d102      	bne.n	8003596 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2208      	movs	r2, #8
 8003594:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cc      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b68      	ldr	r3, [pc, #416]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90c      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b65      	ldr	r3, [pc, #404]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b63      	ldr	r3, [pc, #396]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b8      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b59      	ldr	r3, [pc, #356]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a58      	ldr	r2, [pc, #352]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003602:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003610:	4b53      	ldr	r3, [pc, #332]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a52      	ldr	r2, [pc, #328]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800361a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b50      	ldr	r3, [pc, #320]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494d      	ldr	r1, [pc, #308]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d044      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d119      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	2b03      	cmp	r3, #3
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b3f      	ldr	r3, [pc, #252]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3b      	ldr	r3, [pc, #236]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e067      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b37      	ldr	r3, [pc, #220]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4934      	ldr	r1, [pc, #208]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7fd fcf2 	bl	800107c <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fd fcee 	bl	800107c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b25      	ldr	r3, [pc, #148]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b22      	ldr	r3, [pc, #136]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4916      	ldr	r1, [pc, #88]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003716:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	490e      	ldr	r1, [pc, #56]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372a:	f000 f855 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490a      	ldr	r1, [pc, #40]	@ (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fc52 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	08004a34 	.word	0x08004a34
 8003768:	20000000 	.word	0x20000000
 800376c:	20000004 	.word	0x20000004

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	@ (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000000 	.word	0x20000000

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800378c:	f7ff fff0 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0a9b      	lsrs	r3, r3, #10
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	@ (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	08004a44 	.word	0x08004a44

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b4:	f7ff ffdc 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0b5b      	lsrs	r3, r3, #13
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	@ (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	08004a44 	.word	0x08004a44

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b0ae      	sub	sp, #184	@ 0xb8
 80037de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fe:	4bcb      	ldr	r3, [pc, #812]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b0c      	cmp	r3, #12
 8003808:	f200 8206 	bhi.w	8003c18 <HAL_RCC_GetSysClockFreq+0x440>
 800380c:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <HAL_RCC_GetSysClockFreq+0x3c>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003849 	.word	0x08003849
 8003818:	08003c19 	.word	0x08003c19
 800381c:	08003c19 	.word	0x08003c19
 8003820:	08003c19 	.word	0x08003c19
 8003824:	08003851 	.word	0x08003851
 8003828:	08003c19 	.word	0x08003c19
 800382c:	08003c19 	.word	0x08003c19
 8003830:	08003c19 	.word	0x08003c19
 8003834:	08003859 	.word	0x08003859
 8003838:	08003c19 	.word	0x08003c19
 800383c:	08003c19 	.word	0x08003c19
 8003840:	08003c19 	.word	0x08003c19
 8003844:	08003a49 	.word	0x08003a49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4bb9      	ldr	r3, [pc, #740]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x358>)
 800384a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800384e:	e1e7      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003850:	4bb8      	ldr	r3, [pc, #736]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003856:	e1e3      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003858:	4bb4      	ldr	r3, [pc, #720]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003864:	4bb1      	ldr	r3, [pc, #708]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d071      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003870:	4bae      	ldr	r3, [pc, #696]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800387c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003896:	4622      	mov	r2, r4
 8003898:	462b      	mov	r3, r5
 800389a:	f04f 0000 	mov.w	r0, #0
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	0159      	lsls	r1, r3, #5
 80038a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a8:	0150      	lsls	r0, r2, #5
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4621      	mov	r1, r4
 80038b0:	1a51      	subs	r1, r2, r1
 80038b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80038b4:	4629      	mov	r1, r5
 80038b6:	eb63 0301 	sbc.w	r3, r3, r1
 80038ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80038c8:	4649      	mov	r1, r9
 80038ca:	018b      	lsls	r3, r1, #6
 80038cc:	4641      	mov	r1, r8
 80038ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038d2:	4641      	mov	r1, r8
 80038d4:	018a      	lsls	r2, r1, #6
 80038d6:	4641      	mov	r1, r8
 80038d8:	1a51      	subs	r1, r2, r1
 80038da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038dc:	4649      	mov	r1, r9
 80038de:	eb63 0301 	sbc.w	r3, r3, r1
 80038e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80038f0:	4649      	mov	r1, r9
 80038f2:	00cb      	lsls	r3, r1, #3
 80038f4:	4641      	mov	r1, r8
 80038f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fa:	4641      	mov	r1, r8
 80038fc:	00ca      	lsls	r2, r1, #3
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	4603      	mov	r3, r0
 8003904:	4622      	mov	r2, r4
 8003906:	189b      	adds	r3, r3, r2
 8003908:	633b      	str	r3, [r7, #48]	@ 0x30
 800390a:	462b      	mov	r3, r5
 800390c:	460a      	mov	r2, r1
 800390e:	eb42 0303 	adc.w	r3, r2, r3
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003920:	4629      	mov	r1, r5
 8003922:	024b      	lsls	r3, r1, #9
 8003924:	4621      	mov	r1, r4
 8003926:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800392a:	4621      	mov	r1, r4
 800392c:	024a      	lsls	r2, r1, #9
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800393c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003940:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003944:	f7fc fc5e 	bl	8000204 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4613      	mov	r3, r2
 800394e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003952:	e067      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003954:	4b75      	ldr	r3, [pc, #468]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	099b      	lsrs	r3, r3, #6
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003960:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003964:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800396e:	2300      	movs	r3, #0
 8003970:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003972:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003976:	4622      	mov	r2, r4
 8003978:	462b      	mov	r3, r5
 800397a:	f04f 0000 	mov.w	r0, #0
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	0159      	lsls	r1, r3, #5
 8003984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003988:	0150      	lsls	r0, r2, #5
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4621      	mov	r1, r4
 8003990:	1a51      	subs	r1, r2, r1
 8003992:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003994:	4629      	mov	r1, r5
 8003996:	eb63 0301 	sbc.w	r3, r3, r1
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80039a8:	4649      	mov	r1, r9
 80039aa:	018b      	lsls	r3, r1, #6
 80039ac:	4641      	mov	r1, r8
 80039ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039b2:	4641      	mov	r1, r8
 80039b4:	018a      	lsls	r2, r1, #6
 80039b6:	4641      	mov	r1, r8
 80039b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80039bc:	4649      	mov	r1, r9
 80039be:	eb63 0b01 	sbc.w	fp, r3, r1
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d6:	4692      	mov	sl, r2
 80039d8:	469b      	mov	fp, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	eb1a 0303 	adds.w	r3, sl, r3
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	462b      	mov	r3, r5
 80039e4:	eb4b 0303 	adc.w	r3, fp, r3
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039f6:	4629      	mov	r1, r5
 80039f8:	028b      	lsls	r3, r1, #10
 80039fa:	4621      	mov	r1, r4
 80039fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a00:	4621      	mov	r1, r4
 8003a02:	028a      	lsls	r2, r1, #10
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a10:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a16:	f7fc fbf5 	bl	8000204 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4613      	mov	r3, r2
 8003a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a24:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a46:	e0eb      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4b38      	ldr	r3, [pc, #224]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a54:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d06b      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a60:	4b32      	ldr	r3, [pc, #200]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	2200      	movs	r2, #0
 8003a68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a74:	2300      	movs	r3, #0
 8003a76:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a78:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	462b      	mov	r3, r5
 8003a80:	f04f 0000 	mov.w	r0, #0
 8003a84:	f04f 0100 	mov.w	r1, #0
 8003a88:	0159      	lsls	r1, r3, #5
 8003a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a8e:	0150      	lsls	r0, r2, #5
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4621      	mov	r1, r4
 8003a96:	1a51      	subs	r1, r2, r1
 8003a98:	61b9      	str	r1, [r7, #24]
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003aae:	4659      	mov	r1, fp
 8003ab0:	018b      	lsls	r3, r1, #6
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab8:	4651      	mov	r1, sl
 8003aba:	018a      	lsls	r2, r1, #6
 8003abc:	4651      	mov	r1, sl
 8003abe:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac2:	4659      	mov	r1, fp
 8003ac4:	eb63 0901 	sbc.w	r9, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003adc:	4690      	mov	r8, r2
 8003ade:	4699      	mov	r9, r3
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	eb18 0303 	adds.w	r3, r8, r3
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	462b      	mov	r3, r5
 8003aea:	eb49 0303 	adc.w	r3, r9, r3
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003afc:	4629      	mov	r1, r5
 8003afe:	024b      	lsls	r3, r1, #9
 8003b00:	4621      	mov	r1, r4
 8003b02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b06:	4621      	mov	r1, r4
 8003b08:	024a      	lsls	r2, r1, #9
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b12:	2200      	movs	r2, #0
 8003b14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b16:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b1c:	f7fc fb72 	bl	8000204 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b2a:	e065      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x420>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b38:	4b3d      	ldr	r3, [pc, #244]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	2200      	movs	r2, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	4611      	mov	r1, r2
 8003b44:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b48:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b4e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003b52:	4642      	mov	r2, r8
 8003b54:	464b      	mov	r3, r9
 8003b56:	f04f 0000 	mov.w	r0, #0
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	0159      	lsls	r1, r3, #5
 8003b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b64:	0150      	lsls	r0, r2, #5
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	1a51      	subs	r1, r2, r1
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	4649      	mov	r1, r9
 8003b72:	eb63 0301 	sbc.w	r3, r3, r1
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b84:	4659      	mov	r1, fp
 8003b86:	018b      	lsls	r3, r1, #6
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b8e:	4651      	mov	r1, sl
 8003b90:	018a      	lsls	r2, r1, #6
 8003b92:	4651      	mov	r1, sl
 8003b94:	1a54      	subs	r4, r2, r1
 8003b96:	4659      	mov	r1, fp
 8003b98:	eb63 0501 	sbc.w	r5, r3, r1
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	00eb      	lsls	r3, r5, #3
 8003ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003baa:	00e2      	lsls	r2, r4, #3
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	18e3      	adds	r3, r4, r3
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	eb45 0303 	adc.w	r3, r5, r3
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	028b      	lsls	r3, r1, #10
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	028a      	lsls	r2, r1, #10
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003be0:	2200      	movs	r2, #0
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003be6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bea:	f7fc fb0b 	bl	8000204 <__aeabi_uldivmod>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0f1b      	lsrs	r3, r3, #28
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c16:	e003      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	37b8      	adds	r7, #184	@ 0xb8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400

08003c38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e28d      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8083 	beq.w	8003d5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c58:	4b94      	ldr	r3, [pc, #592]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d019      	beq.n	8003c98 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c64:	4b91      	ldr	r3, [pc, #580]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c70:	4b8e      	ldr	r3, [pc, #568]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c7c:	d00c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d112      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8a:	4b88      	ldr	r3, [pc, #544]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	4b84      	ldr	r3, [pc, #528]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05b      	beq.n	8003d5c <HAL_RCC_OscConfig+0x124>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d157      	bne.n	8003d5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e25a      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb8:	d106      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x90>
 8003cba:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xcc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0xb4>
 8003cd2:	4b76      	ldr	r3, [pc, #472]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a75      	ldr	r2, [pc, #468]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b73      	ldr	r3, [pc, #460]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a72      	ldr	r2, [pc, #456]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xcc>
 8003cec:	4b6f      	ldr	r3, [pc, #444]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a6b      	ldr	r2, [pc, #428]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f9b6 	bl	800107c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd f9b2 	bl	800107c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	@ 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e21f      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b61      	ldr	r3, [pc, #388]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xdc>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd f9a2 	bl	800107c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f99e 	bl	800107c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e20b      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b57      	ldr	r3, [pc, #348]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x104>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06f      	beq.n	8003e4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d6a:	4b50      	ldr	r3, [pc, #320]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d017      	beq.n	8003da6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d76:	4b4d      	ldr	r3, [pc, #308]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d105      	bne.n	8003d8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d82:	4b4a      	ldr	r3, [pc, #296]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8e:	4b47      	ldr	r3, [pc, #284]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d11c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9a:	4b44      	ldr	r3, [pc, #272]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d116      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	4b41      	ldr	r3, [pc, #260]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_RCC_OscConfig+0x186>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e1d3      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4937      	ldr	r1, [pc, #220]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd2:	e03a      	b.n	8003e4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ddc:	4b34      	ldr	r3, [pc, #208]	@ (8003eb0 <HAL_RCC_OscConfig+0x278>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fd f94b 	bl	800107c <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dea:	f7fd f947 	bl	800107c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e1b4      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	4b28      	ldr	r3, [pc, #160]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4925      	ldr	r1, [pc, #148]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
 8003e1c:	e015      	b.n	8003e4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1e:	4b24      	ldr	r3, [pc, #144]	@ (8003eb0 <HAL_RCC_OscConfig+0x278>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fd f92a 	bl	800107c <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2c:	f7fd f926 	bl	800107c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e193      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d036      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e5e:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <HAL_RCC_OscConfig+0x27c>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fd f90a 	bl	800107c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7fd f906 	bl	800107c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e173      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_OscConfig+0x274>)
 8003e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x234>
 8003e8a:	e01b      	b.n	8003ec4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <HAL_RCC_OscConfig+0x27c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fd f8f3 	bl	800107c <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	e00e      	b.n	8003eb8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9a:	f7fd f8ef 	bl	800107c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d907      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e15c      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	42470000 	.word	0x42470000
 8003eb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb8:	4b8a      	ldr	r3, [pc, #552]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ea      	bne.n	8003e9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8097 	beq.w	8004000 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed6:	4b83      	ldr	r3, [pc, #524]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10f      	bne.n	8003f02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	4a7e      	ldr	r2, [pc, #504]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efe:	2301      	movs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f02:	4b79      	ldr	r3, [pc, #484]	@ (80040e8 <HAL_RCC_OscConfig+0x4b0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d118      	bne.n	8003f40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0e:	4b76      	ldr	r3, [pc, #472]	@ (80040e8 <HAL_RCC_OscConfig+0x4b0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a75      	ldr	r2, [pc, #468]	@ (80040e8 <HAL_RCC_OscConfig+0x4b0>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f1a:	f7fd f8af 	bl	800107c <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fd f8ab 	bl	800107c <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e118      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	4b6c      	ldr	r3, [pc, #432]	@ (80040e8 <HAL_RCC_OscConfig+0x4b0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x31e>
 8003f48:	4b66      	ldr	r3, [pc, #408]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a65      	ldr	r2, [pc, #404]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f54:	e01c      	b.n	8003f90 <HAL_RCC_OscConfig+0x358>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x340>
 8003f5e:	4b61      	ldr	r3, [pc, #388]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f62:	4a60      	ldr	r2, [pc, #384]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	f043 0304 	orr.w	r3, r3, #4
 8003f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6a:	4b5e      	ldr	r3, [pc, #376]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	4a5d      	ldr	r2, [pc, #372]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0x358>
 8003f78:	4b5a      	ldr	r3, [pc, #360]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	4a59      	ldr	r2, [pc, #356]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f84:	4b57      	ldr	r3, [pc, #348]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	4a56      	ldr	r2, [pc, #344]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	f023 0304 	bic.w	r3, r3, #4
 8003f8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fd f870 	bl	800107c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fd f86c 	bl	800107c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0d7      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0ee      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x368>
 8003fc2:	e014      	b.n	8003fee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fd f85a 	bl	800107c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f7fd f856 	bl	800107c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0c1      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	4b40      	ldr	r3, [pc, #256]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ee      	bne.n	8003fcc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8003ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80ad 	beq.w	8004164 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800400a:	4b36      	ldr	r3, [pc, #216]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b08      	cmp	r3, #8
 8004014:	d060      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d145      	bne.n	80040aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401e:	4b33      	ldr	r3, [pc, #204]	@ (80040ec <HAL_RCC_OscConfig+0x4b4>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd f82a 	bl	800107c <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd f826 	bl	800107c <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e093      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	4b29      	ldr	r3, [pc, #164]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	3b01      	subs	r3, #1
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	071b      	lsls	r3, r3, #28
 8004076:	491b      	ldr	r1, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <HAL_RCC_OscConfig+0x4b4>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fc fffb 	bl	800107c <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fc fff7 	bl	800107c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e064      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x452>
 80040a8:	e05c      	b.n	8004164 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <HAL_RCC_OscConfig+0x4b4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fc ffe4 	bl	800107c <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fc ffe0 	bl	800107c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e04d      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_OscConfig+0x4ac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x480>
 80040d6:	e045      	b.n	8004164 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e040      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004170 <HAL_RCC_OscConfig+0x538>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d030      	beq.n	8004160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d129      	bne.n	8004160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d122      	bne.n	8004160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d119      	bne.n	8004160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d10f      	bne.n	8004160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e042      	b.n	800420c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fc fe40 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	@ 0x24
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f973 	bl	80044a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	@ 0x28
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b20      	cmp	r3, #32
 8004232:	d175      	bne.n	8004320 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Transmit+0x2c>
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e06e      	b.n	8004322 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2221      	movs	r2, #33	@ 0x21
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004252:	f7fc ff13 	bl	800107c <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426c:	d108      	bne.n	8004280 <HAL_UART_Transmit+0x6c>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e003      	b.n	8004288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004288:	e02e      	b.n	80042e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	2180      	movs	r1, #128	@ 0x80
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f848 	bl	800432a <UART_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e03a      	b.n	8004322 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	3302      	adds	r3, #2
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e007      	b.n	80042da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	3301      	adds	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1cb      	bne.n	800428a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	2140      	movs	r1, #64	@ 0x40
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f814 	bl	800432a <UART_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e006      	b.n	8004322 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433a:	e03b      	b.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d037      	beq.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004344:	f7fc fe9a 	bl	800107c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	6a3a      	ldr	r2, [r7, #32]
 8004350:	429a      	cmp	r2, r3
 8004352:	d302      	bcc.n	800435a <UART_WaitOnFlagUntilTimeout+0x30>
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e03a      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d023      	beq.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b80      	cmp	r3, #128	@ 0x80
 8004370:	d020      	beq.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b40      	cmp	r3, #64	@ 0x40
 8004376:	d01d      	beq.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d116      	bne.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f81d 	bl	80043dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2208      	movs	r2, #8
 80043a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e00f      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4013      	ands	r3, r2
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d0b4      	beq.n	800433c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b095      	sub	sp, #84	@ 0x54
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004404:	643a      	str	r2, [r7, #64]	@ 0x40
 8004406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800440a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e5      	bne.n	80043e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	61fb      	str	r3, [r7, #28]
   return(result);
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800443e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e5      	bne.n	8004418 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	2b01      	cmp	r3, #1
 8004452:	d119      	bne.n	8004488 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	60bb      	str	r3, [r7, #8]
   return(result);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f023 0310 	bic.w	r3, r3, #16
 800446a:	647b      	str	r3, [r7, #68]	@ 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004474:	61ba      	str	r2, [r7, #24]
 8004476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6979      	ldr	r1, [r7, #20]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	613b      	str	r3, [r7, #16]
   return(result);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004496:	bf00      	nop
 8004498:	3754      	adds	r7, #84	@ 0x54
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b0c0      	sub	sp, #256	@ 0x100
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	ea40 0301 	orr.w	r3, r0, r1
 80044cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044fc:	f021 010c 	bic.w	r1, r1, #12
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800450a:	430b      	orrs	r3, r1
 800450c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451e:	6999      	ldr	r1, [r3, #24]
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	ea40 0301 	orr.w	r3, r0, r1
 800452a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b8f      	ldr	r3, [pc, #572]	@ (8004770 <UART_SetConfig+0x2cc>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d005      	beq.n	8004544 <UART_SetConfig+0xa0>
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b8d      	ldr	r3, [pc, #564]	@ (8004774 <UART_SetConfig+0x2d0>)
 8004540:	429a      	cmp	r2, r3
 8004542:	d104      	bne.n	800454e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7ff f934 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8004548:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800454c:	e003      	b.n	8004556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454e:	f7ff f91b 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004552:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004560:	f040 810c 	bne.w	800477c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800456e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004576:	4622      	mov	r2, r4
 8004578:	462b      	mov	r3, r5
 800457a:	1891      	adds	r1, r2, r2
 800457c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800457e:	415b      	adcs	r3, r3
 8004580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004586:	4621      	mov	r1, r4
 8004588:	eb12 0801 	adds.w	r8, r2, r1
 800458c:	4629      	mov	r1, r5
 800458e:	eb43 0901 	adc.w	r9, r3, r1
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a6:	4690      	mov	r8, r2
 80045a8:	4699      	mov	r9, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	eb18 0303 	adds.w	r3, r8, r3
 80045b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045b4:	462b      	mov	r3, r5
 80045b6:	eb49 0303 	adc.w	r3, r9, r3
 80045ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045d2:	460b      	mov	r3, r1
 80045d4:	18db      	adds	r3, r3, r3
 80045d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d8:	4613      	mov	r3, r2
 80045da:	eb42 0303 	adc.w	r3, r2, r3
 80045de:	657b      	str	r3, [r7, #84]	@ 0x54
 80045e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045e8:	f7fb fe0c 	bl	8000204 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b61      	ldr	r3, [pc, #388]	@ (8004778 <UART_SetConfig+0x2d4>)
 80045f2:	fba3 2302 	umull	r2, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011c      	lsls	r4, r3, #4
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004604:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004614:	415b      	adcs	r3, r3
 8004616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800461c:	4641      	mov	r1, r8
 800461e:	eb12 0a01 	adds.w	sl, r2, r1
 8004622:	4649      	mov	r1, r9
 8004624:	eb43 0b01 	adc.w	fp, r3, r1
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800463c:	4692      	mov	sl, r2
 800463e:	469b      	mov	fp, r3
 8004640:	4643      	mov	r3, r8
 8004642:	eb1a 0303 	adds.w	r3, sl, r3
 8004646:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800464a:	464b      	mov	r3, r9
 800464c:	eb4b 0303 	adc.w	r3, fp, r3
 8004650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004660:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004668:	460b      	mov	r3, r1
 800466a:	18db      	adds	r3, r3, r3
 800466c:	643b      	str	r3, [r7, #64]	@ 0x40
 800466e:	4613      	mov	r3, r2
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	647b      	str	r3, [r7, #68]	@ 0x44
 8004676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800467a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800467e:	f7fb fdc1 	bl	8000204 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4611      	mov	r1, r2
 8004688:	4b3b      	ldr	r3, [pc, #236]	@ (8004778 <UART_SetConfig+0x2d4>)
 800468a:	fba3 2301 	umull	r2, r3, r3, r1
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2264      	movs	r2, #100	@ 0x64
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	1acb      	subs	r3, r1, r3
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800469e:	4b36      	ldr	r3, [pc, #216]	@ (8004778 <UART_SetConfig+0x2d4>)
 80046a0:	fba3 2302 	umull	r2, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046ac:	441c      	add	r4, r3
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046c8:	415b      	adcs	r3, r3
 80046ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046d0:	4641      	mov	r1, r8
 80046d2:	1851      	adds	r1, r2, r1
 80046d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80046d6:	4649      	mov	r1, r9
 80046d8:	414b      	adcs	r3, r1
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046e8:	4659      	mov	r1, fp
 80046ea:	00cb      	lsls	r3, r1, #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f2:	4651      	mov	r1, sl
 80046f4:	00ca      	lsls	r2, r1, #3
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	4642      	mov	r2, r8
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004704:	464b      	mov	r3, r9
 8004706:	460a      	mov	r2, r1
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800471c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800473a:	f7fb fd63 	bl	8000204 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <UART_SetConfig+0x2d4>)
 8004744:	fba3 1302 	umull	r1, r3, r3, r2
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	2164      	movs	r1, #100	@ 0x64
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	3332      	adds	r3, #50	@ 0x32
 8004756:	4a08      	ldr	r2, [pc, #32]	@ (8004778 <UART_SetConfig+0x2d4>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 0207 	and.w	r2, r3, #7
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4422      	add	r2, r4
 800476a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800476c:	e106      	b.n	800497c <UART_SetConfig+0x4d8>
 800476e:	bf00      	nop
 8004770:	40011000 	.word	0x40011000
 8004774:	40011400 	.word	0x40011400
 8004778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004786:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800478a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800478e:	4642      	mov	r2, r8
 8004790:	464b      	mov	r3, r9
 8004792:	1891      	adds	r1, r2, r2
 8004794:	6239      	str	r1, [r7, #32]
 8004796:	415b      	adcs	r3, r3
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
 800479a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479e:	4641      	mov	r1, r8
 80047a0:	1854      	adds	r4, r2, r1
 80047a2:	4649      	mov	r1, r9
 80047a4:	eb43 0501 	adc.w	r5, r3, r1
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	00eb      	lsls	r3, r5, #3
 80047b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b6:	00e2      	lsls	r2, r4, #3
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	18e3      	adds	r3, r4, r3
 80047c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047c4:	464b      	mov	r3, r9
 80047c6:	eb45 0303 	adc.w	r3, r5, r3
 80047ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047ea:	4629      	mov	r1, r5
 80047ec:	008b      	lsls	r3, r1, #2
 80047ee:	4621      	mov	r1, r4
 80047f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f4:	4621      	mov	r1, r4
 80047f6:	008a      	lsls	r2, r1, #2
 80047f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047fc:	f7fb fd02 	bl	8000204 <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4b60      	ldr	r3, [pc, #384]	@ (8004988 <UART_SetConfig+0x4e4>)
 8004806:	fba3 2302 	umull	r2, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	011c      	lsls	r4, r3, #4
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004818:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800481c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	1891      	adds	r1, r2, r2
 8004826:	61b9      	str	r1, [r7, #24]
 8004828:	415b      	adcs	r3, r3
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004830:	4641      	mov	r1, r8
 8004832:	1851      	adds	r1, r2, r1
 8004834:	6139      	str	r1, [r7, #16]
 8004836:	4649      	mov	r1, r9
 8004838:	414b      	adcs	r3, r1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004848:	4659      	mov	r1, fp
 800484a:	00cb      	lsls	r3, r1, #3
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004852:	4651      	mov	r1, sl
 8004854:	00ca      	lsls	r2, r1, #3
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	4603      	mov	r3, r0
 800485c:	4642      	mov	r2, r8
 800485e:	189b      	adds	r3, r3, r2
 8004860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800487a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004888:	4649      	mov	r1, r9
 800488a:	008b      	lsls	r3, r1, #2
 800488c:	4641      	mov	r1, r8
 800488e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004892:	4641      	mov	r1, r8
 8004894:	008a      	lsls	r2, r1, #2
 8004896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800489a:	f7fb fcb3 	bl	8000204 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <UART_SetConfig+0x4e4>)
 80048a6:	fba3 2301 	umull	r2, r3, r3, r1
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2264      	movs	r2, #100	@ 0x64
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	1acb      	subs	r3, r1, r3
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	3332      	adds	r3, #50	@ 0x32
 80048b8:	4a33      	ldr	r2, [pc, #204]	@ (8004988 <UART_SetConfig+0x4e4>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c4:	441c      	add	r4, r3
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80048ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80048d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	415b      	adcs	r3, r3
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e4:	4641      	mov	r1, r8
 80048e6:	1851      	adds	r1, r2, r1
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	4649      	mov	r1, r9
 80048ec:	414b      	adcs	r3, r1
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048fc:	4659      	mov	r1, fp
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4651      	mov	r1, sl
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4651      	mov	r1, sl
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4642      	mov	r2, r8
 8004912:	189b      	adds	r3, r3, r2
 8004914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004916:	464b      	mov	r3, r9
 8004918:	460a      	mov	r2, r1
 800491a:	eb42 0303 	adc.w	r3, r2, r3
 800491e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	663b      	str	r3, [r7, #96]	@ 0x60
 800492a:	667a      	str	r2, [r7, #100]	@ 0x64
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004938:	4649      	mov	r1, r9
 800493a:	008b      	lsls	r3, r1, #2
 800493c:	4641      	mov	r1, r8
 800493e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004942:	4641      	mov	r1, r8
 8004944:	008a      	lsls	r2, r1, #2
 8004946:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800494a:	f7fb fc5b 	bl	8000204 <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <UART_SetConfig+0x4e4>)
 8004954:	fba3 1302 	umull	r1, r3, r3, r2
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	2164      	movs	r1, #100	@ 0x64
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	3332      	adds	r3, #50	@ 0x32
 8004966:	4a08      	ldr	r2, [pc, #32]	@ (8004988 <UART_SetConfig+0x4e4>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4422      	add	r2, r4
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004982:	46bd      	mov	sp, r7
 8004984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004988:	51eb851f 	.word	0x51eb851f

0800498c <memset>:
 800498c:	4402      	add	r2, r0
 800498e:	4603      	mov	r3, r0
 8004990:	4293      	cmp	r3, r2
 8004992:	d100      	bne.n	8004996 <memset+0xa>
 8004994:	4770      	bx	lr
 8004996:	f803 1b01 	strb.w	r1, [r3], #1
 800499a:	e7f9      	b.n	8004990 <memset+0x4>

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4d0d      	ldr	r5, [pc, #52]	@ (80049d4 <__libc_init_array+0x38>)
 80049a0:	4c0d      	ldr	r4, [pc, #52]	@ (80049d8 <__libc_init_array+0x3c>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	2600      	movs	r6, #0
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	4d0b      	ldr	r5, [pc, #44]	@ (80049dc <__libc_init_array+0x40>)
 80049ae:	4c0c      	ldr	r4, [pc, #48]	@ (80049e0 <__libc_init_array+0x44>)
 80049b0:	f000 f818 	bl	80049e4 <_init>
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	2600      	movs	r6, #0
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	08004a54 	.word	0x08004a54
 80049d8:	08004a54 	.word	0x08004a54
 80049dc:	08004a54 	.word	0x08004a54
 80049e0:	08004a58 	.word	0x08004a58

080049e4 <_init>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr

080049f0 <_fini>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr
