
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002290  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001070  08002454  08002454  00003454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c4  080034c4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034cc  080034cc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034cc  080034cc  000044cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080034e0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080034e0  00005084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b9b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001665  00000000  00000000  0000bbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002107e  00000000  00000000  0000d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009308  00000000  00000000  0002e9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c9401  00000000  00000000  00037cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001010af  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000519  00000000  00000000  001010f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a74  00000000  00000000  0010160c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00103080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800243c 	.word	0x0800243c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800243c 	.word	0x0800243c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2101      	movs	r1, #1
 8000548:	4878      	ldr	r0, [pc, #480]	@ (800072c <LCD_Init+0x1ec>)
 800054a:	f001 f979 	bl	8001840 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800054e:	2201      	movs	r2, #1
 8000550:	2113      	movs	r1, #19
 8000552:	4877      	ldr	r0, [pc, #476]	@ (8000730 <LCD_Init+0x1f0>)
 8000554:	f001 f974 	bl	8001840 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2102      	movs	r1, #2
 800055c:	4875      	ldr	r0, [pc, #468]	@ (8000734 <LCD_Init+0x1f4>)
 800055e:	f001 f96f 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000562:	2005      	movs	r0, #5
 8000564:	f000 fece 	bl	8001304 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2102      	movs	r1, #2
 800056c:	4871      	ldr	r0, [pc, #452]	@ (8000734 <LCD_Init+0x1f4>)
 800056e:	f001 f967 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000572:	2014      	movs	r0, #20
 8000574:	f000 fec6 	bl	8001304 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2102      	movs	r1, #2
 800057c:	486d      	ldr	r0, [pc, #436]	@ (8000734 <LCD_Init+0x1f4>)
 800057e:	f001 f95f 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000582:	2096      	movs	r0, #150	@ 0x96
 8000584:	f000 febe 	bl	8001304 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4867      	ldr	r0, [pc, #412]	@ (800072c <LCD_Init+0x1ec>)
 800058e:	f001 f957 	bl	8001840 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000592:	20e9      	movs	r0, #233	@ 0xe9
 8000594:	f000 f8d0 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x20);
 8000598:	2020      	movs	r0, #32
 800059a:	f000 f973 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800059e:	2011      	movs	r0, #17
 80005a0:	f000 f8ca 	bl	8000738 <LCD_CMD>
	HAL_Delay(100);
 80005a4:	2064      	movs	r0, #100	@ 0x64
 80005a6:	f000 fead 	bl	8001304 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 80005aa:	20d1      	movs	r0, #209	@ 0xd1
 80005ac:	f000 f8c4 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x00);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f967 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x71);
 80005b6:	2071      	movs	r0, #113	@ 0x71
 80005b8:	f000 f964 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x19);
 80005bc:	2019      	movs	r0, #25
 80005be:	f000 f961 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 80005c2:	20d0      	movs	r0, #208	@ 0xd0
 80005c4:	f000 f8b8 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x07);
 80005c8:	2007      	movs	r0, #7
 80005ca:	f000 f95b 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x01);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 f958 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x08);
 80005d4:	2008      	movs	r0, #8
 80005d6:	f000 f955 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80005da:	2036      	movs	r0, #54	@ 0x36
 80005dc:	f000 f8ac 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80005e0:	20e8      	movs	r0, #232	@ 0xe8
 80005e2:	f000 f94f 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80005e6:	203a      	movs	r0, #58	@ 0x3a
 80005e8:	f000 f8a6 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005ec:	2005      	movs	r0, #5
 80005ee:	f000 f949 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005f2:	20c1      	movs	r0, #193	@ 0xc1
 80005f4:	f000 f8a0 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x10);
 80005f8:	2010      	movs	r0, #16
 80005fa:	f000 f943 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x10);
 80005fe:	2010      	movs	r0, #16
 8000600:	f000 f940 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x02);
 8000604:	2002      	movs	r0, #2
 8000606:	f000 f93d 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x02);
 800060a:	2002      	movs	r0, #2
 800060c:	f000 f93a 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000610:	20c0      	movs	r0, #192	@ 0xc0
 8000612:	f000 f891 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x00);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f934 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x35);
 800061c:	2035      	movs	r0, #53	@ 0x35
 800061e:	f000 f931 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x00);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f92e 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x00);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f92b 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x01);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 f928 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x02);
 8000634:	2002      	movs	r0, #2
 8000636:	f000 f925 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 800063a:	20c5      	movs	r0, #197	@ 0xc5
 800063c:	f000 f87c 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000640:	2004      	movs	r0, #4
 8000642:	f000 f91f 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000646:	20d2      	movs	r0, #210	@ 0xd2
 8000648:	f000 f876 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x01);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f919 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x44);
 8000652:	2044      	movs	r0, #68	@ 0x44
 8000654:	f000 f916 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000658:	20c8      	movs	r0, #200	@ 0xc8
 800065a:	f000 f86d 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x04);
 800065e:	2004      	movs	r0, #4
 8000660:	f000 f910 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x67);
 8000664:	2067      	movs	r0, #103	@ 0x67
 8000666:	f000 f90d 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x35);
 800066a:	2035      	movs	r0, #53	@ 0x35
 800066c:	f000 f90a 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x04);
 8000670:	2004      	movs	r0, #4
 8000672:	f000 f907 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x08);
 8000676:	2008      	movs	r0, #8
 8000678:	f000 f904 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x06);
 800067c:	2006      	movs	r0, #6
 800067e:	f000 f901 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x24);
 8000682:	2024      	movs	r0, #36	@ 0x24
 8000684:	f000 f8fe 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x01);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 f8fb 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x37);
 800068e:	2037      	movs	r0, #55	@ 0x37
 8000690:	f000 f8f8 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x40);
 8000694:	2040      	movs	r0, #64	@ 0x40
 8000696:	f000 f8f5 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x03);
 800069a:	2003      	movs	r0, #3
 800069c:	f000 f8f2 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x10);
 80006a0:	2010      	movs	r0, #16
 80006a2:	f000 f8ef 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 f8ec 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x80);
 80006ac:	2080      	movs	r0, #128	@ 0x80
 80006ae:	f000 f8e9 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x00);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f8e6 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 80006b8:	202a      	movs	r0, #42	@ 0x2a
 80006ba:	f000 f83d 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x00);
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 f8e0 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x00);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 f8dd 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x01);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f8da 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x3F);
 80006d0:	203f      	movs	r0, #63	@ 0x3f
 80006d2:	f000 f8d7 	bl	8000884 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 80006d6:	202b      	movs	r0, #43	@ 0x2b
 80006d8:	f000 f82e 	bl	8000738 <LCD_CMD>
	LCD_DATA(0x00);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f8d1 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x00);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f8ce 	bl	8000884 <LCD_DATA>
	LCD_DATA(0x01);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 f8cb 	bl	8000884 <LCD_DATA>
	LCD_DATA(0xE0);
 80006ee:	20e0      	movs	r0, #224	@ 0xe0
 80006f0:	f000 f8c8 	bl	8000884 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006f4:	2029      	movs	r0, #41	@ 0x29
 80006f6:	f000 f81f 	bl	8000738 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006fa:	202c      	movs	r0, #44	@ 0x2c
 80006fc:	f000 f81c 	bl	8000738 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000700:	2020      	movs	r0, #32
 8000702:	f000 f819 	bl	8000738 <LCD_CMD>
	HAL_Delay(120);
 8000706:	2078      	movs	r0, #120	@ 0x78
 8000708:	f000 fdfc 	bl	8001304 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 800070c:	2011      	movs	r0, #17
 800070e:	f000 f813 	bl	8000738 <LCD_CMD>
	HAL_Delay(120);
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fdf6 	bl	8001304 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000718:	2029      	movs	r0, #41	@ 0x29
 800071a:	f000 f80d 	bl	8000738 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2101      	movs	r1, #1
 8000722:	4802      	ldr	r0, [pc, #8]	@ (800072c <LCD_Init+0x1ec>)
 8000724:	f001 f88c 	bl	8001840 <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020400 	.word	0x40020400
 8000730:	40020000 	.word	0x40020000
 8000734:	40020800 	.word	0x40020800

08000738 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2110      	movs	r1, #16
 8000746:	484c      	ldr	r0, [pc, #304]	@ (8000878 <LCD_CMD+0x140>)
 8000748:	f001 f87a 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2102      	movs	r1, #2
 8000750:	4849      	ldr	r0, [pc, #292]	@ (8000878 <LCD_CMD+0x140>)
 8000752:	f001 f875 	bl	8001840 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d006      	beq.n	800076e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000766:	4844      	ldr	r0, [pc, #272]	@ (8000878 <LCD_CMD+0x140>)
 8000768:	f001 f86a 	bl	8001840 <HAL_GPIO_WritePin>
 800076c:	e005      	b.n	800077a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000774:	4840      	ldr	r0, [pc, #256]	@ (8000878 <LCD_CMD+0x140>)
 8000776:	f001 f863 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	483c      	ldr	r0, [pc, #240]	@ (800087c <LCD_CMD+0x144>)
 800078a:	f001 f859 	bl	8001840 <HAL_GPIO_WritePin>
 800078e:	e004      	b.n	800079a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2180      	movs	r1, #128	@ 0x80
 8000794:	4839      	ldr	r0, [pc, #228]	@ (800087c <LCD_CMD+0x144>)
 8000796:	f001 f853 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d006      	beq.n	80007b2 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007aa:	4833      	ldr	r0, [pc, #204]	@ (8000878 <LCD_CMD+0x140>)
 80007ac:	f001 f848 	bl	8001840 <HAL_GPIO_WritePin>
 80007b0:	e005      	b.n	80007be <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b8:	482f      	ldr	r0, [pc, #188]	@ (8000878 <LCD_CMD+0x140>)
 80007ba:	f001 f841 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2108      	movs	r1, #8
 80007cc:	482c      	ldr	r0, [pc, #176]	@ (8000880 <LCD_CMD+0x148>)
 80007ce:	f001 f837 	bl	8001840 <HAL_GPIO_WritePin>
 80007d2:	e004      	b.n	80007de <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2108      	movs	r1, #8
 80007d8:	4829      	ldr	r0, [pc, #164]	@ (8000880 <LCD_CMD+0x148>)
 80007da:	f001 f831 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d005      	beq.n	80007f4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2120      	movs	r1, #32
 80007ec:	4824      	ldr	r0, [pc, #144]	@ (8000880 <LCD_CMD+0x148>)
 80007ee:	f001 f827 	bl	8001840 <HAL_GPIO_WritePin>
 80007f2:	e004      	b.n	80007fe <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	4821      	ldr	r0, [pc, #132]	@ (8000880 <LCD_CMD+0x148>)
 80007fa:	f001 f821 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f003 0320 	and.w	r3, r3, #32
 8000804:	2b00      	cmp	r3, #0
 8000806:	d005      	beq.n	8000814 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	481c      	ldr	r0, [pc, #112]	@ (8000880 <LCD_CMD+0x148>)
 800080e:	f001 f817 	bl	8001840 <HAL_GPIO_WritePin>
 8000812:	e004      	b.n	800081e <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2110      	movs	r1, #16
 8000818:	4819      	ldr	r0, [pc, #100]	@ (8000880 <LCD_CMD+0x148>)
 800081a:	f001 f811 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800082e:	4814      	ldr	r0, [pc, #80]	@ (8000880 <LCD_CMD+0x148>)
 8000830:	f001 f806 	bl	8001840 <HAL_GPIO_WritePin>
 8000834:	e005      	b.n	8000842 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800083c:	4810      	ldr	r0, [pc, #64]	@ (8000880 <LCD_CMD+0x148>)
 800083e:	f000 ffff 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	da06      	bge.n	8000858 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000850:	4809      	ldr	r0, [pc, #36]	@ (8000878 <LCD_CMD+0x140>)
 8000852:	f000 fff5 	bl	8001840 <HAL_GPIO_WritePin>
 8000856:	e005      	b.n	8000864 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800085e:	4806      	ldr	r0, [pc, #24]	@ (8000878 <LCD_CMD+0x140>)
 8000860:	f000 ffee 	bl	8001840 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2102      	movs	r1, #2
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <LCD_CMD+0x140>)
 800086a:	f000 ffe9 	bl	8001840 <HAL_GPIO_WritePin>

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40020000 	.word	0x40020000
 800087c:	40020800 	.word	0x40020800
 8000880:	40020400 	.word	0x40020400

08000884 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2110      	movs	r1, #16
 8000892:	484c      	ldr	r0, [pc, #304]	@ (80009c4 <LCD_DATA+0x140>)
 8000894:	f000 ffd4 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2102      	movs	r1, #2
 800089c:	4849      	ldr	r0, [pc, #292]	@ (80009c4 <LCD_DATA+0x140>)
 800089e:	f000 ffcf 	bl	8001840 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b2:	4844      	ldr	r0, [pc, #272]	@ (80009c4 <LCD_DATA+0x140>)
 80008b4:	f000 ffc4 	bl	8001840 <HAL_GPIO_WritePin>
 80008b8:	e005      	b.n	80008c6 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c0:	4840      	ldr	r0, [pc, #256]	@ (80009c4 <LCD_DATA+0x140>)
 80008c2:	f000 ffbd 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d005      	beq.n	80008dc <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	483c      	ldr	r0, [pc, #240]	@ (80009c8 <LCD_DATA+0x144>)
 80008d6:	f000 ffb3 	bl	8001840 <HAL_GPIO_WritePin>
 80008da:	e004      	b.n	80008e6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2180      	movs	r1, #128	@ 0x80
 80008e0:	4839      	ldr	r0, [pc, #228]	@ (80009c8 <LCD_DATA+0x144>)
 80008e2:	f000 ffad 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f6:	4833      	ldr	r0, [pc, #204]	@ (80009c4 <LCD_DATA+0x140>)
 80008f8:	f000 ffa2 	bl	8001840 <HAL_GPIO_WritePin>
 80008fc:	e005      	b.n	800090a <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000904:	482f      	ldr	r0, [pc, #188]	@ (80009c4 <LCD_DATA+0x140>)
 8000906:	f000 ff9b 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	2b00      	cmp	r3, #0
 8000912:	d005      	beq.n	8000920 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2108      	movs	r1, #8
 8000918:	482c      	ldr	r0, [pc, #176]	@ (80009cc <LCD_DATA+0x148>)
 800091a:	f000 ff91 	bl	8001840 <HAL_GPIO_WritePin>
 800091e:	e004      	b.n	800092a <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2108      	movs	r1, #8
 8000924:	4829      	ldr	r0, [pc, #164]	@ (80009cc <LCD_DATA+0x148>)
 8000926:	f000 ff8b 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2120      	movs	r1, #32
 8000938:	4824      	ldr	r0, [pc, #144]	@ (80009cc <LCD_DATA+0x148>)
 800093a:	f000 ff81 	bl	8001840 <HAL_GPIO_WritePin>
 800093e:	e004      	b.n	800094a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2120      	movs	r1, #32
 8000944:	4821      	ldr	r0, [pc, #132]	@ (80009cc <LCD_DATA+0x148>)
 8000946:	f000 ff7b 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	2b00      	cmp	r3, #0
 8000952:	d005      	beq.n	8000960 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	481c      	ldr	r0, [pc, #112]	@ (80009cc <LCD_DATA+0x148>)
 800095a:	f000 ff71 	bl	8001840 <HAL_GPIO_WritePin>
 800095e:	e004      	b.n	800096a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	4819      	ldr	r0, [pc, #100]	@ (80009cc <LCD_DATA+0x148>)
 8000966:	f000 ff6b 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000970:	2b00      	cmp	r3, #0
 8000972:	d006      	beq.n	8000982 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097a:	4814      	ldr	r0, [pc, #80]	@ (80009cc <LCD_DATA+0x148>)
 800097c:	f000 ff60 	bl	8001840 <HAL_GPIO_WritePin>
 8000980:	e005      	b.n	800098e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000988:	4810      	ldr	r0, [pc, #64]	@ (80009cc <LCD_DATA+0x148>)
 800098a:	f000 ff59 	bl	8001840 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	da06      	bge.n	80009a4 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099c:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <LCD_DATA+0x140>)
 800099e:	f000 ff4f 	bl	8001840 <HAL_GPIO_WritePin>
 80009a2:	e005      	b.n	80009b0 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <LCD_DATA+0x140>)
 80009ac:	f000 ff48 	bl	8001840 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2102      	movs	r1, #2
 80009b4:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <LCD_DATA+0x140>)
 80009b6:	f000 ff43 	bl	8001840 <HAL_GPIO_WritePin>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020400 	.word	0x40020400

080009d0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80009de:	202a      	movs	r0, #42	@ 0x2a
 80009e0:	f7ff feaa 	bl	8000738 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff4a 	bl	8000884 <LCD_DATA>
	LCD_DATA(x1);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff45 	bl	8000884 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff3f 	bl	8000884 <LCD_DATA>
	LCD_DATA(x2);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff3a 	bl	8000884 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000a10:	202b      	movs	r0, #43	@ 0x2b
 8000a12:	f7ff fe91 	bl	8000738 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff31 	bl	8000884 <LCD_DATA>
	LCD_DATA(y1);
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff2c 	bl	8000884 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff26 	bl	8000884 <LCD_DATA>
	LCD_DATA(y2);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff21 	bl	8000884 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000a42:	202c      	movs	r0, #44	@ 0x2c
 8000a44:	f7ff fe78 	bl	8000738 <LCD_CMD>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a58:	202c      	movs	r0, #44	@ 0x2c
 8000a5a:	f7ff fe6d 	bl	8000738 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2110      	movs	r1, #16
 8000a62:	481b      	ldr	r0, [pc, #108]	@ (8000ad0 <LCD_Clear+0x80>)
 8000a64:	f000 feec 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4819      	ldr	r0, [pc, #100]	@ (8000ad4 <LCD_Clear+0x84>)
 8000a6e:	f000 fee7 	bl	8001840 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a72:	23ef      	movs	r3, #239	@ 0xef
 8000a74:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ffa8 	bl	80009d0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e016      	b.n	8000ab4 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	e00d      	b.n	8000aa8 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fef6 	bl	8000884 <LCD_DATA>
			LCD_DATA(c);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fef1 	bl	8000884 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	2bef      	cmp	r3, #239	@ 0xef
 8000aac:	d9ee      	bls.n	8000a8c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000aba:	d3e4      	bcc.n	8000a86 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <LCD_Clear+0x84>)
 8000ac2:	f000 febd 	bl	8001840 <HAL_GPIO_WritePin>
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000ae6:	202c      	movs	r0, #44	@ 0x2c
 8000ae8:	f7ff fe26 	bl	8000738 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2110      	movs	r1, #16
 8000af0:	4824      	ldr	r0, [pc, #144]	@ (8000b84 <FillRect+0xac>)
 8000af2:	f000 fea5 	bl	8001840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2101      	movs	r1, #1
 8000afa:	4823      	ldr	r0, [pc, #140]	@ (8000b88 <FillRect+0xb0>)
 8000afc:	f000 fea0 	bl	8001840 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff ff58 	bl	80009d0 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	fb02 f303 	mul.w	r3, r2, r3
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
 8000b32:	e01a      	b.n	8000b6a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	e010      	b.n	8000b5c <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe9f 	bl	8000884 <LCD_DATA>
			LCD_DATA(c);
 8000b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe9a 	bl	8000884 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b52:	3b02      	subs	r3, #2
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8ea      	bhi.n	8000b3a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	3301      	adds	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d8e0      	bhi.n	8000b34 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2101      	movs	r1, #1
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <FillRect+0xb0>)
 8000b78:	f000 fe62 	bl	8001840 <HAL_GPIO_WritePin>
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	@ 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400

08000b8c <LCD_Print>:
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 8000b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b90:	b093      	sub	sp, #76	@ 0x4c
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	466b      	mov	r3, sp
 8000b9e:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d103      	bne.n	8000bae <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 8000baa:	230c      	movs	r3, #12
 8000bac:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d103      	bne.n	8000bbc <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d103      	bne.n	8000bca <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 8000bc6:	2332      	movs	r3, #50	@ 0x32
 8000bc8:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff fb1a 	bl	8000204 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	1c59      	adds	r1, r3, #1
 8000bd8:	1e4b      	subs	r3, r1, #1
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	460a      	mov	r2, r1
 8000bde:	2300      	movs	r3, #0
 8000be0:	4690      	mov	r8, r2
 8000be2:	4699      	mov	r9, r3
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bf0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	4614      	mov	r4, r2
 8000bfe:	461d      	mov	r5, r3
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	00eb      	lsls	r3, r5, #3
 8000c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c0e:	00e2      	lsls	r2, r4, #3
 8000c10:	460b      	mov	r3, r1
 8000c12:	3307      	adds	r3, #7
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	ebad 0d03 	sub.w	sp, sp, r3
 8000c1c:	466b      	mov	r3, sp
 8000c1e:	3300      	adds	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 8000c22:	2300      	movs	r3, #0
 8000c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c26:	e00b      	b.n	8000c40 <LCD_Print+0xb4>
		char_array[i]=text[i];
 8000c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	7819      	ldrb	r1, [r3, #0]
 8000c30:	69fa      	ldr	r2, [r7, #28]
 8000c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c34:	4413      	add	r3, r2
 8000c36:	460a      	mov	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 8000c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1ed      	bne.n	8000c28 <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c50:	e077      	b.n	8000d42 <LCD_Print+0x1b6>
		charInput = char_array[i];
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c56:	4413      	add	r3, r2
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 8000c5c:	7efb      	ldrb	r3, [r7, #27]
 8000c5e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	483c      	ldr	r0, [pc, #240]	@ (8000d58 <LCD_Print+0x1cc>)
 8000c66:	f000 fdeb 	bl	8001840 <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 8000c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c6e:	fb03 f202 	mul.w	r2, r3, r2
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	4413      	add	r3, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c7e:	fb03 f202 	mul.w	r2, r3, r2
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	441a      	add	r2, r3
 8000c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c88:	4413      	add	r3, r2
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c92:	4413      	add	r3, r2
 8000c94:	4622      	mov	r2, r4
 8000c96:	f7ff fe9b 	bl	80009d0 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c9e:	e044      	b.n	8000d2a <LCD_Print+0x19e>
			if (fontSize == 1) {
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10b      	bne.n	8000cbe <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3b20      	subs	r3, #32
 8000caa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a29      	ldr	r2, [pc, #164]	@ (8000d5c <LCD_Print+0x1d0>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d10c      	bne.n	8000cde <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3b20      	subs	r3, #32
 8000cc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4a22      	ldr	r2, [pc, #136]	@ (8000d60 <LCD_Print+0x1d4>)
 8000cd8:	4413      	add	r3, r2
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 8000cde:	2301      	movs	r3, #1
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce2:	e01b      	b.n	8000d1c <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8000ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2201      	movs	r2, #1
 8000cec:	409a      	lsls	r2, r3
 8000cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	dd02      	ble.n	8000cfc <LCD_Print+0x170>
					c = color;
 8000cf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cfa:	e001      	b.n	8000d00 <LCD_Print+0x174>
				} else {
					c = background;
 8000cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 8000d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d02:	121b      	asrs	r3, r3, #8
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fdbc 	bl	8000884 <LCD_DATA>
				LCD_DATA(c);
 8000d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fdb7 	bl	8000884 <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 8000d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d18:	3301      	adds	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dadf      	bge.n	8000ce4 <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 8000d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d26:	3301      	adds	r3, #1
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbb6      	blt.n	8000ca0 <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2101      	movs	r1, #1
 8000d36:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <LCD_Print+0x1cc>)
 8000d38:	f000 fd82 	bl	8001840 <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3e:	3301      	adds	r3, #1
 8000d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d46:	429a      	cmp	r2, r3
 8000d48:	db83      	blt.n	8000c52 <LCD_Print+0xc6>
 8000d4a:	46b5      	mov	sp, r6
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	374c      	adds	r7, #76	@ 0x4c
 8000d50:	46bd      	mov	sp, r7
 8000d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d56:	bf00      	nop
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	08002460 	.word	0x08002460
 8000d60:	080028d4 	.word	0x080028d4

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 fa59 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f847 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 f8e7 	bl	8000f44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d76:	f000 f8af 	bl	8000ed8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	LCD_Init();
 8000d7a:	f7ff fbe1 	bl	8000540 <LCD_Init>

	LCD_Clear(0x00);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fe66 	bl	8000a50 <LCD_Clear>
	FillRect(0, 0, 319, 239, 0xFFFF);
 8000d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	23ef      	movs	r3, #239	@ 0xef
 8000d8c:	f240 123f 	movw	r2, #319	@ 0x13f
 8000d90:	2100      	movs	r1, #0
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fea0 	bl	8000ad8 <FillRect>
	FillRect(50, 60, 20, 20, 0xF800);
 8000d98:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2314      	movs	r3, #20
 8000da0:	2214      	movs	r2, #20
 8000da2:	213c      	movs	r1, #60	@ 0x3c
 8000da4:	2032      	movs	r0, #50	@ 0x32
 8000da6:	f7ff fe97 	bl	8000ad8 <FillRect>
	FillRect(70, 60, 20, 20, 0x07E0);
 8000daa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2314      	movs	r3, #20
 8000db2:	2214      	movs	r2, #20
 8000db4:	213c      	movs	r1, #60	@ 0x3c
 8000db6:	2046      	movs	r0, #70	@ 0x46
 8000db8:	f7ff fe8e 	bl	8000ad8 <FillRect>
	FillRect(90, 60, 20, 20, 0x001F);
 8000dbc:	231f      	movs	r3, #31
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	2214      	movs	r2, #20
 8000dc4:	213c      	movs	r1, #60	@ 0x3c
 8000dc6:	205a      	movs	r0, #90	@ 0x5a
 8000dc8:	f7ff fe86 	bl	8000ad8 <FillRect>

	//LCD_Bitmap(0, 0, 320, 240, fondo);
	 FillRect(0, 0, 319, 206, 0x1911);
 8000dcc:	f641 1311 	movw	r3, #6417	@ 0x1911
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	23ce      	movs	r3, #206	@ 0xce
 8000dd4:	f240 123f 	movw	r2, #319	@ 0x13f
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fe7c 	bl	8000ad8 <FillRect>

	  LCD_Print("Hola Mundo", 20, 100, 1, 0x001F, 0xCAB9);
 8000de0:	f64c 23b9 	movw	r3, #51897	@ 0xcab9
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	231f      	movs	r3, #31
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2301      	movs	r3, #1
 8000dec:	2264      	movs	r2, #100	@ 0x64
 8000dee:	2114      	movs	r1, #20
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <main+0x98>)
 8000df2:	f7ff fecb 	bl	8000b8c <LCD_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000df6:	bf00      	nop
 8000df8:	e7fd      	b.n	8000df6 <main+0x92>
 8000dfa:	bf00      	nop
 8000dfc:	08002454 	.word	0x08002454

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	@ 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	2234      	movs	r2, #52	@ 0x34
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 fae7 	bl	80023e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	4a28      	ldr	r2, [pc, #160]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <SystemClock_Config+0xd4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e4c:	4a21      	ldr	r2, [pc, #132]	@ (8000ed4 <SystemClock_Config+0xd4>)
 8000e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <SystemClock_Config+0xd4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e74:	2308      	movs	r3, #8
 8000e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e78:	2350      	movs	r3, #80	@ 0x50
 8000e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 ff81 	bl	8001d94 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e98:	f000 f8e0 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fcdb 	bl	8001874 <HAL_RCC_ClockConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ec4:	f000 f8ca 	bl	800105c <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	@ 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000edc:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ede:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <MX_SPI1_Init+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ee4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f24:	220a      	movs	r2, #10
 8000f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_SPI1_Init+0x64>)
 8000f2a:	f001 f9d1 	bl	80022d0 <HAL_SPI_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f34:	f000 f892 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	40013000 	.word	0x40013000

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a3a      	ldr	r2, [pc, #232]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b38      	ldr	r3, [pc, #224]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b34      	ldr	r3, [pc, #208]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a33      	ldr	r2, [pc, #204]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b31      	ldr	r3, [pc, #196]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800104c <MX_GPIO_Init+0x108>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <MX_GPIO_Init+0x108>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b26      	ldr	r3, [pc, #152]	@ (800104c <MX_GPIO_Init+0x108>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a25      	ldr	r2, [pc, #148]	@ (800104c <MX_GPIO_Init+0x108>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b23      	ldr	r3, [pc, #140]	@ (800104c <MX_GPIO_Init+0x108>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2182      	movs	r1, #130	@ 0x82
 8000fce:	4820      	ldr	r0, [pc, #128]	@ (8001050 <MX_GPIO_Init+0x10c>)
 8000fd0:	f000 fc36 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f240 7113 	movw	r1, #1811	@ 0x713
 8000fda:	481e      	ldr	r0, [pc, #120]	@ (8001054 <MX_GPIO_Init+0x110>)
 8000fdc:	f000 fc30 	bl	8001840 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f240 4179 	movw	r1, #1145	@ 0x479
 8000fe6:	481c      	ldr	r0, [pc, #112]	@ (8001058 <MX_GPIO_Init+0x114>)
 8000fe8:	f000 fc2a 	bl	8001840 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8000fec:	2382      	movs	r3, #130	@ 0x82
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4813      	ldr	r0, [pc, #76]	@ (8001050 <MX_GPIO_Init+0x10c>)
 8001004:	f000 fa88 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001008:	f240 7313 	movw	r3, #1811	@ 0x713
 800100c:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <MX_GPIO_Init+0x110>)
 8001022:	f000 fa79 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001026:	f240 4379 	movw	r3, #1145	@ 0x479
 800102a:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <MX_GPIO_Init+0x114>)
 8001040:	f000 fa6a 	bl	8001518 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020800 	.word	0x40020800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	4a0f      	ldr	r2, [pc, #60]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107c:	6453      	str	r3, [r2, #68]	@ 0x44
 800107e:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	@ (800113c <HAL_SPI_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12b      	bne.n	8001132 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_SPI_MspInit+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001112:	23e0      	movs	r3, #224	@ 0xe0
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <HAL_SPI_MspInit+0x8c>)
 800112e:	f000 f9f3 	bl	8001518 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40013000 	.word	0x40013000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f891 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001204 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011d0:	f7ff ffea 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	@ (800120c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f001 f8fb 	bl	80023f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff fdb1 	bl	8000d64 <main>
  bx  lr    
 8001202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001210:	080034d4 	.word	0x080034d4
  ldr r2, =_sbss
 8001214:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001218:	20000084 	.word	0x20000084

0800121c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC_IRQHandler>
	...

08001220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <HAL_Init+0x40>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <HAL_Init+0x40>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800123a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_Init+0x40>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f931 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff ff08 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f93b 	bl	80014fe <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f911 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000080 	.word	0x20000080

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000080 	.word	0x20000080

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff ffee 	bl	80012ec <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800132a:	bf00      	nop
 800132c:	f7ff ffde 	bl	80012ec <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	@ (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	@ (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff8e 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff47 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff5c 	bl	8001394 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff8e 	bl	8001404 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffb0 	bl	800146c <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e165      	b.n	8001800 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8154 	bne.w	80017fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	2b02      	cmp	r3, #2
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d017      	beq.n	8001608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d123      	bne.n	800165c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80ae 	beq.w	80017fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <HAL_GPIO_Init+0x300>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001818 <HAL_GPIO_Init+0x300>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001818 <HAL_GPIO_Init+0x300>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ba:	4a58      	ldr	r2, [pc, #352]	@ (800181c <HAL_GPIO_Init+0x304>)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001820 <HAL_GPIO_Init+0x308>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d025      	beq.n	8001732 <HAL_GPIO_Init+0x21a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001824 <HAL_GPIO_Init+0x30c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01f      	beq.n	800172e <HAL_GPIO_Init+0x216>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001828 <HAL_GPIO_Init+0x310>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d019      	beq.n	800172a <HAL_GPIO_Init+0x212>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4c      	ldr	r2, [pc, #304]	@ (800182c <HAL_GPIO_Init+0x314>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x20e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4b      	ldr	r2, [pc, #300]	@ (8001830 <HAL_GPIO_Init+0x318>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x20a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4a      	ldr	r2, [pc, #296]	@ (8001834 <HAL_GPIO_Init+0x31c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x206>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a49      	ldr	r2, [pc, #292]	@ (8001838 <HAL_GPIO_Init+0x320>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x202>
 8001716:	2306      	movs	r3, #6
 8001718:	e00c      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800171a:	2307      	movs	r3, #7
 800171c:	e00a      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800171e:	2305      	movs	r3, #5
 8001720:	e008      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 8001722:	2304      	movs	r3, #4
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x21c>
 8001732:	2300      	movs	r3, #0
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f002 0203 	and.w	r2, r2, #3
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001744:	4935      	ldr	r1, [pc, #212]	@ (800181c <HAL_GPIO_Init+0x304>)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001752:	4b3a      	ldr	r3, [pc, #232]	@ (800183c <HAL_GPIO_Init+0x324>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001776:	4a31      	ldr	r2, [pc, #196]	@ (800183c <HAL_GPIO_Init+0x324>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800177c:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <HAL_GPIO_Init+0x324>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a0:	4a26      	ldr	r2, [pc, #152]	@ (800183c <HAL_GPIO_Init+0x324>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a6:	4b25      	ldr	r3, [pc, #148]	@ (800183c <HAL_GPIO_Init+0x324>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ca:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <HAL_GPIO_Init+0x324>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_GPIO_Init+0x324>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f4:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_GPIO_Init+0x324>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	f67f ae96 	bls.w	8001534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3724      	adds	r7, #36	@ 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40013800 	.word	0x40013800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400
 8001828:	40020800 	.word	0x40020800
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40021000 	.word	0x40021000
 8001834:	40021400 	.word	0x40021400
 8001838:	40021800 	.word	0x40021800
 800183c:	40013c00 	.word	0x40013c00

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
 800184c:	4613      	mov	r3, r2
 800184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001850:	787b      	ldrb	r3, [r7, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800185c:	e003      	b.n	8001866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	041a      	lsls	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	619a      	str	r2, [r3, #24]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0cc      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b68      	ldr	r3, [pc, #416]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d90c      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b65      	ldr	r3, [pc, #404]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b63      	ldr	r3, [pc, #396]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b59      	ldr	r3, [pc, #356]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a58      	ldr	r2, [pc, #352]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b50      	ldr	r3, [pc, #320]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	494d      	ldr	r1, [pc, #308]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d044      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b47      	ldr	r3, [pc, #284]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d119      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d003      	beq.n	8001932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192e:	2b03      	cmp	r3, #3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b3f      	ldr	r3, [pc, #252]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e067      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4934      	ldr	r1, [pc, #208]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7ff fcc2 	bl	80012ec <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff fcbe 	bl	80012ec <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e04f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 020c 	and.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1eb      	bne.n	800196c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d20c      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e032      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4916      	ldr	r1, [pc, #88]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490e      	ldr	r1, [pc, #56]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fa:	f000 f821 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	5ccb      	ldrb	r3, [r1, r3]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a09      	ldr	r2, [pc, #36]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc22 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	40023800 	.word	0x40023800
 8001a34:	080034b4 	.word	0x080034b4
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b0a6      	sub	sp, #152	@ 0x98
 8001a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a66:	4bc8      	ldr	r3, [pc, #800]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	f200 817e 	bhi.w	8001d70 <HAL_RCC_GetSysClockFreq+0x330>
 8001a74:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001ab1 	.word	0x08001ab1
 8001a80:	08001d71 	.word	0x08001d71
 8001a84:	08001d71 	.word	0x08001d71
 8001a88:	08001d71 	.word	0x08001d71
 8001a8c:	08001ab9 	.word	0x08001ab9
 8001a90:	08001d71 	.word	0x08001d71
 8001a94:	08001d71 	.word	0x08001d71
 8001a98:	08001d71 	.word	0x08001d71
 8001a9c:	08001ac1 	.word	0x08001ac1
 8001aa0:	08001d71 	.word	0x08001d71
 8001aa4:	08001d71 	.word	0x08001d71
 8001aa8:	08001d71 	.word	0x08001d71
 8001aac:	08001c2b 	.word	0x08001c2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4bb6      	ldr	r3, [pc, #728]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001ab6:	e15f      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab8:	4bb5      	ldr	r3, [pc, #724]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001abe:	e15b      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac0:	4bb1      	ldr	r3, [pc, #708]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001acc:	4bae      	ldr	r3, [pc, #696]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d031      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad8:	4bab      	ldr	r3, [pc, #684]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	2200      	movs	r2, #0
 8001ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8001aec:	2300      	movs	r3, #0
 8001aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001af0:	4ba7      	ldr	r3, [pc, #668]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001af2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001af6:	462a      	mov	r2, r5
 8001af8:	fb03 f202 	mul.w	r2, r3, r2
 8001afc:	2300      	movs	r3, #0
 8001afe:	4621      	mov	r1, r4
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	4aa2      	ldr	r2, [pc, #648]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b08:	4621      	mov	r1, r4
 8001b0a:	fba1 1202 	umull	r1, r2, r1, r2
 8001b0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001b10:	460a      	mov	r2, r1
 8001b12:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001b14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001b16:	4413      	add	r3, r2
 8001b18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b1e:	2200      	movs	r2, #0
 8001b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001b2c:	f7fe fb72 	bl	8000214 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b3a:	e064      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3c:	4b92      	ldr	r3, [pc, #584]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	2200      	movs	r2, #0
 8001b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b46:	657a      	str	r2, [r7, #84]	@ 0x54
 8001b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b50:	2300      	movs	r3, #0
 8001b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001b58:	4622      	mov	r2, r4
 8001b5a:	462b      	mov	r3, r5
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	f04f 0100 	mov.w	r1, #0
 8001b64:	0159      	lsls	r1, r3, #5
 8001b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6a:	0150      	lsls	r0, r2, #5
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4621      	mov	r1, r4
 8001b72:	1a51      	subs	r1, r2, r1
 8001b74:	6139      	str	r1, [r7, #16]
 8001b76:	4629      	mov	r1, r5
 8001b78:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b8a:	4659      	mov	r1, fp
 8001b8c:	018b      	lsls	r3, r1, #6
 8001b8e:	4651      	mov	r1, sl
 8001b90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b94:	4651      	mov	r1, sl
 8001b96:	018a      	lsls	r2, r1, #6
 8001b98:	4651      	mov	r1, sl
 8001b9a:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9e:	4659      	mov	r1, fp
 8001ba0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb8:	4690      	mov	r8, r2
 8001bba:	4699      	mov	r9, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	eb18 0303 	adds.w	r3, r8, r3
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	eb49 0303 	adc.w	r3, r9, r3
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd8:	4629      	mov	r1, r5
 8001bda:	028b      	lsls	r3, r1, #10
 8001bdc:	4621      	mov	r1, r4
 8001bde:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be2:	4621      	mov	r1, r4
 8001be4:	028a      	lsls	r2, r1, #10
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bee:	2200      	movs	r2, #0
 8001bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8001bf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001bf8:	f7fe fb0c 	bl	8000214 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c06:	4b60      	ldr	r3, [pc, #384]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	3301      	adds	r3, #1
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c28:	e0a6      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c2a:	4b57      	ldr	r3, [pc, #348]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c36:	4b54      	ldr	r3, [pc, #336]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d02a      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c42:	4b51      	ldr	r3, [pc, #324]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	099b      	lsrs	r3, r3, #6
 8001c48:	2200      	movs	r2, #0
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c54:	2100      	movs	r1, #0
 8001c56:	4b4e      	ldr	r3, [pc, #312]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c58:	fb03 f201 	mul.w	r2, r3, r1
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	fb00 f303 	mul.w	r3, r0, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	4a4a      	ldr	r2, [pc, #296]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c66:	fba0 1202 	umull	r1, r2, r0, r2
 8001c6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001c72:	4413      	add	r3, r2
 8001c74:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c88:	f7fe fac4 	bl	8000214 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c96:	e05b      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c98:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001caa:	623b      	str	r3, [r7, #32]
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	f04f 0000 	mov.w	r0, #0
 8001cbc:	f04f 0100 	mov.w	r1, #0
 8001cc0:	0159      	lsls	r1, r3, #5
 8001cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc6:	0150      	lsls	r0, r2, #5
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4641      	mov	r1, r8
 8001cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cec:	ebb2 040a 	subs.w	r4, r2, sl
 8001cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	00eb      	lsls	r3, r5, #3
 8001cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d02:	00e2      	lsls	r2, r4, #3
 8001d04:	4614      	mov	r4, r2
 8001d06:	461d      	mov	r5, r3
 8001d08:	4643      	mov	r3, r8
 8001d0a:	18e3      	adds	r3, r4, r3
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	464b      	mov	r3, r9
 8001d10:	eb45 0303 	adc.w	r3, r5, r3
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d22:	4629      	mov	r1, r5
 8001d24:	028b      	lsls	r3, r1, #10
 8001d26:	4621      	mov	r1, r4
 8001d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	028a      	lsls	r2, r1, #10
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	61fa      	str	r2, [r7, #28]
 8001d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d42:	f7fe fa67 	bl	8000214 <__aeabi_uldivmod>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	0f1b      	lsrs	r3, r3, #28
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8001d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d6e:	e003      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3798      	adds	r7, #152	@ 0x98
 8001d80:	46bd      	mov	sp, r7
 8001d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	017d7840 	.word	0x017d7840

08001d94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e28d      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8083 	beq.w	8001eba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001db4:	4b94      	ldr	r3, [pc, #592]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d019      	beq.n	8001df4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dc0:	4b91      	ldr	r3, [pc, #580]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd8:	d00c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dda:	4b8b      	ldr	r3, [pc, #556]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d112      	bne.n	8001e0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de6:	4b88      	ldr	r3, [pc, #544]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001df2:	d10b      	bne.n	8001e0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	4b84      	ldr	r3, [pc, #528]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d05b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x124>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d157      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e25a      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e14:	d106      	bne.n	8001e24 <HAL_RCC_OscConfig+0x90>
 8001e16:	4b7c      	ldr	r3, [pc, #496]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xcc>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xb4>
 8001e2e:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a75      	ldr	r2, [pc, #468]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b73      	ldr	r3, [pc, #460]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a72      	ldr	r2, [pc, #456]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xcc>
 8001e48:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b6c      	ldr	r3, [pc, #432]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6b      	ldr	r2, [pc, #428]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff fa40 	bl	80012ec <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fa3c 	bl	80012ec <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e21f      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xdc>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fa2c 	bl	80012ec <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fa28 	bl	80012ec <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	@ 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e20b      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b57      	ldr	r3, [pc, #348]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x104>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06f      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ec6:	4b50      	ldr	r3, [pc, #320]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d017      	beq.n	8001f02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ede:	4b4a      	ldr	r3, [pc, #296]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b47      	ldr	r3, [pc, #284]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef6:	4b44      	ldr	r3, [pc, #272]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x186>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1d3      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4937      	ldr	r1, [pc, #220]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b34      	ldr	r3, [pc, #208]	@ (800200c <HAL_RCC_OscConfig+0x278>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f9d5 	bl	80012ec <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff f9d1 	bl	80012ec <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1b4      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4925      	ldr	r1, [pc, #148]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_RCC_OscConfig+0x278>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff f9b4 	bl	80012ec <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff f9b0 	bl	80012ec <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e193      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d036      	beq.n	8002020 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f994 	bl	80012ec <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f990 	bl	80012ec <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e173      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x234>
 8001fe6:	e01b      	b.n	8002020 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff f97d 	bl	80012ec <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	e00e      	b.n	8002014 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f979 	bl	80012ec <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d907      	bls.n	8002014 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e15c      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
 8002008:	40023800 	.word	0x40023800
 800200c:	42470000 	.word	0x42470000
 8002010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b8a      	ldr	r3, [pc, #552]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ea      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8097 	beq.w	800215c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b83      	ldr	r3, [pc, #524]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10f      	bne.n	800205e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b7f      	ldr	r3, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a7e      	ldr	r2, [pc, #504]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b7c      	ldr	r3, [pc, #496]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b79      	ldr	r3, [pc, #484]	@ (8002244 <HAL_RCC_OscConfig+0x4b0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b76      	ldr	r3, [pc, #472]	@ (8002244 <HAL_RCC_OscConfig+0x4b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a75      	ldr	r2, [pc, #468]	@ (8002244 <HAL_RCC_OscConfig+0x4b0>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7ff f939 	bl	80012ec <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7ff f935 	bl	80012ec <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e118      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b6c      	ldr	r3, [pc, #432]	@ (8002244 <HAL_RCC_OscConfig+0x4b0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x31e>
 80020a4:	4b66      	ldr	r3, [pc, #408]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a8:	4a65      	ldr	r2, [pc, #404]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b0:	e01c      	b.n	80020ec <HAL_RCC_OscConfig+0x358>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x340>
 80020ba:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	4a60      	ldr	r2, [pc, #384]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x358>
 80020d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a59      	ldr	r2, [pc, #356]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e0:	4b57      	ldr	r3, [pc, #348]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e4:	4a56      	ldr	r2, [pc, #344]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff f8fa 	bl	80012ec <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7ff f8f6 	bl	80012ec <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0d7      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ee      	beq.n	80020fc <HAL_RCC_OscConfig+0x368>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff f8e4 	bl	80012ec <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff f8e0 	bl	80012ec <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0c1      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213e:	4b40      	ldr	r3, [pc, #256]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ee      	bne.n	8002128 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b3b      	ldr	r3, [pc, #236]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800215a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80ad 	beq.w	80022c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002166:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b08      	cmp	r3, #8
 8002170:	d060      	beq.n	8002234 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d145      	bne.n	8002206 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <HAL_RCC_OscConfig+0x4b4>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff f8b4 	bl	80012ec <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff f8b0 	bl	80012ec <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e093      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b29      	ldr	r3, [pc, #164]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	019b      	lsls	r3, r3, #6
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	071b      	lsls	r3, r3, #28
 80021d2:	491b      	ldr	r1, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_RCC_OscConfig+0x4b4>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7ff f885 	bl	80012ec <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e6:	f7ff f881 	bl	80012ec <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e064      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x452>
 8002204:	e05c      	b.n	80022c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_RCC_OscConfig+0x4b4>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f86e 	bl	80012ec <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f86a 	bl	80012ec <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04d      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x4ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x480>
 8002232:	e045      	b.n	80022c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e040      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000
 8002248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800224c:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <HAL_RCC_OscConfig+0x538>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d030      	beq.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d129      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d122      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002284:	4293      	cmp	r3, r2
 8002286:	d119      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	3b01      	subs	r3, #1
 8002296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d10f      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e07b      	b.n	80023da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d108      	bne.n	80022fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022f2:	d009      	beq.n	8002308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
 80022fa:	e005      	b.n	8002308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fec8 	bl	80010b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800233e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	ea42 0103 	orr.w	r1, r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	f003 0104 	and.w	r1, r3, #4
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	f003 0210 	and.w	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <memset>:
 80023e2:	4402      	add	r2, r0
 80023e4:	4603      	mov	r3, r0
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d100      	bne.n	80023ec <memset+0xa>
 80023ea:	4770      	bx	lr
 80023ec:	f803 1b01 	strb.w	r1, [r3], #1
 80023f0:	e7f9      	b.n	80023e6 <memset+0x4>
	...

080023f4 <__libc_init_array>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	4d0d      	ldr	r5, [pc, #52]	@ (800242c <__libc_init_array+0x38>)
 80023f8:	4c0d      	ldr	r4, [pc, #52]	@ (8002430 <__libc_init_array+0x3c>)
 80023fa:	1b64      	subs	r4, r4, r5
 80023fc:	10a4      	asrs	r4, r4, #2
 80023fe:	2600      	movs	r6, #0
 8002400:	42a6      	cmp	r6, r4
 8002402:	d109      	bne.n	8002418 <__libc_init_array+0x24>
 8002404:	4d0b      	ldr	r5, [pc, #44]	@ (8002434 <__libc_init_array+0x40>)
 8002406:	4c0c      	ldr	r4, [pc, #48]	@ (8002438 <__libc_init_array+0x44>)
 8002408:	f000 f818 	bl	800243c <_init>
 800240c:	1b64      	subs	r4, r4, r5
 800240e:	10a4      	asrs	r4, r4, #2
 8002410:	2600      	movs	r6, #0
 8002412:	42a6      	cmp	r6, r4
 8002414:	d105      	bne.n	8002422 <__libc_init_array+0x2e>
 8002416:	bd70      	pop	{r4, r5, r6, pc}
 8002418:	f855 3b04 	ldr.w	r3, [r5], #4
 800241c:	4798      	blx	r3
 800241e:	3601      	adds	r6, #1
 8002420:	e7ee      	b.n	8002400 <__libc_init_array+0xc>
 8002422:	f855 3b04 	ldr.w	r3, [r5], #4
 8002426:	4798      	blx	r3
 8002428:	3601      	adds	r6, #1
 800242a:	e7f2      	b.n	8002412 <__libc_init_array+0x1e>
 800242c:	080034cc 	.word	0x080034cc
 8002430:	080034cc 	.word	0x080034cc
 8002434:	080034cc 	.word	0x080034cc
 8002438:	080034d0 	.word	0x080034d0

0800243c <_init>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	bf00      	nop
 8002440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002442:	bc08      	pop	{r3}
 8002444:	469e      	mov	lr, r3
 8002446:	4770      	bx	lr

08002448 <_fini>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	bf00      	nop
 800244c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244e:	bc08      	pop	{r3}
 8002450:	469e      	mov	lr, r3
 8002452:	4770      	bx	lr
