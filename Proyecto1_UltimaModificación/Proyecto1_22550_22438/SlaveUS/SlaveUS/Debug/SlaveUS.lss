
SlaveUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000741  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000c4  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f9f  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a8  00000000  00000000  00001863  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f8  00000000  00000000  0000210b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000244  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d1  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000065e  0000065e  00000732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_Slave_Init 00000014  000005fe  000005fe  000006d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.initUS  00000056  00000516  00000516  000005ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.US_Request 00000016  000005d2  000005d2  000006a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000064  00000454  00000454  00000528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_24 00000092  00000348  00000348  0000041c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_4 000000c8  00000280  00000280  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.last_state.2011 00000001  00800102  00800102  00000741  2**0
                  ALLOC
 21 .bss.ventilaron 00000001  00800103  00800103  00000741  2**0
                  ALLOC
 22 .bss.temperatura 00000001  00800104  00800104  00000741  2**0
                  ALLOC
 23 .data.distance 00000001  00800105  0000066c  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss.pulse    00000002  00800100  00800100  00000741  2**0
                  ALLOC
 25 .bss.buffer   00000001  00800106  00800106  00000741  2**0
                  ALLOC
 26 .text         00000008  00000648  00000648  0000071c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         000000de  000000ce  000000ce  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         0000005e  000004b8  000004b8  0000058c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         0000007a  000003da  000003da  000004ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         0000000c  0000063c  0000063c  00000710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text         00000006  00000658  00000658  0000072c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text         0000000e  00000612  00000612  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         0000000e  00000620  00000620  000006f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text         00000022  000005b0  000005b0  00000684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text         00000044  0000056c  0000056c  00000640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text         0000000e  0000062e  0000062e  00000702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         00000008  00000650  00000650  00000724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         000000d4  000001ac  000001ac  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_fini 00000002  00000666  00000666  0000073a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_funcs_on_exit 00000002  00000668  00000668  0000073c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_simulator_exit 00000002  0000066a  0000066a  0000073e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.exit    00000016  000005e8  000005e8  000006bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text._Exit   00000004  00000662  00000662  00000736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
   8:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
   c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  10:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_4>
  14:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  18:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  1c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  20:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  24:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  28:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  2c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  30:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  34:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  38:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  3c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  40:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  44:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  48:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  4c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  50:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  54:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  58:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  5c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>
  60:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_24>
  64:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 05       	cpc	r16, r1
  6c:	80 01       	movw	r16, r0
  6e:	05 01       	movw	r0, r10
  70:	06 00       	.word	0x0006	; ????
  72:	06 6c       	ori	r16, 0xC6	; 198
  74:	01 06       	cpc	r0, r17
  76:	01 07       	cpc	r16, r17
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 2a 02 	call	0x454	; 0x454 <main>
  c6:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

0000065e <__bad_interrupt>:
 65e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Slave_Init:

000005fe <I2C_Slave_Init>:
 5fe:	97 b1       	in	r25, 0x07	; 7
 600:	9f 7c       	andi	r25, 0xCF	; 207
 602:	97 b9       	out	0x07, r25	; 7
 604:	88 0f       	add	r24, r24
 606:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
 60a:	85 e4       	ldi	r24, 0x45	; 69
 60c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 610:	08 95       	ret

Disassembly of section .text.initUS:

00000516 <initUS>:



//-------- Funciones ------------------------------ 
void initUS(void){
	DDRC |= (1 << DDC0);  // Configurar PC0 como salida; Trigger pin
 516:	87 b1       	in	r24, 0x07	; 7
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PORTC0); //Asegurar señal en bajo antes de iniciar comunicación
 51c:	88 b1       	in	r24, 0x08	; 8
 51e:	8e 7f       	andi	r24, 0xFE	; 254
 520:	88 b9       	out	0x08, r24	; 8
	//DDRC &= ~(1<<PINC1); // Configurar PC1 como entrada; Echo pin 
	PORTC |= (1 << PINC1); // Pull-up en ECHO_PIN
 522:	88 b1       	in	r24, 0x08	; 8
 524:	82 60       	ori	r24, 0x02	; 2
 526:	88 b9       	out	0x08, r24	; 8

	
	// Configuración Pin Change para PC1 (Echo del US)
	PCICR |= (1 << PCIE1);   // Habilita PCINT1 (PORTC)
 528:	e8 e6       	ldi	r30, 0x68	; 104
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT9); // Habilita PCINT9 (PC1)
 532:	ec e6       	ldi	r30, 0x6C	; 108
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS11); // Prescaler 8
 53c:	e1 e8       	ldi	r30, 0x81	; 129
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	82 60       	ori	r24, 0x02	; 2
 544:	80 83       	st	Z, r24
	TCNT1 = 0; // Inicia en 0
 546:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 54a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
 54e:	a0 e8       	ldi	r26, 0x80	; 128
 550:	b0 e0       	ldi	r27, 0x00	; 0
 552:	8c 91       	ld	r24, X
 554:	82 68       	ori	r24, 0x82	; 130
 556:	8c 93       	st	X, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 558:	80 81       	ld	r24, Z
 55a:	88 61       	ori	r24, 0x18	; 24
 55c:	80 83       	st	Z, r24
	ICR1 = 20000; // 20 ms (50 Hz)
 55e:	80 e2       	ldi	r24, 0x20	; 32
 560:	9e e4       	ldi	r25, 0x4E	; 78
 562:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 566:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 56a:	08 95       	ret

Disassembly of section .text.US_Request:

000005d2 <US_Request>:

}

void US_Request(void){
	PORTC |= (1 << PINC0);  // Enviar señal alta
 5d2:	88 b1       	in	r24, 0x08	; 8
 5d4:	81 60       	ori	r24, 0x01	; 1
 5d6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d8:	85 e3       	ldi	r24, 0x35	; 53
 5da:	8a 95       	dec	r24
 5dc:	f1 f7       	brne	.-4      	; 0x5da <US_Request+0x8>
 5de:	00 00       	nop
	_delay_us(10);  // Mantener señal baja al menos 10us
	PORTC &= ~(1 << PINC0);  // Bajar la señal
 5e0:	88 b1       	in	r24, 0x08	; 8
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	88 b9       	out	0x08, r24	; 8
 5e6:	08 95       	ret

Disassembly of section .text.main:

00000454 <main>:



int main(void)
{
	DDRB |= (1<<DDB5);
 454:	84 b1       	in	r24, 0x04	; 4
 456:	80 62       	ori	r24, 0x20	; 32
 458:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<PORTB5);
 45a:	85 b1       	in	r24, 0x05	; 5
 45c:	8f 7d       	andi	r24, 0xDF	; 223
 45e:	85 b9       	out	0x05, r24	; 5
	
	I2C_Slave_Init(SlaveAddress);
 460:	80 e4       	ldi	r24, 0x40	; 64
 462:	0e 94 ff 02 	call	0x5fe	; 0x5fe <I2C_Slave_Init>
	initUS();
 466:	0e 94 8b 02 	call	0x516	; 0x516 <initUS>
	
	sei(); //Habilita las interrupciones
 46a:	78 94       	sei
	
	// Configurar A0 como salida (para el motor DC)
	DDRC |= (1 << DDC3);
 46c:	87 b1       	in	r24, 0x07	; 7
 46e:	88 60       	ori	r24, 0x08	; 8
 470:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PORTC3);  // Motor apagado por defecto
 472:	88 b1       	in	r24, 0x08	; 8
 474:	87 7f       	andi	r24, 0xF7	; 247
 476:	88 b9       	out	0x08, r24	; 8
	
    while(1)
    {
		//Se inicia calibración del sensor
		US_Request();
 478:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <US_Request>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	81 ee       	ldi	r24, 0xE1	; 225
 480:	94 e0       	ldi	r25, 0x04	; 4
 482:	21 50       	subi	r18, 0x01	; 1
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	90 40       	sbci	r25, 0x00	; 0
 488:	e1 f7       	brne	.-8      	; 0x482 <main+0x2e>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <main+0x38>
 48c:	00 00       	nop
		//Delay para calibración.
		_delay_ms(100);
		
		// Control del motor según la temperatura recibida
		if (temperatura <= 30) {
 48e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temperatura>
 492:	8f 31       	cpi	r24, 0x1F	; 31
 494:	20 f4       	brcc	.+8      	; 0x49e <main+0x4a>
			PORTC |= (1 << PORTC3);  // Encender motor
 496:	88 b1       	in	r24, 0x08	; 8
 498:	88 60       	ori	r24, 0x08	; 8
 49a:	88 b9       	out	0x08, r24	; 8
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <main+0x50>
			} else {
			PORTC &= ~(1 << PORTC3); // Apagar motor
 49e:	88 b1       	in	r24, 0x08	; 8
 4a0:	87 7f       	andi	r24, 0xF7	; 247
 4a2:	88 b9       	out	0x08, r24	; 8
		}
		
		if(buffer == 'R'){
 4a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <buffer>
 4a8:	82 35       	cpi	r24, 0x52	; 82
 4aa:	31 f7       	brne	.-52     	; 0x478 <main+0x24>
			//Se enciende LED indicador de comunicación. 
			PINB |= (1<<PINB5);
 4ac:	83 b1       	in	r24, 0x03	; 3
 4ae:	80 62       	ori	r24, 0x20	; 32
 4b0:	83 b9       	out	0x03, r24	; 3
			buffer = 0;}
 4b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <buffer>
 4b6:	e0 cf       	rjmp	.-64     	; 0x478 <main+0x24>

Disassembly of section .text.__vector_24:

00000348 <__vector_24>:
}


//---Interrupciones------------------------------------------------------------------------------------------
ISR(TWI_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	uint8_t estado;
	estado = TWSR & 0xFC;
 358:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 35c:	8c 7f       	andi	r24, 0xFC	; 252
	switch (estado) {
 35e:	80 38       	cpi	r24, 0x80	; 128
 360:	99 f0       	breq	.+38     	; 0x388 <__vector_24+0x40>
 362:	28 f4       	brcc	.+10     	; 0x36e <__vector_24+0x26>
 364:	80 36       	cpi	r24, 0x60	; 96
 366:	51 f0       	breq	.+20     	; 0x37c <__vector_24+0x34>
 368:	80 37       	cpi	r24, 0x70	; 112
 36a:	41 f0       	breq	.+16     	; 0x37c <__vector_24+0x34>
 36c:	29 c0       	rjmp	.+82     	; 0x3c0 <__vector_24+0x78>
 36e:	88 3a       	cpi	r24, 0xA8	; 168
 370:	f9 f0       	breq	.+62     	; 0x3b0 <__vector_24+0x68>
 372:	88 3b       	cpi	r24, 0xB8	; 184
 374:	e9 f0       	breq	.+58     	; 0x3b0 <__vector_24+0x68>
 376:	80 39       	cpi	r24, 0x90	; 144
 378:	19 f5       	brne	.+70     	; 0x3c0 <__vector_24+0x78>
 37a:	06 c0       	rjmp	.+12     	; 0x388 <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |= (1 << TWINT);
 37c:	ec eb       	ldi	r30, 0xBC	; 188
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 68       	ori	r24, 0x80	; 128
 384:	80 83       	st	Z, r24
		break;
 386:	21 c0       	rjmp	.+66     	; 0x3ca <__vector_24+0x82>
		case 0x80:
		case 0x90:
		temperatura = TWDR;  // Guardar temperatura recibida
 388:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 38c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temperatura>
		// Si se recibe el comando 'V', activar ventilaron
		if (temperatura == 'V') {
 390:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temperatura>
 394:	86 35       	cpi	r24, 0x56	; 86
 396:	21 f4       	brne	.+8      	; 0x3a0 <__vector_24+0x58>
			ventilaron = 1;  // Activar ventilación
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ventilaron>
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <__vector_24+0x5c>
			} else {
			ventilaron = 0;  // Desactivar ventilación
 3a0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ventilaron>
		}
		TWCR |= (1 << TWINT) | (1 << TWEA);
 3a4:	ec eb       	ldi	r30, 0xBC	; 188
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	80 6c       	ori	r24, 0xC0	; 192
 3ac:	80 83       	st	Z, r24
		break;
 3ae:	0d c0       	rjmp	.+26     	; 0x3ca <__vector_24+0x82>
		case 0xA8:
		case 0xB8:
		TWDR = distance; // Cargar el dato
 3b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <distance>
 3b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA); // Inicia el envío
 3b8:	85 ec       	ldi	r24, 0xC5	; 197
 3ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <__vector_24+0x82>
		default: // Se libera el bus de cualquier error
		TWCR |= (1 << TWINT) | (1 << TWSTO);
 3c0:	ec eb       	ldi	r30, 0xBC	; 188
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	80 69       	ori	r24, 0x90	; 144
 3c8:	80 83       	st	Z, r24
		break;
	}
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

Disassembly of section .text.__vector_4:

00000280 <__vector_4>:
		count++;
		if (count >= 4000) return 400; // Si se pasa el tiempo, devolver distancia máxima (~2m)
	}

	return count;
}
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	2f 93       	push	r18
 28c:	3f 93       	push	r19
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	cf 93       	push	r28
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	86 b1       	in	r24, 0x06	; 6
 2a6:	c1 e0       	ldi	r28, 0x01	; 1
 2a8:	98 2f       	mov	r25, r24
 2aa:	92 70       	andi	r25, 0x02	; 2
 2ac:	81 ff       	sbrs	r24, 1
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_state.2011>
 2b4:	c8 17       	cp	r28, r24
 2b6:	b1 f1       	breq	.+108    	; 0x324 <__vector_4+0xa4>
 2b8:	99 23       	and	r25, r25
 2ba:	29 f0       	breq	.+10     	; 0x2c6 <__vector_4+0x46>
 2bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 2c4:	2d c0       	rjmp	.+90     	; 0x320 <__vector_4+0xa0>
 2c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 2ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2da:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 ed 01 	call	0x3da	; 0x3da <__floatunsisf>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	5f e3       	ldi	r21, 0x3F	; 63
 2ee:	0e 94 28 03 	call	0x650	; 0x650 <__mulsf3>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	48 e6       	ldi	r20, 0x68	; 104
 2f8:	52 e4       	ldi	r21, 0x42	; 66
 2fa:	0e 94 24 03 	call	0x648	; 0x648 <__divsf3>
 2fe:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fixunssfsi>
 302:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <distance>
 306:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <distance>
 30a:	89 3c       	cpi	r24, 0xC9	; 201
 30c:	30 f4       	brcc	.+12     	; 0x31a <__vector_4+0x9a>
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 312:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 316:	89 2b       	or	r24, r25
 318:	19 f4       	brne	.+6      	; 0x320 <__vector_4+0xa0>
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <distance>
 320:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <last_state.2011>
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	cf 91       	pop	r28
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

Disassembly of section .text:

00000648 <__divsf3>:
 648:	0e 94 67 00 	call	0xce	; 0xce <__data_load_end>
 64c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_round>

Disassembly of section .text:

000000ce <__divsf3x>:
  ce:	10 c0       	rjmp	.+32     	; 0xf0 <__divsf3x+0x22>
  d0:	0e 94 10 03 	call	0x620	; 0x620 <__fp_pscB>
  d4:	58 f0       	brcs	.+22     	; 0xec <__divsf3x+0x1e>
  d6:	0e 94 09 03 	call	0x612	; 0x612 <__fp_pscA>
  da:	40 f0       	brcs	.+16     	; 0xec <__divsf3x+0x1e>
  dc:	29 f4       	brne	.+10     	; 0xe8 <__divsf3x+0x1a>
  de:	5f 3f       	cpi	r21, 0xFF	; 255
  e0:	29 f0       	breq	.+10     	; 0xec <__divsf3x+0x1e>
  e2:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_inf>
  e6:	51 11       	cpse	r21, r1
  e8:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
  ec:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_nan>
  f0:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_split3>
  f4:	68 f3       	brcs	.-38     	; 0xd0 <__divsf3x+0x2>

000000f6 <__divsf3_pse>:
  f6:	99 23       	and	r25, r25
  f8:	b1 f3       	breq	.-20     	; 0xe6 <__divsf3x+0x18>
  fa:	55 23       	and	r21, r21
  fc:	91 f3       	breq	.-28     	; 0xe2 <__divsf3x+0x14>
  fe:	95 1b       	sub	r25, r21
 100:	55 0b       	sbc	r21, r21
 102:	bb 27       	eor	r27, r27
 104:	aa 27       	eor	r26, r26
 106:	62 17       	cp	r22, r18
 108:	73 07       	cpc	r23, r19
 10a:	84 07       	cpc	r24, r20
 10c:	38 f0       	brcs	.+14     	; 0x11c <__divsf3_pse+0x26>
 10e:	9f 5f       	subi	r25, 0xFF	; 255
 110:	5f 4f       	sbci	r21, 0xFF	; 255
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	44 1f       	adc	r20, r20
 118:	aa 1f       	adc	r26, r26
 11a:	a9 f3       	breq	.-22     	; 0x106 <__divsf3_pse+0x10>
 11c:	35 d0       	rcall	.+106    	; 0x188 <__divsf3_pse+0x92>
 11e:	0e 2e       	mov	r0, r30
 120:	3a f0       	brmi	.+14     	; 0x130 <__divsf3_pse+0x3a>
 122:	e0 e8       	ldi	r30, 0x80	; 128
 124:	32 d0       	rcall	.+100    	; 0x18a <__divsf3_pse+0x94>
 126:	91 50       	subi	r25, 0x01	; 1
 128:	50 40       	sbci	r21, 0x00	; 0
 12a:	e6 95       	lsr	r30
 12c:	00 1c       	adc	r0, r0
 12e:	ca f7       	brpl	.-14     	; 0x122 <__divsf3_pse+0x2c>
 130:	2b d0       	rcall	.+86     	; 0x188 <__divsf3_pse+0x92>
 132:	fe 2f       	mov	r31, r30
 134:	29 d0       	rcall	.+82     	; 0x188 <__divsf3_pse+0x92>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	88 1f       	adc	r24, r24
 13c:	bb 1f       	adc	r27, r27
 13e:	26 17       	cp	r18, r22
 140:	37 07       	cpc	r19, r23
 142:	48 07       	cpc	r20, r24
 144:	ab 07       	cpc	r26, r27
 146:	b0 e8       	ldi	r27, 0x80	; 128
 148:	09 f0       	breq	.+2      	; 0x14c <__divsf3_pse+0x56>
 14a:	bb 0b       	sbc	r27, r27
 14c:	80 2d       	mov	r24, r0
 14e:	bf 01       	movw	r22, r30
 150:	ff 27       	eor	r31, r31
 152:	93 58       	subi	r25, 0x83	; 131
 154:	5f 4f       	sbci	r21, 0xFF	; 255
 156:	3a f0       	brmi	.+14     	; 0x166 <__divsf3_pse+0x70>
 158:	9e 3f       	cpi	r25, 0xFE	; 254
 15a:	51 05       	cpc	r21, r1
 15c:	78 f0       	brcs	.+30     	; 0x17c <__divsf3_pse+0x86>
 15e:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_inf>
 162:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 166:	5f 3f       	cpi	r21, 0xFF	; 255
 168:	e4 f3       	brlt	.-8      	; 0x162 <__divsf3_pse+0x6c>
 16a:	98 3e       	cpi	r25, 0xE8	; 232
 16c:	d4 f3       	brlt	.-12     	; 0x162 <__divsf3_pse+0x6c>
 16e:	86 95       	lsr	r24
 170:	77 95       	ror	r23
 172:	67 95       	ror	r22
 174:	b7 95       	ror	r27
 176:	f7 95       	ror	r31
 178:	9f 5f       	subi	r25, 0xFF	; 255
 17a:	c9 f7       	brne	.-14     	; 0x16e <__divsf3_pse+0x78>
 17c:	88 0f       	add	r24, r24
 17e:	91 1d       	adc	r25, r1
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	97 f9       	bld	r25, 7
 186:	08 95       	ret
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	88 1f       	adc	r24, r24
 190:	bb 1f       	adc	r27, r27
 192:	62 17       	cp	r22, r18
 194:	73 07       	cpc	r23, r19
 196:	84 07       	cpc	r24, r20
 198:	ba 07       	cpc	r27, r26
 19a:	20 f0       	brcs	.+8      	; 0x1a4 <__divsf3_pse+0xae>
 19c:	62 1b       	sub	r22, r18
 19e:	73 0b       	sbc	r23, r19
 1a0:	84 0b       	sbc	r24, r20
 1a2:	ba 0b       	sbc	r27, r26
 1a4:	ee 1f       	adc	r30, r30
 1a6:	88 f7       	brcc	.-30     	; 0x18a <__divsf3_pse+0x94>
 1a8:	e0 95       	com	r30
 1aa:	08 95       	ret

Disassembly of section .text:

000004b8 <__fixunssfsi>:
 4b8:	0e 94 be 02 	call	0x57c	; 0x57c <__fp_splitA>
 4bc:	88 f0       	brcs	.+34     	; 0x4e0 <__fixunssfsi+0x28>
 4be:	9f 57       	subi	r25, 0x7F	; 127
 4c0:	98 f0       	brcs	.+38     	; 0x4e8 <__fixunssfsi+0x30>
 4c2:	b9 2f       	mov	r27, r25
 4c4:	99 27       	eor	r25, r25
 4c6:	b7 51       	subi	r27, 0x17	; 23
 4c8:	b0 f0       	brcs	.+44     	; 0x4f6 <__fixunssfsi+0x3e>
 4ca:	e1 f0       	breq	.+56     	; 0x504 <__fixunssfsi+0x4c>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	1a f0       	brmi	.+6      	; 0x4dc <__fixunssfsi+0x24>
 4d6:	ba 95       	dec	r27
 4d8:	c9 f7       	brne	.-14     	; 0x4cc <__fixunssfsi+0x14>
 4da:	14 c0       	rjmp	.+40     	; 0x504 <__fixunssfsi+0x4c>
 4dc:	b1 30       	cpi	r27, 0x01	; 1
 4de:	91 f0       	breq	.+36     	; 0x504 <__fixunssfsi+0x4c>
 4e0:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_zero>
 4e4:	b1 e0       	ldi	r27, 0x01	; 1
 4e6:	08 95       	ret
 4e8:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 4ec:	67 2f       	mov	r22, r23
 4ee:	78 2f       	mov	r23, r24
 4f0:	88 27       	eor	r24, r24
 4f2:	b8 5f       	subi	r27, 0xF8	; 248
 4f4:	39 f0       	breq	.+14     	; 0x504 <__fixunssfsi+0x4c>
 4f6:	b9 3f       	cpi	r27, 0xF9	; 249
 4f8:	cc f3       	brlt	.-14     	; 0x4ec <__fixunssfsi+0x34>
 4fa:	86 95       	lsr	r24
 4fc:	77 95       	ror	r23
 4fe:	67 95       	ror	r22
 500:	b3 95       	inc	r27
 502:	d9 f7       	brne	.-10     	; 0x4fa <__fixunssfsi+0x42>
 504:	3e f4       	brtc	.+14     	; 0x514 <__fixunssfsi+0x5c>
 506:	90 95       	com	r25
 508:	80 95       	com	r24
 50a:	70 95       	com	r23
 50c:	61 95       	neg	r22
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	8f 4f       	sbci	r24, 0xFF	; 255
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	08 95       	ret

Disassembly of section .text:

000003da <__floatunsisf>:
 3da:	e8 94       	clt
 3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <__floatsisf+0x12>

000003de <__floatsisf>:
 3de:	97 fb       	bst	r25, 7
 3e0:	3e f4       	brtc	.+14     	; 0x3f0 <__floatsisf+0x12>
 3e2:	90 95       	com	r25
 3e4:	80 95       	com	r24
 3e6:	70 95       	com	r23
 3e8:	61 95       	neg	r22
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	8f 4f       	sbci	r24, 0xFF	; 255
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	99 23       	and	r25, r25
 3f2:	a9 f0       	breq	.+42     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3f4:	f9 2f       	mov	r31, r25
 3f6:	96 e9       	ldi	r25, 0x96	; 150
 3f8:	bb 27       	eor	r27, r27
 3fa:	93 95       	inc	r25
 3fc:	f6 95       	lsr	r31
 3fe:	87 95       	ror	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	b7 95       	ror	r27
 406:	f1 11       	cpse	r31, r1
 408:	f8 cf       	rjmp	.-16     	; 0x3fa <__floatsisf+0x1c>
 40a:	fa f4       	brpl	.+62     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 40c:	bb 0f       	add	r27, r27
 40e:	11 f4       	brne	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	60 ff       	sbrs	r22, 0
 412:	1b c0       	rjmp	.+54     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	8f 4f       	sbci	r24, 0xFF	; 255
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	16 c0       	rjmp	.+44     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 41e:	88 23       	and	r24, r24
 420:	11 f0       	breq	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	96 e9       	ldi	r25, 0x96	; 150
 424:	11 c0       	rjmp	.+34     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 426:	77 23       	and	r23, r23
 428:	21 f0       	breq	.+8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42a:	9e e8       	ldi	r25, 0x8E	; 142
 42c:	87 2f       	mov	r24, r23
 42e:	76 2f       	mov	r23, r22
 430:	05 c0       	rjmp	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 432:	66 23       	and	r22, r22
 434:	71 f0       	breq	.+28     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 436:	96 e8       	ldi	r25, 0x86	; 134
 438:	86 2f       	mov	r24, r22
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	2a f0       	brmi	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 440:	9a 95       	dec	r25
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	da f7       	brpl	.-10     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 44a:	88 0f       	add	r24, r24
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	97 f9       	bld	r25, 7
 452:	08 95       	ret

Disassembly of section .text:

0000063c <__fp_inf>:
 63c:	97 f9       	bld	r25, 7
 63e:	9f 67       	ori	r25, 0x7F	; 127
 640:	80 e8       	ldi	r24, 0x80	; 128
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	08 95       	ret

Disassembly of section .text:

00000658 <__fp_nan>:
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	80 ec       	ldi	r24, 0xC0	; 192
 65c:	08 95       	ret

Disassembly of section .text:

00000612 <__fp_pscA>:
 612:	00 24       	eor	r0, r0
 614:	0a 94       	dec	r0
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	18 06       	cpc	r1, r24
 61c:	09 06       	cpc	r0, r25
 61e:	08 95       	ret

Disassembly of section .text:

00000620 <__fp_pscB>:
 620:	00 24       	eor	r0, r0
 622:	0a 94       	dec	r0
 624:	12 16       	cp	r1, r18
 626:	13 06       	cpc	r1, r19
 628:	14 06       	cpc	r1, r20
 62a:	05 06       	cpc	r0, r21
 62c:	08 95       	ret

Disassembly of section .text:

000005b0 <__fp_round>:
 5b0:	09 2e       	mov	r0, r25
 5b2:	03 94       	inc	r0
 5b4:	00 0c       	add	r0, r0
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__fp_round+0xc>
 5b8:	88 23       	and	r24, r24
 5ba:	52 f0       	brmi	.+20     	; 0x5d0 <__fp_round+0x20>
 5bc:	bb 0f       	add	r27, r27
 5be:	40 f4       	brcc	.+16     	; 0x5d0 <__fp_round+0x20>
 5c0:	bf 2b       	or	r27, r31
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__fp_round+0x18>
 5c4:	60 ff       	sbrs	r22, 0
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__fp_round+0x20>
 5c8:	6f 5f       	subi	r22, 0xFF	; 255
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

Disassembly of section .text:

0000056c <__fp_split3>:
 56c:	57 fd       	sbrc	r21, 7
 56e:	90 58       	subi	r25, 0x80	; 128
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	59 f0       	breq	.+22     	; 0x58c <__fp_splitA+0x10>
 576:	5f 3f       	cpi	r21, 0xFF	; 255
 578:	71 f0       	breq	.+28     	; 0x596 <__fp_splitA+0x1a>
 57a:	47 95       	ror	r20

0000057c <__fp_splitA>:
 57c:	88 0f       	add	r24, r24
 57e:	97 fb       	bst	r25, 7
 580:	99 1f       	adc	r25, r25
 582:	61 f0       	breq	.+24     	; 0x59c <__fp_splitA+0x20>
 584:	9f 3f       	cpi	r25, 0xFF	; 255
 586:	79 f0       	breq	.+30     	; 0x5a6 <__fp_splitA+0x2a>
 588:	87 95       	ror	r24
 58a:	08 95       	ret
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	55 1f       	adc	r21, r21
 594:	f2 cf       	rjmp	.-28     	; 0x57a <__fp_split3+0xe>
 596:	46 95       	lsr	r20
 598:	f1 df       	rcall	.-30     	; 0x57c <__fp_splitA>
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__fp_splitA+0x30>
 59c:	16 16       	cp	r1, r22
 59e:	17 06       	cpc	r1, r23
 5a0:	18 06       	cpc	r1, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	f1 cf       	rjmp	.-30     	; 0x588 <__fp_splitA+0xc>
 5a6:	86 95       	lsr	r24
 5a8:	71 05       	cpc	r23, r1
 5aa:	61 05       	cpc	r22, r1
 5ac:	08 94       	sec
 5ae:	08 95       	ret

Disassembly of section .text:

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

Disassembly of section .text:

00000650 <__mulsf3>:
 650:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__mulsf3x>
 654:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_round>

Disassembly of section .text:

000001ac <__mulsf3x>:
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <__mulsf3x+0x20>
 1ae:	0e 94 09 03 	call	0x612	; 0x612 <__fp_pscA>
 1b2:	38 f0       	brcs	.+14     	; 0x1c2 <__mulsf3x+0x16>
 1b4:	0e 94 10 03 	call	0x620	; 0x620 <__fp_pscB>
 1b8:	20 f0       	brcs	.+8      	; 0x1c2 <__mulsf3x+0x16>
 1ba:	95 23       	and	r25, r21
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <__mulsf3x+0x16>
 1be:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_inf>
 1c2:	0c 94 2c 03 	jmp	0x658	; 0x658 <__fp_nan>
 1c6:	11 24       	eor	r1, r1
 1c8:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 1cc:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_split3>
 1d0:	70 f3       	brcs	.-36     	; 0x1ae <__mulsf3x+0x2>

000001d2 <__mulsf3_pse>:
 1d2:	95 9f       	mul	r25, r21
 1d4:	c1 f3       	breq	.-16     	; 0x1c6 <__mulsf3x+0x1a>
 1d6:	95 0f       	add	r25, r21
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	55 1f       	adc	r21, r21
 1dc:	62 9f       	mul	r22, r18
 1de:	f0 01       	movw	r30, r0
 1e0:	72 9f       	mul	r23, r18
 1e2:	bb 27       	eor	r27, r27
 1e4:	f0 0d       	add	r31, r0
 1e6:	b1 1d       	adc	r27, r1
 1e8:	63 9f       	mul	r22, r19
 1ea:	aa 27       	eor	r26, r26
 1ec:	f0 0d       	add	r31, r0
 1ee:	b1 1d       	adc	r27, r1
 1f0:	aa 1f       	adc	r26, r26
 1f2:	64 9f       	mul	r22, r20
 1f4:	66 27       	eor	r22, r22
 1f6:	b0 0d       	add	r27, r0
 1f8:	a1 1d       	adc	r26, r1
 1fa:	66 1f       	adc	r22, r22
 1fc:	82 9f       	mul	r24, r18
 1fe:	22 27       	eor	r18, r18
 200:	b0 0d       	add	r27, r0
 202:	a1 1d       	adc	r26, r1
 204:	62 1f       	adc	r22, r18
 206:	73 9f       	mul	r23, r19
 208:	b0 0d       	add	r27, r0
 20a:	a1 1d       	adc	r26, r1
 20c:	62 1f       	adc	r22, r18
 20e:	83 9f       	mul	r24, r19
 210:	a0 0d       	add	r26, r0
 212:	61 1d       	adc	r22, r1
 214:	22 1f       	adc	r18, r18
 216:	74 9f       	mul	r23, r20
 218:	33 27       	eor	r19, r19
 21a:	a0 0d       	add	r26, r0
 21c:	61 1d       	adc	r22, r1
 21e:	23 1f       	adc	r18, r19
 220:	84 9f       	mul	r24, r20
 222:	60 0d       	add	r22, r0
 224:	21 1d       	adc	r18, r1
 226:	82 2f       	mov	r24, r18
 228:	76 2f       	mov	r23, r22
 22a:	6a 2f       	mov	r22, r26
 22c:	11 24       	eor	r1, r1
 22e:	9f 57       	subi	r25, 0x7F	; 127
 230:	50 40       	sbci	r21, 0x00	; 0
 232:	9a f0       	brmi	.+38     	; 0x25a <__mulsf3_pse+0x88>
 234:	f1 f0       	breq	.+60     	; 0x272 <__mulsf3_pse+0xa0>
 236:	88 23       	and	r24, r24
 238:	4a f0       	brmi	.+18     	; 0x24c <__mulsf3_pse+0x7a>
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	bb 1f       	adc	r27, r27
 240:	66 1f       	adc	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	88 1f       	adc	r24, r24
 246:	91 50       	subi	r25, 0x01	; 1
 248:	50 40       	sbci	r21, 0x00	; 0
 24a:	a9 f7       	brne	.-22     	; 0x236 <__mulsf3_pse+0x64>
 24c:	9e 3f       	cpi	r25, 0xFE	; 254
 24e:	51 05       	cpc	r21, r1
 250:	80 f0       	brcs	.+32     	; 0x272 <__mulsf3_pse+0xa0>
 252:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_inf>
 256:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 25a:	5f 3f       	cpi	r21, 0xFF	; 255
 25c:	e4 f3       	brlt	.-8      	; 0x256 <__mulsf3_pse+0x84>
 25e:	98 3e       	cpi	r25, 0xE8	; 232
 260:	d4 f3       	brlt	.-12     	; 0x256 <__mulsf3_pse+0x84>
 262:	86 95       	lsr	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b7 95       	ror	r27
 26a:	f7 95       	ror	r31
 26c:	e7 95       	ror	r30
 26e:	9f 5f       	subi	r25, 0xFF	; 255
 270:	c1 f7       	brne	.-16     	; 0x262 <__mulsf3_pse+0x90>
 272:	fe 2b       	or	r31, r30
 274:	88 0f       	add	r24, r24
 276:	91 1d       	adc	r25, r1
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	97 f9       	bld	r25, 7
 27e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000666 <_fini>:
 666:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000668 <__funcs_on_exit>:
 668:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000066a <__simulator_exit>:
 66a:	08 95       	ret

Disassembly of section .text.exit:

000005e8 <exit>:
 5e8:	ec 01       	movw	r28, r24
 5ea:	0e 94 34 03 	call	0x668	; 0x668 <__funcs_on_exit>
 5ee:	0e 94 33 03 	call	0x666	; 0x666 <_fini>
 5f2:	ce 01       	movw	r24, r28
 5f4:	0e 94 35 03 	call	0x66a	; 0x66a <__simulator_exit>
 5f8:	ce 01       	movw	r24, r28
 5fa:	0e 94 31 03 	call	0x662	; 0x662 <_Exit>

Disassembly of section .text._Exit:

00000662 <_Exit>:
 662:	0e 94 65 00 	call	0xca	; 0xca <_exit>
