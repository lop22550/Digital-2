
Laboratorio 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a54  08005a54  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a54  08005a54  00006a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a5c  08005a5c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a5c  08005a5c  00006a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005a64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000006c  08005ad0  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08005ad0  0000733c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbd6  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201c  00000000  00000000  00012c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00014c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000772  00000000  00000000  00015650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023522  00000000  00000000  00015dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfc5  00000000  00000000  000392e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d72a0  00000000  00000000  000462a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  0011d58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001205b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005998 	.word	0x08005998

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005998 	.word	0x08005998

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	@ 0x58
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fe01 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f993 	bl	8000910 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uint8_t Arriba[] = "Arriba\r\n";
 80005ea:	4aaf      	ldr	r2, [pc, #700]	@ (80008a8 <main+0x2cc>)
 80005ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f2:	c303      	stmia	r3!, {r0, r1}
 80005f4:	701a      	strb	r2, [r3, #0]
  uint8_t Abajo[] = "Abajo\r\n";
 80005f6:	4aad      	ldr	r2, [pc, #692]	@ (80008ac <main+0x2d0>)
 80005f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t Derecha[] = "Derecha\r\n";
 8000604:	4aaa      	ldr	r2, [pc, #680]	@ (80008b0 <main+0x2d4>)
 8000606:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800060a:	ca07      	ldmia	r2, {r0, r1, r2}
 800060c:	c303      	stmia	r3!, {r0, r1}
 800060e:	801a      	strh	r2, [r3, #0]
  uint8_t Izquierda[] = "Izquierda\r\n";
 8000610:	4aa8      	ldr	r2, [pc, #672]	@ (80008b4 <main+0x2d8>)
 8000612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000616:	ca07      	ldmia	r2, {r0, r1, r2}
 8000618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t Up[] = "Up\r\n";
 800061c:	4ba6      	ldr	r3, [pc, #664]	@ (80008b8 <main+0x2dc>)
 800061e:	623b      	str	r3, [r7, #32]
 8000620:	2300      	movs	r3, #0
 8000622:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t Down[] = "Down\r\n";
 8000626:	4aa5      	ldr	r2, [pc, #660]	@ (80008bc <main+0x2e0>)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	6018      	str	r0, [r3, #0]
 8000632:	3304      	adds	r3, #4
 8000634:	8019      	strh	r1, [r3, #0]
 8000636:	3302      	adds	r3, #2
 8000638:	0c0a      	lsrs	r2, r1, #16
 800063a:	701a      	strb	r2, [r3, #0]
  uint8_t Left[] = "Left\r\n";
 800063c:	4aa0      	ldr	r2, [pc, #640]	@ (80008c0 <main+0x2e4>)
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	3304      	adds	r3, #4
 800064a:	8019      	strh	r1, [r3, #0]
 800064c:	3302      	adds	r3, #2
 800064e:	0c0a      	lsrs	r2, r1, #16
 8000650:	701a      	strb	r2, [r3, #0]
  uint8_t Right[] = "Right\r\n";
 8000652:	4a9c      	ldr	r2, [pc, #624]	@ (80008c4 <main+0x2e8>)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t A[] = "A\r\n";
 8000660:	4b99      	ldr	r3, [pc, #612]	@ (80008c8 <main+0x2ec>)
 8000662:	607b      	str	r3, [r7, #4]
  uint8_t B[] = "B\r\n";
 8000664:	4b99      	ldr	r3, [pc, #612]	@ (80008cc <main+0x2f0>)
 8000666:	603b      	str	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 fa96 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 800066c:	f000 fa74 	bl	8000b58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000670:	f000 fa1e 	bl	8000ab0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000674:	f000 f9ba 	bl	80009ec <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000678:	f000 fa44 	bl	8000b04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, (uint32_t *)lectura_ADC, 2);
 800067c:	2202      	movs	r2, #2
 800067e:	4994      	ldr	r1, [pc, #592]	@ (80008d0 <main+0x2f4>)
 8000680:	4894      	ldr	r0, [pc, #592]	@ (80008d4 <main+0x2f8>)
 8000682:	f000 ff9b 	bl	80015bc <HAL_ADC_Start_DMA>

HAL_UART_Receive_IT(&huart3, temp, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4993      	ldr	r1, [pc, #588]	@ (80008d8 <main+0x2fc>)
 800068a:	4894      	ldr	r0, [pc, #592]	@ (80008dc <main+0x300>)
 800068c:	f003 f903 	bl	8003896 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(50);
 8000690:	2032      	movs	r0, #50	@ 0x32
 8000692:	f000 fe1b 	bl	80012cc <HAL_Delay>
	  contador++;
 8000696:	4b92      	ldr	r3, [pc, #584]	@ (80008e0 <main+0x304>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b90      	ldr	r3, [pc, #576]	@ (80008e0 <main+0x304>)
 80006a0:	801a      	strh	r2, [r3, #0]
	  if (estadoADC){
 80006a2:	4b90      	ldr	r3, [pc, #576]	@ (80008e4 <main+0x308>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d007      	beq.n	80006ba <main+0xde>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)lectura_ADC, 2);
 80006aa:	2202      	movs	r2, #2
 80006ac:	4988      	ldr	r1, [pc, #544]	@ (80008d0 <main+0x2f4>)
 80006ae:	4889      	ldr	r0, [pc, #548]	@ (80008d4 <main+0x2f8>)
 80006b0:	f000 ff84 	bl	80015bc <HAL_ADC_Start_DMA>
		  estadoADC = 0;
 80006b4:	4b8b      	ldr	r3, [pc, #556]	@ (80008e4 <main+0x308>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	  }

	  //VRX_mitad = (lectura_ADC[1])/2;
	  //VRY_mitad = (lectura_ADC[0])/2;-

	  if (lectura_ADC[1] >= VRX_mitad){HAL_UART_Transmit(&huart2, Derecha, sizeof(Derecha), 2000);}
 80006ba:	4b85      	ldr	r3, [pc, #532]	@ (80008d0 <main+0x2f4>)
 80006bc:	885a      	ldrh	r2, [r3, #2]
 80006be:	4b8a      	ldr	r3, [pc, #552]	@ (80008e8 <main+0x30c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d307      	bcc.n	80006d6 <main+0xfa>
 80006c6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80006ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80006ce:	220a      	movs	r2, #10
 80006d0:	4886      	ldr	r0, [pc, #536]	@ (80008ec <main+0x310>)
 80006d2:	f003 f855 	bl	8003780 <HAL_UART_Transmit>
	  if(lectura_ADC[1] < VRX_mitad){HAL_UART_Transmit(&huart2, Izquierda, sizeof(Izquierda), 2000);}
 80006d6:	4b7e      	ldr	r3, [pc, #504]	@ (80008d0 <main+0x2f4>)
 80006d8:	885a      	ldrh	r2, [r3, #2]
 80006da:	4b83      	ldr	r3, [pc, #524]	@ (80008e8 <main+0x30c>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d207      	bcs.n	80006f2 <main+0x116>
 80006e2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80006e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80006ea:	220c      	movs	r2, #12
 80006ec:	487f      	ldr	r0, [pc, #508]	@ (80008ec <main+0x310>)
 80006ee:	f003 f847 	bl	8003780 <HAL_UART_Transmit>

	  if (lectura_ADC[0] >= VRX_mitad){HAL_UART_Transmit(&huart2, Arriba, sizeof(Arriba), 2000);}
 80006f2:	4b77      	ldr	r3, [pc, #476]	@ (80008d0 <main+0x2f4>)
 80006f4:	881a      	ldrh	r2, [r3, #0]
 80006f6:	4b7c      	ldr	r3, [pc, #496]	@ (80008e8 <main+0x30c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d308      	bcc.n	8000710 <main+0x134>
 80006fe:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000702:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000706:	2209      	movs	r2, #9
 8000708:	4878      	ldr	r0, [pc, #480]	@ (80008ec <main+0x310>)
 800070a:	f003 f839 	bl	8003780 <HAL_UART_Transmit>
 800070e:	e007      	b.n	8000720 <main+0x144>
	  else{HAL_UART_Transmit(&huart2, Abajo, sizeof(Abajo), 2000);}
 8000710:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000714:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000718:	2208      	movs	r2, #8
 800071a:	4874      	ldr	r0, [pc, #464]	@ (80008ec <main+0x310>)
 800071c:	f003 f830 	bl	8003780 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000724:	f000 fdd2 	bl	80012cc <HAL_Delay>


		for(int i = 0; i < 10; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	657b      	str	r3, [r7, #84]	@ 0x54
 800072c:	e056      	b.n	80007dc <main+0x200>
			if (buffer[i] == 117){   //117 es ASCII de u
 800072e:	4a70      	ldr	r2, [pc, #448]	@ (80008f0 <main+0x314>)
 8000730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000736:	2b75      	cmp	r3, #117	@ 0x75
 8000738:	d107      	bne.n	800074a <main+0x16e>
						flag_up = 1;
 800073a:	4b6e      	ldr	r3, [pc, #440]	@ (80008f4 <main+0x318>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 8000740:	4a6b      	ldr	r2, [pc, #428]	@ (80008f0 <main+0x314>)
 8000742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000744:	2100      	movs	r1, #0
 8000746:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

			if (buffer[i] == 100){   //100 es ASCII de d
 800074a:	4a69      	ldr	r2, [pc, #420]	@ (80008f0 <main+0x314>)
 800074c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800074e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000752:	2b64      	cmp	r3, #100	@ 0x64
 8000754:	d107      	bne.n	8000766 <main+0x18a>
						flag_down = 1;
 8000756:	4b68      	ldr	r3, [pc, #416]	@ (80008f8 <main+0x31c>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 800075c:	4a64      	ldr	r2, [pc, #400]	@ (80008f0 <main+0x314>)
 800075e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000760:	2100      	movs	r1, #0
 8000762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					}

			if (buffer[i] == 108){   //108 es ASCII de l
 8000766:	4a62      	ldr	r2, [pc, #392]	@ (80008f0 <main+0x314>)
 8000768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800076a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800076e:	2b6c      	cmp	r3, #108	@ 0x6c
 8000770:	d107      	bne.n	8000782 <main+0x1a6>
						flag_left = 1;
 8000772:	4b62      	ldr	r3, [pc, #392]	@ (80008fc <main+0x320>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 8000778:	4a5d      	ldr	r2, [pc, #372]	@ (80008f0 <main+0x314>)
 800077a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800077c:	2100      	movs	r1, #0
 800077e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

			if (buffer[i] == 114){   //114 es ASCII de l
 8000782:	4a5b      	ldr	r2, [pc, #364]	@ (80008f0 <main+0x314>)
 8000784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078a:	2b72      	cmp	r3, #114	@ 0x72
 800078c:	d107      	bne.n	800079e <main+0x1c2>
						flag_right = 1;
 800078e:	4b5c      	ldr	r3, [pc, #368]	@ (8000900 <main+0x324>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 8000794:	4a56      	ldr	r2, [pc, #344]	@ (80008f0 <main+0x314>)
 8000796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000798:	2100      	movs	r1, #0
 800079a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}


			if (buffer[i] == 65){   //65 es ASCII de l
 800079e:	4a54      	ldr	r2, [pc, #336]	@ (80008f0 <main+0x314>)
 80007a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a6:	2b41      	cmp	r3, #65	@ 0x41
 80007a8:	d107      	bne.n	80007ba <main+0x1de>
				    	flag_A = 1;
 80007aa:	4b56      	ldr	r3, [pc, #344]	@ (8000904 <main+0x328>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
				    	buffer[i] = 0;
 80007b0:	4a4f      	ldr	r2, [pc, #316]	@ (80008f0 <main+0x314>)
 80007b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007b4:	2100      	movs	r1, #0
 80007b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}


			if (buffer[i] == 66){   //66 es ASCII de l
 80007ba:	4a4d      	ldr	r2, [pc, #308]	@ (80008f0 <main+0x314>)
 80007bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c2:	2b42      	cmp	r3, #66	@ 0x42
 80007c4:	d107      	bne.n	80007d6 <main+0x1fa>
						flag_B = 1;
 80007c6:	4b50      	ldr	r3, [pc, #320]	@ (8000908 <main+0x32c>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 80007cc:	4a48      	ldr	r2, [pc, #288]	@ (80008f0 <main+0x314>)
 80007ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007d0:	2100      	movs	r1, #0
 80007d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 10; i++) {
 80007d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007d8:	3301      	adds	r3, #1
 80007da:	657b      	str	r3, [r7, #84]	@ 0x54
 80007dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007de:	2b09      	cmp	r3, #9
 80007e0:	dda5      	ble.n	800072e <main+0x152>

		    } //Fin del for



	  if (flag_up == 1){
 80007e2:	4b44      	ldr	r3, [pc, #272]	@ (80008f4 <main+0x318>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10a      	bne.n	8000800 <main+0x224>
		  HAL_UART_Transmit(&huart2, Up, sizeof(Up), 2000);
 80007ea:	f107 0120 	add.w	r1, r7, #32
 80007ee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007f2:	2205      	movs	r2, #5
 80007f4:	483d      	ldr	r0, [pc, #244]	@ (80008ec <main+0x310>)
 80007f6:	f002 ffc3 	bl	8003780 <HAL_UART_Transmit>
		  flag_up = 0;}
 80007fa:	4b3e      	ldr	r3, [pc, #248]	@ (80008f4 <main+0x318>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]

	  if (flag_down == 1){
 8000800:	4b3d      	ldr	r3, [pc, #244]	@ (80008f8 <main+0x31c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10a      	bne.n	800081e <main+0x242>
		  HAL_UART_Transmit(&huart2, Down, sizeof(Down), 2000);
 8000808:	f107 0118 	add.w	r1, r7, #24
 800080c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000810:	2207      	movs	r2, #7
 8000812:	4836      	ldr	r0, [pc, #216]	@ (80008ec <main+0x310>)
 8000814:	f002 ffb4 	bl	8003780 <HAL_UART_Transmit>
		  flag_down = 0;}
 8000818:	4b37      	ldr	r3, [pc, #220]	@ (80008f8 <main+0x31c>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]

	  if (flag_left == 1){
 800081e:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <main+0x320>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d10a      	bne.n	800083c <main+0x260>
		  HAL_UART_Transmit(&huart2, Left, sizeof(Left), 2000);
 8000826:	f107 0110 	add.w	r1, r7, #16
 800082a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800082e:	2207      	movs	r2, #7
 8000830:	482e      	ldr	r0, [pc, #184]	@ (80008ec <main+0x310>)
 8000832:	f002 ffa5 	bl	8003780 <HAL_UART_Transmit>
		  flag_left = 0;}
 8000836:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <main+0x320>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

	  if (flag_right == 1){
 800083c:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <main+0x324>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10a      	bne.n	800085a <main+0x27e>
		  HAL_UART_Transmit(&huart2, Right, sizeof(Right), 2000);
 8000844:	f107 0108 	add.w	r1, r7, #8
 8000848:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800084c:	2208      	movs	r2, #8
 800084e:	4827      	ldr	r0, [pc, #156]	@ (80008ec <main+0x310>)
 8000850:	f002 ff96 	bl	8003780 <HAL_UART_Transmit>
		  flag_right = 0;}
 8000854:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <main+0x324>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]

	  if (flag_A == 1){
 800085a:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <main+0x328>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d109      	bne.n	8000876 <main+0x29a>
		  HAL_UART_Transmit(&huart2, A, sizeof(A), 2000);
 8000862:	1d39      	adds	r1, r7, #4
 8000864:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000868:	2204      	movs	r2, #4
 800086a:	4820      	ldr	r0, [pc, #128]	@ (80008ec <main+0x310>)
 800086c:	f002 ff88 	bl	8003780 <HAL_UART_Transmit>
		  flag_A = 0;}
 8000870:	4b24      	ldr	r3, [pc, #144]	@ (8000904 <main+0x328>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]

	   if (flag_B == 1){
 8000876:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <main+0x32c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d109      	bne.n	8000892 <main+0x2b6>
		   HAL_UART_Transmit(&huart2, B, sizeof(B), 2000);
 800087e:	4639      	mov	r1, r7
 8000880:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000884:	2204      	movs	r2, #4
 8000886:	4819      	ldr	r0, [pc, #100]	@ (80008ec <main+0x310>)
 8000888:	f002 ff7a 	bl	8003780 <HAL_UART_Transmit>
		   flag_B = 0;}
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <main+0x32c>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]

	   printf("Control 1");
 8000892:	481e      	ldr	r0, [pc, #120]	@ (800090c <main+0x330>)
 8000894:	f004 f83c 	bl	8004910 <iprintf>
	   sprintf("Control 1", Up);
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	@ (800090c <main+0x330>)
 80008a0:	f004 f848 	bl	8004934 <siprintf>
	  HAL_Delay(50);
 80008a4:	e6f4      	b.n	8000690 <main+0xb4>
 80008a6:	bf00      	nop
 80008a8:	080059bc 	.word	0x080059bc
 80008ac:	080059c8 	.word	0x080059c8
 80008b0:	080059d0 	.word	0x080059d0
 80008b4:	080059dc 	.word	0x080059dc
 80008b8:	0a0d7055 	.word	0x0a0d7055
 80008bc:	080059e8 	.word	0x080059e8
 80008c0:	080059f0 	.word	0x080059f0
 80008c4:	080059f8 	.word	0x080059f8
 80008c8:	000a0d41 	.word	0x000a0d41
 80008cc:	000a0d42 	.word	0x000a0d42
 80008d0:	200001c0 	.word	0x200001c0
 80008d4:	20000088 	.word	0x20000088
 80008d8:	200001dc 	.word	0x200001dc
 80008dc:	20000178 	.word	0x20000178
 80008e0:	200001c6 	.word	0x200001c6
 80008e4:	200001c4 	.word	0x200001c4
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000130 	.word	0x20000130
 80008f0:	200001c8 	.word	0x200001c8
 80008f4:	200001e0 	.word	0x200001e0
 80008f8:	200001e1 	.word	0x200001e1
 80008fc:	200001e2 	.word	0x200001e2
 8000900:	200001e3 	.word	0x200001e3
 8000904:	200001e4 	.word	0x200001e4
 8000908:	200001e5 	.word	0x200001e5
 800090c:	080059b0 	.word	0x080059b0

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	@ 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2234      	movs	r2, #52	@ 0x34
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f004 f86d 	bl	80049fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <SystemClock_Config+0xd4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	4a29      	ldr	r2, [pc, #164]	@ (80009e4 <SystemClock_Config+0xd4>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	@ 0x40
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <SystemClock_Config+0xd4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000950:	2300      	movs	r3, #0
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <SystemClock_Config+0xd8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800095c:	4a22      	ldr	r2, [pc, #136]	@ (80009e8 <SystemClock_Config+0xd8>)
 800095e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b20      	ldr	r3, [pc, #128]	@ (80009e8 <SystemClock_Config+0xd8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000984:	2310      	movs	r3, #16
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000988:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800098c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800098e:	2304      	movs	r3, #4
 8000990:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fc00 	bl	80031a4 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009aa:	f000 f99d 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2102      	movs	r1, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f8a0 	bl	8002b10 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009d6:	f000 f987 	bl	8000ce8 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	@ 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009fe:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a00:	4a29      	ldr	r2, [pc, #164]	@ (8000aa8 <MX_ADC1_Init+0xbc>)
 8000a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a04:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aac <MX_ADC1_Init+0xc0>)
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4c:	4815      	ldr	r0, [pc, #84]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a4e:	f000 fc61 	bl	8001314 <HAL_ADC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a58:	f000 f946 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a64:	2307      	movs	r3, #7
 8000a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a6e:	f000 fed3 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a78:	f000 f936 	bl	8000ce8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000a84:	2306      	movs	r3, #6
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_ADC1_Init+0xb8>)
 8000a8e:	f000 fec3 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000a98:	f000 f926 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000088 	.word	0x20000088
 8000aa8:	40012000 	.word	0x40012000
 8000aac:	0f000001 	.word	0x0f000001

08000ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_USART2_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000abc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f002 fdfa 	bl	80036e0 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f8f9 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000130 	.word	0x20000130
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_USART3_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_USART3_UART_Init+0x4c>)
 8000b3c:	f002 fdd0 	bl	80036e0 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f8cf 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000178 	.word	0x20000178
 8000b54:	40004800 	.word	0x40004800

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_DMA_Init+0x3c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <MX_DMA_Init+0x3c>)
 8000b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_DMA_Init+0x3c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2038      	movs	r0, #56	@ 0x38
 8000b80:	f001 f9df 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b84:	2038      	movs	r0, #56	@ 0x38
 8000b86:	f001 f9f8 	bl	8001f7a <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a25      	ldr	r2, [pc, #148]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b23      	ldr	r3, [pc, #140]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a1e      	ldr	r2, [pc, #120]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_GPIO_Init+0xd0>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <MX_GPIO_Init+0xd4>)
 8000c24:	f001 ff5a 	bl	8002adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0xd8>)
 8000c40:	f001 fdb8 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c44:	2320      	movs	r3, #32
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MX_GPIO_Init+0xd4>)
 8000c5c:	f001 fdaa 	bl	80027b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	@ 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020800 	.word	0x40020800

08000c74 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	estadoADC = 1;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]

}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200001c4 	.word	0x200001c4

08000c94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
	//HAL_UART_Receive_IT(&huart2, buffer, 10);

	memcpy (buffer + indx, temp, 1);
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_UART_RxCpltCallback+0x48>)
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x4c>)
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	701a      	strb	r2, [r3, #0]
	++indx;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	if(indx >= 10){
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	2b09      	cmp	r3, #9
 8000cbe:	d902      	bls.n	8000cc6 <HAL_UART_RxCpltCallback+0x32>
		indx = 0;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <HAL_UART_RxCpltCallback+0x44>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	801a      	strh	r2, [r3, #0]


	    } //Fin del for
*/

	HAL_UART_Receive_IT(&huart3, temp, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4905      	ldr	r1, [pc, #20]	@ (8000ce0 <HAL_UART_RxCpltCallback+0x4c>)
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <HAL_UART_RxCpltCallback+0x50>)
 8000ccc:	f002 fde3 	bl	8003896 <HAL_UART_Receive_IT>


}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200001de 	.word	0x200001de
 8000cdc:	200001c8 	.word	0x200001c8
 8000ce0:	200001dc 	.word	0x200001dc
 8000ce4:	20000178 	.word	0x20000178

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <Error_Handler+0x8>

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f001 f8fa 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a32      	ldr	r2, [pc, #200]	@ (8000e2c <HAL_ADC_MspInit+0xe8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d15e      	bne.n	8000e24 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b31      	ldr	r3, [pc, #196]	@ (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4a30      	ldr	r2, [pc, #192]	@ (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a29      	ldr	r2, [pc, #164]	@ (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <HAL_ADC_MspInit+0xec>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4820      	ldr	r0, [pc, #128]	@ (8000e34 <HAL_ADC_MspInit+0xf0>)
 8000db2:	f001 fcff 	bl	80027b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000db8:	4a20      	ldr	r2, [pc, #128]	@ (8000e3c <HAL_ADC_MspInit+0xf8>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dde:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000de0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000de6:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df8:	480f      	ldr	r0, [pc, #60]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000dfa:	f001 f8d9 	bl	8001fb0 <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e04:	f7ff ff70 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000e0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <HAL_ADC_MspInit+0xf4>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2012      	movs	r0, #18
 8000e1a:	f001 f892 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e1e:	2012      	movs	r0, #18
 8000e20:	f001 f8ab 	bl	8001f7a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	@ 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012000 	.word	0x40012000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	200000d0 	.word	0x200000d0
 8000e3c:	40026410 	.word	0x40026410

08000e40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	@ 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a45      	ldr	r2, [pc, #276]	@ (8000f74 <HAL_UART_MspInit+0x134>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d12c      	bne.n	8000ebc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	4b44      	ldr	r3, [pc, #272]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a43      	ldr	r2, [pc, #268]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e72:	4b41      	ldr	r3, [pc, #260]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	4b3d      	ldr	r3, [pc, #244]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a3c      	ldr	r2, [pc, #240]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4831      	ldr	r0, [pc, #196]	@ (8000f7c <HAL_UART_MspInit+0x13c>)
 8000eb6:	f001 fc7d 	bl	80027b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eba:	e057      	b.n	8000f6c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8000f80 <HAL_UART_MspInit+0x140>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d152      	bne.n	8000f6c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b2b      	ldr	r3, [pc, #172]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a2a      	ldr	r2, [pc, #168]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <HAL_UART_MspInit+0x138>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <HAL_UART_MspInit+0x144>)
 8000f36:	f001 fc3d 	bl	80027b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <HAL_UART_MspInit+0x148>)
 8000f58:	f001 fc2c 	bl	80027b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2027      	movs	r0, #39	@ 0x27
 8000f62:	f000 ffee 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f66:	2027      	movs	r0, #39	@ 0x27
 8000f68:	f001 f807 	bl	8001f7a <HAL_NVIC_EnableIRQ>
}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	@ 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40004800 	.word	0x40004800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020400 	.word	0x40020400

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f953 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <ADC_IRQHandler+0x10>)
 8000ff2:	f000 f9d2 	bl	800139a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000088 	.word	0x20000088

08001000 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <USART3_IRQHandler+0x10>)
 8001006:	f002 fc6b 	bl	80038e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000178 	.word	0x20000178

08001014 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <DMA2_Stream0_IRQHandler+0x10>)
 800101a:	f001 f961 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000d0 	.word	0x200000d0

08001028 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e00a      	b.n	8001050 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103a:	f3af 8000 	nop.w
 800103e:	4601      	mov	r1, r0
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	b2ca      	uxtb	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3301      	adds	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	dbf0      	blt.n	800103a <_read+0x12>
  }

  return len;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e009      	b.n	8001088 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf1      	blt.n	8001074 <_write+0x12>
  }
  return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c2:	605a      	str	r2, [r3, #4]
  return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_isatty>:

int _isatty(int file)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f003 fcb2 	bl	8004a9c <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20020000 	.word	0x20020000
 8001164:	00000400 	.word	0x00000400
 8001168:	200001e8 	.word	0x200001e8
 800116c:	20000340 	.word	0x20000340

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001198:	f7ff ffea 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f003 fc71 	bl	8004aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fa09 	bl	80005dc <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011d8:	08005a64 	.word	0x08005a64
  ldr r2, =_sbss
 80011dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011e0:	2000033c 	.word	0x2000033c

080011e4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <CAN1_RX0_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 fe8b 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fd6a 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fea3 	bl	8001f96 <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 fe6b 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000004 	.word	0x20000004
 8001284:	2000000c 	.word	0x2000000c
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	200001ec 	.word	0x200001ec

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200001ec 	.word	0x200001ec

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000000c 	.word	0x2000000c

08001314 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e033      	b.n	8001392 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fd06 	bl	8000d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800135a:	f023 0302 	bic.w	r3, r3, #2
 800135e:	f043 0202 	orr.w	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fb88 	bl	8001a7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f023 0303 	bic.w	r3, r3, #3
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
 8001382:	e001      	b.n	8001388 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d049      	beq.n	8001464 <HAL_ADC_IRQHandler+0xca>
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d046      	beq.n	8001464 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d12b      	bne.n	8001454 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001400:	2b00      	cmp	r3, #0
 8001402:	d127      	bne.n	8001454 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800141c:	2b00      	cmp	r3, #0
 800141e:	d119      	bne.n	8001454 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0220 	bic.w	r2, r2, #32
 800142e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fc0d 	bl	8000c74 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f06f 0212 	mvn.w	r2, #18
 8001462:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001472:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d057      	beq.n	800152a <HAL_ADC_IRQHandler+0x190>
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d054      	beq.n	800152a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d139      	bne.n	800151a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d12b      	bne.n	800151a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d124      	bne.n	800151a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d11d      	bne.n	800151a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d119      	bne.n	800151a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014f4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fc2c 	bl	8001d78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f06f 020c 	mvn.w	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001538:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d017      	beq.n	8001570 <HAL_ADC_IRQHandler+0x1d6>
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d014      	beq.n	8001570 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10d      	bne.n	8001570 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f945 	bl	80017f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f06f 0201 	mvn.w	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800157e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d015      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x218>
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d012      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001590:	f043 0202 	orr.w	r2, r3, #2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0220 	mvn.w	r2, #32
 80015a0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f92e 	bl	8001804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0220 	mvn.w	r2, #32
 80015b0:	601a      	str	r2, [r3, #0]
  }
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Start_DMA+0x1e>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e0e9      	b.n	80017ae <HAL_ADC_Start_DMA+0x1f2>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d018      	beq.n	8001622 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001600:	4b6d      	ldr	r3, [pc, #436]	@ (80017b8 <HAL_ADC_Start_DMA+0x1fc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6d      	ldr	r2, [pc, #436]	@ (80017bc <HAL_ADC_Start_DMA+0x200>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9a      	lsrs	r2, r3, #18
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	3b01      	subs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001630:	d107      	bne.n	8001642 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001640:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 80a1 	bne.w	8001794 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800167c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800168c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001690:	d106      	bne.n	80016a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f023 0206 	bic.w	r2, r3, #6
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	645a      	str	r2, [r3, #68]	@ 0x44
 800169e:	e002      	b.n	80016a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ae:	4b44      	ldr	r3, [pc, #272]	@ (80017c0 <HAL_ADC_Start_DMA+0x204>)
 80016b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	4a43      	ldr	r2, [pc, #268]	@ (80017c4 <HAL_ADC_Start_DMA+0x208>)
 80016b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016be:	4a42      	ldr	r2, [pc, #264]	@ (80017c8 <HAL_ADC_Start_DMA+0x20c>)
 80016c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c6:	4a41      	ldr	r2, [pc, #260]	@ (80017cc <HAL_ADC_Start_DMA+0x210>)
 80016c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80016e2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016f2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	334c      	adds	r3, #76	@ 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f000 fd02 	bl	800210c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2b00      	cmp	r3, #0
 8001712:	d12a      	bne.n	800176a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a2d      	ldr	r2, [pc, #180]	@ (80017d0 <HAL_ADC_Start_DMA+0x214>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d015      	beq.n	800174a <HAL_ADC_Start_DMA+0x18e>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2c      	ldr	r2, [pc, #176]	@ (80017d4 <HAL_ADC_Start_DMA+0x218>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d105      	bne.n	8001734 <HAL_ADC_Start_DMA+0x178>
 8001728:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <HAL_ADC_Start_DMA+0x204>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00a      	beq.n	800174a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <HAL_ADC_Start_DMA+0x21c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d136      	bne.n	80017ac <HAL_ADC_Start_DMA+0x1f0>
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_ADC_Start_DMA+0x204>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d130      	bne.n	80017ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d129      	bne.n	80017ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e020      	b.n	80017ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <HAL_ADC_Start_DMA+0x214>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d11b      	bne.n	80017ac <HAL_ADC_Start_DMA+0x1f0>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d114      	bne.n	80017ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	e00b      	b.n	80017ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f043 0210 	orr.w	r2, r3, #16
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000004 	.word	0x20000004
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	40012300 	.word	0x40012300
 80017c4:	08001c75 	.word	0x08001c75
 80017c8:	08001d2f 	.word	0x08001d2f
 80017cc:	08001d4b 	.word	0x08001d4b
 80017d0:	40012000 	.word	0x40012000
 80017d4:	40012100 	.word	0x40012100
 80017d8:	40012200 	.word	0x40012200

080017dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1c>
 8001830:	2302      	movs	r3, #2
 8001832:	e113      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x244>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d925      	bls.n	8001890 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68d9      	ldr	r1, [r3, #12]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	3b1e      	subs	r3, #30
 800185a:	2207      	movs	r2, #7
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43da      	mvns	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	400a      	ands	r2, r1
 8001868:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68d9      	ldr	r1, [r3, #12]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	4603      	mov	r3, r0
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	3b1e      	subs	r3, #30
 8001884:	409a      	lsls	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e022      	b.n	80018d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	2207      	movs	r2, #7
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	400a      	ands	r2, r1
 80018b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4403      	add	r3, r0
 80018cc:	409a      	lsls	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d824      	bhi.n	8001928 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	3b05      	subs	r3, #5
 80018f0:	221f      	movs	r2, #31
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	400a      	ands	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3b05      	subs	r3, #5
 800191a:	fa00 f203 	lsl.w	r2, r0, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
 8001926:	e04c      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d824      	bhi.n	800197a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b23      	subs	r3, #35	@ 0x23
 8001942:	221f      	movs	r2, #31
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43da      	mvns	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	400a      	ands	r2, r1
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b23      	subs	r3, #35	@ 0x23
 800196c:	fa00 f203 	lsl.w	r2, r0, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	631a      	str	r2, [r3, #48]	@ 0x30
 8001978:	e023      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3b41      	subs	r3, #65	@ 0x41
 800198c:	221f      	movs	r2, #31
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b41      	subs	r3, #65	@ 0x41
 80019b6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c2:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <HAL_ADC_ConfigChannel+0x250>)
 80019c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a28      	ldr	r2, [pc, #160]	@ (8001a6c <HAL_ADC_ConfigChannel+0x254>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d10f      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1d8>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d10b      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a6c <HAL_ADC_ConfigChannel+0x254>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12b      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x23a>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <HAL_ADC_ConfigChannel+0x258>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d003      	beq.n	8001a0c <HAL_ADC_ConfigChannel+0x1f4>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b11      	cmp	r3, #17
 8001a0a:	d122      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <HAL_ADC_ConfigChannel+0x258>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d111      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HAL_ADC_ConfigChannel+0x25c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <HAL_ADC_ConfigChannel+0x260>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	0c9a      	lsrs	r2, r3, #18
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a44:	e002      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	40012000 	.word	0x40012000
 8001a70:	10000012 	.word	0x10000012
 8001a74:	20000004 	.word	0x20000004
 8001a78:	431bde83 	.word	0x431bde83

08001a7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a84:	4b79      	ldr	r3, [pc, #484]	@ (8001c6c <ADC_Init+0x1f0>)
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	021a      	lsls	r2, r3, #8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	4a58      	ldr	r2, [pc, #352]	@ (8001c70 <ADC_Init+0x1f4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d022      	beq.n	8001b5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6899      	ldr	r1, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	e00f      	b.n	8001b7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0202 	bic.w	r2, r2, #2
 8001b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7e1b      	ldrb	r3, [r3, #24]
 8001b94:	005a      	lsls	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01b      	beq.n	8001be0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	035a      	lsls	r2, r3, #13
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	e007      	b.n	8001bf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	051a      	lsls	r2, r3, #20
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6899      	ldr	r1, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c32:	025a      	lsls	r2, r3, #9
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6899      	ldr	r1, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	029a      	lsls	r2, r3, #10
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	0f000001 	.word	0x0f000001

08001c74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d13c      	bne.n	8001d08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d12b      	bne.n	8001d00 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d127      	bne.n	8001d00 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d119      	bne.n	8001d00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0220 	bic.w	r2, r2, #32
 8001cda:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f043 0201 	orr.w	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f7fe ffb7 	bl	8000c74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d06:	e00e      	b.n	8001d26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fd75 	bl	8001804 <HAL_ADC_ErrorCallback>
}
 8001d1a:	e004      	b.n	8001d26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff fd4d 	bl	80017dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d56:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2240      	movs	r2, #64	@ 0x40
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f043 0204 	orr.w	r2, r3, #4
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f7ff fd4a 	bl	8001804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	@ (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	@ (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	@ (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff3e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff31 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff f97a 	bl	80012b4 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e099      	b.n	8002100 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fec:	e00f      	b.n	800200e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fee:	f7ff f961 	bl	80012b4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d908      	bls.n	800200e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e078      	b.n	8002100 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e8      	bne.n	8001fee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4b38      	ldr	r3, [pc, #224]	@ (8002108 <HAL_DMA_Init+0x158>)
 8002028:	4013      	ands	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	2b04      	cmp	r3, #4
 8002066:	d107      	bne.n	8002078 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	4313      	orrs	r3, r2
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f023 0307 	bic.w	r3, r3, #7
 800208e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d117      	bne.n	80020d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fb01 	bl	80026bc <DMA_CheckFifoParam>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2240      	movs	r2, #64	@ 0x40
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020ce:	2301      	movs	r3, #1
 80020d0:	e016      	b.n	8002100 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fab8 	bl	8002650 <DMA_CalcBaseAndBitshift>
 80020e0:	4603      	mov	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	223f      	movs	r2, #63	@ 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	f010803f 	.word	0xf010803f

0800210c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_DMA_Start_IT+0x26>
 800212e:	2302      	movs	r3, #2
 8002130:	e040      	b.n	80021b4 <HAL_DMA_Start_IT+0xa8>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d12f      	bne.n	80021a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fa4a 	bl	80025f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	223f      	movs	r2, #63	@ 0x3f
 8002166:	409a      	lsls	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0216 	orr.w	r2, r2, #22
 800217a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0208 	orr.w	r2, r2, #8
 8002192:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e005      	b.n	80021b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
 80021b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021ca:	f7ff f873 	bl	80012b4 <HAL_GetTick>
 80021ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d008      	beq.n	80021ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2280      	movs	r2, #128	@ 0x80
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e052      	b.n	8002294 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0216 	bic.w	r2, r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800220c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_DMA_Abort+0x62>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223e:	e013      	b.n	8002268 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002240:	f7ff f838 	bl	80012b4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b05      	cmp	r3, #5
 800224c:	d90c      	bls.n	8002268 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2203      	movs	r2, #3
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e015      	b.n	8002294 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e4      	bne.n	8002240 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	223f      	movs	r2, #63	@ 0x3f
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d004      	beq.n	80022ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2280      	movs	r2, #128	@ 0x80
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00c      	b.n	80022d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2205      	movs	r2, #5
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002528 <HAL_DMA_IRQHandler+0x248>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a8e      	ldr	r2, [pc, #568]	@ (800252c <HAL_DMA_IRQHandler+0x24c>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	2208      	movs	r2, #8
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01a      	beq.n	800234c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	2208      	movs	r2, #8
 800233a:	409a      	lsls	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	2201      	movs	r2, #1
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	2201      	movs	r2, #1
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f043 0202 	orr.w	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	2204      	movs	r2, #4
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a4:	2204      	movs	r2, #4
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	f043 0204 	orr.w	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	2210      	movs	r2, #16
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d043      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03c      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	2210      	movs	r2, #16
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d018      	beq.n	8002422 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d024      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
 800240e:	e01f      	b.n	8002450 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01b      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
 8002420:	e016      	b.n	8002450 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0208 	bic.w	r2, r2, #8
 800243e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	2220      	movs	r2, #32
 8002456:	409a      	lsls	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 808f 	beq.w	8002580 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8087 	beq.w	8002580 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	2220      	movs	r2, #32
 8002478:	409a      	lsls	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b05      	cmp	r3, #5
 8002488:	d136      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0216 	bic.w	r2, r2, #22
 8002498:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_DMA_IRQHandler+0x1da>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0208 	bic.w	r2, r2, #8
 80024c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	223f      	movs	r2, #63	@ 0x3f
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d07e      	beq.n	80025ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
        }
        return;
 80024f6:	e079      	b.n	80025ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01d      	beq.n	8002542 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	2b00      	cmp	r3, #0
 800251a:	d031      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
 8002524:	e02c      	b.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
 8002526:	bf00      	nop
 8002528:	20000004 	.word	0x20000004
 800252c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e01e      	b.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0210 	bic.w	r2, r2, #16
 800255e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	2b00      	cmp	r3, #0
 8002586:	d032      	beq.n	80025ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d022      	beq.n	80025da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2205      	movs	r2, #5
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d307      	bcc.n	80025c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f2      	bne.n	80025ac <HAL_DMA_IRQHandler+0x2cc>
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
 80025ea:	e000      	b.n	80025ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80025ec:	bf00      	nop
    }
  }
}
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002610:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b40      	cmp	r3, #64	@ 0x40
 8002620:	d108      	bne.n	8002634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002632:	e007      	b.n	8002644 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	3b10      	subs	r3, #16
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800266a:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <DMA_CalcBaseAndBitshift+0x68>)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d909      	bls.n	8002692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002690:	e007      	b.n	80026a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	aaaaaaab 	.word	0xaaaaaaab
 80026b8:	08005a18 	.word	0x08005a18

080026bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11f      	bne.n	8002716 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d856      	bhi.n	800278a <DMA_CheckFifoParam+0xce>
 80026dc:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <DMA_CheckFifoParam+0x28>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	08002707 	.word	0x08002707
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800278b 	.word	0x0800278b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d046      	beq.n	800278e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002704:	e043      	b.n	800278e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800270e:	d140      	bne.n	8002792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002714:	e03d      	b.n	8002792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800271e:	d121      	bne.n	8002764 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d837      	bhi.n	8002796 <DMA_CheckFifoParam+0xda>
 8002726:	a201      	add	r2, pc, #4	@ (adr r2, 800272c <DMA_CheckFifoParam+0x70>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	0800273d 	.word	0x0800273d
 8002730:	08002743 	.word	0x08002743
 8002734:	0800273d 	.word	0x0800273d
 8002738:	08002755 	.word	0x08002755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e030      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d025      	beq.n	800279a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002752:	e022      	b.n	800279a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800275c:	d11f      	bne.n	800279e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002762:	e01c      	b.n	800279e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d903      	bls.n	8002772 <DMA_CheckFifoParam+0xb6>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d003      	beq.n	8002778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002770:	e018      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      break;
 8002776:	e015      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e00b      	b.n	80027a2 <DMA_CheckFifoParam+0xe6>
      break;
 800278a:	bf00      	nop
 800278c:	e00a      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e008      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002792:	bf00      	nop
 8002794:	e006      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
 8002798:	e004      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
 800279c:	e002      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800279e:	bf00      	nop
 80027a0:	e000      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
    }
  } 
  
  return status; 
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop

080027b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	e165      	b.n	8002a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f040 8154 	bne.w	8002a96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d005      	beq.n	8002806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	2b02      	cmp	r3, #2
 8002804:	d130      	bne.n	8002868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b03      	cmp	r3, #3
 8002872:	d017      	beq.n	80028a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d123      	bne.n	80028f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80ae 	beq.w	8002a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab4 <HAL_GPIO_Init+0x300>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	4a5c      	ldr	r2, [pc, #368]	@ (8002ab4 <HAL_GPIO_Init+0x300>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002948:	6453      	str	r3, [r2, #68]	@ 0x44
 800294a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab4 <HAL_GPIO_Init+0x300>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002956:	4a58      	ldr	r2, [pc, #352]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4f      	ldr	r2, [pc, #316]	@ (8002abc <HAL_GPIO_Init+0x308>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d025      	beq.n	80029ce <HAL_GPIO_Init+0x21a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4e      	ldr	r2, [pc, #312]	@ (8002ac0 <HAL_GPIO_Init+0x30c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01f      	beq.n	80029ca <HAL_GPIO_Init+0x216>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac4 <HAL_GPIO_Init+0x310>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d019      	beq.n	80029c6 <HAL_GPIO_Init+0x212>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac8 <HAL_GPIO_Init+0x314>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <HAL_GPIO_Init+0x20e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4b      	ldr	r2, [pc, #300]	@ (8002acc <HAL_GPIO_Init+0x318>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00d      	beq.n	80029be <HAL_GPIO_Init+0x20a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad0 <HAL_GPIO_Init+0x31c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <HAL_GPIO_Init+0x206>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a49      	ldr	r2, [pc, #292]	@ (8002ad4 <HAL_GPIO_Init+0x320>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_GPIO_Init+0x202>
 80029b2:	2306      	movs	r3, #6
 80029b4:	e00c      	b.n	80029d0 <HAL_GPIO_Init+0x21c>
 80029b6:	2307      	movs	r3, #7
 80029b8:	e00a      	b.n	80029d0 <HAL_GPIO_Init+0x21c>
 80029ba:	2305      	movs	r3, #5
 80029bc:	e008      	b.n	80029d0 <HAL_GPIO_Init+0x21c>
 80029be:	2304      	movs	r3, #4
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x21c>
 80029c2:	2303      	movs	r3, #3
 80029c4:	e004      	b.n	80029d0 <HAL_GPIO_Init+0x21c>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e002      	b.n	80029d0 <HAL_GPIO_Init+0x21c>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_GPIO_Init+0x21c>
 80029ce:	2300      	movs	r3, #0
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f002 0203 	and.w	r2, r2, #3
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	4093      	lsls	r3, r2
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e0:	4935      	ldr	r1, [pc, #212]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a31      	ldr	r2, [pc, #196]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a26      	ldr	r2, [pc, #152]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a42:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a90:	4a11      	ldr	r2, [pc, #68]	@ (8002ad8 <HAL_GPIO_Init+0x324>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	f67f ae96 	bls.w	80027d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40021800 	.word	0x40021800
 8002ad8:	40013c00 	.word	0x40013c00

08002adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aec:	787b      	ldrb	r3, [r7, #1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af8:	e003      	b.n	8002b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0cc      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b68      	ldr	r3, [pc, #416]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90c      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b65      	ldr	r3, [pc, #404]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a58      	ldr	r2, [pc, #352]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d044      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d119      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e067      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4934      	ldr	r1, [pc, #208]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7fe fb58 	bl	80012b4 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe fb54 	bl	80012b4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d20c      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f855 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fab8 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	08005a00 	.word	0x08005a00
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	20000008 	.word	0x20000008

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000004 	.word	0x20000004

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08005a10 	.word	0x08005a10

08002d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d20:	f7ff ffdc 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0b5b      	lsrs	r3, r3, #13
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	@ (8002d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08005a10 	.word	0x08005a10

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b0ae      	sub	sp, #184	@ 0xb8
 8002d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d6a:	4bcb      	ldr	r3, [pc, #812]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	f200 8206 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x440>
 8002d78:	a201      	add	r2, pc, #4	@ (adr r2, 8002d80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08003185 	.word	0x08003185
 8002d88:	08003185 	.word	0x08003185
 8002d8c:	08003185 	.word	0x08003185
 8002d90:	08002dbd 	.word	0x08002dbd
 8002d94:	08003185 	.word	0x08003185
 8002d98:	08003185 	.word	0x08003185
 8002d9c:	08003185 	.word	0x08003185
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08003185 	.word	0x08003185
 8002da8:	08003185 	.word	0x08003185
 8002dac:	08003185 	.word	0x08003185
 8002db0:	08002fb5 	.word	0x08002fb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4bb9      	ldr	r3, [pc, #740]	@ (800309c <HAL_RCC_GetSysClockFreq+0x358>)
 8002db6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dba:	e1e7      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbc:	4bb8      	ldr	r3, [pc, #736]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dc2:	e1e3      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4bb4      	ldr	r3, [pc, #720]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd0:	4bb1      	ldr	r3, [pc, #708]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d071      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4bae      	ldr	r3, [pc, #696]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002de8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e20:	4629      	mov	r1, r5
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002e34:	4649      	mov	r1, r9
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4641      	mov	r1, r8
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4641      	mov	r1, r8
 8002e44:	1a51      	subs	r1, r2, r1
 8002e46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e48:	4649      	mov	r1, r9
 8002e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4641      	mov	r1, r8
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4641      	mov	r1, r8
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4622      	mov	r2, r4
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e76:	462b      	mov	r3, r5
 8002e78:	460a      	mov	r2, r1
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	024b      	lsls	r3, r1, #9
 8002e90:	4621      	mov	r1, r4
 8002e92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e96:	4621      	mov	r1, r4
 8002e98:	024a      	lsls	r2, r1, #9
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002eac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002eb0:	f7fd f9fe 	bl	80002b0 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ebe:	e067      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4b75      	ldr	r3, [pc, #468]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ecc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eda:	2300      	movs	r3, #0
 8002edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ede:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef4:	0150      	lsls	r0, r2, #5
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4621      	mov	r1, r4
 8002efc:	1a51      	subs	r1, r2, r1
 8002efe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb63 0301 	sbc.w	r3, r3, r1
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f14:	4649      	mov	r1, r9
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	4641      	mov	r1, r8
 8002f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f1e:	4641      	mov	r1, r8
 8002f20:	018a      	lsls	r2, r1, #6
 8002f22:	4641      	mov	r1, r8
 8002f24:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f28:	4649      	mov	r1, r9
 8002f2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f42:	4692      	mov	sl, r2
 8002f44:	469b      	mov	fp, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	eb4b 0303 	adc.w	r3, fp, r3
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f62:	4629      	mov	r1, r5
 8002f64:	028b      	lsls	r3, r1, #10
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	028a      	lsls	r2, r1, #10
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f78:	2200      	movs	r2, #0
 8002f7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f7c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f82:	f7fd f995 	bl	80002b0 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f90:	4b41      	ldr	r3, [pc, #260]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fb2:	e0eb      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b38      	ldr	r3, [pc, #224]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc0:	4b35      	ldr	r3, [pc, #212]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d06b      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fcc:	4b32      	ldr	r3, [pc, #200]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fe4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	0159      	lsls	r1, r3, #5
 8002ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffa:	0150      	lsls	r0, r2, #5
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4621      	mov	r1, r4
 8003002:	1a51      	subs	r1, r2, r1
 8003004:	61b9      	str	r1, [r7, #24]
 8003006:	4629      	mov	r1, r5
 8003008:	eb63 0301 	sbc.w	r3, r3, r1
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800301a:	4659      	mov	r1, fp
 800301c:	018b      	lsls	r3, r1, #6
 800301e:	4651      	mov	r1, sl
 8003020:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003024:	4651      	mov	r1, sl
 8003026:	018a      	lsls	r2, r1, #6
 8003028:	4651      	mov	r1, sl
 800302a:	ebb2 0801 	subs.w	r8, r2, r1
 800302e:	4659      	mov	r1, fp
 8003030:	eb63 0901 	sbc.w	r9, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003040:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003044:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003048:	4690      	mov	r8, r2
 800304a:	4699      	mov	r9, r3
 800304c:	4623      	mov	r3, r4
 800304e:	eb18 0303 	adds.w	r3, r8, r3
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	462b      	mov	r3, r5
 8003056:	eb49 0303 	adc.w	r3, r9, r3
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003068:	4629      	mov	r1, r5
 800306a:	024b      	lsls	r3, r1, #9
 800306c:	4621      	mov	r1, r4
 800306e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003072:	4621      	mov	r1, r4
 8003074:	024a      	lsls	r2, r1, #9
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800307e:	2200      	movs	r2, #0
 8003080:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003082:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003088:	f7fd f912 	bl	80002b0 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003096:	e065      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x420>
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a4:	4b3d      	ldr	r3, [pc, #244]	@ (800319c <HAL_RCC_GetSysClockFreq+0x458>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	2200      	movs	r2, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	4611      	mov	r1, r2
 80030b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80030b6:	2300      	movs	r3, #0
 80030b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80030be:	4642      	mov	r2, r8
 80030c0:	464b      	mov	r3, r9
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4641      	mov	r1, r8
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	4649      	mov	r1, r9
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	1a54      	subs	r4, r2, r1
 8003102:	4659      	mov	r1, fp
 8003104:	eb63 0501 	sbc.w	r5, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	00eb      	lsls	r3, r5, #3
 8003112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003116:	00e2      	lsls	r2, r4, #3
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	4643      	mov	r3, r8
 800311e:	18e3      	adds	r3, r4, r3
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	464b      	mov	r3, r9
 8003124:	eb45 0303 	adc.w	r3, r5, r3
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003136:	4629      	mov	r1, r5
 8003138:	028b      	lsls	r3, r1, #10
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003140:	4621      	mov	r1, r4
 8003142:	028a      	lsls	r2, r1, #10
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800314c:	2200      	movs	r2, #0
 800314e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003150:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003152:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003156:	f7fd f8ab 	bl	80002b0 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4613      	mov	r3, r2
 8003160:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003164:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <HAL_RCC_GetSysClockFreq+0x458>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0f1b      	lsrs	r3, r3, #28
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003182:	e003      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800318a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003190:	4618      	mov	r0, r3
 8003192:	37b8      	adds	r7, #184	@ 0xb8
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400

080031a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e28d      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8083 	beq.w	80032ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031c4:	4b94      	ldr	r3, [pc, #592]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d019      	beq.n	8003204 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031d0:	4b91      	ldr	r3, [pc, #580]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b88      	ldr	r3, [pc, #544]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b84      	ldr	r3, [pc, #528]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x124>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d157      	bne.n	80032c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e25a      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x90>
 8003226:	4b7c      	ldr	r3, [pc, #496]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7b      	ldr	r2, [pc, #492]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xcc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0xb4>
 800323e:	4b76      	ldr	r3, [pc, #472]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b73      	ldr	r3, [pc, #460]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a72      	ldr	r2, [pc, #456]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xcc>
 8003258:	4b6f      	ldr	r3, [pc, #444]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6e      	ldr	r2, [pc, #440]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b6c      	ldr	r3, [pc, #432]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6b      	ldr	r2, [pc, #428]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe f81c 	bl	80012b4 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe f818 	bl	80012b4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	@ 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e21f      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b61      	ldr	r3, [pc, #388]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xdc>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe f808 	bl	80012b4 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe f804 	bl	80012b4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	@ 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e20b      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b57      	ldr	r3, [pc, #348]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x104>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06f      	beq.n	80033b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032d6:	4b50      	ldr	r3, [pc, #320]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d105      	bne.n	80032fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b47      	ldr	r3, [pc, #284]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003306:	4b44      	ldr	r3, [pc, #272]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x186>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1d3      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4937      	ldr	r1, [pc, #220]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e03a      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b34      	ldr	r3, [pc, #208]	@ (800341c <HAL_RCC_OscConfig+0x278>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fd ffb1 	bl	80012b4 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003356:	f7fd ffad 	bl	80012b4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1b4      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	4b2b      	ldr	r3, [pc, #172]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b28      	ldr	r3, [pc, #160]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4925      	ldr	r1, [pc, #148]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
 8003388:	e015      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338a:	4b24      	ldr	r3, [pc, #144]	@ (800341c <HAL_RCC_OscConfig+0x278>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd ff90 	bl	80012b4 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003398:	f7fd ff8c 	bl	80012b4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e193      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d036      	beq.n	8003430 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ca:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fd ff70 	bl	80012b4 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fd ff6c 	bl	80012b4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e173      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_RCC_OscConfig+0x274>)
 80033ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x234>
 80033f6:	e01b      	b.n	8003430 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f8:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fd ff59 	bl	80012b4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	e00e      	b.n	8003424 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003406:	f7fd ff55 	bl	80012b4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d907      	bls.n	8003424 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e15c      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
 8003418:	40023800 	.word	0x40023800
 800341c:	42470000 	.word	0x42470000
 8003420:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b8a      	ldr	r3, [pc, #552]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ea      	bne.n	8003406 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8097 	beq.w	800356c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b83      	ldr	r3, [pc, #524]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b7f      	ldr	r3, [pc, #508]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	4a7e      	ldr	r2, [pc, #504]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	@ 0x40
 800345e:	4b7c      	ldr	r3, [pc, #496]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b79      	ldr	r3, [pc, #484]	@ (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d118      	bne.n	80034ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347a:	4b76      	ldr	r3, [pc, #472]	@ (8003654 <HAL_RCC_OscConfig+0x4b0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a75      	ldr	r2, [pc, #468]	@ (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fd ff15 	bl	80012b4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fd ff11 	bl	80012b4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e118      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003654 <HAL_RCC_OscConfig+0x4b0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x31e>
 80034b4:	4b66      	ldr	r3, [pc, #408]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b8:	4a65      	ldr	r2, [pc, #404]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c0:	e01c      	b.n	80034fc <HAL_RCC_OscConfig+0x358>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x340>
 80034ca:	4b61      	ldr	r3, [pc, #388]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ce:	4a60      	ldr	r2, [pc, #384]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	4a5d      	ldr	r2, [pc, #372]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0x358>
 80034e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e8:	4a59      	ldr	r2, [pc, #356]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f0:	4b57      	ldr	r3, [pc, #348]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f4:	4a56      	ldr	r2, [pc, #344]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd fed6 	bl	80012b4 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fd fed2 	bl	80012b4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0d7      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ee      	beq.n	800350c <HAL_RCC_OscConfig+0x368>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fd fec0 	bl	80012b4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fd febc 	bl	80012b4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0c1      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354e:	4b40      	ldr	r3, [pc, #256]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ee      	bne.n	8003538 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003560:	4b3b      	ldr	r3, [pc, #236]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	4a3a      	ldr	r2, [pc, #232]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800356a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80ad 	beq.w	80036d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003576:	4b36      	ldr	r3, [pc, #216]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d060      	beq.n	8003644 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d145      	bne.n	8003616 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b33      	ldr	r3, [pc, #204]	@ (8003658 <HAL_RCC_OscConfig+0x4b4>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fd fe90 	bl	80012b4 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7fd fe8c 	bl	80012b4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e093      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	3b01      	subs	r3, #1
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	071b      	lsls	r3, r3, #28
 80035e2:	491b      	ldr	r1, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x4b4>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fd fe61 	bl	80012b4 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fd fe5d 	bl	80012b4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e064      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x452>
 8003614:	e05c      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <HAL_RCC_OscConfig+0x4b4>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd fe4a 	bl	80012b4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fd fe46 	bl	80012b4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e04d      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x480>
 8003642:	e045      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e040      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
 8003658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365c:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <HAL_RCC_OscConfig+0x538>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d030      	beq.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d129      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d122      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d119      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d10f      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e042      	b.n	8003778 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fb9a 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fdbd 	bl	80042a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	@ 0x28
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	d175      	bne.n	800388c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Transmit+0x2c>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e06e      	b.n	800388e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2221      	movs	r2, #33	@ 0x21
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037be:	f7fd fd79 	bl	80012b4 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	88fa      	ldrh	r2, [r7, #6]
 80037ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d8:	d108      	bne.n	80037ec <HAL_UART_Transmit+0x6c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e003      	b.n	80037f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f4:	e02e      	b.n	8003854 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	@ 0x80
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fb1f 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e03a      	b.n	800388e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3302      	adds	r3, #2
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	e007      	b.n	8003846 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	3301      	adds	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1cb      	bne.n	80037f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	2140      	movs	r1, #64	@ 0x40
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 faeb 	bl	8003e44 <UART_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e006      	b.n	800388e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	4613      	mov	r3, r2
 80038a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d112      	bne.n	80038d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_UART_Receive_IT+0x26>
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00b      	b.n	80038d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	461a      	mov	r2, r3
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb12 	bl	8003ef6 <UART_Start_Receive_IT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	e000      	b.n	80038d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b0ba      	sub	sp, #232	@ 0xe8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800391e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_UART_IRQHandler+0x66>
 8003932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fbf2 	bl	8004128 <UART_Receive_IT>
      return;
 8003944:	e25b      	b.n	8003dfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80de 	beq.w	8003b0c <HAL_UART_IRQHandler+0x22c>
 8003950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003960:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80d1 	beq.w	8003b0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_UART_IRQHandler+0xae>
 8003976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_UART_IRQHandler+0xd2>
 800399a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f043 0202 	orr.w	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_UART_IRQHandler+0xf6>
 80039be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f043 0204 	orr.w	r2, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d011      	beq.n	8003a06 <HAL_UART_IRQHandler+0x126>
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0208 	orr.w	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 81f2 	beq.w	8003df4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_UART_IRQHandler+0x14e>
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fb7d 	bl	8004128 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_UART_IRQHandler+0x17a>
 8003a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d04f      	beq.n	8003afa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa85 	bl	8003f6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6a:	2b40      	cmp	r3, #64	@ 0x40
 8003a6c:	d141      	bne.n	8003af2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3314      	adds	r3, #20
 8003a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1d9      	bne.n	8003a6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d013      	beq.n	8003aea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	4a7e      	ldr	r2, [pc, #504]	@ (8003cc0 <HAL_UART_IRQHandler+0x3e0>)
 8003ac8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fbe4 	bl	800229c <HAL_DMA_Abort_IT>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	e00e      	b.n	8003b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f994 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	e00a      	b.n	8003b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f990 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e006      	b.n	8003b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f98c 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b06:	e175      	b.n	8003df4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	bf00      	nop
    return;
 8003b0a:	e173      	b.n	8003df4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 814f 	bne.w	8003db4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8148 	beq.w	8003db4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8141 	beq.w	8003db4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b40      	cmp	r3, #64	@ 0x40
 8003b54:	f040 80b6 	bne.w	8003cc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8145 	beq.w	8003df8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b76:	429a      	cmp	r2, r3
 8003b78:	f080 813e 	bcs.w	8003df8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b8e:	f000 8088 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1d9      	bne.n	8003b92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e1      	bne.n	8003bde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e3      	bne.n	8003c1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c72:	f023 0310 	bic.w	r3, r3, #16
 8003c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e3      	bne.n	8003c60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fa8d 	bl	80021bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f8b7 	bl	8003e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cbe:	e09b      	b.n	8003df8 <HAL_UART_IRQHandler+0x518>
 8003cc0:	08004031 	.word	0x08004031
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 808e 	beq.w	8003dfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8089 	beq.w	8003dfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e3      	bne.n	8003cea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3314      	adds	r3, #20
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	623b      	str	r3, [r7, #32]
   return(result);
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e3      	bne.n	8003d22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d8c:	61fa      	str	r2, [r7, #28]
 8003d8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	69b9      	ldr	r1, [r7, #24]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e3      	bne.n	8003d68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f83d 	bl	8003e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003db2:	e023      	b.n	8003dfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d009      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x4f4>
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f943 	bl	8004058 <UART_Transmit_IT>
    return;
 8003dd2:	e014      	b.n	8003dfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00e      	beq.n	8003dfe <HAL_UART_IRQHandler+0x51e>
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f983 	bl	80040f8 <UART_EndTransmit_IT>
    return;
 8003df2:	e004      	b.n	8003dfe <HAL_UART_IRQHandler+0x51e>
    return;
 8003df4:	bf00      	nop
 8003df6:	e002      	b.n	8003dfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003dfc:	bf00      	nop
  }
}
 8003dfe:	37e8      	adds	r7, #232	@ 0xe8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e54:	e03b      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d037      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fd fa29 	bl	80012b4 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e03a      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d023      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d020      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d01d      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d116      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f857 	bl	8003f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d0b4      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	4613      	mov	r3, r2
 8003f02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2222      	movs	r2, #34	@ 0x22
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0220 	orr.w	r2, r2, #32
 8003f5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b095      	sub	sp, #84	@ 0x54
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f92:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3314      	adds	r3, #20
 8003fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d119      	bne.n	8004016 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004002:	61ba      	str	r2, [r7, #24]
 8004004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6979      	ldr	r1, [r7, #20]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	613b      	str	r3, [r7, #16]
   return(result);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004024:	bf00      	nop
 8004026:	3754      	adds	r7, #84	@ 0x54
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff fee4 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b21      	cmp	r3, #33	@ 0x21
 800406a:	d13e      	bne.n	80040ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004074:	d114      	bne.n	80040a0 <UART_Transmit_IT+0x48>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d110      	bne.n	80040a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004092:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]
 800409e:	e008      	b.n	80040b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6211      	str	r1, [r2, #32]
 80040aa:	781a      	ldrb	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4619      	mov	r1, r3
 80040c0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800410e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fe73 	bl	8003e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	@ 0x30
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b22      	cmp	r3, #34	@ 0x22
 800413a:	f040 80ae 	bne.w	800429a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004146:	d117      	bne.n	8004178 <UART_Receive_IT+0x50>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d113      	bne.n	8004178 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004166:	b29a      	uxth	r2, r3
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	629a      	str	r2, [r3, #40]	@ 0x28
 8004176:	e026      	b.n	80041c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418a:	d007      	beq.n	800419c <UART_Receive_IT+0x74>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <UART_Receive_IT+0x82>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e008      	b.n	80041bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4619      	mov	r1, r3
 80041d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d15d      	bne.n	8004296 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0220 	bic.w	r2, r2, #32
 80041e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	d135      	bne.n	800428c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	613b      	str	r3, [r7, #16]
   return(result);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f023 0310 	bic.w	r3, r3, #16
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004246:	623a      	str	r2, [r7, #32]
 8004248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	69f9      	ldr	r1, [r7, #28]
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	61bb      	str	r3, [r7, #24]
   return(result);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d10a      	bne.n	800427e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fdd1 	bl	8003e2c <HAL_UARTEx_RxEventCallback>
 800428a:	e002      	b.n	8004292 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fc fd01 	bl	8000c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e002      	b.n	800429c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3730      	adds	r7, #48	@ 0x30
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b0c0      	sub	sp, #256	@ 0x100
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	ea40 0301 	orr.w	r3, r0, r1
 80042cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042fc:	f021 010c 	bic.w	r1, r1, #12
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800430a:	430b      	orrs	r3, r1
 800430c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	6999      	ldr	r1, [r3, #24]
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	ea40 0301 	orr.w	r3, r0, r1
 800432a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b8f      	ldr	r3, [pc, #572]	@ (8004570 <UART_SetConfig+0x2cc>)
 8004334:	429a      	cmp	r2, r3
 8004336:	d005      	beq.n	8004344 <UART_SetConfig+0xa0>
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b8d      	ldr	r3, [pc, #564]	@ (8004574 <UART_SetConfig+0x2d0>)
 8004340:	429a      	cmp	r2, r3
 8004342:	d104      	bne.n	800434e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7fe fcea 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8004348:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800434c:	e003      	b.n	8004356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800434e:	f7fe fcd1 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8004352:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004360:	f040 810c 	bne.w	800457c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800436e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004376:	4622      	mov	r2, r4
 8004378:	462b      	mov	r3, r5
 800437a:	1891      	adds	r1, r2, r2
 800437c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800437e:	415b      	adcs	r3, r3
 8004380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004386:	4621      	mov	r1, r4
 8004388:	eb12 0801 	adds.w	r8, r2, r1
 800438c:	4629      	mov	r1, r5
 800438e:	eb43 0901 	adc.w	r9, r3, r1
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800439e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a6:	4690      	mov	r8, r2
 80043a8:	4699      	mov	r9, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	eb18 0303 	adds.w	r3, r8, r3
 80043b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043b4:	462b      	mov	r3, r5
 80043b6:	eb49 0303 	adc.w	r3, r9, r3
 80043ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043d2:	460b      	mov	r3, r1
 80043d4:	18db      	adds	r3, r3, r3
 80043d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043d8:	4613      	mov	r3, r2
 80043da:	eb42 0303 	adc.w	r3, r2, r3
 80043de:	657b      	str	r3, [r7, #84]	@ 0x54
 80043e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043e8:	f7fb ff62 	bl	80002b0 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4b61      	ldr	r3, [pc, #388]	@ (8004578 <UART_SetConfig+0x2d4>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011c      	lsls	r4, r3, #4
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004404:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004414:	415b      	adcs	r3, r3
 8004416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800441c:	4641      	mov	r1, r8
 800441e:	eb12 0a01 	adds.w	sl, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb43 0b01 	adc.w	fp, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800443c:	4692      	mov	sl, r2
 800443e:	469b      	mov	fp, r3
 8004440:	4643      	mov	r3, r8
 8004442:	eb1a 0303 	adds.w	r3, sl, r3
 8004446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800444a:	464b      	mov	r3, r9
 800444c:	eb4b 0303 	adc.w	r3, fp, r3
 8004450:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004460:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004468:	460b      	mov	r3, r1
 800446a:	18db      	adds	r3, r3, r3
 800446c:	643b      	str	r3, [r7, #64]	@ 0x40
 800446e:	4613      	mov	r3, r2
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	647b      	str	r3, [r7, #68]	@ 0x44
 8004476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800447a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800447e:	f7fb ff17 	bl	80002b0 <__aeabi_uldivmod>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4611      	mov	r1, r2
 8004488:	4b3b      	ldr	r3, [pc, #236]	@ (8004578 <UART_SetConfig+0x2d4>)
 800448a:	fba3 2301 	umull	r2, r3, r3, r1
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2264      	movs	r2, #100	@ 0x64
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	1acb      	subs	r3, r1, r3
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800449e:	4b36      	ldr	r3, [pc, #216]	@ (8004578 <UART_SetConfig+0x2d4>)
 80044a0:	fba3 2302 	umull	r2, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044ac:	441c      	add	r4, r3
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044c8:	415b      	adcs	r3, r3
 80044ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004504:	464b      	mov	r3, r9
 8004506:	460a      	mov	r2, r1
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800451c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004524:	460b      	mov	r3, r1
 8004526:	18db      	adds	r3, r3, r3
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800452a:	4613      	mov	r3, r2
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800453a:	f7fb feb9 	bl	80002b0 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <UART_SetConfig+0x2d4>)
 8004544:	fba3 1302 	umull	r1, r3, r3, r2
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	2164      	movs	r1, #100	@ 0x64
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	3332      	adds	r3, #50	@ 0x32
 8004556:	4a08      	ldr	r2, [pc, #32]	@ (8004578 <UART_SetConfig+0x2d4>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	f003 0207 	and.w	r2, r3, #7
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4422      	add	r2, r4
 800456a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800456c:	e106      	b.n	800477c <UART_SetConfig+0x4d8>
 800456e:	bf00      	nop
 8004570:	40011000 	.word	0x40011000
 8004574:	40011400 	.word	0x40011400
 8004578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800457c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004586:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800458a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800458e:	4642      	mov	r2, r8
 8004590:	464b      	mov	r3, r9
 8004592:	1891      	adds	r1, r2, r2
 8004594:	6239      	str	r1, [r7, #32]
 8004596:	415b      	adcs	r3, r3
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
 800459a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800459e:	4641      	mov	r1, r8
 80045a0:	1854      	adds	r4, r2, r1
 80045a2:	4649      	mov	r1, r9
 80045a4:	eb43 0501 	adc.w	r5, r3, r1
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	00eb      	lsls	r3, r5, #3
 80045b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b6:	00e2      	lsls	r2, r4, #3
 80045b8:	4614      	mov	r4, r2
 80045ba:	461d      	mov	r5, r3
 80045bc:	4643      	mov	r3, r8
 80045be:	18e3      	adds	r3, r4, r3
 80045c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045c4:	464b      	mov	r3, r9
 80045c6:	eb45 0303 	adc.w	r3, r5, r3
 80045ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045ea:	4629      	mov	r1, r5
 80045ec:	008b      	lsls	r3, r1, #2
 80045ee:	4621      	mov	r1, r4
 80045f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f4:	4621      	mov	r1, r4
 80045f6:	008a      	lsls	r2, r1, #2
 80045f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045fc:	f7fb fe58 	bl	80002b0 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b60      	ldr	r3, [pc, #384]	@ (8004788 <UART_SetConfig+0x4e4>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011c      	lsls	r4, r3, #4
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800461c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	61b9      	str	r1, [r7, #24]
 8004628:	415b      	adcs	r3, r3
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004630:	4641      	mov	r1, r8
 8004632:	1851      	adds	r1, r2, r1
 8004634:	6139      	str	r1, [r7, #16]
 8004636:	4649      	mov	r1, r9
 8004638:	414b      	adcs	r3, r1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004648:	4659      	mov	r1, fp
 800464a:	00cb      	lsls	r3, r1, #3
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004652:	4651      	mov	r1, sl
 8004654:	00ca      	lsls	r2, r1, #3
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	4603      	mov	r3, r0
 800465c:	4642      	mov	r2, r8
 800465e:	189b      	adds	r3, r3, r2
 8004660:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004664:	464b      	mov	r3, r9
 8004666:	460a      	mov	r2, r1
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	67bb      	str	r3, [r7, #120]	@ 0x78
 800467a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004688:	4649      	mov	r1, r9
 800468a:	008b      	lsls	r3, r1, #2
 800468c:	4641      	mov	r1, r8
 800468e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004692:	4641      	mov	r1, r8
 8004694:	008a      	lsls	r2, r1, #2
 8004696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800469a:	f7fb fe09 	bl	80002b0 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	4b38      	ldr	r3, [pc, #224]	@ (8004788 <UART_SetConfig+0x4e4>)
 80046a6:	fba3 2301 	umull	r2, r3, r3, r1
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2264      	movs	r2, #100	@ 0x64
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	1acb      	subs	r3, r1, r3
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	3332      	adds	r3, #50	@ 0x32
 80046b8:	4a33      	ldr	r2, [pc, #204]	@ (8004788 <UART_SetConfig+0x4e4>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046c4:	441c      	add	r4, r3
 80046c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ca:	2200      	movs	r2, #0
 80046cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80046d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	415b      	adcs	r3, r3
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e4:	4641      	mov	r1, r8
 80046e6:	1851      	adds	r1, r2, r1
 80046e8:	6039      	str	r1, [r7, #0]
 80046ea:	4649      	mov	r1, r9
 80046ec:	414b      	adcs	r3, r1
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046fc:	4659      	mov	r1, fp
 80046fe:	00cb      	lsls	r3, r1, #3
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004706:	4651      	mov	r1, sl
 8004708:	00ca      	lsls	r2, r1, #3
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	4603      	mov	r3, r0
 8004710:	4642      	mov	r2, r8
 8004712:	189b      	adds	r3, r3, r2
 8004714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004716:	464b      	mov	r3, r9
 8004718:	460a      	mov	r2, r1
 800471a:	eb42 0303 	adc.w	r3, r2, r3
 800471e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	663b      	str	r3, [r7, #96]	@ 0x60
 800472a:	667a      	str	r2, [r7, #100]	@ 0x64
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004738:	4649      	mov	r1, r9
 800473a:	008b      	lsls	r3, r1, #2
 800473c:	4641      	mov	r1, r8
 800473e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004742:	4641      	mov	r1, r8
 8004744:	008a      	lsls	r2, r1, #2
 8004746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800474a:	f7fb fdb1 	bl	80002b0 <__aeabi_uldivmod>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <UART_SetConfig+0x4e4>)
 8004754:	fba3 1302 	umull	r1, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	2164      	movs	r1, #100	@ 0x64
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	3332      	adds	r3, #50	@ 0x32
 8004766:	4a08      	ldr	r2, [pc, #32]	@ (8004788 <UART_SetConfig+0x4e4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4422      	add	r2, r4
 800477a:	609a      	str	r2, [r3, #8]
}
 800477c:	bf00      	nop
 800477e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004782:	46bd      	mov	sp, r7
 8004784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004788:	51eb851f 	.word	0x51eb851f

0800478c <std>:
 800478c:	2300      	movs	r3, #0
 800478e:	b510      	push	{r4, lr}
 8004790:	4604      	mov	r4, r0
 8004792:	e9c0 3300 	strd	r3, r3, [r0]
 8004796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800479a:	6083      	str	r3, [r0, #8]
 800479c:	8181      	strh	r1, [r0, #12]
 800479e:	6643      	str	r3, [r0, #100]	@ 0x64
 80047a0:	81c2      	strh	r2, [r0, #14]
 80047a2:	6183      	str	r3, [r0, #24]
 80047a4:	4619      	mov	r1, r3
 80047a6:	2208      	movs	r2, #8
 80047a8:	305c      	adds	r0, #92	@ 0x5c
 80047aa:	f000 f928 	bl	80049fe <memset>
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <std+0x58>)
 80047b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <std+0x5c>)
 80047b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <std+0x60>)
 80047b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <std+0x64>)
 80047bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <std+0x68>)
 80047c0:	6224      	str	r4, [r4, #32]
 80047c2:	429c      	cmp	r4, r3
 80047c4:	d006      	beq.n	80047d4 <std+0x48>
 80047c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047ca:	4294      	cmp	r4, r2
 80047cc:	d002      	beq.n	80047d4 <std+0x48>
 80047ce:	33d0      	adds	r3, #208	@ 0xd0
 80047d0:	429c      	cmp	r4, r3
 80047d2:	d105      	bne.n	80047e0 <std+0x54>
 80047d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047dc:	f000 b988 	b.w	8004af0 <__retarget_lock_init_recursive>
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	bf00      	nop
 80047e4:	08004979 	.word	0x08004979
 80047e8:	0800499b 	.word	0x0800499b
 80047ec:	080049d3 	.word	0x080049d3
 80047f0:	080049f7 	.word	0x080049f7
 80047f4:	200001f0 	.word	0x200001f0

080047f8 <stdio_exit_handler>:
 80047f8:	4a02      	ldr	r2, [pc, #8]	@ (8004804 <stdio_exit_handler+0xc>)
 80047fa:	4903      	ldr	r1, [pc, #12]	@ (8004808 <stdio_exit_handler+0x10>)
 80047fc:	4803      	ldr	r0, [pc, #12]	@ (800480c <stdio_exit_handler+0x14>)
 80047fe:	f000 b869 	b.w	80048d4 <_fwalk_sglue>
 8004802:	bf00      	nop
 8004804:	20000010 	.word	0x20000010
 8004808:	0800563d 	.word	0x0800563d
 800480c:	20000020 	.word	0x20000020

08004810 <cleanup_stdio>:
 8004810:	6841      	ldr	r1, [r0, #4]
 8004812:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <cleanup_stdio+0x34>)
 8004814:	4299      	cmp	r1, r3
 8004816:	b510      	push	{r4, lr}
 8004818:	4604      	mov	r4, r0
 800481a:	d001      	beq.n	8004820 <cleanup_stdio+0x10>
 800481c:	f000 ff0e 	bl	800563c <_fflush_r>
 8004820:	68a1      	ldr	r1, [r4, #8]
 8004822:	4b09      	ldr	r3, [pc, #36]	@ (8004848 <cleanup_stdio+0x38>)
 8004824:	4299      	cmp	r1, r3
 8004826:	d002      	beq.n	800482e <cleanup_stdio+0x1e>
 8004828:	4620      	mov	r0, r4
 800482a:	f000 ff07 	bl	800563c <_fflush_r>
 800482e:	68e1      	ldr	r1, [r4, #12]
 8004830:	4b06      	ldr	r3, [pc, #24]	@ (800484c <cleanup_stdio+0x3c>)
 8004832:	4299      	cmp	r1, r3
 8004834:	d004      	beq.n	8004840 <cleanup_stdio+0x30>
 8004836:	4620      	mov	r0, r4
 8004838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483c:	f000 befe 	b.w	800563c <_fflush_r>
 8004840:	bd10      	pop	{r4, pc}
 8004842:	bf00      	nop
 8004844:	200001f0 	.word	0x200001f0
 8004848:	20000258 	.word	0x20000258
 800484c:	200002c0 	.word	0x200002c0

08004850 <global_stdio_init.part.0>:
 8004850:	b510      	push	{r4, lr}
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <global_stdio_init.part.0+0x30>)
 8004854:	4c0b      	ldr	r4, [pc, #44]	@ (8004884 <global_stdio_init.part.0+0x34>)
 8004856:	4a0c      	ldr	r2, [pc, #48]	@ (8004888 <global_stdio_init.part.0+0x38>)
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	4620      	mov	r0, r4
 800485c:	2200      	movs	r2, #0
 800485e:	2104      	movs	r1, #4
 8004860:	f7ff ff94 	bl	800478c <std>
 8004864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004868:	2201      	movs	r2, #1
 800486a:	2109      	movs	r1, #9
 800486c:	f7ff ff8e 	bl	800478c <std>
 8004870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004874:	2202      	movs	r2, #2
 8004876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800487a:	2112      	movs	r1, #18
 800487c:	f7ff bf86 	b.w	800478c <std>
 8004880:	20000328 	.word	0x20000328
 8004884:	200001f0 	.word	0x200001f0
 8004888:	080047f9 	.word	0x080047f9

0800488c <__sfp_lock_acquire>:
 800488c:	4801      	ldr	r0, [pc, #4]	@ (8004894 <__sfp_lock_acquire+0x8>)
 800488e:	f000 b930 	b.w	8004af2 <__retarget_lock_acquire_recursive>
 8004892:	bf00      	nop
 8004894:	20000331 	.word	0x20000331

08004898 <__sfp_lock_release>:
 8004898:	4801      	ldr	r0, [pc, #4]	@ (80048a0 <__sfp_lock_release+0x8>)
 800489a:	f000 b92b 	b.w	8004af4 <__retarget_lock_release_recursive>
 800489e:	bf00      	nop
 80048a0:	20000331 	.word	0x20000331

080048a4 <__sinit>:
 80048a4:	b510      	push	{r4, lr}
 80048a6:	4604      	mov	r4, r0
 80048a8:	f7ff fff0 	bl	800488c <__sfp_lock_acquire>
 80048ac:	6a23      	ldr	r3, [r4, #32]
 80048ae:	b11b      	cbz	r3, 80048b8 <__sinit+0x14>
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b4:	f7ff bff0 	b.w	8004898 <__sfp_lock_release>
 80048b8:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <__sinit+0x28>)
 80048ba:	6223      	str	r3, [r4, #32]
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <__sinit+0x2c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f5      	bne.n	80048b0 <__sinit+0xc>
 80048c4:	f7ff ffc4 	bl	8004850 <global_stdio_init.part.0>
 80048c8:	e7f2      	b.n	80048b0 <__sinit+0xc>
 80048ca:	bf00      	nop
 80048cc:	08004811 	.word	0x08004811
 80048d0:	20000328 	.word	0x20000328

080048d4 <_fwalk_sglue>:
 80048d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d8:	4607      	mov	r7, r0
 80048da:	4688      	mov	r8, r1
 80048dc:	4614      	mov	r4, r2
 80048de:	2600      	movs	r6, #0
 80048e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048e4:	f1b9 0901 	subs.w	r9, r9, #1
 80048e8:	d505      	bpl.n	80048f6 <_fwalk_sglue+0x22>
 80048ea:	6824      	ldr	r4, [r4, #0]
 80048ec:	2c00      	cmp	r4, #0
 80048ee:	d1f7      	bne.n	80048e0 <_fwalk_sglue+0xc>
 80048f0:	4630      	mov	r0, r6
 80048f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048f6:	89ab      	ldrh	r3, [r5, #12]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d907      	bls.n	800490c <_fwalk_sglue+0x38>
 80048fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004900:	3301      	adds	r3, #1
 8004902:	d003      	beq.n	800490c <_fwalk_sglue+0x38>
 8004904:	4629      	mov	r1, r5
 8004906:	4638      	mov	r0, r7
 8004908:	47c0      	blx	r8
 800490a:	4306      	orrs	r6, r0
 800490c:	3568      	adds	r5, #104	@ 0x68
 800490e:	e7e9      	b.n	80048e4 <_fwalk_sglue+0x10>

08004910 <iprintf>:
 8004910:	b40f      	push	{r0, r1, r2, r3}
 8004912:	b507      	push	{r0, r1, r2, lr}
 8004914:	4906      	ldr	r1, [pc, #24]	@ (8004930 <iprintf+0x20>)
 8004916:	ab04      	add	r3, sp, #16
 8004918:	6808      	ldr	r0, [r1, #0]
 800491a:	f853 2b04 	ldr.w	r2, [r3], #4
 800491e:	6881      	ldr	r1, [r0, #8]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	f000 fb63 	bl	8004fec <_vfiprintf_r>
 8004926:	b003      	add	sp, #12
 8004928:	f85d eb04 	ldr.w	lr, [sp], #4
 800492c:	b004      	add	sp, #16
 800492e:	4770      	bx	lr
 8004930:	2000001c 	.word	0x2000001c

08004934 <siprintf>:
 8004934:	b40e      	push	{r1, r2, r3}
 8004936:	b510      	push	{r4, lr}
 8004938:	b09d      	sub	sp, #116	@ 0x74
 800493a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800493c:	9002      	str	r0, [sp, #8]
 800493e:	9006      	str	r0, [sp, #24]
 8004940:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004944:	480a      	ldr	r0, [pc, #40]	@ (8004970 <siprintf+0x3c>)
 8004946:	9107      	str	r1, [sp, #28]
 8004948:	9104      	str	r1, [sp, #16]
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <siprintf+0x40>)
 800494c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004950:	9105      	str	r1, [sp, #20]
 8004952:	2400      	movs	r4, #0
 8004954:	a902      	add	r1, sp, #8
 8004956:	6800      	ldr	r0, [r0, #0]
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800495c:	f000 fa20 	bl	8004da0 <_svfiprintf_r>
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	701c      	strb	r4, [r3, #0]
 8004964:	b01d      	add	sp, #116	@ 0x74
 8004966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800496a:	b003      	add	sp, #12
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	2000001c 	.word	0x2000001c
 8004974:	ffff0208 	.word	0xffff0208

08004978 <__sread>:
 8004978:	b510      	push	{r4, lr}
 800497a:	460c      	mov	r4, r1
 800497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004980:	f000 f868 	bl	8004a54 <_read_r>
 8004984:	2800      	cmp	r0, #0
 8004986:	bfab      	itete	ge
 8004988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800498a:	89a3      	ldrhlt	r3, [r4, #12]
 800498c:	181b      	addge	r3, r3, r0
 800498e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004992:	bfac      	ite	ge
 8004994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004996:	81a3      	strhlt	r3, [r4, #12]
 8004998:	bd10      	pop	{r4, pc}

0800499a <__swrite>:
 800499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	461f      	mov	r7, r3
 80049a0:	898b      	ldrh	r3, [r1, #12]
 80049a2:	05db      	lsls	r3, r3, #23
 80049a4:	4605      	mov	r5, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	4616      	mov	r6, r2
 80049aa:	d505      	bpl.n	80049b8 <__swrite+0x1e>
 80049ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b0:	2302      	movs	r3, #2
 80049b2:	2200      	movs	r2, #0
 80049b4:	f000 f83c 	bl	8004a30 <_lseek_r>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	4632      	mov	r2, r6
 80049c6:	463b      	mov	r3, r7
 80049c8:	4628      	mov	r0, r5
 80049ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ce:	f000 b853 	b.w	8004a78 <_write_r>

080049d2 <__sseek>:
 80049d2:	b510      	push	{r4, lr}
 80049d4:	460c      	mov	r4, r1
 80049d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049da:	f000 f829 	bl	8004a30 <_lseek_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	bf15      	itete	ne
 80049e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049ee:	81a3      	strheq	r3, [r4, #12]
 80049f0:	bf18      	it	ne
 80049f2:	81a3      	strhne	r3, [r4, #12]
 80049f4:	bd10      	pop	{r4, pc}

080049f6 <__sclose>:
 80049f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fa:	f000 b809 	b.w	8004a10 <_close_r>

080049fe <memset>:
 80049fe:	4402      	add	r2, r0
 8004a00:	4603      	mov	r3, r0
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d100      	bne.n	8004a08 <memset+0xa>
 8004a06:	4770      	bx	lr
 8004a08:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0c:	e7f9      	b.n	8004a02 <memset+0x4>
	...

08004a10 <_close_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4d06      	ldr	r5, [pc, #24]	@ (8004a2c <_close_r+0x1c>)
 8004a14:	2300      	movs	r3, #0
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f7fc fb3d 	bl	800109a <_close>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_close_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_close_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	2000032c 	.word	0x2000032c

08004a30 <_lseek_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d07      	ldr	r5, [pc, #28]	@ (8004a50 <_lseek_r+0x20>)
 8004a34:	4604      	mov	r4, r0
 8004a36:	4608      	mov	r0, r1
 8004a38:	4611      	mov	r1, r2
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7fc fb52 	bl	80010e8 <_lseek>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_lseek_r+0x1e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_lseek_r+0x1e>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	2000032c 	.word	0x2000032c

08004a54 <_read_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d07      	ldr	r5, [pc, #28]	@ (8004a74 <_read_r+0x20>)
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	602a      	str	r2, [r5, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f7fc fae0 	bl	8001028 <_read>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_read_r+0x1e>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_read_r+0x1e>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	2000032c 	.word	0x2000032c

08004a78 <_write_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d07      	ldr	r5, [pc, #28]	@ (8004a98 <_write_r+0x20>)
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	4608      	mov	r0, r1
 8004a80:	4611      	mov	r1, r2
 8004a82:	2200      	movs	r2, #0
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f7fc faeb 	bl	8001062 <_write>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_write_r+0x1e>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_write_r+0x1e>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	2000032c 	.word	0x2000032c

08004a9c <__errno>:
 8004a9c:	4b01      	ldr	r3, [pc, #4]	@ (8004aa4 <__errno+0x8>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000001c 	.word	0x2000001c

08004aa8 <__libc_init_array>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8004ae0 <__libc_init_array+0x38>)
 8004aac:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae4 <__libc_init_array+0x3c>)
 8004aae:	1b64      	subs	r4, r4, r5
 8004ab0:	10a4      	asrs	r4, r4, #2
 8004ab2:	2600      	movs	r6, #0
 8004ab4:	42a6      	cmp	r6, r4
 8004ab6:	d109      	bne.n	8004acc <__libc_init_array+0x24>
 8004ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ae8 <__libc_init_array+0x40>)
 8004aba:	4c0c      	ldr	r4, [pc, #48]	@ (8004aec <__libc_init_array+0x44>)
 8004abc:	f000 ff6c 	bl	8005998 <_init>
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	42a6      	cmp	r6, r4
 8004ac8:	d105      	bne.n	8004ad6 <__libc_init_array+0x2e>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad0:	4798      	blx	r3
 8004ad2:	3601      	adds	r6, #1
 8004ad4:	e7ee      	b.n	8004ab4 <__libc_init_array+0xc>
 8004ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ada:	4798      	blx	r3
 8004adc:	3601      	adds	r6, #1
 8004ade:	e7f2      	b.n	8004ac6 <__libc_init_array+0x1e>
 8004ae0:	08005a5c 	.word	0x08005a5c
 8004ae4:	08005a5c 	.word	0x08005a5c
 8004ae8:	08005a5c 	.word	0x08005a5c
 8004aec:	08005a60 	.word	0x08005a60

08004af0 <__retarget_lock_init_recursive>:
 8004af0:	4770      	bx	lr

08004af2 <__retarget_lock_acquire_recursive>:
 8004af2:	4770      	bx	lr

08004af4 <__retarget_lock_release_recursive>:
 8004af4:	4770      	bx	lr
	...

08004af8 <_free_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4605      	mov	r5, r0
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d041      	beq.n	8004b84 <_free_r+0x8c>
 8004b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b04:	1f0c      	subs	r4, r1, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfb8      	it	lt
 8004b0a:	18e4      	addlt	r4, r4, r3
 8004b0c:	f000 f8e0 	bl	8004cd0 <__malloc_lock>
 8004b10:	4a1d      	ldr	r2, [pc, #116]	@ (8004b88 <_free_r+0x90>)
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	b933      	cbnz	r3, 8004b24 <_free_r+0x2c>
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	6014      	str	r4, [r2, #0]
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b20:	f000 b8dc 	b.w	8004cdc <__malloc_unlock>
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d908      	bls.n	8004b3a <_free_r+0x42>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	1821      	adds	r1, r4, r0
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	bf01      	itttt	eq
 8004b30:	6819      	ldreq	r1, [r3, #0]
 8004b32:	685b      	ldreq	r3, [r3, #4]
 8004b34:	1809      	addeq	r1, r1, r0
 8004b36:	6021      	streq	r1, [r4, #0]
 8004b38:	e7ed      	b.n	8004b16 <_free_r+0x1e>
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	b10b      	cbz	r3, 8004b44 <_free_r+0x4c>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d9fa      	bls.n	8004b3a <_free_r+0x42>
 8004b44:	6811      	ldr	r1, [r2, #0]
 8004b46:	1850      	adds	r0, r2, r1
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d10b      	bne.n	8004b64 <_free_r+0x6c>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	4401      	add	r1, r0
 8004b50:	1850      	adds	r0, r2, r1
 8004b52:	4283      	cmp	r3, r0
 8004b54:	6011      	str	r1, [r2, #0]
 8004b56:	d1e0      	bne.n	8004b1a <_free_r+0x22>
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	4408      	add	r0, r1
 8004b60:	6010      	str	r0, [r2, #0]
 8004b62:	e7da      	b.n	8004b1a <_free_r+0x22>
 8004b64:	d902      	bls.n	8004b6c <_free_r+0x74>
 8004b66:	230c      	movs	r3, #12
 8004b68:	602b      	str	r3, [r5, #0]
 8004b6a:	e7d6      	b.n	8004b1a <_free_r+0x22>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	1821      	adds	r1, r4, r0
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf04      	itt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	6063      	str	r3, [r4, #4]
 8004b7a:	bf04      	itt	eq
 8004b7c:	1809      	addeq	r1, r1, r0
 8004b7e:	6021      	streq	r1, [r4, #0]
 8004b80:	6054      	str	r4, [r2, #4]
 8004b82:	e7ca      	b.n	8004b1a <_free_r+0x22>
 8004b84:	bd38      	pop	{r3, r4, r5, pc}
 8004b86:	bf00      	nop
 8004b88:	20000338 	.word	0x20000338

08004b8c <sbrk_aligned>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8004bcc <sbrk_aligned+0x40>)
 8004b90:	460c      	mov	r4, r1
 8004b92:	6831      	ldr	r1, [r6, #0]
 8004b94:	4605      	mov	r5, r0
 8004b96:	b911      	cbnz	r1, 8004b9e <sbrk_aligned+0x12>
 8004b98:	f000 fe26 	bl	80057e8 <_sbrk_r>
 8004b9c:	6030      	str	r0, [r6, #0]
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 fe21 	bl	80057e8 <_sbrk_r>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	d103      	bne.n	8004bb2 <sbrk_aligned+0x26>
 8004baa:	f04f 34ff 	mov.w	r4, #4294967295
 8004bae:	4620      	mov	r0, r4
 8004bb0:	bd70      	pop	{r4, r5, r6, pc}
 8004bb2:	1cc4      	adds	r4, r0, #3
 8004bb4:	f024 0403 	bic.w	r4, r4, #3
 8004bb8:	42a0      	cmp	r0, r4
 8004bba:	d0f8      	beq.n	8004bae <sbrk_aligned+0x22>
 8004bbc:	1a21      	subs	r1, r4, r0
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 fe12 	bl	80057e8 <_sbrk_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d1f2      	bne.n	8004bae <sbrk_aligned+0x22>
 8004bc8:	e7ef      	b.n	8004baa <sbrk_aligned+0x1e>
 8004bca:	bf00      	nop
 8004bcc:	20000334 	.word	0x20000334

08004bd0 <_malloc_r>:
 8004bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	1ccd      	adds	r5, r1, #3
 8004bd6:	f025 0503 	bic.w	r5, r5, #3
 8004bda:	3508      	adds	r5, #8
 8004bdc:	2d0c      	cmp	r5, #12
 8004bde:	bf38      	it	cc
 8004be0:	250c      	movcc	r5, #12
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	4606      	mov	r6, r0
 8004be6:	db01      	blt.n	8004bec <_malloc_r+0x1c>
 8004be8:	42a9      	cmp	r1, r5
 8004bea:	d904      	bls.n	8004bf6 <_malloc_r+0x26>
 8004bec:	230c      	movs	r3, #12
 8004bee:	6033      	str	r3, [r6, #0]
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ccc <_malloc_r+0xfc>
 8004bfa:	f000 f869 	bl	8004cd0 <__malloc_lock>
 8004bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8004c02:	461c      	mov	r4, r3
 8004c04:	bb44      	cbnz	r4, 8004c58 <_malloc_r+0x88>
 8004c06:	4629      	mov	r1, r5
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f7ff ffbf 	bl	8004b8c <sbrk_aligned>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	4604      	mov	r4, r0
 8004c12:	d158      	bne.n	8004cc6 <_malloc_r+0xf6>
 8004c14:	f8d8 4000 	ldr.w	r4, [r8]
 8004c18:	4627      	mov	r7, r4
 8004c1a:	2f00      	cmp	r7, #0
 8004c1c:	d143      	bne.n	8004ca6 <_malloc_r+0xd6>
 8004c1e:	2c00      	cmp	r4, #0
 8004c20:	d04b      	beq.n	8004cba <_malloc_r+0xea>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	4639      	mov	r1, r7
 8004c26:	4630      	mov	r0, r6
 8004c28:	eb04 0903 	add.w	r9, r4, r3
 8004c2c:	f000 fddc 	bl	80057e8 <_sbrk_r>
 8004c30:	4581      	cmp	r9, r0
 8004c32:	d142      	bne.n	8004cba <_malloc_r+0xea>
 8004c34:	6821      	ldr	r1, [r4, #0]
 8004c36:	1a6d      	subs	r5, r5, r1
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f7ff ffa6 	bl	8004b8c <sbrk_aligned>
 8004c40:	3001      	adds	r0, #1
 8004c42:	d03a      	beq.n	8004cba <_malloc_r+0xea>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	442b      	add	r3, r5
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	bb62      	cbnz	r2, 8004cac <_malloc_r+0xdc>
 8004c52:	f8c8 7000 	str.w	r7, [r8]
 8004c56:	e00f      	b.n	8004c78 <_malloc_r+0xa8>
 8004c58:	6822      	ldr	r2, [r4, #0]
 8004c5a:	1b52      	subs	r2, r2, r5
 8004c5c:	d420      	bmi.n	8004ca0 <_malloc_r+0xd0>
 8004c5e:	2a0b      	cmp	r2, #11
 8004c60:	d917      	bls.n	8004c92 <_malloc_r+0xc2>
 8004c62:	1961      	adds	r1, r4, r5
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	6025      	str	r5, [r4, #0]
 8004c68:	bf18      	it	ne
 8004c6a:	6059      	strne	r1, [r3, #4]
 8004c6c:	6863      	ldr	r3, [r4, #4]
 8004c6e:	bf08      	it	eq
 8004c70:	f8c8 1000 	streq.w	r1, [r8]
 8004c74:	5162      	str	r2, [r4, r5]
 8004c76:	604b      	str	r3, [r1, #4]
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f000 f82f 	bl	8004cdc <__malloc_unlock>
 8004c7e:	f104 000b 	add.w	r0, r4, #11
 8004c82:	1d23      	adds	r3, r4, #4
 8004c84:	f020 0007 	bic.w	r0, r0, #7
 8004c88:	1ac2      	subs	r2, r0, r3
 8004c8a:	bf1c      	itt	ne
 8004c8c:	1a1b      	subne	r3, r3, r0
 8004c8e:	50a3      	strne	r3, [r4, r2]
 8004c90:	e7af      	b.n	8004bf2 <_malloc_r+0x22>
 8004c92:	6862      	ldr	r2, [r4, #4]
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	bf0c      	ite	eq
 8004c98:	f8c8 2000 	streq.w	r2, [r8]
 8004c9c:	605a      	strne	r2, [r3, #4]
 8004c9e:	e7eb      	b.n	8004c78 <_malloc_r+0xa8>
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	6864      	ldr	r4, [r4, #4]
 8004ca4:	e7ae      	b.n	8004c04 <_malloc_r+0x34>
 8004ca6:	463c      	mov	r4, r7
 8004ca8:	687f      	ldr	r7, [r7, #4]
 8004caa:	e7b6      	b.n	8004c1a <_malloc_r+0x4a>
 8004cac:	461a      	mov	r2, r3
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d1fb      	bne.n	8004cac <_malloc_r+0xdc>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6053      	str	r3, [r2, #4]
 8004cb8:	e7de      	b.n	8004c78 <_malloc_r+0xa8>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	6033      	str	r3, [r6, #0]
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f000 f80c 	bl	8004cdc <__malloc_unlock>
 8004cc4:	e794      	b.n	8004bf0 <_malloc_r+0x20>
 8004cc6:	6005      	str	r5, [r0, #0]
 8004cc8:	e7d6      	b.n	8004c78 <_malloc_r+0xa8>
 8004cca:	bf00      	nop
 8004ccc:	20000338 	.word	0x20000338

08004cd0 <__malloc_lock>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	@ (8004cd8 <__malloc_lock+0x8>)
 8004cd2:	f7ff bf0e 	b.w	8004af2 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000330 	.word	0x20000330

08004cdc <__malloc_unlock>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	@ (8004ce4 <__malloc_unlock+0x8>)
 8004cde:	f7ff bf09 	b.w	8004af4 <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	20000330 	.word	0x20000330

08004ce8 <__ssputs_r>:
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	688e      	ldr	r6, [r1, #8]
 8004cee:	461f      	mov	r7, r3
 8004cf0:	42be      	cmp	r6, r7
 8004cf2:	680b      	ldr	r3, [r1, #0]
 8004cf4:	4682      	mov	sl, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4690      	mov	r8, r2
 8004cfa:	d82d      	bhi.n	8004d58 <__ssputs_r+0x70>
 8004cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d04:	d026      	beq.n	8004d54 <__ssputs_r+0x6c>
 8004d06:	6965      	ldr	r5, [r4, #20]
 8004d08:	6909      	ldr	r1, [r1, #16]
 8004d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d0e:	eba3 0901 	sub.w	r9, r3, r1
 8004d12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d16:	1c7b      	adds	r3, r7, #1
 8004d18:	444b      	add	r3, r9
 8004d1a:	106d      	asrs	r5, r5, #1
 8004d1c:	429d      	cmp	r5, r3
 8004d1e:	bf38      	it	cc
 8004d20:	461d      	movcc	r5, r3
 8004d22:	0553      	lsls	r3, r2, #21
 8004d24:	d527      	bpl.n	8004d76 <__ssputs_r+0x8e>
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7ff ff52 	bl	8004bd0 <_malloc_r>
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	b360      	cbz	r0, 8004d8a <__ssputs_r+0xa2>
 8004d30:	6921      	ldr	r1, [r4, #16]
 8004d32:	464a      	mov	r2, r9
 8004d34:	f000 fd68 	bl	8005808 <memcpy>
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	6126      	str	r6, [r4, #16]
 8004d46:	6165      	str	r5, [r4, #20]
 8004d48:	444e      	add	r6, r9
 8004d4a:	eba5 0509 	sub.w	r5, r5, r9
 8004d4e:	6026      	str	r6, [r4, #0]
 8004d50:	60a5      	str	r5, [r4, #8]
 8004d52:	463e      	mov	r6, r7
 8004d54:	42be      	cmp	r6, r7
 8004d56:	d900      	bls.n	8004d5a <__ssputs_r+0x72>
 8004d58:	463e      	mov	r6, r7
 8004d5a:	6820      	ldr	r0, [r4, #0]
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4641      	mov	r1, r8
 8004d60:	f000 fd28 	bl	80057b4 <memmove>
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	1b9b      	subs	r3, r3, r6
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4433      	add	r3, r6
 8004d6e:	6023      	str	r3, [r4, #0]
 8004d70:	2000      	movs	r0, #0
 8004d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d76:	462a      	mov	r2, r5
 8004d78:	f000 fd54 	bl	8005824 <_realloc_r>
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d1e0      	bne.n	8004d44 <__ssputs_r+0x5c>
 8004d82:	6921      	ldr	r1, [r4, #16]
 8004d84:	4650      	mov	r0, sl
 8004d86:	f7ff feb7 	bl	8004af8 <_free_r>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	f8ca 3000 	str.w	r3, [sl]
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d96:	81a3      	strh	r3, [r4, #12]
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e7e9      	b.n	8004d72 <__ssputs_r+0x8a>
	...

08004da0 <_svfiprintf_r>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	4698      	mov	r8, r3
 8004da6:	898b      	ldrh	r3, [r1, #12]
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	b09d      	sub	sp, #116	@ 0x74
 8004dac:	4607      	mov	r7, r0
 8004dae:	460d      	mov	r5, r1
 8004db0:	4614      	mov	r4, r2
 8004db2:	d510      	bpl.n	8004dd6 <_svfiprintf_r+0x36>
 8004db4:	690b      	ldr	r3, [r1, #16]
 8004db6:	b973      	cbnz	r3, 8004dd6 <_svfiprintf_r+0x36>
 8004db8:	2140      	movs	r1, #64	@ 0x40
 8004dba:	f7ff ff09 	bl	8004bd0 <_malloc_r>
 8004dbe:	6028      	str	r0, [r5, #0]
 8004dc0:	6128      	str	r0, [r5, #16]
 8004dc2:	b930      	cbnz	r0, 8004dd2 <_svfiprintf_r+0x32>
 8004dc4:	230c      	movs	r3, #12
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	b01d      	add	sp, #116	@ 0x74
 8004dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd2:	2340      	movs	r3, #64	@ 0x40
 8004dd4:	616b      	str	r3, [r5, #20]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dda:	2320      	movs	r3, #32
 8004ddc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004de4:	2330      	movs	r3, #48	@ 0x30
 8004de6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f84 <_svfiprintf_r+0x1e4>
 8004dea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dee:	f04f 0901 	mov.w	r9, #1
 8004df2:	4623      	mov	r3, r4
 8004df4:	469a      	mov	sl, r3
 8004df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dfa:	b10a      	cbz	r2, 8004e00 <_svfiprintf_r+0x60>
 8004dfc:	2a25      	cmp	r2, #37	@ 0x25
 8004dfe:	d1f9      	bne.n	8004df4 <_svfiprintf_r+0x54>
 8004e00:	ebba 0b04 	subs.w	fp, sl, r4
 8004e04:	d00b      	beq.n	8004e1e <_svfiprintf_r+0x7e>
 8004e06:	465b      	mov	r3, fp
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f7ff ff6b 	bl	8004ce8 <__ssputs_r>
 8004e12:	3001      	adds	r0, #1
 8004e14:	f000 80a7 	beq.w	8004f66 <_svfiprintf_r+0x1c6>
 8004e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e1a:	445a      	add	r2, fp
 8004e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 809f 	beq.w	8004f66 <_svfiprintf_r+0x1c6>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e32:	f10a 0a01 	add.w	sl, sl, #1
 8004e36:	9304      	str	r3, [sp, #16]
 8004e38:	9307      	str	r3, [sp, #28]
 8004e3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e40:	4654      	mov	r4, sl
 8004e42:	2205      	movs	r2, #5
 8004e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e48:	484e      	ldr	r0, [pc, #312]	@ (8004f84 <_svfiprintf_r+0x1e4>)
 8004e4a:	f7fb f9e1 	bl	8000210 <memchr>
 8004e4e:	9a04      	ldr	r2, [sp, #16]
 8004e50:	b9d8      	cbnz	r0, 8004e8a <_svfiprintf_r+0xea>
 8004e52:	06d0      	lsls	r0, r2, #27
 8004e54:	bf44      	itt	mi
 8004e56:	2320      	movmi	r3, #32
 8004e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e5c:	0711      	lsls	r1, r2, #28
 8004e5e:	bf44      	itt	mi
 8004e60:	232b      	movmi	r3, #43	@ 0x2b
 8004e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e66:	f89a 3000 	ldrb.w	r3, [sl]
 8004e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e6c:	d015      	beq.n	8004e9a <_svfiprintf_r+0xfa>
 8004e6e:	9a07      	ldr	r2, [sp, #28]
 8004e70:	4654      	mov	r4, sl
 8004e72:	2000      	movs	r0, #0
 8004e74:	f04f 0c0a 	mov.w	ip, #10
 8004e78:	4621      	mov	r1, r4
 8004e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e7e:	3b30      	subs	r3, #48	@ 0x30
 8004e80:	2b09      	cmp	r3, #9
 8004e82:	d94b      	bls.n	8004f1c <_svfiprintf_r+0x17c>
 8004e84:	b1b0      	cbz	r0, 8004eb4 <_svfiprintf_r+0x114>
 8004e86:	9207      	str	r2, [sp, #28]
 8004e88:	e014      	b.n	8004eb4 <_svfiprintf_r+0x114>
 8004e8a:	eba0 0308 	sub.w	r3, r0, r8
 8004e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e92:	4313      	orrs	r3, r2
 8004e94:	9304      	str	r3, [sp, #16]
 8004e96:	46a2      	mov	sl, r4
 8004e98:	e7d2      	b.n	8004e40 <_svfiprintf_r+0xa0>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	1d19      	adds	r1, r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	9103      	str	r1, [sp, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bfbb      	ittet	lt
 8004ea6:	425b      	neglt	r3, r3
 8004ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8004eac:	9307      	strge	r3, [sp, #28]
 8004eae:	9307      	strlt	r3, [sp, #28]
 8004eb0:	bfb8      	it	lt
 8004eb2:	9204      	strlt	r2, [sp, #16]
 8004eb4:	7823      	ldrb	r3, [r4, #0]
 8004eb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eb8:	d10a      	bne.n	8004ed0 <_svfiprintf_r+0x130>
 8004eba:	7863      	ldrb	r3, [r4, #1]
 8004ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ebe:	d132      	bne.n	8004f26 <_svfiprintf_r+0x186>
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	9203      	str	r2, [sp, #12]
 8004ec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ecc:	3402      	adds	r4, #2
 8004ece:	9305      	str	r3, [sp, #20]
 8004ed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f94 <_svfiprintf_r+0x1f4>
 8004ed4:	7821      	ldrb	r1, [r4, #0]
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	4650      	mov	r0, sl
 8004eda:	f7fb f999 	bl	8000210 <memchr>
 8004ede:	b138      	cbz	r0, 8004ef0 <_svfiprintf_r+0x150>
 8004ee0:	9b04      	ldr	r3, [sp, #16]
 8004ee2:	eba0 000a 	sub.w	r0, r0, sl
 8004ee6:	2240      	movs	r2, #64	@ 0x40
 8004ee8:	4082      	lsls	r2, r0
 8004eea:	4313      	orrs	r3, r2
 8004eec:	3401      	adds	r4, #1
 8004eee:	9304      	str	r3, [sp, #16]
 8004ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef4:	4824      	ldr	r0, [pc, #144]	@ (8004f88 <_svfiprintf_r+0x1e8>)
 8004ef6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004efa:	2206      	movs	r2, #6
 8004efc:	f7fb f988 	bl	8000210 <memchr>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d036      	beq.n	8004f72 <_svfiprintf_r+0x1d2>
 8004f04:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <_svfiprintf_r+0x1ec>)
 8004f06:	bb1b      	cbnz	r3, 8004f50 <_svfiprintf_r+0x1b0>
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	3307      	adds	r3, #7
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	3308      	adds	r3, #8
 8004f12:	9303      	str	r3, [sp, #12]
 8004f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f16:	4433      	add	r3, r6
 8004f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f1a:	e76a      	b.n	8004df2 <_svfiprintf_r+0x52>
 8004f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f20:	460c      	mov	r4, r1
 8004f22:	2001      	movs	r0, #1
 8004f24:	e7a8      	b.n	8004e78 <_svfiprintf_r+0xd8>
 8004f26:	2300      	movs	r3, #0
 8004f28:	3401      	adds	r4, #1
 8004f2a:	9305      	str	r3, [sp, #20]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f04f 0c0a 	mov.w	ip, #10
 8004f32:	4620      	mov	r0, r4
 8004f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f38:	3a30      	subs	r2, #48	@ 0x30
 8004f3a:	2a09      	cmp	r2, #9
 8004f3c:	d903      	bls.n	8004f46 <_svfiprintf_r+0x1a6>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0c6      	beq.n	8004ed0 <_svfiprintf_r+0x130>
 8004f42:	9105      	str	r1, [sp, #20]
 8004f44:	e7c4      	b.n	8004ed0 <_svfiprintf_r+0x130>
 8004f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e7f0      	b.n	8004f32 <_svfiprintf_r+0x192>
 8004f50:	ab03      	add	r3, sp, #12
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	462a      	mov	r2, r5
 8004f56:	4b0e      	ldr	r3, [pc, #56]	@ (8004f90 <_svfiprintf_r+0x1f0>)
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f3af 8000 	nop.w
 8004f60:	1c42      	adds	r2, r0, #1
 8004f62:	4606      	mov	r6, r0
 8004f64:	d1d6      	bne.n	8004f14 <_svfiprintf_r+0x174>
 8004f66:	89ab      	ldrh	r3, [r5, #12]
 8004f68:	065b      	lsls	r3, r3, #25
 8004f6a:	f53f af2d 	bmi.w	8004dc8 <_svfiprintf_r+0x28>
 8004f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f70:	e72c      	b.n	8004dcc <_svfiprintf_r+0x2c>
 8004f72:	ab03      	add	r3, sp, #12
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	462a      	mov	r2, r5
 8004f78:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <_svfiprintf_r+0x1f0>)
 8004f7a:	a904      	add	r1, sp, #16
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f000 f9bb 	bl	80052f8 <_printf_i>
 8004f82:	e7ed      	b.n	8004f60 <_svfiprintf_r+0x1c0>
 8004f84:	08005a20 	.word	0x08005a20
 8004f88:	08005a2a 	.word	0x08005a2a
 8004f8c:	00000000 	.word	0x00000000
 8004f90:	08004ce9 	.word	0x08004ce9
 8004f94:	08005a26 	.word	0x08005a26

08004f98 <__sfputc_r>:
 8004f98:	6893      	ldr	r3, [r2, #8]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	b410      	push	{r4}
 8004fa0:	6093      	str	r3, [r2, #8]
 8004fa2:	da08      	bge.n	8004fb6 <__sfputc_r+0x1e>
 8004fa4:	6994      	ldr	r4, [r2, #24]
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	db01      	blt.n	8004fae <__sfputc_r+0x16>
 8004faa:	290a      	cmp	r1, #10
 8004fac:	d103      	bne.n	8004fb6 <__sfputc_r+0x1e>
 8004fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fb2:	f000 bb6b 	b.w	800568c <__swbuf_r>
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	1c58      	adds	r0, r3, #1
 8004fba:	6010      	str	r0, [r2, #0]
 8004fbc:	7019      	strb	r1, [r3, #0]
 8004fbe:	4608      	mov	r0, r1
 8004fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <__sfputs_r>:
 8004fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc8:	4606      	mov	r6, r0
 8004fca:	460f      	mov	r7, r1
 8004fcc:	4614      	mov	r4, r2
 8004fce:	18d5      	adds	r5, r2, r3
 8004fd0:	42ac      	cmp	r4, r5
 8004fd2:	d101      	bne.n	8004fd8 <__sfputs_r+0x12>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e007      	b.n	8004fe8 <__sfputs_r+0x22>
 8004fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fdc:	463a      	mov	r2, r7
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7ff ffda 	bl	8004f98 <__sfputc_r>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d1f3      	bne.n	8004fd0 <__sfputs_r+0xa>
 8004fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fec <_vfiprintf_r>:
 8004fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff0:	460d      	mov	r5, r1
 8004ff2:	b09d      	sub	sp, #116	@ 0x74
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	4698      	mov	r8, r3
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	b118      	cbz	r0, 8005004 <_vfiprintf_r+0x18>
 8004ffc:	6a03      	ldr	r3, [r0, #32]
 8004ffe:	b90b      	cbnz	r3, 8005004 <_vfiprintf_r+0x18>
 8005000:	f7ff fc50 	bl	80048a4 <__sinit>
 8005004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005006:	07d9      	lsls	r1, r3, #31
 8005008:	d405      	bmi.n	8005016 <_vfiprintf_r+0x2a>
 800500a:	89ab      	ldrh	r3, [r5, #12]
 800500c:	059a      	lsls	r2, r3, #22
 800500e:	d402      	bmi.n	8005016 <_vfiprintf_r+0x2a>
 8005010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005012:	f7ff fd6e 	bl	8004af2 <__retarget_lock_acquire_recursive>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	071b      	lsls	r3, r3, #28
 800501a:	d501      	bpl.n	8005020 <_vfiprintf_r+0x34>
 800501c:	692b      	ldr	r3, [r5, #16]
 800501e:	b99b      	cbnz	r3, 8005048 <_vfiprintf_r+0x5c>
 8005020:	4629      	mov	r1, r5
 8005022:	4630      	mov	r0, r6
 8005024:	f000 fb70 	bl	8005708 <__swsetup_r>
 8005028:	b170      	cbz	r0, 8005048 <_vfiprintf_r+0x5c>
 800502a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800502c:	07dc      	lsls	r4, r3, #31
 800502e:	d504      	bpl.n	800503a <_vfiprintf_r+0x4e>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	b01d      	add	sp, #116	@ 0x74
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503a:	89ab      	ldrh	r3, [r5, #12]
 800503c:	0598      	lsls	r0, r3, #22
 800503e:	d4f7      	bmi.n	8005030 <_vfiprintf_r+0x44>
 8005040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005042:	f7ff fd57 	bl	8004af4 <__retarget_lock_release_recursive>
 8005046:	e7f3      	b.n	8005030 <_vfiprintf_r+0x44>
 8005048:	2300      	movs	r3, #0
 800504a:	9309      	str	r3, [sp, #36]	@ 0x24
 800504c:	2320      	movs	r3, #32
 800504e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005052:	f8cd 800c 	str.w	r8, [sp, #12]
 8005056:	2330      	movs	r3, #48	@ 0x30
 8005058:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005208 <_vfiprintf_r+0x21c>
 800505c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005060:	f04f 0901 	mov.w	r9, #1
 8005064:	4623      	mov	r3, r4
 8005066:	469a      	mov	sl, r3
 8005068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800506c:	b10a      	cbz	r2, 8005072 <_vfiprintf_r+0x86>
 800506e:	2a25      	cmp	r2, #37	@ 0x25
 8005070:	d1f9      	bne.n	8005066 <_vfiprintf_r+0x7a>
 8005072:	ebba 0b04 	subs.w	fp, sl, r4
 8005076:	d00b      	beq.n	8005090 <_vfiprintf_r+0xa4>
 8005078:	465b      	mov	r3, fp
 800507a:	4622      	mov	r2, r4
 800507c:	4629      	mov	r1, r5
 800507e:	4630      	mov	r0, r6
 8005080:	f7ff ffa1 	bl	8004fc6 <__sfputs_r>
 8005084:	3001      	adds	r0, #1
 8005086:	f000 80a7 	beq.w	80051d8 <_vfiprintf_r+0x1ec>
 800508a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800508c:	445a      	add	r2, fp
 800508e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005090:	f89a 3000 	ldrb.w	r3, [sl]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 809f 	beq.w	80051d8 <_vfiprintf_r+0x1ec>
 800509a:	2300      	movs	r3, #0
 800509c:	f04f 32ff 	mov.w	r2, #4294967295
 80050a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050a4:	f10a 0a01 	add.w	sl, sl, #1
 80050a8:	9304      	str	r3, [sp, #16]
 80050aa:	9307      	str	r3, [sp, #28]
 80050ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80050b2:	4654      	mov	r4, sl
 80050b4:	2205      	movs	r2, #5
 80050b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ba:	4853      	ldr	r0, [pc, #332]	@ (8005208 <_vfiprintf_r+0x21c>)
 80050bc:	f7fb f8a8 	bl	8000210 <memchr>
 80050c0:	9a04      	ldr	r2, [sp, #16]
 80050c2:	b9d8      	cbnz	r0, 80050fc <_vfiprintf_r+0x110>
 80050c4:	06d1      	lsls	r1, r2, #27
 80050c6:	bf44      	itt	mi
 80050c8:	2320      	movmi	r3, #32
 80050ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ce:	0713      	lsls	r3, r2, #28
 80050d0:	bf44      	itt	mi
 80050d2:	232b      	movmi	r3, #43	@ 0x2b
 80050d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050d8:	f89a 3000 	ldrb.w	r3, [sl]
 80050dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80050de:	d015      	beq.n	800510c <_vfiprintf_r+0x120>
 80050e0:	9a07      	ldr	r2, [sp, #28]
 80050e2:	4654      	mov	r4, sl
 80050e4:	2000      	movs	r0, #0
 80050e6:	f04f 0c0a 	mov.w	ip, #10
 80050ea:	4621      	mov	r1, r4
 80050ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050f0:	3b30      	subs	r3, #48	@ 0x30
 80050f2:	2b09      	cmp	r3, #9
 80050f4:	d94b      	bls.n	800518e <_vfiprintf_r+0x1a2>
 80050f6:	b1b0      	cbz	r0, 8005126 <_vfiprintf_r+0x13a>
 80050f8:	9207      	str	r2, [sp, #28]
 80050fa:	e014      	b.n	8005126 <_vfiprintf_r+0x13a>
 80050fc:	eba0 0308 	sub.w	r3, r0, r8
 8005100:	fa09 f303 	lsl.w	r3, r9, r3
 8005104:	4313      	orrs	r3, r2
 8005106:	9304      	str	r3, [sp, #16]
 8005108:	46a2      	mov	sl, r4
 800510a:	e7d2      	b.n	80050b2 <_vfiprintf_r+0xc6>
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	1d19      	adds	r1, r3, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	9103      	str	r1, [sp, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	bfbb      	ittet	lt
 8005118:	425b      	neglt	r3, r3
 800511a:	f042 0202 	orrlt.w	r2, r2, #2
 800511e:	9307      	strge	r3, [sp, #28]
 8005120:	9307      	strlt	r3, [sp, #28]
 8005122:	bfb8      	it	lt
 8005124:	9204      	strlt	r2, [sp, #16]
 8005126:	7823      	ldrb	r3, [r4, #0]
 8005128:	2b2e      	cmp	r3, #46	@ 0x2e
 800512a:	d10a      	bne.n	8005142 <_vfiprintf_r+0x156>
 800512c:	7863      	ldrb	r3, [r4, #1]
 800512e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005130:	d132      	bne.n	8005198 <_vfiprintf_r+0x1ac>
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	1d1a      	adds	r2, r3, #4
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	9203      	str	r2, [sp, #12]
 800513a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800513e:	3402      	adds	r4, #2
 8005140:	9305      	str	r3, [sp, #20]
 8005142:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005218 <_vfiprintf_r+0x22c>
 8005146:	7821      	ldrb	r1, [r4, #0]
 8005148:	2203      	movs	r2, #3
 800514a:	4650      	mov	r0, sl
 800514c:	f7fb f860 	bl	8000210 <memchr>
 8005150:	b138      	cbz	r0, 8005162 <_vfiprintf_r+0x176>
 8005152:	9b04      	ldr	r3, [sp, #16]
 8005154:	eba0 000a 	sub.w	r0, r0, sl
 8005158:	2240      	movs	r2, #64	@ 0x40
 800515a:	4082      	lsls	r2, r0
 800515c:	4313      	orrs	r3, r2
 800515e:	3401      	adds	r4, #1
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005166:	4829      	ldr	r0, [pc, #164]	@ (800520c <_vfiprintf_r+0x220>)
 8005168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800516c:	2206      	movs	r2, #6
 800516e:	f7fb f84f 	bl	8000210 <memchr>
 8005172:	2800      	cmp	r0, #0
 8005174:	d03f      	beq.n	80051f6 <_vfiprintf_r+0x20a>
 8005176:	4b26      	ldr	r3, [pc, #152]	@ (8005210 <_vfiprintf_r+0x224>)
 8005178:	bb1b      	cbnz	r3, 80051c2 <_vfiprintf_r+0x1d6>
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	3307      	adds	r3, #7
 800517e:	f023 0307 	bic.w	r3, r3, #7
 8005182:	3308      	adds	r3, #8
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005188:	443b      	add	r3, r7
 800518a:	9309      	str	r3, [sp, #36]	@ 0x24
 800518c:	e76a      	b.n	8005064 <_vfiprintf_r+0x78>
 800518e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005192:	460c      	mov	r4, r1
 8005194:	2001      	movs	r0, #1
 8005196:	e7a8      	b.n	80050ea <_vfiprintf_r+0xfe>
 8005198:	2300      	movs	r3, #0
 800519a:	3401      	adds	r4, #1
 800519c:	9305      	str	r3, [sp, #20]
 800519e:	4619      	mov	r1, r3
 80051a0:	f04f 0c0a 	mov.w	ip, #10
 80051a4:	4620      	mov	r0, r4
 80051a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051aa:	3a30      	subs	r2, #48	@ 0x30
 80051ac:	2a09      	cmp	r2, #9
 80051ae:	d903      	bls.n	80051b8 <_vfiprintf_r+0x1cc>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0c6      	beq.n	8005142 <_vfiprintf_r+0x156>
 80051b4:	9105      	str	r1, [sp, #20]
 80051b6:	e7c4      	b.n	8005142 <_vfiprintf_r+0x156>
 80051b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80051bc:	4604      	mov	r4, r0
 80051be:	2301      	movs	r3, #1
 80051c0:	e7f0      	b.n	80051a4 <_vfiprintf_r+0x1b8>
 80051c2:	ab03      	add	r3, sp, #12
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	462a      	mov	r2, r5
 80051c8:	4b12      	ldr	r3, [pc, #72]	@ (8005214 <_vfiprintf_r+0x228>)
 80051ca:	a904      	add	r1, sp, #16
 80051cc:	4630      	mov	r0, r6
 80051ce:	f3af 8000 	nop.w
 80051d2:	4607      	mov	r7, r0
 80051d4:	1c78      	adds	r0, r7, #1
 80051d6:	d1d6      	bne.n	8005186 <_vfiprintf_r+0x19a>
 80051d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051da:	07d9      	lsls	r1, r3, #31
 80051dc:	d405      	bmi.n	80051ea <_vfiprintf_r+0x1fe>
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	059a      	lsls	r2, r3, #22
 80051e2:	d402      	bmi.n	80051ea <_vfiprintf_r+0x1fe>
 80051e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051e6:	f7ff fc85 	bl	8004af4 <__retarget_lock_release_recursive>
 80051ea:	89ab      	ldrh	r3, [r5, #12]
 80051ec:	065b      	lsls	r3, r3, #25
 80051ee:	f53f af1f 	bmi.w	8005030 <_vfiprintf_r+0x44>
 80051f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051f4:	e71e      	b.n	8005034 <_vfiprintf_r+0x48>
 80051f6:	ab03      	add	r3, sp, #12
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	462a      	mov	r2, r5
 80051fc:	4b05      	ldr	r3, [pc, #20]	@ (8005214 <_vfiprintf_r+0x228>)
 80051fe:	a904      	add	r1, sp, #16
 8005200:	4630      	mov	r0, r6
 8005202:	f000 f879 	bl	80052f8 <_printf_i>
 8005206:	e7e4      	b.n	80051d2 <_vfiprintf_r+0x1e6>
 8005208:	08005a20 	.word	0x08005a20
 800520c:	08005a2a 	.word	0x08005a2a
 8005210:	00000000 	.word	0x00000000
 8005214:	08004fc7 	.word	0x08004fc7
 8005218:	08005a26 	.word	0x08005a26

0800521c <_printf_common>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	4616      	mov	r6, r2
 8005222:	4698      	mov	r8, r3
 8005224:	688a      	ldr	r2, [r1, #8]
 8005226:	690b      	ldr	r3, [r1, #16]
 8005228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800522c:	4293      	cmp	r3, r2
 800522e:	bfb8      	it	lt
 8005230:	4613      	movlt	r3, r2
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005238:	4607      	mov	r7, r0
 800523a:	460c      	mov	r4, r1
 800523c:	b10a      	cbz	r2, 8005242 <_printf_common+0x26>
 800523e:	3301      	adds	r3, #1
 8005240:	6033      	str	r3, [r6, #0]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	0699      	lsls	r1, r3, #26
 8005246:	bf42      	ittt	mi
 8005248:	6833      	ldrmi	r3, [r6, #0]
 800524a:	3302      	addmi	r3, #2
 800524c:	6033      	strmi	r3, [r6, #0]
 800524e:	6825      	ldr	r5, [r4, #0]
 8005250:	f015 0506 	ands.w	r5, r5, #6
 8005254:	d106      	bne.n	8005264 <_printf_common+0x48>
 8005256:	f104 0a19 	add.w	sl, r4, #25
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	6832      	ldr	r2, [r6, #0]
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	42ab      	cmp	r3, r5
 8005262:	dc26      	bgt.n	80052b2 <_printf_common+0x96>
 8005264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	3b00      	subs	r3, #0
 800526c:	bf18      	it	ne
 800526e:	2301      	movne	r3, #1
 8005270:	0692      	lsls	r2, r2, #26
 8005272:	d42b      	bmi.n	80052cc <_printf_common+0xb0>
 8005274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005278:	4641      	mov	r1, r8
 800527a:	4638      	mov	r0, r7
 800527c:	47c8      	blx	r9
 800527e:	3001      	adds	r0, #1
 8005280:	d01e      	beq.n	80052c0 <_printf_common+0xa4>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	6922      	ldr	r2, [r4, #16]
 8005286:	f003 0306 	and.w	r3, r3, #6
 800528a:	2b04      	cmp	r3, #4
 800528c:	bf02      	ittt	eq
 800528e:	68e5      	ldreq	r5, [r4, #12]
 8005290:	6833      	ldreq	r3, [r6, #0]
 8005292:	1aed      	subeq	r5, r5, r3
 8005294:	68a3      	ldr	r3, [r4, #8]
 8005296:	bf0c      	ite	eq
 8005298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800529c:	2500      	movne	r5, #0
 800529e:	4293      	cmp	r3, r2
 80052a0:	bfc4      	itt	gt
 80052a2:	1a9b      	subgt	r3, r3, r2
 80052a4:	18ed      	addgt	r5, r5, r3
 80052a6:	2600      	movs	r6, #0
 80052a8:	341a      	adds	r4, #26
 80052aa:	42b5      	cmp	r5, r6
 80052ac:	d11a      	bne.n	80052e4 <_printf_common+0xc8>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e008      	b.n	80052c4 <_printf_common+0xa8>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4652      	mov	r2, sl
 80052b6:	4641      	mov	r1, r8
 80052b8:	4638      	mov	r0, r7
 80052ba:	47c8      	blx	r9
 80052bc:	3001      	adds	r0, #1
 80052be:	d103      	bne.n	80052c8 <_printf_common+0xac>
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c8:	3501      	adds	r5, #1
 80052ca:	e7c6      	b.n	800525a <_printf_common+0x3e>
 80052cc:	18e1      	adds	r1, r4, r3
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	2030      	movs	r0, #48	@ 0x30
 80052d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052d6:	4422      	add	r2, r4
 80052d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052e0:	3302      	adds	r3, #2
 80052e2:	e7c7      	b.n	8005274 <_printf_common+0x58>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4622      	mov	r2, r4
 80052e8:	4641      	mov	r1, r8
 80052ea:	4638      	mov	r0, r7
 80052ec:	47c8      	blx	r9
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0e6      	beq.n	80052c0 <_printf_common+0xa4>
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7d9      	b.n	80052aa <_printf_common+0x8e>
	...

080052f8 <_printf_i>:
 80052f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	7e0f      	ldrb	r7, [r1, #24]
 80052fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005300:	2f78      	cmp	r7, #120	@ 0x78
 8005302:	4691      	mov	r9, r2
 8005304:	4680      	mov	r8, r0
 8005306:	460c      	mov	r4, r1
 8005308:	469a      	mov	sl, r3
 800530a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800530e:	d807      	bhi.n	8005320 <_printf_i+0x28>
 8005310:	2f62      	cmp	r7, #98	@ 0x62
 8005312:	d80a      	bhi.n	800532a <_printf_i+0x32>
 8005314:	2f00      	cmp	r7, #0
 8005316:	f000 80d1 	beq.w	80054bc <_printf_i+0x1c4>
 800531a:	2f58      	cmp	r7, #88	@ 0x58
 800531c:	f000 80b8 	beq.w	8005490 <_printf_i+0x198>
 8005320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005328:	e03a      	b.n	80053a0 <_printf_i+0xa8>
 800532a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800532e:	2b15      	cmp	r3, #21
 8005330:	d8f6      	bhi.n	8005320 <_printf_i+0x28>
 8005332:	a101      	add	r1, pc, #4	@ (adr r1, 8005338 <_printf_i+0x40>)
 8005334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005338:	08005391 	.word	0x08005391
 800533c:	080053a5 	.word	0x080053a5
 8005340:	08005321 	.word	0x08005321
 8005344:	08005321 	.word	0x08005321
 8005348:	08005321 	.word	0x08005321
 800534c:	08005321 	.word	0x08005321
 8005350:	080053a5 	.word	0x080053a5
 8005354:	08005321 	.word	0x08005321
 8005358:	08005321 	.word	0x08005321
 800535c:	08005321 	.word	0x08005321
 8005360:	08005321 	.word	0x08005321
 8005364:	080054a3 	.word	0x080054a3
 8005368:	080053cf 	.word	0x080053cf
 800536c:	0800545d 	.word	0x0800545d
 8005370:	08005321 	.word	0x08005321
 8005374:	08005321 	.word	0x08005321
 8005378:	080054c5 	.word	0x080054c5
 800537c:	08005321 	.word	0x08005321
 8005380:	080053cf 	.word	0x080053cf
 8005384:	08005321 	.word	0x08005321
 8005388:	08005321 	.word	0x08005321
 800538c:	08005465 	.word	0x08005465
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	1d1a      	adds	r2, r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6032      	str	r2, [r6, #0]
 8005398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800539c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053a0:	2301      	movs	r3, #1
 80053a2:	e09c      	b.n	80054de <_printf_i+0x1e6>
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	1d19      	adds	r1, r3, #4
 80053aa:	6031      	str	r1, [r6, #0]
 80053ac:	0606      	lsls	r6, r0, #24
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0xbc>
 80053b0:	681d      	ldr	r5, [r3, #0]
 80053b2:	e003      	b.n	80053bc <_printf_i+0xc4>
 80053b4:	0645      	lsls	r5, r0, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0xb8>
 80053b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053bc:	2d00      	cmp	r5, #0
 80053be:	da03      	bge.n	80053c8 <_printf_i+0xd0>
 80053c0:	232d      	movs	r3, #45	@ 0x2d
 80053c2:	426d      	negs	r5, r5
 80053c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c8:	4858      	ldr	r0, [pc, #352]	@ (800552c <_printf_i+0x234>)
 80053ca:	230a      	movs	r3, #10
 80053cc:	e011      	b.n	80053f2 <_printf_i+0xfa>
 80053ce:	6821      	ldr	r1, [r4, #0]
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	0608      	lsls	r0, r1, #24
 80053d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80053d8:	d402      	bmi.n	80053e0 <_printf_i+0xe8>
 80053da:	0649      	lsls	r1, r1, #25
 80053dc:	bf48      	it	mi
 80053de:	b2ad      	uxthmi	r5, r5
 80053e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80053e2:	4852      	ldr	r0, [pc, #328]	@ (800552c <_printf_i+0x234>)
 80053e4:	6033      	str	r3, [r6, #0]
 80053e6:	bf14      	ite	ne
 80053e8:	230a      	movne	r3, #10
 80053ea:	2308      	moveq	r3, #8
 80053ec:	2100      	movs	r1, #0
 80053ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053f2:	6866      	ldr	r6, [r4, #4]
 80053f4:	60a6      	str	r6, [r4, #8]
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	db05      	blt.n	8005406 <_printf_i+0x10e>
 80053fa:	6821      	ldr	r1, [r4, #0]
 80053fc:	432e      	orrs	r6, r5
 80053fe:	f021 0104 	bic.w	r1, r1, #4
 8005402:	6021      	str	r1, [r4, #0]
 8005404:	d04b      	beq.n	800549e <_printf_i+0x1a6>
 8005406:	4616      	mov	r6, r2
 8005408:	fbb5 f1f3 	udiv	r1, r5, r3
 800540c:	fb03 5711 	mls	r7, r3, r1, r5
 8005410:	5dc7      	ldrb	r7, [r0, r7]
 8005412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005416:	462f      	mov	r7, r5
 8005418:	42bb      	cmp	r3, r7
 800541a:	460d      	mov	r5, r1
 800541c:	d9f4      	bls.n	8005408 <_printf_i+0x110>
 800541e:	2b08      	cmp	r3, #8
 8005420:	d10b      	bne.n	800543a <_printf_i+0x142>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	07df      	lsls	r7, r3, #31
 8005426:	d508      	bpl.n	800543a <_printf_i+0x142>
 8005428:	6923      	ldr	r3, [r4, #16]
 800542a:	6861      	ldr	r1, [r4, #4]
 800542c:	4299      	cmp	r1, r3
 800542e:	bfde      	ittt	le
 8005430:	2330      	movle	r3, #48	@ 0x30
 8005432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005436:	f106 36ff 	addle.w	r6, r6, #4294967295
 800543a:	1b92      	subs	r2, r2, r6
 800543c:	6122      	str	r2, [r4, #16]
 800543e:	f8cd a000 	str.w	sl, [sp]
 8005442:	464b      	mov	r3, r9
 8005444:	aa03      	add	r2, sp, #12
 8005446:	4621      	mov	r1, r4
 8005448:	4640      	mov	r0, r8
 800544a:	f7ff fee7 	bl	800521c <_printf_common>
 800544e:	3001      	adds	r0, #1
 8005450:	d14a      	bne.n	80054e8 <_printf_i+0x1f0>
 8005452:	f04f 30ff 	mov.w	r0, #4294967295
 8005456:	b004      	add	sp, #16
 8005458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f043 0320 	orr.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	4832      	ldr	r0, [pc, #200]	@ (8005530 <_printf_i+0x238>)
 8005466:	2778      	movs	r7, #120	@ 0x78
 8005468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	061f      	lsls	r7, r3, #24
 8005472:	f851 5b04 	ldr.w	r5, [r1], #4
 8005476:	d402      	bmi.n	800547e <_printf_i+0x186>
 8005478:	065f      	lsls	r7, r3, #25
 800547a:	bf48      	it	mi
 800547c:	b2ad      	uxthmi	r5, r5
 800547e:	6031      	str	r1, [r6, #0]
 8005480:	07d9      	lsls	r1, r3, #31
 8005482:	bf44      	itt	mi
 8005484:	f043 0320 	orrmi.w	r3, r3, #32
 8005488:	6023      	strmi	r3, [r4, #0]
 800548a:	b11d      	cbz	r5, 8005494 <_printf_i+0x19c>
 800548c:	2310      	movs	r3, #16
 800548e:	e7ad      	b.n	80053ec <_printf_i+0xf4>
 8005490:	4826      	ldr	r0, [pc, #152]	@ (800552c <_printf_i+0x234>)
 8005492:	e7e9      	b.n	8005468 <_printf_i+0x170>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	e7f6      	b.n	800548c <_printf_i+0x194>
 800549e:	4616      	mov	r6, r2
 80054a0:	e7bd      	b.n	800541e <_printf_i+0x126>
 80054a2:	6833      	ldr	r3, [r6, #0]
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	6961      	ldr	r1, [r4, #20]
 80054a8:	1d18      	adds	r0, r3, #4
 80054aa:	6030      	str	r0, [r6, #0]
 80054ac:	062e      	lsls	r6, r5, #24
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	d501      	bpl.n	80054b6 <_printf_i+0x1be>
 80054b2:	6019      	str	r1, [r3, #0]
 80054b4:	e002      	b.n	80054bc <_printf_i+0x1c4>
 80054b6:	0668      	lsls	r0, r5, #25
 80054b8:	d5fb      	bpl.n	80054b2 <_printf_i+0x1ba>
 80054ba:	8019      	strh	r1, [r3, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	4616      	mov	r6, r2
 80054c2:	e7bc      	b.n	800543e <_printf_i+0x146>
 80054c4:	6833      	ldr	r3, [r6, #0]
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	6032      	str	r2, [r6, #0]
 80054ca:	681e      	ldr	r6, [r3, #0]
 80054cc:	6862      	ldr	r2, [r4, #4]
 80054ce:	2100      	movs	r1, #0
 80054d0:	4630      	mov	r0, r6
 80054d2:	f7fa fe9d 	bl	8000210 <memchr>
 80054d6:	b108      	cbz	r0, 80054dc <_printf_i+0x1e4>
 80054d8:	1b80      	subs	r0, r0, r6
 80054da:	6060      	str	r0, [r4, #4]
 80054dc:	6863      	ldr	r3, [r4, #4]
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	2300      	movs	r3, #0
 80054e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e6:	e7aa      	b.n	800543e <_printf_i+0x146>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	4632      	mov	r2, r6
 80054ec:	4649      	mov	r1, r9
 80054ee:	4640      	mov	r0, r8
 80054f0:	47d0      	blx	sl
 80054f2:	3001      	adds	r0, #1
 80054f4:	d0ad      	beq.n	8005452 <_printf_i+0x15a>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	079b      	lsls	r3, r3, #30
 80054fa:	d413      	bmi.n	8005524 <_printf_i+0x22c>
 80054fc:	68e0      	ldr	r0, [r4, #12]
 80054fe:	9b03      	ldr	r3, [sp, #12]
 8005500:	4298      	cmp	r0, r3
 8005502:	bfb8      	it	lt
 8005504:	4618      	movlt	r0, r3
 8005506:	e7a6      	b.n	8005456 <_printf_i+0x15e>
 8005508:	2301      	movs	r3, #1
 800550a:	4632      	mov	r2, r6
 800550c:	4649      	mov	r1, r9
 800550e:	4640      	mov	r0, r8
 8005510:	47d0      	blx	sl
 8005512:	3001      	adds	r0, #1
 8005514:	d09d      	beq.n	8005452 <_printf_i+0x15a>
 8005516:	3501      	adds	r5, #1
 8005518:	68e3      	ldr	r3, [r4, #12]
 800551a:	9903      	ldr	r1, [sp, #12]
 800551c:	1a5b      	subs	r3, r3, r1
 800551e:	42ab      	cmp	r3, r5
 8005520:	dcf2      	bgt.n	8005508 <_printf_i+0x210>
 8005522:	e7eb      	b.n	80054fc <_printf_i+0x204>
 8005524:	2500      	movs	r5, #0
 8005526:	f104 0619 	add.w	r6, r4, #25
 800552a:	e7f5      	b.n	8005518 <_printf_i+0x220>
 800552c:	08005a31 	.word	0x08005a31
 8005530:	08005a42 	.word	0x08005a42

08005534 <__sflush_r>:
 8005534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	0716      	lsls	r6, r2, #28
 800553e:	4605      	mov	r5, r0
 8005540:	460c      	mov	r4, r1
 8005542:	d454      	bmi.n	80055ee <__sflush_r+0xba>
 8005544:	684b      	ldr	r3, [r1, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	dc02      	bgt.n	8005550 <__sflush_r+0x1c>
 800554a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	dd48      	ble.n	80055e2 <__sflush_r+0xae>
 8005550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005552:	2e00      	cmp	r6, #0
 8005554:	d045      	beq.n	80055e2 <__sflush_r+0xae>
 8005556:	2300      	movs	r3, #0
 8005558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800555c:	682f      	ldr	r7, [r5, #0]
 800555e:	6a21      	ldr	r1, [r4, #32]
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	d030      	beq.n	80055c6 <__sflush_r+0x92>
 8005564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	0759      	lsls	r1, r3, #29
 800556a:	d505      	bpl.n	8005578 <__sflush_r+0x44>
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005572:	b10b      	cbz	r3, 8005578 <__sflush_r+0x44>
 8005574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800557c:	6a21      	ldr	r1, [r4, #32]
 800557e:	4628      	mov	r0, r5
 8005580:	47b0      	blx	r6
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	d106      	bne.n	8005596 <__sflush_r+0x62>
 8005588:	6829      	ldr	r1, [r5, #0]
 800558a:	291d      	cmp	r1, #29
 800558c:	d82b      	bhi.n	80055e6 <__sflush_r+0xb2>
 800558e:	4a2a      	ldr	r2, [pc, #168]	@ (8005638 <__sflush_r+0x104>)
 8005590:	40ca      	lsrs	r2, r1
 8005592:	07d6      	lsls	r6, r2, #31
 8005594:	d527      	bpl.n	80055e6 <__sflush_r+0xb2>
 8005596:	2200      	movs	r2, #0
 8005598:	6062      	str	r2, [r4, #4]
 800559a:	04d9      	lsls	r1, r3, #19
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	d504      	bpl.n	80055ac <__sflush_r+0x78>
 80055a2:	1c42      	adds	r2, r0, #1
 80055a4:	d101      	bne.n	80055aa <__sflush_r+0x76>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	b903      	cbnz	r3, 80055ac <__sflush_r+0x78>
 80055aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80055ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055ae:	602f      	str	r7, [r5, #0]
 80055b0:	b1b9      	cbz	r1, 80055e2 <__sflush_r+0xae>
 80055b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055b6:	4299      	cmp	r1, r3
 80055b8:	d002      	beq.n	80055c0 <__sflush_r+0x8c>
 80055ba:	4628      	mov	r0, r5
 80055bc:	f7ff fa9c 	bl	8004af8 <_free_r>
 80055c0:	2300      	movs	r3, #0
 80055c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80055c4:	e00d      	b.n	80055e2 <__sflush_r+0xae>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b0      	blx	r6
 80055cc:	4602      	mov	r2, r0
 80055ce:	1c50      	adds	r0, r2, #1
 80055d0:	d1c9      	bne.n	8005566 <__sflush_r+0x32>
 80055d2:	682b      	ldr	r3, [r5, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0c6      	beq.n	8005566 <__sflush_r+0x32>
 80055d8:	2b1d      	cmp	r3, #29
 80055da:	d001      	beq.n	80055e0 <__sflush_r+0xac>
 80055dc:	2b16      	cmp	r3, #22
 80055de:	d11e      	bne.n	800561e <__sflush_r+0xea>
 80055e0:	602f      	str	r7, [r5, #0]
 80055e2:	2000      	movs	r0, #0
 80055e4:	e022      	b.n	800562c <__sflush_r+0xf8>
 80055e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ea:	b21b      	sxth	r3, r3
 80055ec:	e01b      	b.n	8005626 <__sflush_r+0xf2>
 80055ee:	690f      	ldr	r7, [r1, #16]
 80055f0:	2f00      	cmp	r7, #0
 80055f2:	d0f6      	beq.n	80055e2 <__sflush_r+0xae>
 80055f4:	0793      	lsls	r3, r2, #30
 80055f6:	680e      	ldr	r6, [r1, #0]
 80055f8:	bf08      	it	eq
 80055fa:	694b      	ldreq	r3, [r1, #20]
 80055fc:	600f      	str	r7, [r1, #0]
 80055fe:	bf18      	it	ne
 8005600:	2300      	movne	r3, #0
 8005602:	eba6 0807 	sub.w	r8, r6, r7
 8005606:	608b      	str	r3, [r1, #8]
 8005608:	f1b8 0f00 	cmp.w	r8, #0
 800560c:	dde9      	ble.n	80055e2 <__sflush_r+0xae>
 800560e:	6a21      	ldr	r1, [r4, #32]
 8005610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005612:	4643      	mov	r3, r8
 8005614:	463a      	mov	r2, r7
 8005616:	4628      	mov	r0, r5
 8005618:	47b0      	blx	r6
 800561a:	2800      	cmp	r0, #0
 800561c:	dc08      	bgt.n	8005630 <__sflush_r+0xfc>
 800561e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005626:	81a3      	strh	r3, [r4, #12]
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005630:	4407      	add	r7, r0
 8005632:	eba8 0800 	sub.w	r8, r8, r0
 8005636:	e7e7      	b.n	8005608 <__sflush_r+0xd4>
 8005638:	20400001 	.word	0x20400001

0800563c <_fflush_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	690b      	ldr	r3, [r1, #16]
 8005640:	4605      	mov	r5, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b913      	cbnz	r3, 800564c <_fflush_r+0x10>
 8005646:	2500      	movs	r5, #0
 8005648:	4628      	mov	r0, r5
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	b118      	cbz	r0, 8005656 <_fflush_r+0x1a>
 800564e:	6a03      	ldr	r3, [r0, #32]
 8005650:	b90b      	cbnz	r3, 8005656 <_fflush_r+0x1a>
 8005652:	f7ff f927 	bl	80048a4 <__sinit>
 8005656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f3      	beq.n	8005646 <_fflush_r+0xa>
 800565e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005660:	07d0      	lsls	r0, r2, #31
 8005662:	d404      	bmi.n	800566e <_fflush_r+0x32>
 8005664:	0599      	lsls	r1, r3, #22
 8005666:	d402      	bmi.n	800566e <_fflush_r+0x32>
 8005668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800566a:	f7ff fa42 	bl	8004af2 <__retarget_lock_acquire_recursive>
 800566e:	4628      	mov	r0, r5
 8005670:	4621      	mov	r1, r4
 8005672:	f7ff ff5f 	bl	8005534 <__sflush_r>
 8005676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005678:	07da      	lsls	r2, r3, #31
 800567a:	4605      	mov	r5, r0
 800567c:	d4e4      	bmi.n	8005648 <_fflush_r+0xc>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	059b      	lsls	r3, r3, #22
 8005682:	d4e1      	bmi.n	8005648 <_fflush_r+0xc>
 8005684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005686:	f7ff fa35 	bl	8004af4 <__retarget_lock_release_recursive>
 800568a:	e7dd      	b.n	8005648 <_fflush_r+0xc>

0800568c <__swbuf_r>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	460e      	mov	r6, r1
 8005690:	4614      	mov	r4, r2
 8005692:	4605      	mov	r5, r0
 8005694:	b118      	cbz	r0, 800569e <__swbuf_r+0x12>
 8005696:	6a03      	ldr	r3, [r0, #32]
 8005698:	b90b      	cbnz	r3, 800569e <__swbuf_r+0x12>
 800569a:	f7ff f903 	bl	80048a4 <__sinit>
 800569e:	69a3      	ldr	r3, [r4, #24]
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	071a      	lsls	r2, r3, #28
 80056a6:	d501      	bpl.n	80056ac <__swbuf_r+0x20>
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	b943      	cbnz	r3, 80056be <__swbuf_r+0x32>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 f82a 	bl	8005708 <__swsetup_r>
 80056b4:	b118      	cbz	r0, 80056be <__swbuf_r+0x32>
 80056b6:	f04f 37ff 	mov.w	r7, #4294967295
 80056ba:	4638      	mov	r0, r7
 80056bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	6922      	ldr	r2, [r4, #16]
 80056c2:	1a98      	subs	r0, r3, r2
 80056c4:	6963      	ldr	r3, [r4, #20]
 80056c6:	b2f6      	uxtb	r6, r6
 80056c8:	4283      	cmp	r3, r0
 80056ca:	4637      	mov	r7, r6
 80056cc:	dc05      	bgt.n	80056da <__swbuf_r+0x4e>
 80056ce:	4621      	mov	r1, r4
 80056d0:	4628      	mov	r0, r5
 80056d2:	f7ff ffb3 	bl	800563c <_fflush_r>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d1ed      	bne.n	80056b6 <__swbuf_r+0x2a>
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	3b01      	subs	r3, #1
 80056de:	60a3      	str	r3, [r4, #8]
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	6022      	str	r2, [r4, #0]
 80056e6:	701e      	strb	r6, [r3, #0]
 80056e8:	6962      	ldr	r2, [r4, #20]
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d004      	beq.n	80056fa <__swbuf_r+0x6e>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	07db      	lsls	r3, r3, #31
 80056f4:	d5e1      	bpl.n	80056ba <__swbuf_r+0x2e>
 80056f6:	2e0a      	cmp	r6, #10
 80056f8:	d1df      	bne.n	80056ba <__swbuf_r+0x2e>
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	f7ff ff9d 	bl	800563c <_fflush_r>
 8005702:	2800      	cmp	r0, #0
 8005704:	d0d9      	beq.n	80056ba <__swbuf_r+0x2e>
 8005706:	e7d6      	b.n	80056b6 <__swbuf_r+0x2a>

08005708 <__swsetup_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4b29      	ldr	r3, [pc, #164]	@ (80057b0 <__swsetup_r+0xa8>)
 800570c:	4605      	mov	r5, r0
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	460c      	mov	r4, r1
 8005712:	b118      	cbz	r0, 800571c <__swsetup_r+0x14>
 8005714:	6a03      	ldr	r3, [r0, #32]
 8005716:	b90b      	cbnz	r3, 800571c <__swsetup_r+0x14>
 8005718:	f7ff f8c4 	bl	80048a4 <__sinit>
 800571c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005720:	0719      	lsls	r1, r3, #28
 8005722:	d422      	bmi.n	800576a <__swsetup_r+0x62>
 8005724:	06da      	lsls	r2, r3, #27
 8005726:	d407      	bmi.n	8005738 <__swsetup_r+0x30>
 8005728:	2209      	movs	r2, #9
 800572a:	602a      	str	r2, [r5, #0]
 800572c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	e033      	b.n	80057a0 <__swsetup_r+0x98>
 8005738:	0758      	lsls	r0, r3, #29
 800573a:	d512      	bpl.n	8005762 <__swsetup_r+0x5a>
 800573c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800573e:	b141      	cbz	r1, 8005752 <__swsetup_r+0x4a>
 8005740:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005744:	4299      	cmp	r1, r3
 8005746:	d002      	beq.n	800574e <__swsetup_r+0x46>
 8005748:	4628      	mov	r0, r5
 800574a:	f7ff f9d5 	bl	8004af8 <_free_r>
 800574e:	2300      	movs	r3, #0
 8005750:	6363      	str	r3, [r4, #52]	@ 0x34
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	2300      	movs	r3, #0
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	b94b      	cbnz	r3, 8005782 <__swsetup_r+0x7a>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005778:	d003      	beq.n	8005782 <__swsetup_r+0x7a>
 800577a:	4621      	mov	r1, r4
 800577c:	4628      	mov	r0, r5
 800577e:	f000 f8a5 	bl	80058cc <__smakebuf_r>
 8005782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005786:	f013 0201 	ands.w	r2, r3, #1
 800578a:	d00a      	beq.n	80057a2 <__swsetup_r+0x9a>
 800578c:	2200      	movs	r2, #0
 800578e:	60a2      	str	r2, [r4, #8]
 8005790:	6962      	ldr	r2, [r4, #20]
 8005792:	4252      	negs	r2, r2
 8005794:	61a2      	str	r2, [r4, #24]
 8005796:	6922      	ldr	r2, [r4, #16]
 8005798:	b942      	cbnz	r2, 80057ac <__swsetup_r+0xa4>
 800579a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800579e:	d1c5      	bne.n	800572c <__swsetup_r+0x24>
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
 80057a2:	0799      	lsls	r1, r3, #30
 80057a4:	bf58      	it	pl
 80057a6:	6962      	ldrpl	r2, [r4, #20]
 80057a8:	60a2      	str	r2, [r4, #8]
 80057aa:	e7f4      	b.n	8005796 <__swsetup_r+0x8e>
 80057ac:	2000      	movs	r0, #0
 80057ae:	e7f7      	b.n	80057a0 <__swsetup_r+0x98>
 80057b0:	2000001c 	.word	0x2000001c

080057b4 <memmove>:
 80057b4:	4288      	cmp	r0, r1
 80057b6:	b510      	push	{r4, lr}
 80057b8:	eb01 0402 	add.w	r4, r1, r2
 80057bc:	d902      	bls.n	80057c4 <memmove+0x10>
 80057be:	4284      	cmp	r4, r0
 80057c0:	4623      	mov	r3, r4
 80057c2:	d807      	bhi.n	80057d4 <memmove+0x20>
 80057c4:	1e43      	subs	r3, r0, #1
 80057c6:	42a1      	cmp	r1, r4
 80057c8:	d008      	beq.n	80057dc <memmove+0x28>
 80057ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057d2:	e7f8      	b.n	80057c6 <memmove+0x12>
 80057d4:	4402      	add	r2, r0
 80057d6:	4601      	mov	r1, r0
 80057d8:	428a      	cmp	r2, r1
 80057da:	d100      	bne.n	80057de <memmove+0x2a>
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057e6:	e7f7      	b.n	80057d8 <memmove+0x24>

080057e8 <_sbrk_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4d06      	ldr	r5, [pc, #24]	@ (8005804 <_sbrk_r+0x1c>)
 80057ec:	2300      	movs	r3, #0
 80057ee:	4604      	mov	r4, r0
 80057f0:	4608      	mov	r0, r1
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	f7fb fc86 	bl	8001104 <_sbrk>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d102      	bne.n	8005802 <_sbrk_r+0x1a>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	b103      	cbz	r3, 8005802 <_sbrk_r+0x1a>
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	2000032c 	.word	0x2000032c

08005808 <memcpy>:
 8005808:	440a      	add	r2, r1
 800580a:	4291      	cmp	r1, r2
 800580c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005810:	d100      	bne.n	8005814 <memcpy+0xc>
 8005812:	4770      	bx	lr
 8005814:	b510      	push	{r4, lr}
 8005816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800581e:	4291      	cmp	r1, r2
 8005820:	d1f9      	bne.n	8005816 <memcpy+0xe>
 8005822:	bd10      	pop	{r4, pc}

08005824 <_realloc_r>:
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	4607      	mov	r7, r0
 800582a:	4614      	mov	r4, r2
 800582c:	460d      	mov	r5, r1
 800582e:	b921      	cbnz	r1, 800583a <_realloc_r+0x16>
 8005830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005834:	4611      	mov	r1, r2
 8005836:	f7ff b9cb 	b.w	8004bd0 <_malloc_r>
 800583a:	b92a      	cbnz	r2, 8005848 <_realloc_r+0x24>
 800583c:	f7ff f95c 	bl	8004af8 <_free_r>
 8005840:	4625      	mov	r5, r4
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005848:	f000 f89e 	bl	8005988 <_malloc_usable_size_r>
 800584c:	4284      	cmp	r4, r0
 800584e:	4606      	mov	r6, r0
 8005850:	d802      	bhi.n	8005858 <_realloc_r+0x34>
 8005852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005856:	d8f4      	bhi.n	8005842 <_realloc_r+0x1e>
 8005858:	4621      	mov	r1, r4
 800585a:	4638      	mov	r0, r7
 800585c:	f7ff f9b8 	bl	8004bd0 <_malloc_r>
 8005860:	4680      	mov	r8, r0
 8005862:	b908      	cbnz	r0, 8005868 <_realloc_r+0x44>
 8005864:	4645      	mov	r5, r8
 8005866:	e7ec      	b.n	8005842 <_realloc_r+0x1e>
 8005868:	42b4      	cmp	r4, r6
 800586a:	4622      	mov	r2, r4
 800586c:	4629      	mov	r1, r5
 800586e:	bf28      	it	cs
 8005870:	4632      	movcs	r2, r6
 8005872:	f7ff ffc9 	bl	8005808 <memcpy>
 8005876:	4629      	mov	r1, r5
 8005878:	4638      	mov	r0, r7
 800587a:	f7ff f93d 	bl	8004af8 <_free_r>
 800587e:	e7f1      	b.n	8005864 <_realloc_r+0x40>

08005880 <__swhatbuf_r>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	460c      	mov	r4, r1
 8005884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005888:	2900      	cmp	r1, #0
 800588a:	b096      	sub	sp, #88	@ 0x58
 800588c:	4615      	mov	r5, r2
 800588e:	461e      	mov	r6, r3
 8005890:	da0d      	bge.n	80058ae <__swhatbuf_r+0x2e>
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005898:	f04f 0100 	mov.w	r1, #0
 800589c:	bf14      	ite	ne
 800589e:	2340      	movne	r3, #64	@ 0x40
 80058a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80058a4:	2000      	movs	r0, #0
 80058a6:	6031      	str	r1, [r6, #0]
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	b016      	add	sp, #88	@ 0x58
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	466a      	mov	r2, sp
 80058b0:	f000 f848 	bl	8005944 <_fstat_r>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	dbec      	blt.n	8005892 <__swhatbuf_r+0x12>
 80058b8:	9901      	ldr	r1, [sp, #4]
 80058ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058c2:	4259      	negs	r1, r3
 80058c4:	4159      	adcs	r1, r3
 80058c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058ca:	e7eb      	b.n	80058a4 <__swhatbuf_r+0x24>

080058cc <__smakebuf_r>:
 80058cc:	898b      	ldrh	r3, [r1, #12]
 80058ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058d0:	079d      	lsls	r5, r3, #30
 80058d2:	4606      	mov	r6, r0
 80058d4:	460c      	mov	r4, r1
 80058d6:	d507      	bpl.n	80058e8 <__smakebuf_r+0x1c>
 80058d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	2301      	movs	r3, #1
 80058e2:	6163      	str	r3, [r4, #20]
 80058e4:	b003      	add	sp, #12
 80058e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e8:	ab01      	add	r3, sp, #4
 80058ea:	466a      	mov	r2, sp
 80058ec:	f7ff ffc8 	bl	8005880 <__swhatbuf_r>
 80058f0:	9f00      	ldr	r7, [sp, #0]
 80058f2:	4605      	mov	r5, r0
 80058f4:	4639      	mov	r1, r7
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7ff f96a 	bl	8004bd0 <_malloc_r>
 80058fc:	b948      	cbnz	r0, 8005912 <__smakebuf_r+0x46>
 80058fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005902:	059a      	lsls	r2, r3, #22
 8005904:	d4ee      	bmi.n	80058e4 <__smakebuf_r+0x18>
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	e7e2      	b.n	80058d8 <__smakebuf_r+0xc>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	6020      	str	r0, [r4, #0]
 8005916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	9b01      	ldr	r3, [sp, #4]
 800591e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005922:	b15b      	cbz	r3, 800593c <__smakebuf_r+0x70>
 8005924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005928:	4630      	mov	r0, r6
 800592a:	f000 f81d 	bl	8005968 <_isatty_r>
 800592e:	b128      	cbz	r0, 800593c <__smakebuf_r+0x70>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	431d      	orrs	r5, r3
 8005940:	81a5      	strh	r5, [r4, #12]
 8005942:	e7cf      	b.n	80058e4 <__smakebuf_r+0x18>

08005944 <_fstat_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4d07      	ldr	r5, [pc, #28]	@ (8005964 <_fstat_r+0x20>)
 8005948:	2300      	movs	r3, #0
 800594a:	4604      	mov	r4, r0
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	602b      	str	r3, [r5, #0]
 8005952:	f7fb fbae 	bl	80010b2 <_fstat>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	d102      	bne.n	8005960 <_fstat_r+0x1c>
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	b103      	cbz	r3, 8005960 <_fstat_r+0x1c>
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	bd38      	pop	{r3, r4, r5, pc}
 8005962:	bf00      	nop
 8005964:	2000032c 	.word	0x2000032c

08005968 <_isatty_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d06      	ldr	r5, [pc, #24]	@ (8005984 <_isatty_r+0x1c>)
 800596c:	2300      	movs	r3, #0
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	f7fb fbad 	bl	80010d2 <_isatty>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_isatty_r+0x1a>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	b103      	cbz	r3, 8005982 <_isatty_r+0x1a>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	2000032c 	.word	0x2000032c

08005988 <_malloc_usable_size_r>:
 8005988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598c:	1f18      	subs	r0, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfbc      	itt	lt
 8005992:	580b      	ldrlt	r3, [r1, r0]
 8005994:	18c0      	addlt	r0, r0, r3
 8005996:	4770      	bx	lr

08005998 <_init>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr

080059a4 <_fini>:
 80059a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a6:	bf00      	nop
 80059a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059aa:	bc08      	pop	{r3}
 80059ac:	469e      	mov	lr, r3
 80059ae:	4770      	bx	lr
