
Laboratorio2-Lopez-22550.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002a7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f92  00000000  00000000  00000335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078f  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000480  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023e  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034d  00000000  00000000  000021fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001f6  000001f6  0000026a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.LCD_Port 00000092  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_CMD 00000024  00000184  00000184  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.initLCD8bits 00000046  00000112  00000112  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_Write_Char 00000024  000001a8  000001a8  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_Write_String 0000002c  00000158  00000158  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000014  000001e2  000001e2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  000001fe  000001fe  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  00000200  00000200  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  00000202  00000202  00000276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  000001cc  000001cc  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  000001fa  000001fa  0000026e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
   c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
  64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  78:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001f6 <__bad_interrupt>:
 1f6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_Port:

00000080 <LCD_Port>:
		PORTD &= ~(1<<PORTD4);
}

//Función para colocar en el puerto un valor
void LCD_Port(char a){
	if (a & 1)
  80:	80 ff       	sbrs	r24, 0
  82:	04 c0       	rjmp	.+8      	; 0x8c <LCD_Port+0xc>
	PORTD |= (1<<PORTD5);  //D0 = 1
  84:	9b b1       	in	r25, 0x0b	; 11
  86:	90 62       	ori	r25, 0x20	; 32
  88:	9b b9       	out	0x0b, r25	; 11
  8a:	03 c0       	rjmp	.+6      	; 0x92 <LCD_Port+0x12>
	else
	PORTD &= ~(1<<PORTD5); //D0 = 0
  8c:	9b b1       	in	r25, 0x0b	; 11
  8e:	9f 7d       	andi	r25, 0xDF	; 223
  90:	9b b9       	out	0x0b, r25	; 11
	
	
	
	if (a & 2)
  92:	81 ff       	sbrs	r24, 1
  94:	04 c0       	rjmp	.+8      	; 0x9e <LCD_Port+0x1e>
	PORTD |= (1<<PORTD6); //D1 = 1
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	90 64       	ori	r25, 0x40	; 64
  9a:	9b b9       	out	0x0b, r25	; 11
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <LCD_Port+0x24>
	else
	PORTD &= ~(1<<PORTD6); //D1 = 0
  9e:	9b b1       	in	r25, 0x0b	; 11
  a0:	9f 7b       	andi	r25, 0xBF	; 191
  a2:	9b b9       	out	0x0b, r25	; 11
	
	
	
	if (a & 4)
  a4:	82 ff       	sbrs	r24, 2
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <LCD_Port+0x30>
	PORTD |= (1<<PORTD7);//D2 = 1
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	90 68       	ori	r25, 0x80	; 128
  ac:	9b b9       	out	0x0b, r25	; 11
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <LCD_Port+0x36>
	else
	PORTD &= ~(1<<PORTD7); //D2 = 0
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9f 77       	andi	r25, 0x7F	; 127
  b4:	9b b9       	out	0x0b, r25	; 11
	
	
	
	if (a & 8)
  b6:	83 ff       	sbrs	r24, 3
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <LCD_Port+0x42>
	PORTB |= (1<<PORTB0); //D3 = 1
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	91 60       	ori	r25, 0x01	; 1
  be:	95 b9       	out	0x05, r25	; 5
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <LCD_Port+0x48>
	else 
	PORTB &= ~(1<<PORTB0); //D3 = 0
  c2:	95 b1       	in	r25, 0x05	; 5
  c4:	9e 7f       	andi	r25, 0xFE	; 254
  c6:	95 b9       	out	0x05, r25	; 5
	
	
	if (a & 16)
  c8:	84 ff       	sbrs	r24, 4
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <LCD_Port+0x54>
	PORTB |= (1<<PORTB1); //D4 = 1
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	92 60       	ori	r25, 0x02	; 2
  d0:	95 b9       	out	0x05, r25	; 5
  d2:	03 c0       	rjmp	.+6      	; 0xda <LCD_Port+0x5a>
	else
	PORTB &= ~(1<<PORTB1); //D4 = 0
  d4:	95 b1       	in	r25, 0x05	; 5
  d6:	9d 7f       	andi	r25, 0xFD	; 253
  d8:	95 b9       	out	0x05, r25	; 5
	
	
	if (a & 32)
  da:	85 ff       	sbrs	r24, 5
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <LCD_Port+0x66>
	PORTB |= (1<<PORTB2); //D5 = 1
  de:	95 b1       	in	r25, 0x05	; 5
  e0:	94 60       	ori	r25, 0x04	; 4
  e2:	95 b9       	out	0x05, r25	; 5
  e4:	03 c0       	rjmp	.+6      	; 0xec <LCD_Port+0x6c>
	else
	PORTB &= ~(1<<PORTB2); //D5 = 0
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	9b 7f       	andi	r25, 0xFB	; 251
  ea:	95 b9       	out	0x05, r25	; 5
	
	
	if (a & 64)
  ec:	86 ff       	sbrs	r24, 6
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <LCD_Port+0x78>
	PORTB |= (1<<PORTB3); //D6 = 1
  f0:	95 b1       	in	r25, 0x05	; 5
  f2:	98 60       	ori	r25, 0x08	; 8
  f4:	95 b9       	out	0x05, r25	; 5
  f6:	03 c0       	rjmp	.+6      	; 0xfe <LCD_Port+0x7e>
	else
	PORTB &= ~(1<<PORTB3); //D6 = 0
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	97 7f       	andi	r25, 0xF7	; 247
  fc:	95 b9       	out	0x05, r25	; 5
	
	
	if (a & 128)
  fe:	88 23       	and	r24, r24
 100:	24 f4       	brge	.+8      	; 0x10a <LCD_Port+0x8a>
	PORTB |= (1<<PORTB4); //D7 = 1
 102:	85 b1       	in	r24, 0x05	; 5
 104:	80 61       	ori	r24, 0x10	; 16
 106:	85 b9       	out	0x05, r24	; 5
 108:	08 95       	ret
	else
	PORTB &= ~(1<<PORTB4); //D7 = 0
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	85 b9       	out	0x05, r24	; 5
 110:	08 95       	ret

Disassembly of section .text.LCD_CMD:

00000184 <LCD_CMD>:
	
}
//Función para enviar un comando
void LCD_CMD(char a){
		//RS = 0; // => RS = 0 // Dato en el puerto lo va interpretar como comando
		PORTD &= ~(1<<PORTD2);
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	9b 7f       	andi	r25, 0xFB	; 251
 188:	9b b9       	out	0x0b, r25	; 11
		LCD_Port(a);
 18a:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
		//EN = 1;  // => E = 1
		PORTD |= (1<<PORTD4);
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e7       	ldi	r24, 0x7F	; 127
 196:	9e e3       	ldi	r25, 0x3E	; 62
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_CMD+0x14>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_CMD+0x1a>
 19e:	00 00       	nop
		_delay_ms(4);
		//EN = 0; // => E = 0
		PORTD &= ~(1<<PORTD4);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 7e       	andi	r24, 0xEF	; 239
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	08 95       	ret

Disassembly of section .text.initLCD8bits:

00000112 <initLCD8bits>:
 * B4 = D7
 */

void initLCD8bits(void){
	//Configurar los puertos como salidas 
	DDRD |= ((1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	8c 6f       	ori	r24, 0xFC	; 252
 116:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7));
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	83 70       	andi	r24, 0x03	; 3
 11c:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= ((1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB4)|(1<<DDB5));
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	8f 63       	ori	r24, 0x3F	; 63
 122:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 124:	15 b8       	out	0x05, r1	; 5
	
	//Power on
	LCD_Port(0x00);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	89 ef       	ldi	r24, 0xF9	; 249
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <initLCD8bits+0x20>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <initLCD8bits+0x2a>
 13c:	00 00       	nop
	//Pause 15 ms
	_delay_ms(20);
	//Function set
	LCD_CMD(0b00111000);
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_CMD>
	//Pause 100us
	
	//Display on/off
	LCD_CMD(0b00001100);
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_CMD>
	//Pause 100us
	
	//Entry mode
	LCD_CMD(0b00000110);
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_CMD>
	//Pause 100us
	
	//Clear display
	LCD_CMD(0b00000001);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_CMD>
 156:	08 95       	ret

Disassembly of section .text.LCD_Write_Char:

000001a8 <LCD_Write_Char>:


//Función para enviar un caracter
void LCD_Write_Char(char caracter){
	//RS = 1; => RS = 1  El dato en el puerto lo va a interpretar como CARACTER (DATO)
	PORTD |= (1<<PORTD2);
 1a8:	9b b1       	in	r25, 0x0b	; 11
 1aa:	94 60       	ori	r25, 0x04	; 4
 1ac:	9b b9       	out	0x0b, r25	; 11
	LCD_Port(caracter);
 1ae:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
	//EN = 1; => E = 1
	PORTD |= (1<<PORTD4);
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	8f e7       	ldi	r24, 0x7F	; 127
 1ba:	9e e3       	ldi	r25, 0x3E	; 62
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Write_Char+0x14>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Write_Char+0x1a>
 1c2:	00 00       	nop
	_delay_ms(4);
	PORTD &= ~(1<<PORTD4);
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8f 7e       	andi	r24, 0xEF	; 239
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	08 95       	ret

Disassembly of section .text.LCD_Write_String:

00000158 <LCD_Write_String>:
}


//Función para enviar una cadena
void LCD_Write_String(char *a){
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	8c 01       	movw	r16, r24
	int i;
	for (i=0; a[i] != '\0'; i++)
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <LCD_Write_String+0x16>
	LCD_Write_Char(a[i]);
 168:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_Write_Char>


//Función para enviar una cadena
void LCD_Write_String(char *a){
	int i;
	for (i=0; a[i] != '\0'; i++)
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	f8 01       	movw	r30, r16
 170:	ec 0f       	add	r30, r28
 172:	fd 1f       	adc	r31, r29
 174:	80 81       	ld	r24, Z
 176:	81 11       	cpse	r24, r1
 178:	f7 cf       	rjmp	.-18     	; 0x168 <LCD_Write_String+0x10>
	LCD_Write_Char(a[i]);
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

Disassembly of section .text.main:

000001e2 <main>:
#include "LCD/LCD.h"

int main(void)
{
	
	initLCD8bits();
 1e2:	0e 94 89 00 	call	0x112	; 0x112 <initLCD8bits>
	LCD_Write_Char('H');
 1e6:	88 e4       	ldi	r24, 0x48	; 72
 1e8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_Write_Char>
	LCD_Write_String('MUNDO');
 1ec:	8f e4       	ldi	r24, 0x4F	; 79
 1ee:	94 e4       	ldi	r25, 0x44	; 68
 1f0:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Write_String>
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x12>

Disassembly of section .text.__dummy_fini:

000001fe <_fini>:
 1fe:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000200 <__funcs_on_exit>:
 200:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000202 <__simulator_exit>:
 202:	08 95       	ret

Disassembly of section .text.exit:

000001cc <exit>:
 1cc:	ec 01       	movw	r28, r24
 1ce:	0e 94 00 01 	call	0x200	; 0x200 <__funcs_on_exit>
 1d2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_fini>
 1d6:	ce 01       	movw	r24, r28
 1d8:	0e 94 01 01 	call	0x202	; 0x202 <__simulator_exit>
 1dc:	ce 01       	movw	r24, r28
 1de:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Exit>

Disassembly of section .text._Exit:

000001fa <_Exit>:
 1fa:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
