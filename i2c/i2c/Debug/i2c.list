
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042b8  080042b8  000052b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d8  080042d8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d8  080042d8  000052d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042dc  080042dc  000052dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080042e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  080042ec  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080042ec  000060d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b891  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b01  00000000  00000000  000118cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  000133d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fb  00000000  00000000  00013df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209a9  00000000  00000000  000145f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d799  00000000  00000000  00034f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c74aa  00000000  00000000  00042735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109bdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a4c  00000000  00000000  00109c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0010c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080042a0 	.word	0x080042a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080042a0 	.word	0x080042a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb28 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f814 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8d8 	bl	80006f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f8ac 	bl	800069c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000544:	f000 f87c 	bl	8000640 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) {
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <main+0x30>)
 800054a:	f001 f8d8 	bl	80016fe <HAL_I2C_EnableListen_IT>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d002      	beq.n	800055a <main+0x2a>
	  Error_Handler();
 8000554:	f000 f9ca 	bl	80008ec <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	e7fd      	b.n	800055a <main+0x2a>
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2234      	movs	r2, #52	@ 0x34
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fe68 	bl	8004248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <SystemClock_Config+0xd4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a29      	ldr	r2, [pc, #164]	@ (8000638 <SystemClock_Config+0xd4>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <SystemClock_Config+0xd4>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	4b24      	ldr	r3, [pc, #144]	@ (800063c <SystemClock_Config+0xd8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b0:	4a22      	ldr	r2, [pc, #136]	@ (800063c <SystemClock_Config+0xd8>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <SystemClock_Config+0xd8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d8:	2310      	movs	r3, #16
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f8c6 	bl	8003784 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005fe:	f000 f975 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fd66 	bl	80030f0 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800062a:	f000 f95f 	bl	80008ec <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	@ 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 138;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000658:	228a      	movs	r2, #138	@ 0x8a
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f000 fdff 	bl	8001280 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f930 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <MX_USART2_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f003 faf4 	bl	8003cc0 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f905 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a2c      	ldr	r2, [pc, #176]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a25      	ldr	r2, [pc, #148]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a1e      	ldr	r2, [pc, #120]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a17      	ldr	r2, [pc, #92]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2120      	movs	r1, #32
 800077a:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <MX_GPIO_Init+0xd4>)
 800077c:	f000 fd4c 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000786:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_GPIO_Init+0xd8>)
 8000798:	f000 fbaa 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800079c:	2320      	movs	r3, #32
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_GPIO_Init+0xd4>)
 80007b4:	f000 fb9c 	bl	8000ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020800 	.word	0x40020800

080007cc <HAL_I2C_ListenCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 ff92 	bl	80016fe <HAL_I2C_EnableListen_IT>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_I2C_SlaveTxCpltCallback>:


void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	    aTxBuffer[0] = '0';
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 80007ee:	2230      	movs	r2, #48	@ 0x30
 80007f0:	701a      	strb	r2, [r3, #0]
	    aTxBuffer[1] = '1';
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 80007f4:	2231      	movs	r2, #49	@ 0x31
 80007f6:	705a      	strb	r2, [r3, #1]
	    aTxBuffer[2] = '0';
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 80007fa:	2230      	movs	r2, #48	@ 0x30
 80007fc:	709a      	strb	r2, [r3, #2]
	    aTxBuffer[3] = '0';
 80007fe:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 8000800:	2230      	movs	r2, #48	@ 0x30
 8000802:	70da      	strb	r2, [r3, #3]

}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	200000c4 	.word	0x200000c4

08000814 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    // Prueba si realmente entra al callback
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // LED verde
 800081c:	2120      	movs	r1, #32
 800081e:	4803      	ldr	r0, [pc, #12]	@ (800082c <HAL_I2C_SlaveRxCpltCallback+0x18>)
 8000820:	f000 fd13 	bl	800124a <HAL_GPIO_TogglePin>



}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020000 	.word	0x40020000

08000830 <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);  // LED ON permanente en error
 8000838:	2201      	movs	r2, #1
 800083a:	2120      	movs	r1, #32
 800083c:	4803      	ldr	r0, [pc, #12]	@ (800084c <HAL_I2C_ErrorCallback+0x1c>)
 800083e:	f000 fceb 	bl	8001218 <HAL_GPIO_WritePin>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020000 	.word	0x40020000

08000850 <HAL_I2C_AddrCallback>:



void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
 800085c:	4613      	mov	r3, r2
 800085e:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT){
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d10b      	bne.n	800087e <HAL_I2C_AddrCallback+0x2e>
		if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t*) Dato,
 8000866:	2308      	movs	r3, #8
 8000868:	2208      	movs	r2, #8
 800086a:	491c      	ldr	r1, [pc, #112]	@ (80008dc <HAL_I2C_AddrCallback+0x8c>)
 800086c:	481c      	ldr	r0, [pc, #112]	@ (80008e0 <HAL_I2C_AddrCallback+0x90>)
 800086e:	f000 fed3 	bl	8001618 <HAL_I2C_Slave_Seq_Receive_IT>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d010      	beq.n	800089a <HAL_I2C_AddrCallback+0x4a>
				RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) !=HAL_OK) {
			Error_Handler();
 8000878:	f000 f838 	bl	80008ec <Error_Handler>
 800087c:	e00d      	b.n	800089a <HAL_I2C_AddrCallback+0x4a>
		}
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10a      	bne.n	800089a <HAL_I2C_AddrCallback+0x4a>
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) aTxBuffer, 4, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
 8000884:	2308      	movs	r3, #8
 8000886:	2204      	movs	r2, #4
 8000888:	4916      	ldr	r1, [pc, #88]	@ (80008e4 <HAL_I2C_AddrCallback+0x94>)
 800088a:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <HAL_I2C_AddrCallback+0x90>)
 800088c:	f000 fe51 	bl	8001532 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_I2C_AddrCallback+0x4a>
			Error_Handler();
 8000896:	f000 f829 	bl	80008ec <Error_Handler>
		}
	}

	uint8_t valor = Dato[0];
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <HAL_I2C_AddrCallback+0x8c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	72fb      	strb	r3, [r7, #11]

	    for (int i = 0; i < 8; i++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e011      	b.n	80008ca <HAL_I2C_AddrCallback+0x7a>
	        aRxBuffer[i] = (valor >> (7 - i)) & 0x01;}
 80008a6:	7afa      	ldrb	r2, [r7, #11]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	fa42 f303 	asr.w	r3, r2, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	b2d9      	uxtb	r1, r3
 80008ba:	4a0b      	ldr	r2, [pc, #44]	@ (80008e8 <HAL_I2C_AddrCallback+0x98>)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	460a      	mov	r2, r1
 80008c2:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < 8; i++) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	2b07      	cmp	r3, #7
 80008ce:	ddea      	ble.n	80008a6 <HAL_I2C_AddrCallback+0x56>
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000d0 	.word	0x200000d0
 80008e0:	20000028 	.word	0x20000028
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	200000c8 	.word	0x200000c8

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000936:	2007      	movs	r0, #7
 8000938:	f000 fa68 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	@ 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a21      	ldr	r2, [pc, #132]	@ (80009ec <HAL_I2C_MspInit+0xa4>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d13c      	bne.n	80009e4 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <HAL_I2C_MspInit+0xa8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a1f      	ldr	r2, [pc, #124]	@ (80009f0 <HAL_I2C_MspInit+0xa8>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <HAL_I2C_MspInit+0xa8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000998:	2304      	movs	r3, #4
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4814      	ldr	r0, [pc, #80]	@ (80009f4 <HAL_I2C_MspInit+0xac>)
 80009a4:	f000 faa4 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_I2C_MspInit+0xa8>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a0f      	ldr	r2, [pc, #60]	@ (80009f0 <HAL_I2C_MspInit+0xa8>)
 80009b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <HAL_I2C_MspInit+0xa8>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	201f      	movs	r0, #31
 80009ca:	f000 fa2a 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009ce:	201f      	movs	r0, #31
 80009d0:	f000 fa43 	bl	8000e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2020      	movs	r0, #32
 80009da:	f000 fa22 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009de:	2020      	movs	r0, #32
 80009e0:	f000 fa3b 	bl	8000e5a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	@ 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020400 	.word	0x40020400

080009f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	@ 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a19      	ldr	r2, [pc, #100]	@ (8000a7c <HAL_UART_MspInit+0x84>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d12b      	bne.n	8000a72 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <HAL_UART_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <HAL_UART_MspInit+0x88>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <HAL_UART_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <HAL_UART_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a10      	ldr	r2, [pc, #64]	@ (8000a80 <HAL_UART_MspInit+0x88>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_UART_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a52:	230c      	movs	r3, #12
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <HAL_UART_MspInit+0x8c>)
 8000a6e:	f000 fa3f 	bl	8000ef0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	@ 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f8a5 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <I2C1_EV_IRQHandler+0x10>)
 8000aee:	f000 fe3c 	bl	800176a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000028 	.word	0x20000028

08000afc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <I2C1_ER_IRQHandler+0x10>)
 8000b02:	f000 ffa3 	bl	8001a4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000028 	.word	0x20000028

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f003 fb79 	bl	8004258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fce3 	bl	8000530 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b78:	080042e0 	.word	0x080042e0
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b80:	200000d8 	.word	0x200000d8

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f92b 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe9c 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f943 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f90b 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200000d4 	.word	0x200000d4

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200000d4 	.word	0x200000d4

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	@ (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff3e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff31 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d004      	beq.n	8000eac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00c      	b.n	8000ec6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2205      	movs	r2, #5
 8000eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ee0:	b2db      	uxtb	r3, r3
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e165      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 8154 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d005      	beq.n	8000f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d130      	bne.n	8000fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	f003 0201 	and.w	r2, r3, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80ae 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b5d      	ldr	r3, [pc, #372]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a5c      	ldr	r2, [pc, #368]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b5a      	ldr	r3, [pc, #360]	@ (80011f0 <HAL_GPIO_Init+0x300>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a58      	ldr	r2, [pc, #352]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4f      	ldr	r2, [pc, #316]	@ (80011f8 <HAL_GPIO_Init+0x308>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4e      	ldr	r2, [pc, #312]	@ (80011fc <HAL_GPIO_Init+0x30c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001200 <HAL_GPIO_Init+0x310>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001204 <HAL_GPIO_Init+0x314>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001208 <HAL_GPIO_Init+0x318>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x20a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4a      	ldr	r2, [pc, #296]	@ (800120c <HAL_GPIO_Init+0x31c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x206>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a49      	ldr	r2, [pc, #292]	@ (8001210 <HAL_GPIO_Init+0x320>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x202>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x21c>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x21c>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x21c>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x21c>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112a:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <HAL_GPIO_Init+0x324>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114e:	4a31      	ldr	r2, [pc, #196]	@ (8001214 <HAL_GPIO_Init+0x324>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001154:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <HAL_GPIO_Init+0x324>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001178:	4a26      	ldr	r2, [pc, #152]	@ (8001214 <HAL_GPIO_Init+0x324>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_GPIO_Init+0x324>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <HAL_GPIO_Init+0x324>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <HAL_GPIO_Init+0x324>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011cc:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <HAL_GPIO_Init+0x324>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae96 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	@ 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800125c:	887a      	ldrh	r2, [r7, #2]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4013      	ands	r3, r2
 8001262:	041a      	lsls	r2, r3, #16
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43d9      	mvns	r1, r3
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	400b      	ands	r3, r1
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e12b      	b.n	80014ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d106      	bne.n	80012ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fb4e 	bl	8000948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2224      	movs	r2, #36	@ 0x24
 80012b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012e4:	f001 fff6 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 80012e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a81      	ldr	r2, [pc, #516]	@ (80014f4 <HAL_I2C_Init+0x274>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d807      	bhi.n	8001304 <HAL_I2C_Init+0x84>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a80      	ldr	r2, [pc, #512]	@ (80014f8 <HAL_I2C_Init+0x278>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	bf94      	ite	ls
 80012fc:	2301      	movls	r3, #1
 80012fe:	2300      	movhi	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	e006      	b.n	8001312 <HAL_I2C_Init+0x92>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a7d      	ldr	r2, [pc, #500]	@ (80014fc <HAL_I2C_Init+0x27c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	bf94      	ite	ls
 800130c:	2301      	movls	r3, #1
 800130e:	2300      	movhi	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0e7      	b.n	80014ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4a78      	ldr	r2, [pc, #480]	@ (8001500 <HAL_I2C_Init+0x280>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9b      	lsrs	r3, r3, #18
 8001324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a6a      	ldr	r2, [pc, #424]	@ (80014f4 <HAL_I2C_Init+0x274>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d802      	bhi.n	8001354 <HAL_I2C_Init+0xd4>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	3301      	adds	r3, #1
 8001352:	e009      	b.n	8001368 <HAL_I2C_Init+0xe8>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a69      	ldr	r2, [pc, #420]	@ (8001504 <HAL_I2C_Init+0x284>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	3301      	adds	r3, #1
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	430b      	orrs	r3, r1
 800136e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800137a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	495c      	ldr	r1, [pc, #368]	@ (80014f4 <HAL_I2C_Init+0x274>)
 8001384:	428b      	cmp	r3, r1
 8001386:	d819      	bhi.n	80013bc <HAL_I2C_Init+0x13c>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e59      	subs	r1, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fbb1 f3f3 	udiv	r3, r1, r3
 8001396:	1c59      	adds	r1, r3, #1
 8001398:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800139c:	400b      	ands	r3, r1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <HAL_I2C_Init+0x138>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e59      	subs	r1, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b6:	e051      	b.n	800145c <HAL_I2C_Init+0x1dc>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e04f      	b.n	800145c <HAL_I2C_Init+0x1dc>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d111      	bne.n	80013e8 <HAL_I2C_Init+0x168>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e58      	subs	r0, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e012      	b.n	800140e <HAL_I2C_Init+0x18e>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e58      	subs	r0, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	0099      	lsls	r1, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_I2C_Init+0x196>
 8001412:	2301      	movs	r3, #1
 8001414:	e022      	b.n	800145c <HAL_I2C_Init+0x1dc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10e      	bne.n	800143c <HAL_I2C_Init+0x1bc>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1e58      	subs	r0, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6859      	ldr	r1, [r3, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001430:	3301      	adds	r3, #1
 8001432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800143a:	e00f      	b.n	800145c <HAL_I2C_Init+0x1dc>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	0099      	lsls	r1, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001452:	3301      	adds	r3, #1
 8001454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	6809      	ldr	r1, [r1, #0]
 8001460:	4313      	orrs	r3, r2
 8001462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800148a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6911      	ldr	r1, [r2, #16]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68d2      	ldr	r2, [r2, #12]
 8001496:	4311      	orrs	r1, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	430b      	orrs	r3, r1
 800149e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	000186a0 	.word	0x000186a0
 80014f8:	001e847f 	.word	0x001e847f
 80014fc:	003d08ff 	.word	0x003d08ff
 8001500:	431bde83 	.word	0x431bde83
 8001504:	10624dd3 	.word	0x10624dd3

08001508 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151a:	2b80      	cmp	r3, #128	@ 0x80
 800151c:	d103      	bne.n	8001526 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001532:	b480      	push	{r7}
 8001534:	b087      	sub	sp, #28
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800154e:	2b28      	cmp	r3, #40	@ 0x28
 8001550:	d15b      	bne.n	800160a <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e054      	b.n	800160c <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800156c:	2302      	movs	r3, #2
 800156e:	e04d      	b.n	800160c <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d007      	beq.n	8001596 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2229      	movs	r2, #41	@ 0x29
 80015aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001604:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800160a:	2302      	movs	r3, #2
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001634:	2b28      	cmp	r3, #40	@ 0x28
 8001636:	d15b      	bne.n	80016f0 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e054      	b.n	80016f2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001652:	2302      	movs	r3, #2
 8001654:	e04d      	b.n	80016f2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b01      	cmp	r3, #1
 800166a:	d007      	beq.n	800167c <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800168a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	222a      	movs	r2, #42	@ 0x2a
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80016ea:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e000      	b.n	80016f2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
  }
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b20      	cmp	r3, #32
 8001710:	d124      	bne.n	800175c <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2228      	movs	r2, #40	@ 0x28
 8001716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d007      	beq.n	8001738 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001746:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001756:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800175c:	2302      	movs	r3, #2
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b088      	sub	sp, #32
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001782:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800178a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001792:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b10      	cmp	r3, #16
 8001798:	d003      	beq.n	80017a2 <HAL_I2C_EV_IRQHandler+0x38>
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b40      	cmp	r3, #64	@ 0x40
 800179e:	f040 80c1 	bne.w	8001924 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10d      	bne.n	80017d8 <HAL_I2C_EV_IRQHandler+0x6e>
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80017c2:	d003      	beq.n	80017cc <HAL_I2C_EV_IRQHandler+0x62>
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80017ca:	d101      	bne.n	80017d0 <HAL_I2C_EV_IRQHandler+0x66>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_I2C_EV_IRQHandler+0x68>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	f000 8132 	beq.w	8001a3c <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00c      	beq.n	80017fc <HAL_I2C_EV_IRQHandler+0x92>
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	0a5b      	lsrs	r3, r3, #9
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f001 fc62 	bl	80030b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fd65 	bl	80022c4 <I2C_Master_SB>
 80017fa:	e092      	b.n	8001922 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_I2C_EV_IRQHandler+0xb2>
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	0a5b      	lsrs	r3, r3, #9
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fddb 	bl	80023d0 <I2C_Master_ADD10>
 800181a:	e082      	b.n	8001922 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_I2C_EV_IRQHandler+0xd2>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	0a5b      	lsrs	r3, r3, #9
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 fdf5 	bl	8002424 <I2C_Master_ADDR>
 800183a:	e072      	b.n	8001922 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03b      	beq.n	80018c0 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001852:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001856:	f000 80f3 	beq.w	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	09db      	lsrs	r3, r3, #7
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00f      	beq.n	8001886 <HAL_I2C_EV_IRQHandler+0x11c>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	0a9b      	lsrs	r3, r3, #10
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_I2C_EV_IRQHandler+0x11c>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d103      	bne.n	8001886 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f9bd 	bl	8001bfe <I2C_MasterTransmit_TXE>
 8001884:	e04d      	b.n	8001922 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80d6 	beq.w	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	0a5b      	lsrs	r3, r3, #9
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80cf 	beq.w	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	2b21      	cmp	r3, #33	@ 0x21
 80018a6:	d103      	bne.n	80018b0 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fa44 	bl	8001d36 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ae:	e0c7      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b40      	cmp	r3, #64	@ 0x40
 80018b4:	f040 80c4 	bne.w	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fab2 	bl	8001e22 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018be:	e0bf      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018ce:	f000 80b7 	beq.w	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00f      	beq.n	80018fe <HAL_I2C_EV_IRQHandler+0x194>
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	0a9b      	lsrs	r3, r3, #10
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_I2C_EV_IRQHandler+0x194>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fb2b 	bl	8001f52 <I2C_MasterReceive_RXNE>
 80018fc:	e011      	b.n	8001922 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 809a 	beq.w	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	0a5b      	lsrs	r3, r3, #9
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8093 	beq.w	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fbe1 	bl	80020e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001920:	e08e      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001922:	e08d      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e007      	b.n	8001946 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d012      	beq.n	8001978 <HAL_I2C_EV_IRQHandler+0x20e>
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	0a5b      	lsrs	r3, r3, #9
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00c      	beq.n	8001978 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 ffa6 	bl	80028c2 <I2C_Slave_ADDR>
 8001976:	e066      	b.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <HAL_I2C_EV_IRQHandler+0x22e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	0a5b      	lsrs	r3, r3, #9
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 ffe1 	bl	8002958 <I2C_Slave_STOPF>
 8001996:	e056      	b.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	2b21      	cmp	r3, #33	@ 0x21
 800199c:	d002      	beq.n	80019a4 <HAL_I2C_EV_IRQHandler+0x23a>
 800199e:	7bbb      	ldrb	r3, [r7, #14]
 80019a0:	2b29      	cmp	r3, #41	@ 0x29
 80019a2:	d125      	bne.n	80019f0 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	09db      	lsrs	r3, r3, #7
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00f      	beq.n	80019d0 <HAL_I2C_EV_IRQHandler+0x266>
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_I2C_EV_IRQHandler+0x266>
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 febc 	bl	8002746 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019ce:	e039      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d033      	beq.n	8001a44 <HAL_I2C_EV_IRQHandler+0x2da>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	0a5b      	lsrs	r3, r3, #9
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d02d      	beq.n	8001a44 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fee9 	bl	80027c0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019ee:	e029      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	099b      	lsrs	r3, r3, #6
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00f      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x2b2>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	0a9b      	lsrs	r3, r3, #10
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d103      	bne.n	8001a1c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fef4 	bl	8002802 <I2C_SlaveReceive_RXNE>
 8001a1a:	e014      	b.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00e      	beq.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	0a5b      	lsrs	r3, r3, #9
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 ff22 	bl	800287e <I2C_SlaveReceive_BTF>
 8001a3a:	e004      	b.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a3c:	bf00      	nop
 8001a3e:	e002      	b.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a40:	bf00      	nop
 8001a42:	e000      	b.n	8001a46 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a44:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a6e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <HAL_I2C_ER_IRQHandler+0x4e>
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001a98:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	0a5b      	lsrs	r3, r3, #9
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00e      	beq.n	8001ac4 <HAL_I2C_ER_IRQHandler+0x78>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001ac2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	0a9b      	lsrs	r3, r3, #10
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03f      	beq.n	8001b50 <HAL_I2C_ER_IRQHandler+0x104>
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d039      	beq.n	8001b50 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001adc:	7efb      	ldrb	r3, [r7, #27]
 8001ade:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aee:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001af6:	7ebb      	ldrb	r3, [r7, #26]
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d112      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xd6>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b02:	7cfb      	ldrb	r3, [r7, #19]
 8001b04:	2b21      	cmp	r3, #33	@ 0x21
 8001b06:	d008      	beq.n	8001b1a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b08:	7cfb      	ldrb	r3, [r7, #19]
 8001b0a:	2b29      	cmp	r3, #41	@ 0x29
 8001b0c:	d005      	beq.n	8001b1a <HAL_I2C_ER_IRQHandler+0xce>
 8001b0e:	7cfb      	ldrb	r3, [r7, #19]
 8001b10:	2b28      	cmp	r3, #40	@ 0x28
 8001b12:	d106      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b21      	cmp	r3, #33	@ 0x21
 8001b18:	d103      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f001 f84c 	bl	8002bb8 <I2C_Slave_AF>
 8001b20:	e016      	b.n	8001b50 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b2a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b34:	7efb      	ldrb	r3, [r7, #27]
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d002      	beq.n	8001b40 <HAL_I2C_ER_IRQHandler+0xf4>
 8001b3a:	7efb      	ldrb	r3, [r7, #27]
 8001b3c:	2b40      	cmp	r3, #64	@ 0x40
 8001b3e:	d107      	bne.n	8001b50 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	0adb      	lsrs	r3, r3, #11
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00e      	beq.n	8001b7a <HAL_I2C_ER_IRQHandler+0x12e>
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001b78:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f001 f887 	bl	8002ca0 <I2C_ITError>
  }
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	@ 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c14:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d150      	bne.n	8001cc6 <I2C_MasterTransmit_TXE+0xc8>
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b21      	cmp	r3, #33	@ 0x21
 8001c28:	d14d      	bne.n	8001cc6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d01d      	beq.n	8001c6c <I2C_MasterTransmit_TXE+0x6e>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d01a      	beq.n	8001c6c <I2C_MasterTransmit_TXE+0x6e>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c3c:	d016      	beq.n	8001c6c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c4c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2211      	movs	r2, #17
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff98 	bl	8001b9a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c6a:	e060      	b.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c7a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b40      	cmp	r3, #64	@ 0x40
 8001ca4:	d107      	bne.n	8001cb6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff87 	bl	8001bc2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cb4:	e03b      	b.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff6b 	bl	8001b9a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cc4:	e033      	b.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b21      	cmp	r3, #33	@ 0x21
 8001cca:	d005      	beq.n	8001cd8 <I2C_MasterTransmit_TXE+0xda>
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	2b40      	cmp	r3, #64	@ 0x40
 8001cd0:	d12d      	bne.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	2b22      	cmp	r3, #34	@ 0x22
 8001cd6:	d12a      	bne.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d108      	bne.n	8001cf4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001cf2:	e01c      	b.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b40      	cmp	r3, #64	@ 0x40
 8001cfe:	d103      	bne.n	8001d08 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f88e 	bl	8001e22 <I2C_MemoryTransmit_TXE_BTF>
}
 8001d06:	e012      	b.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001d2c:	e7ff      	b.n	8001d2e <I2C_MasterTransmit_TXE+0x130>
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b21      	cmp	r3, #33	@ 0x21
 8001d4e:	d164      	bne.n	8001e1a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d7e:	e04c      	b.n	8001e1a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d01d      	beq.n	8001dc2 <I2C_MasterTransmit_BTF+0x8c>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d01a      	beq.n	8001dc2 <I2C_MasterTransmit_BTF+0x8c>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d92:	d016      	beq.n	8001dc2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001da2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2211      	movs	r2, #17
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff feed 	bl	8001b9a <HAL_I2C_MasterTxCpltCallback>
}
 8001dc0:	e02b      	b.n	8001e1a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001dd0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b40      	cmp	r3, #64	@ 0x40
 8001dfa:	d107      	bne.n	8001e0c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fedc 	bl	8001bc2 <HAL_I2C_MemTxCpltCallback>
}
 8001e0a:	e006      	b.n	8001e1a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fec0 	bl	8001b9a <HAL_I2C_MasterTxCpltCallback>
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d11d      	bne.n	8001e76 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10b      	bne.n	8001e5a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e52:	1c9a      	adds	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001e58:	e077      	b.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	121b      	asrs	r3, r3, #8
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e74:	e069      	b.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10b      	bne.n	8001e96 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e94:	e059      	b.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d152      	bne.n	8001f44 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b22      	cmp	r3, #34	@ 0x22
 8001ea2:	d10d      	bne.n	8001ec0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eb2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ebe:	e044      	b.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d015      	beq.n	8001ef6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b21      	cmp	r3, #33	@ 0x21
 8001ece:	d112      	bne.n	8001ef6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ef4:	e029      	b.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d124      	bne.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b21      	cmp	r3, #33	@ 0x21
 8001f04:	d121      	bne.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f14:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f24:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fe40 	bl	8001bc2 <HAL_I2C_MemTxCpltCallback>
}
 8001f42:	e002      	b.n	8001f4a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fadf 	bl	8001508 <I2C_Flush_DR>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b22      	cmp	r3, #34	@ 0x22
 8001f64:	f040 80b9 	bne.w	80020da <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d921      	bls.n	8001fc0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	f040 8096 	bne.w	80020da <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fbc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001fbe:	e08c      	b.n	80020da <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d07f      	beq.n	80020c8 <I2C_MasterReceive_RXNE+0x176>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d002      	beq.n	8001fd4 <I2C_MasterReceive_RXNE+0x82>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d179      	bne.n	80020c8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f001 f83d 	bl	8003054 <I2C_WaitOnSTOPRequestThroughIT>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d14c      	bne.n	800207a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ffe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b40      	cmp	r3, #64	@ 0x40
 8002038:	d10a      	bne.n	8002050 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fdc4 	bl	8001bd6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800204e:	e044      	b.n	80020da <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b08      	cmp	r3, #8
 800205c:	d002      	beq.n	8002064 <I2C_MasterReceive_RXNE+0x112>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b20      	cmp	r3, #32
 8002062:	d103      	bne.n	800206c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	631a      	str	r2, [r3, #48]	@ 0x30
 800206a:	e002      	b.n	8002072 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2212      	movs	r2, #18
 8002070:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fd9b 	bl	8001bae <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002078:	e02f      	b.n	80020da <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002088:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fbb5 	bl	8000830 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020c6:	e008      	b.n	80020da <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020d6:	605a      	str	r2, [r3, #4]
}
 80020d8:	e7ff      	b.n	80020da <I2C_MasterReceive_RXNE+0x188>
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d11b      	bne.n	8002132 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002108:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002130:	e0c4      	b.n	80022bc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b03      	cmp	r3, #3
 800213a:	d129      	bne.n	8002190 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800214a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d00a      	beq.n	8002168 <I2C_MasterReceive_BTF+0x86>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d007      	beq.n	8002168 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002166:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800218e:	e095      	b.n	80022bc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d17d      	bne.n	8002296 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d002      	beq.n	80021a6 <I2C_MasterReceive_BTF+0xc4>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d108      	bne.n	80021b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e016      	b.n	80021e6 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d002      	beq.n	80021c4 <I2C_MasterReceive_BTF+0xe2>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d108      	bne.n	80021d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002240:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d10a      	bne.n	800226c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fcb6 	bl	8001bd6 <HAL_I2C_MemRxCpltCallback>
}
 800226a:	e027      	b.n	80022bc <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b08      	cmp	r3, #8
 8002278:	d002      	beq.n	8002280 <I2C_MasterReceive_BTF+0x19e>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b20      	cmp	r3, #32
 800227e:	d103      	bne.n	8002288 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	@ 0x30
 8002286:	e002      	b.n	800228e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2212      	movs	r2, #18
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fc8d 	bl	8001bae <HAL_I2C_MasterRxCpltCallback>
}
 8002294:	e012      	b.n	80022bc <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b40      	cmp	r3, #64	@ 0x40
 80022d6:	d117      	bne.n	8002308 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80022f2:	e067      	b.n	80023c4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]
}
 8002306:	e05d      	b.n	80023c4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002310:	d133      	bne.n	800237a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b21      	cmp	r3, #33	@ 0x21
 800231c:	d109      	bne.n	8002332 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	e008      	b.n	8002344 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	b2da      	uxtb	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <I2C_Master_SB+0x92>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	2b00      	cmp	r3, #0
 800235c:	d032      	beq.n	80023c4 <I2C_Master_SB+0x100>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02d      	beq.n	80023c4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002376:	605a      	str	r2, [r3, #4]
}
 8002378:	e024      	b.n	80023c4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10e      	bne.n	80023a0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	b29b      	uxth	r3, r3
 8002388:	11db      	asrs	r3, r3, #7
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0306 	and.w	r3, r3, #6
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f063 030f 	orn	r3, r3, #15
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]
}
 800239e:	e011      	b.n	80023c4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10d      	bne.n	80023c4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	11db      	asrs	r3, r3, #7
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0306 	and.w	r3, r3, #6
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f063 030e 	orn	r3, r3, #14
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <I2C_Master_ADD10+0x26>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <I2C_Master_ADD10+0x48>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002416:	605a      	str	r2, [r3, #4]
  }
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b091      	sub	sp, #68	@ 0x44
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002432:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b22      	cmp	r3, #34	@ 0x22
 800244c:	f040 8169 	bne.w	8002722 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <I2C_Master_ADDR+0x54>
 8002458:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d10b      	bne.n	8002478 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
 8002474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002476:	e160      	b.n	800273a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <I2C_Master_ADDR+0x98>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002488:	d118      	bne.n	80024bc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80024ba:	e13e      	b.n	800273a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024da:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e115      	b.n	800271a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	f040 808a 	bne.w	800260e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80024fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002500:	d137      	bne.n	8002572 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002510:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002520:	d113      	bne.n	800254a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002530:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	e0e7      	b.n	800271a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e0d3      	b.n	800271a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	2b08      	cmp	r3, #8
 8002576:	d02e      	beq.n	80025d6 <I2C_Master_ADDR+0x1b2>
 8002578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257a:	2b20      	cmp	r3, #32
 800257c:	d02b      	beq.n	80025d6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800257e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002580:	2b12      	cmp	r3, #18
 8002582:	d102      	bne.n	800258a <I2C_Master_ADDR+0x166>
 8002584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002586:	2b01      	cmp	r3, #1
 8002588:	d125      	bne.n	80025d6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258c:	2b04      	cmp	r3, #4
 800258e:	d00e      	beq.n	80025ae <I2C_Master_ADDR+0x18a>
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	2b02      	cmp	r3, #2
 8002594:	d00b      	beq.n	80025ae <I2C_Master_ADDR+0x18a>
 8002596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002598:	2b10      	cmp	r3, #16
 800259a:	d008      	beq.n	80025ae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	e0a1      	b.n	800271a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e085      	b.n	800271a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d14d      	bne.n	80026b4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	2b04      	cmp	r3, #4
 800261c:	d016      	beq.n	800264c <I2C_Master_ADDR+0x228>
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	2b02      	cmp	r3, #2
 8002622:	d013      	beq.n	800264c <I2C_Master_ADDR+0x228>
 8002624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002626:	2b10      	cmp	r3, #16
 8002628:	d010      	beq.n	800264c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002638:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e007      	b.n	800265c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800265a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800266a:	d117      	bne.n	800269c <I2C_Master_ADDR+0x278>
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002672:	d00b      	beq.n	800268c <I2C_Master_ADDR+0x268>
 8002674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002676:	2b01      	cmp	r3, #1
 8002678:	d008      	beq.n	800268c <I2C_Master_ADDR+0x268>
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267c:	2b08      	cmp	r3, #8
 800267e:	d005      	beq.n	800268c <I2C_Master_ADDR+0x268>
 8002680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002682:	2b10      	cmp	r3, #16
 8002684:	d002      	beq.n	800268c <I2C_Master_ADDR+0x268>
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	2b20      	cmp	r3, #32
 800268a:	d107      	bne.n	800269c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800269a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	e032      	b.n	800271a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026c2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026d2:	d117      	bne.n	8002704 <I2C_Master_ADDR+0x2e0>
 80026d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026da:	d00b      	beq.n	80026f4 <I2C_Master_ADDR+0x2d0>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d008      	beq.n	80026f4 <I2C_Master_ADDR+0x2d0>
 80026e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d005      	beq.n	80026f4 <I2C_Master_ADDR+0x2d0>
 80026e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d002      	beq.n	80026f4 <I2C_Master_ADDR+0x2d0>
 80026ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d107      	bne.n	8002704 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002702:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002720:	e00b      	b.n	800273a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	e7ff      	b.n	800273a <I2C_Master_ADDR+0x316>
 800273a:	bf00      	nop
 800273c:	3744      	adds	r7, #68	@ 0x44
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02b      	beq.n	80027b8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d114      	bne.n	80027b8 <I2C_SlaveTransmit_TXE+0x72>
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b29      	cmp	r3, #41	@ 0x29
 8002792:	d111      	bne.n	80027b8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2221      	movs	r2, #33	@ 0x21
 80027a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2228      	movs	r2, #40	@ 0x28
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe f816 	bl	80007e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d011      	beq.n	80027f6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002810:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02c      	beq.n	8002876 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d114      	bne.n	8002876 <I2C_SlaveReceive_RXNE+0x74>
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002850:	d111      	bne.n	8002876 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002860:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2222      	movs	r2, #34	@ 0x22
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2228      	movs	r2, #40	@ 0x28
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fd ffcf 	bl	8000814 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028dc:	2b28      	cmp	r3, #40	@ 0x28
 80028de:	d127      	bne.n	8002930 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ee:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	09db      	lsrs	r3, r3, #7
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	81bb      	strh	r3, [r7, #12]
 8002912:	e002      	b.n	800291a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002922:	89ba      	ldrh	r2, [r7, #12]
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fd ff91 	bl	8000850 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800292e:	e00e      	b.n	800294e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002966:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002976:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029b4:	d172      	bne.n	8002a9c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b22      	cmp	r3, #34	@ 0x22
 80029ba:	d002      	beq.n	80029c2 <I2C_Slave_STOPF+0x6a>
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b2a      	cmp	r3, #42	@ 0x2a
 80029c0:	d135      	bne.n	8002a2e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fa69 	bl	8000ed2 <HAL_DMA_GetState>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d049      	beq.n	8002a9a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	4a69      	ldr	r2, [pc, #420]	@ (8002bb0 <I2C_Slave_STOPF+0x258>)
 8002a0c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fa3b 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03d      	beq.n	8002a9a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a2c:	e035      	b.n	8002a9a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fa33 	bl	8000ed2 <HAL_DMA_GetState>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d014      	beq.n	8002a9c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a76:	4a4e      	ldr	r2, [pc, #312]	@ (8002bb0 <I2C_Slave_STOPF+0x258>)
 8002a78:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fa05 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a94:	4610      	mov	r0, r2
 8002a96:	4798      	blx	r3
 8002a98:	e000      	b.n	8002a9c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a9a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d03e      	beq.n	8002b24 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d112      	bne.n	8002ada <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae4:	2b40      	cmp	r3, #64	@ 0x40
 8002ae6:	d112      	bne.n	8002b0e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8b7 	bl	8002ca0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b32:	e039      	b.n	8002ba8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b38:	d109      	bne.n	8002b4e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2228      	movs	r2, #40	@ 0x28
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fd fe63 	bl	8000814 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b28      	cmp	r3, #40	@ 0x28
 8002b58:	d111      	bne.n	8002b7e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <I2C_Slave_STOPF+0x25c>)
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd fe28 	bl	80007cc <HAL_I2C_ListenCpltCallback>
}
 8002b7c:	e014      	b.n	8002ba8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	2b22      	cmp	r3, #34	@ 0x22
 8002b84:	d002      	beq.n	8002b8c <I2C_Slave_STOPF+0x234>
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b22      	cmp	r3, #34	@ 0x22
 8002b8a:	d10d      	bne.n	8002ba8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fe36 	bl	8000814 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	08002f05 	.word	0x08002f05
 8002bb4:	ffff0000 	.word	0xffff0000

08002bb8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bcc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d002      	beq.n	8002bda <I2C_Slave_AF+0x22>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d129      	bne.n	8002c2e <I2C_Slave_AF+0x76>
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b28      	cmp	r3, #40	@ 0x28
 8002bde:	d126      	bne.n	8002c2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <I2C_Slave_AF+0xe4>)
 8002be4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002bf4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bfe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd fdd0 	bl	80007cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c2c:	e031      	b.n	8002c92 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b21      	cmp	r3, #33	@ 0x21
 8002c32:	d129      	bne.n	8002c88 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a19      	ldr	r2, [pc, #100]	@ (8002c9c <I2C_Slave_AF+0xe4>)
 8002c38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2221      	movs	r2, #33	@ 0x21
 8002c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c78:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fc44 	bl	8001508 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fd fdaf 	bl	80007e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c86:	e004      	b.n	8002c92 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c90:	615a      	str	r2, [r3, #20]
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	ffff0000 	.word	0xffff0000

08002ca0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cb8:	7bbb      	ldrb	r3, [r7, #14]
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d002      	beq.n	8002cc4 <I2C_ITError+0x24>
 8002cbe:	7bbb      	ldrb	r3, [r7, #14]
 8002cc0:	2b40      	cmp	r3, #64	@ 0x40
 8002cc2:	d10a      	bne.n	8002cda <I2C_ITError+0x3a>
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b22      	cmp	r3, #34	@ 0x22
 8002cc8:	d107      	bne.n	8002cda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ce0:	2b28      	cmp	r3, #40	@ 0x28
 8002ce2:	d107      	bne.n	8002cf4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2228      	movs	r2, #40	@ 0x28
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002cf2:	e015      	b.n	8002d20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d02:	d00a      	beq.n	8002d1a <I2C_ITError+0x7a>
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b60      	cmp	r3, #96	@ 0x60
 8002d08:	d007      	beq.n	8002d1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d2e:	d162      	bne.n	8002df6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d020      	beq.n	8002d90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	4a6a      	ldr	r2, [pc, #424]	@ (8002efc <I2C_ITError+0x25c>)
 8002d54:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f897 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8089 	beq.w	8002e7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4798      	blx	r3
 8002d8e:	e074      	b.n	8002e7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	4a59      	ldr	r2, [pc, #356]	@ (8002efc <I2C_ITError+0x25c>)
 8002d96:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe f876 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d068      	beq.n	8002e7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db2:	2b40      	cmp	r3, #64	@ 0x40
 8002db4:	d10b      	bne.n	8002dce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002df0:	4610      	mov	r0, r2
 8002df2:	4798      	blx	r3
 8002df4:	e041      	b.n	8002e7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b60      	cmp	r3, #96	@ 0x60
 8002e00:	d125      	bne.n	8002e4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1a:	2b40      	cmp	r3, #64	@ 0x40
 8002e1c:	d10b      	bne.n	8002e36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fecf 	bl	8001bea <HAL_I2C_AbortCpltCallback>
 8002e4c:	e015      	b.n	8002e7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e58:	2b40      	cmp	r3, #64	@ 0x40
 8002e5a:	d10b      	bne.n	8002e74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fd fcdb 	bl	8000830 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10e      	bne.n	8002ea8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d113      	bne.n	8002ef4 <I2C_ITError+0x254>
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b28      	cmp	r3, #40	@ 0x28
 8002ed0:	d110      	bne.n	8002ef4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <I2C_ITError+0x260>)
 8002ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fc6c 	bl	80007cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	ffff0000 	.word	0xffff0000

08002f04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800304c <I2C_DMAAbort+0x148>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	08db      	lsrs	r3, r3, #3
 8002f24:	4a4a      	ldr	r2, [pc, #296]	@ (8003050 <I2C_DMAAbort+0x14c>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a1a      	lsrs	r2, r3, #8
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00da      	lsls	r2, r3, #3
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002f4a:	e00a      	b.n	8002f62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f60:	d0ea      	beq.n	8002f38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	2200      	movs	r2, #0
 8002f70:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	2200      	movs	r2, #0
 8002f80:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b60      	cmp	r3, #96	@ 0x60
 8002fd2:	d10e      	bne.n	8002ff2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7fe fdfd 	bl	8001bea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ff0:	e027      	b.n	8003042 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ff8:	2b28      	cmp	r3, #40	@ 0x28
 8002ffa:	d117      	bne.n	800302c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800301a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2228      	movs	r2, #40	@ 0x28
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800302a:	e007      	b.n	800303c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f7fd fbf7 	bl	8000830 <HAL_I2C_ErrorCallback>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000
 8003050:	14f8b589 	.word	0x14f8b589

08003054 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	08db      	lsrs	r3, r3, #3
 8003066:	4a13      	ldr	r2, [pc, #76]	@ (80030b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	0a1a      	lsrs	r2, r3, #8
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3b01      	subs	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e008      	b.n	80030a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a0:	d0e9      	beq.n	8003076 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	20000000 	.word	0x20000000
 80030b4:	14f8b589 	.word	0x14f8b589

080030b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80030c8:	d103      	bne.n	80030d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80030d0:	e007      	b.n	80030e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80030da:	d102      	bne.n	80030e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2208      	movs	r2, #8
 80030e0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0cc      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b68      	ldr	r3, [pc, #416]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d90c      	bls.n	800312c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b65      	ldr	r3, [pc, #404]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e067      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b37      	ldr	r3, [pc, #220]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4934      	ldr	r1, [pc, #208]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fd fd38 	bl	8000c54 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fd fd34 	bl	8000c54 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b25      	ldr	r3, [pc, #148]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20c      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f855 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fc98 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	080042b8 	.word	0x080042b8
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000000 	.word	0x20000000

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d8:	f7ff fff0 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	080042c8 	.word	0x080042c8

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff ffdc 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	080042c8 	.word	0x080042c8

08003324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003328:	b0ae      	sub	sp, #184	@ 0xb8
 800332a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800334a:	4bcb      	ldr	r3, [pc, #812]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b0c      	cmp	r3, #12
 8003354:	f200 8206 	bhi.w	8003764 <HAL_RCC_GetSysClockFreq+0x440>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <HAL_RCC_GetSysClockFreq+0x3c>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003395 	.word	0x08003395
 8003364:	08003765 	.word	0x08003765
 8003368:	08003765 	.word	0x08003765
 800336c:	08003765 	.word	0x08003765
 8003370:	0800339d 	.word	0x0800339d
 8003374:	08003765 	.word	0x08003765
 8003378:	08003765 	.word	0x08003765
 800337c:	08003765 	.word	0x08003765
 8003380:	080033a5 	.word	0x080033a5
 8003384:	08003765 	.word	0x08003765
 8003388:	08003765 	.word	0x08003765
 800338c:	08003765 	.word	0x08003765
 8003390:	08003595 	.word	0x08003595
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4bb9      	ldr	r3, [pc, #740]	@ (800367c <HAL_RCC_GetSysClockFreq+0x358>)
 8003396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800339a:	e1e7      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339c:	4bb8      	ldr	r3, [pc, #736]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x35c>)
 800339e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033a2:	e1e3      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a4:	4bb4      	ldr	r3, [pc, #720]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b0:	4bb1      	ldr	r3, [pc, #708]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d071      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033bc:	4bae      	ldr	r3, [pc, #696]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033e2:	4622      	mov	r2, r4
 80033e4:	462b      	mov	r3, r5
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	0159      	lsls	r1, r3, #5
 80033f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f4:	0150      	lsls	r0, r2, #5
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4621      	mov	r1, r4
 80033fc:	1a51      	subs	r1, r2, r1
 80033fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8003400:	4629      	mov	r1, r5
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	647b      	str	r3, [r7, #68]	@ 0x44
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003414:	4649      	mov	r1, r9
 8003416:	018b      	lsls	r3, r1, #6
 8003418:	4641      	mov	r1, r8
 800341a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800341e:	4641      	mov	r1, r8
 8003420:	018a      	lsls	r2, r1, #6
 8003422:	4641      	mov	r1, r8
 8003424:	1a51      	subs	r1, r2, r1
 8003426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003428:	4649      	mov	r1, r9
 800342a:	eb63 0301 	sbc.w	r3, r3, r1
 800342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800343c:	4649      	mov	r1, r9
 800343e:	00cb      	lsls	r3, r1, #3
 8003440:	4641      	mov	r1, r8
 8003442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003446:	4641      	mov	r1, r8
 8003448:	00ca      	lsls	r2, r1, #3
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	4603      	mov	r3, r0
 8003450:	4622      	mov	r2, r4
 8003452:	189b      	adds	r3, r3, r2
 8003454:	633b      	str	r3, [r7, #48]	@ 0x30
 8003456:	462b      	mov	r3, r5
 8003458:	460a      	mov	r2, r1
 800345a:	eb42 0303 	adc.w	r3, r2, r3
 800345e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800346c:	4629      	mov	r1, r5
 800346e:	024b      	lsls	r3, r1, #9
 8003470:	4621      	mov	r1, r4
 8003472:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003476:	4621      	mov	r1, r4
 8003478:	024a      	lsls	r2, r1, #9
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003488:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800348c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003490:	f7fc feb8 	bl	8000204 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4613      	mov	r3, r2
 800349a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800349e:	e067      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a0:	4b75      	ldr	r3, [pc, #468]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034ba:	2300      	movs	r3, #0
 80034bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034c2:	4622      	mov	r2, r4
 80034c4:	462b      	mov	r3, r5
 80034c6:	f04f 0000 	mov.w	r0, #0
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	0159      	lsls	r1, r3, #5
 80034d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d4:	0150      	lsls	r0, r2, #5
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4621      	mov	r1, r4
 80034dc:	1a51      	subs	r1, r2, r1
 80034de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034e0:	4629      	mov	r1, r5
 80034e2:	eb63 0301 	sbc.w	r3, r3, r1
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80034f4:	4649      	mov	r1, r9
 80034f6:	018b      	lsls	r3, r1, #6
 80034f8:	4641      	mov	r1, r8
 80034fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034fe:	4641      	mov	r1, r8
 8003500:	018a      	lsls	r2, r1, #6
 8003502:	4641      	mov	r1, r8
 8003504:	ebb2 0a01 	subs.w	sl, r2, r1
 8003508:	4649      	mov	r1, r9
 800350a:	eb63 0b01 	sbc.w	fp, r3, r1
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800351a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800351e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003522:	4692      	mov	sl, r2
 8003524:	469b      	mov	fp, r3
 8003526:	4623      	mov	r3, r4
 8003528:	eb1a 0303 	adds.w	r3, sl, r3
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	462b      	mov	r3, r5
 8003530:	eb4b 0303 	adc.w	r3, fp, r3
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003542:	4629      	mov	r1, r5
 8003544:	028b      	lsls	r3, r1, #10
 8003546:	4621      	mov	r1, r4
 8003548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800354c:	4621      	mov	r1, r4
 800354e:	028a      	lsls	r2, r1, #10
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003558:	2200      	movs	r2, #0
 800355a:	673b      	str	r3, [r7, #112]	@ 0x70
 800355c:	677a      	str	r2, [r7, #116]	@ 0x74
 800355e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003562:	f7fc fe4f 	bl	8000204 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4613      	mov	r3, r2
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003570:	4b41      	ldr	r3, [pc, #260]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	3301      	adds	r3, #1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003592:	e0eb      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003594:	4b38      	ldr	r3, [pc, #224]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800359c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a0:	4b35      	ldr	r3, [pc, #212]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d06b      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ac:	4b32      	ldr	r3, [pc, #200]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	2200      	movs	r2, #0
 80035b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035be:	663b      	str	r3, [r7, #96]	@ 0x60
 80035c0:	2300      	movs	r3, #0
 80035c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035c8:	4622      	mov	r2, r4
 80035ca:	462b      	mov	r3, r5
 80035cc:	f04f 0000 	mov.w	r0, #0
 80035d0:	f04f 0100 	mov.w	r1, #0
 80035d4:	0159      	lsls	r1, r3, #5
 80035d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035da:	0150      	lsls	r0, r2, #5
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4621      	mov	r1, r4
 80035e2:	1a51      	subs	r1, r2, r1
 80035e4:	61b9      	str	r1, [r7, #24]
 80035e6:	4629      	mov	r1, r5
 80035e8:	eb63 0301 	sbc.w	r3, r3, r1
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035fa:	4659      	mov	r1, fp
 80035fc:	018b      	lsls	r3, r1, #6
 80035fe:	4651      	mov	r1, sl
 8003600:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003604:	4651      	mov	r1, sl
 8003606:	018a      	lsls	r2, r1, #6
 8003608:	4651      	mov	r1, sl
 800360a:	ebb2 0801 	subs.w	r8, r2, r1
 800360e:	4659      	mov	r1, fp
 8003610:	eb63 0901 	sbc.w	r9, r3, r1
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003620:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003624:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003628:	4690      	mov	r8, r2
 800362a:	4699      	mov	r9, r3
 800362c:	4623      	mov	r3, r4
 800362e:	eb18 0303 	adds.w	r3, r8, r3
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	462b      	mov	r3, r5
 8003636:	eb49 0303 	adc.w	r3, r9, r3
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003648:	4629      	mov	r1, r5
 800364a:	024b      	lsls	r3, r1, #9
 800364c:	4621      	mov	r1, r4
 800364e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003652:	4621      	mov	r1, r4
 8003654:	024a      	lsls	r2, r1, #9
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800365e:	2200      	movs	r2, #0
 8003660:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003662:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003664:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003668:	f7fc fdcc 	bl	8000204 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4613      	mov	r3, r2
 8003672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003676:	e065      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x420>
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003684:	4b3d      	ldr	r3, [pc, #244]	@ (800377c <HAL_RCC_GetSysClockFreq+0x458>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	2200      	movs	r2, #0
 800368c:	4618      	mov	r0, r3
 800368e:	4611      	mov	r1, r2
 8003690:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003694:	653b      	str	r3, [r7, #80]	@ 0x50
 8003696:	2300      	movs	r3, #0
 8003698:	657b      	str	r3, [r7, #84]	@ 0x54
 800369a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800369e:	4642      	mov	r2, r8
 80036a0:	464b      	mov	r3, r9
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	0159      	lsls	r1, r3, #5
 80036ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b0:	0150      	lsls	r0, r2, #5
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4641      	mov	r1, r8
 80036b8:	1a51      	subs	r1, r2, r1
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	4649      	mov	r1, r9
 80036be:	eb63 0301 	sbc.w	r3, r3, r1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036d0:	4659      	mov	r1, fp
 80036d2:	018b      	lsls	r3, r1, #6
 80036d4:	4651      	mov	r1, sl
 80036d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036da:	4651      	mov	r1, sl
 80036dc:	018a      	lsls	r2, r1, #6
 80036de:	4651      	mov	r1, sl
 80036e0:	1a54      	subs	r4, r2, r1
 80036e2:	4659      	mov	r1, fp
 80036e4:	eb63 0501 	sbc.w	r5, r3, r1
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	00eb      	lsls	r3, r5, #3
 80036f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	4614      	mov	r4, r2
 80036fa:	461d      	mov	r5, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	18e3      	adds	r3, r4, r3
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	464b      	mov	r3, r9
 8003704:	eb45 0303 	adc.w	r3, r5, r3
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003716:	4629      	mov	r1, r5
 8003718:	028b      	lsls	r3, r1, #10
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003720:	4621      	mov	r1, r4
 8003722:	028a      	lsls	r2, r1, #10
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800372c:	2200      	movs	r2, #0
 800372e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003730:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003732:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003736:	f7fc fd65 	bl	8000204 <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4613      	mov	r3, r2
 8003740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003744:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_RCC_GetSysClockFreq+0x458>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0f1b      	lsrs	r3, r3, #28
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003762:	e003      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800376a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003770:	4618      	mov	r0, r3
 8003772:	37b8      	adds	r7, #184	@ 0xb8
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	00f42400 	.word	0x00f42400

08003784 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e28d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8083 	beq.w	80038aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037a4:	4b94      	ldr	r3, [pc, #592]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d019      	beq.n	80037e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037b0:	4b91      	ldr	r3, [pc, #580]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037bc:	4b8e      	ldr	r3, [pc, #568]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037c8:	d00c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4b8b      	ldr	r3, [pc, #556]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d112      	bne.n	80037fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d6:	4b88      	ldr	r3, [pc, #544]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037e2:	d10b      	bne.n	80037fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	4b84      	ldr	r3, [pc, #528]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05b      	beq.n	80038a8 <HAL_RCC_OscConfig+0x124>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d157      	bne.n	80038a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e25a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x90>
 8003806:	4b7c      	ldr	r3, [pc, #496]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7b      	ldr	r2, [pc, #492]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e01d      	b.n	8003850 <HAL_RCC_OscConfig+0xcc>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0xb4>
 800381e:	4b76      	ldr	r3, [pc, #472]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b73      	ldr	r3, [pc, #460]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a72      	ldr	r2, [pc, #456]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0xcc>
 8003838:	4b6f      	ldr	r3, [pc, #444]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6e      	ldr	r2, [pc, #440]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800383e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b6c      	ldr	r3, [pc, #432]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a6b      	ldr	r2, [pc, #428]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800384e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd f9fc 	bl	8000c54 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fd f9f8 	bl	8000c54 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	@ 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e21f      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0xdc>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fd f9e8 	bl	8000c54 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fd f9e4 	bl	8000c54 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	@ 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e20b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	4b57      	ldr	r3, [pc, #348]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x104>
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d06f      	beq.n	8003996 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038b6:	4b50      	ldr	r3, [pc, #320]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d017      	beq.n	80038f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038c2:	4b4d      	ldr	r3, [pc, #308]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d105      	bne.n	80038da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038ce:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d11c      	bne.n	8003920 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b44      	ldr	r3, [pc, #272]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x186>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e1d3      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4937      	ldr	r1, [pc, #220]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	e03a      	b.n	8003996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003928:	4b34      	ldr	r3, [pc, #208]	@ (80039fc <HAL_RCC_OscConfig+0x278>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fd f991 	bl	8000c54 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7fd f98d 	bl	8000c54 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1b4      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	4b2b      	ldr	r3, [pc, #172]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4925      	ldr	r1, [pc, #148]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	e015      	b.n	8003996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_RCC_OscConfig+0x278>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd f970 	bl	8000c54 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003978:	f7fd f96c 	bl	8000c54 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e193      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d036      	beq.n	8003a10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fd f950 	bl	8000c54 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b8:	f7fd f94c 	bl	8000c54 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e173      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_OscConfig+0x274>)
 80039cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x234>
 80039d6:	e01b      	b.n	8003a10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d8:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_RCC_OscConfig+0x27c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fd f939 	bl	8000c54 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e4:	e00e      	b.n	8003a04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fd f935 	bl	8000c54 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d907      	bls.n	8003a04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e15c      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	42470000 	.word	0x42470000
 8003a00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	4b8a      	ldr	r3, [pc, #552]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ea      	bne.n	80039e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8097 	beq.w	8003b4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a22:	4b83      	ldr	r3, [pc, #524]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b7f      	ldr	r3, [pc, #508]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	4a7e      	ldr	r2, [pc, #504]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b79      	ldr	r3, [pc, #484]	@ (8003c34 <HAL_RCC_OscConfig+0x4b0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d118      	bne.n	8003a8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5a:	4b76      	ldr	r3, [pc, #472]	@ (8003c34 <HAL_RCC_OscConfig+0x4b0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a75      	ldr	r2, [pc, #468]	@ (8003c34 <HAL_RCC_OscConfig+0x4b0>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a66:	f7fd f8f5 	bl	8000c54 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6e:	f7fd f8f1 	bl	8000c54 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e118      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	4b6c      	ldr	r3, [pc, #432]	@ (8003c34 <HAL_RCC_OscConfig+0x4b0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x31e>
 8003a94:	4b66      	ldr	r3, [pc, #408]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a98:	4a65      	ldr	r2, [pc, #404]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa0:	e01c      	b.n	8003adc <HAL_RCC_OscConfig+0x358>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x340>
 8003aaa:	4b61      	ldr	r3, [pc, #388]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	4a60      	ldr	r2, [pc, #384]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	4a5d      	ldr	r2, [pc, #372]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0x358>
 8003ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	4a59      	ldr	r2, [pc, #356]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad0:	4b57      	ldr	r3, [pc, #348]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	4a56      	ldr	r2, [pc, #344]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003ad6:	f023 0304 	bic.w	r3, r3, #4
 8003ada:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fd f8b6 	bl	8000c54 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fd f8b2 	bl	8000c54 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0d7      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b02:	4b4b      	ldr	r3, [pc, #300]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ee      	beq.n	8003aec <HAL_RCC_OscConfig+0x368>
 8003b0e:	e014      	b.n	8003b3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd f8a0 	bl	8000c54 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fd f89c 	bl	8000c54 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0c1      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2e:	4b40      	ldr	r3, [pc, #256]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ee      	bne.n	8003b18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	4a3a      	ldr	r2, [pc, #232]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80ad 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b56:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d060      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d145      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b33      	ldr	r3, [pc, #204]	@ (8003c38 <HAL_RCC_OscConfig+0x4b4>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd f870 	bl	8000c54 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fd f86c 	bl	8000c54 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e093      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	4b29      	ldr	r3, [pc, #164]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	071b      	lsls	r3, r3, #28
 8003bc2:	491b      	ldr	r1, [pc, #108]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <HAL_RCC_OscConfig+0x4b4>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd f841 	bl	8000c54 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fd f83d 	bl	8000c54 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e064      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be8:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x452>
 8003bf4:	e05c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b10      	ldr	r3, [pc, #64]	@ (8003c38 <HAL_RCC_OscConfig+0x4b4>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd f82a 	bl	8000c54 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fd f826 	bl	8000c54 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e04d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x480>
 8003c22:	e045      	b.n	8003cb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e040      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40007000 	.word	0x40007000
 8003c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cbc <HAL_RCC_OscConfig+0x538>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d030      	beq.n	8003cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d129      	bne.n	8003cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d122      	bne.n	8003cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d119      	bne.n	8003cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	3b01      	subs	r3, #1
 8003c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d10f      	bne.n	8003cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800

08003cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e042      	b.n	8003d58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fc fe86 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	@ 0x24
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f82b 	bl	8003d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b0c0      	sub	sp, #256	@ 0x100
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	68d9      	ldr	r1, [r3, #12]
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	ea40 0301 	orr.w	r3, r0, r1
 8003d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003db8:	f021 010c 	bic.w	r1, r1, #12
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	6999      	ldr	r1, [r3, #24]
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	ea40 0301 	orr.w	r3, r0, r1
 8003de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b8f      	ldr	r3, [pc, #572]	@ (800402c <UART_SetConfig+0x2cc>)
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d005      	beq.n	8003e00 <UART_SetConfig+0xa0>
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8004030 <UART_SetConfig+0x2d0>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d104      	bne.n	8003e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7ff fa7c 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8003e04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e08:	e003      	b.n	8003e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e0a:	f7ff fa63 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 8003e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e1c:	f040 810c 	bne.w	8004038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e32:	4622      	mov	r2, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	1891      	adds	r1, r2, r2
 8003e38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e3a:	415b      	adcs	r3, r3
 8003e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e42:	4621      	mov	r1, r4
 8003e44:	eb12 0801 	adds.w	r8, r2, r1
 8003e48:	4629      	mov	r1, r5
 8003e4a:	eb43 0901 	adc.w	r9, r3, r1
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e62:	4690      	mov	r8, r2
 8003e64:	4699      	mov	r9, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	eb18 0303 	adds.w	r3, r8, r3
 8003e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e70:	462b      	mov	r3, r5
 8003e72:	eb49 0303 	adc.w	r3, r9, r3
 8003e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e8e:	460b      	mov	r3, r1
 8003e90:	18db      	adds	r3, r3, r3
 8003e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e94:	4613      	mov	r3, r2
 8003e96:	eb42 0303 	adc.w	r3, r2, r3
 8003e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ea4:	f7fc f9ae 	bl	8000204 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4b61      	ldr	r3, [pc, #388]	@ (8004034 <UART_SetConfig+0x2d4>)
 8003eae:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	011c      	lsls	r4, r3, #4
 8003eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ed8:	4641      	mov	r1, r8
 8003eda:	eb12 0a01 	adds.w	sl, r2, r1
 8003ede:	4649      	mov	r1, r9
 8003ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef8:	4692      	mov	sl, r2
 8003efa:	469b      	mov	fp, r3
 8003efc:	4643      	mov	r3, r8
 8003efe:	eb1a 0303 	adds.w	r3, sl, r3
 8003f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f06:	464b      	mov	r3, r9
 8003f08:	eb4b 0303 	adc.w	r3, fp, r3
 8003f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f24:	460b      	mov	r3, r1
 8003f26:	18db      	adds	r3, r3, r3
 8003f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f3a:	f7fc f963 	bl	8000204 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	4b3b      	ldr	r3, [pc, #236]	@ (8004034 <UART_SetConfig+0x2d4>)
 8003f46:	fba3 2301 	umull	r2, r3, r3, r1
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2264      	movs	r2, #100	@ 0x64
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	1acb      	subs	r3, r1, r3
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f5a:	4b36      	ldr	r3, [pc, #216]	@ (8004034 <UART_SetConfig+0x2d4>)
 8003f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f68:	441c      	add	r4, r3
 8003f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f84:	415b      	adcs	r3, r3
 8003f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	1851      	adds	r1, r2, r1
 8003f90:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f92:	4649      	mov	r1, r9
 8003f94:	414b      	adcs	r3, r1
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	00cb      	lsls	r3, r1, #3
 8003fa8:	4651      	mov	r1, sl
 8003faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fae:	4651      	mov	r1, sl
 8003fb0:	00ca      	lsls	r2, r1, #3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4642      	mov	r2, r8
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fc0:	464b      	mov	r3, r9
 8003fc2:	460a      	mov	r2, r1
 8003fc4:	eb42 0303 	adc.w	r3, r2, r3
 8003fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	18db      	adds	r3, r3, r3
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	eb42 0303 	adc.w	r3, r2, r3
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ff6:	f7fc f905 	bl	8000204 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <UART_SetConfig+0x2d4>)
 8004000:	fba3 1302 	umull	r1, r3, r3, r2
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	2164      	movs	r1, #100	@ 0x64
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	3332      	adds	r3, #50	@ 0x32
 8004012:	4a08      	ldr	r2, [pc, #32]	@ (8004034 <UART_SetConfig+0x2d4>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	f003 0207 	and.w	r2, r3, #7
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4422      	add	r2, r4
 8004026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004028:	e106      	b.n	8004238 <UART_SetConfig+0x4d8>
 800402a:	bf00      	nop
 800402c:	40011000 	.word	0x40011000
 8004030:	40011400 	.word	0x40011400
 8004034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800403c:	2200      	movs	r2, #0
 800403e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004042:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800404a:	4642      	mov	r2, r8
 800404c:	464b      	mov	r3, r9
 800404e:	1891      	adds	r1, r2, r2
 8004050:	6239      	str	r1, [r7, #32]
 8004052:	415b      	adcs	r3, r3
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
 8004056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800405a:	4641      	mov	r1, r8
 800405c:	1854      	adds	r4, r2, r1
 800405e:	4649      	mov	r1, r9
 8004060:	eb43 0501 	adc.w	r5, r3, r1
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	00eb      	lsls	r3, r5, #3
 800406e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004072:	00e2      	lsls	r2, r4, #3
 8004074:	4614      	mov	r4, r2
 8004076:	461d      	mov	r5, r3
 8004078:	4643      	mov	r3, r8
 800407a:	18e3      	adds	r3, r4, r3
 800407c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004080:	464b      	mov	r3, r9
 8004082:	eb45 0303 	adc.w	r3, r5, r3
 8004086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040a6:	4629      	mov	r1, r5
 80040a8:	008b      	lsls	r3, r1, #2
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b0:	4621      	mov	r1, r4
 80040b2:	008a      	lsls	r2, r1, #2
 80040b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040b8:	f7fc f8a4 	bl	8000204 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4b60      	ldr	r3, [pc, #384]	@ (8004244 <UART_SetConfig+0x4e4>)
 80040c2:	fba3 2302 	umull	r2, r3, r3, r2
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	011c      	lsls	r4, r3, #4
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	61b9      	str	r1, [r7, #24]
 80040e4:	415b      	adcs	r3, r3
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6139      	str	r1, [r7, #16]
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004120:	464b      	mov	r3, r9
 8004122:	460a      	mov	r2, r1
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004136:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004144:	4649      	mov	r1, r9
 8004146:	008b      	lsls	r3, r1, #2
 8004148:	4641      	mov	r1, r8
 800414a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414e:	4641      	mov	r1, r8
 8004150:	008a      	lsls	r2, r1, #2
 8004152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004156:	f7fc f855 	bl	8000204 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4611      	mov	r1, r2
 8004160:	4b38      	ldr	r3, [pc, #224]	@ (8004244 <UART_SetConfig+0x4e4>)
 8004162:	fba3 2301 	umull	r2, r3, r3, r1
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2264      	movs	r2, #100	@ 0x64
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	1acb      	subs	r3, r1, r3
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	3332      	adds	r3, #50	@ 0x32
 8004174:	4a33      	ldr	r2, [pc, #204]	@ (8004244 <UART_SetConfig+0x4e4>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004180:	441c      	add	r4, r3
 8004182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004186:	2200      	movs	r2, #0
 8004188:	673b      	str	r3, [r7, #112]	@ 0x70
 800418a:	677a      	str	r2, [r7, #116]	@ 0x74
 800418c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	1891      	adds	r1, r2, r2
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	415b      	adcs	r3, r3
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a0:	4641      	mov	r1, r8
 80041a2:	1851      	adds	r1, r2, r1
 80041a4:	6039      	str	r1, [r7, #0]
 80041a6:	4649      	mov	r1, r9
 80041a8:	414b      	adcs	r3, r1
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041b8:	4659      	mov	r1, fp
 80041ba:	00cb      	lsls	r3, r1, #3
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c2:	4651      	mov	r1, sl
 80041c4:	00ca      	lsls	r2, r1, #3
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	4642      	mov	r2, r8
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041d2:	464b      	mov	r3, r9
 80041d4:	460a      	mov	r2, r1
 80041d6:	eb42 0303 	adc.w	r3, r2, r3
 80041da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80041e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041f4:	4649      	mov	r1, r9
 80041f6:	008b      	lsls	r3, r1, #2
 80041f8:	4641      	mov	r1, r8
 80041fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041fe:	4641      	mov	r1, r8
 8004200:	008a      	lsls	r2, r1, #2
 8004202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004206:	f7fb fffd 	bl	8000204 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <UART_SetConfig+0x4e4>)
 8004210:	fba3 1302 	umull	r1, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	2164      	movs	r1, #100	@ 0x64
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	3332      	adds	r3, #50	@ 0x32
 8004222:	4a08      	ldr	r2, [pc, #32]	@ (8004244 <UART_SetConfig+0x4e4>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	f003 020f 	and.w	r2, r3, #15
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4422      	add	r2, r4
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800423e:	46bd      	mov	sp, r7
 8004240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004244:	51eb851f 	.word	0x51eb851f

08004248 <memset>:
 8004248:	4402      	add	r2, r0
 800424a:	4603      	mov	r3, r0
 800424c:	4293      	cmp	r3, r2
 800424e:	d100      	bne.n	8004252 <memset+0xa>
 8004250:	4770      	bx	lr
 8004252:	f803 1b01 	strb.w	r1, [r3], #1
 8004256:	e7f9      	b.n	800424c <memset+0x4>

08004258 <__libc_init_array>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	4d0d      	ldr	r5, [pc, #52]	@ (8004290 <__libc_init_array+0x38>)
 800425c:	4c0d      	ldr	r4, [pc, #52]	@ (8004294 <__libc_init_array+0x3c>)
 800425e:	1b64      	subs	r4, r4, r5
 8004260:	10a4      	asrs	r4, r4, #2
 8004262:	2600      	movs	r6, #0
 8004264:	42a6      	cmp	r6, r4
 8004266:	d109      	bne.n	800427c <__libc_init_array+0x24>
 8004268:	4d0b      	ldr	r5, [pc, #44]	@ (8004298 <__libc_init_array+0x40>)
 800426a:	4c0c      	ldr	r4, [pc, #48]	@ (800429c <__libc_init_array+0x44>)
 800426c:	f000 f818 	bl	80042a0 <_init>
 8004270:	1b64      	subs	r4, r4, r5
 8004272:	10a4      	asrs	r4, r4, #2
 8004274:	2600      	movs	r6, #0
 8004276:	42a6      	cmp	r6, r4
 8004278:	d105      	bne.n	8004286 <__libc_init_array+0x2e>
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004280:	4798      	blx	r3
 8004282:	3601      	adds	r6, #1
 8004284:	e7ee      	b.n	8004264 <__libc_init_array+0xc>
 8004286:	f855 3b04 	ldr.w	r3, [r5], #4
 800428a:	4798      	blx	r3
 800428c:	3601      	adds	r6, #1
 800428e:	e7f2      	b.n	8004276 <__libc_init_array+0x1e>
 8004290:	080042d8 	.word	0x080042d8
 8004294:	080042d8 	.word	0x080042d8
 8004298:	080042d8 	.word	0x080042d8
 800429c:	080042dc 	.word	0x080042dc

080042a0 <_init>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr

080042ac <_fini>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr
