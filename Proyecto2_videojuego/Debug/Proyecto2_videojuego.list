
Proyecto2_videojuego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004934  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025640  08004af8  08004af8  00005af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a138  0802a138  00031ca8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802a138  0802a138  0002b138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a140  0802a140  00031ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a140  0802a140  0002b140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802a144  0802a144  0002b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00005ca8  20000000  0802a148  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20005ca8  0802fdf0  00031ca8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006070  0802fdf0  00032070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ca8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c509  00000000  00000000  00031cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002281  00000000  00000000  0003e1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000826  00000000  00000000  00040f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000355d  00000000  00000000  0004172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e94c  00000000  00000000  00044c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd31b  00000000  00000000  000535d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001208f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  00120938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00123388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20005ca8 	.word	0x20005ca8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004ae0 	.word	0x08004ae0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20005cac 	.word	0x20005cac
 8000200:	08004ae0 	.word	0x08004ae0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2101      	movs	r1, #1
 8000538:	4878      	ldr	r0, [pc, #480]	@ (800071c <LCD_Init+0x1ec>)
 800053a:	f002 fc63 	bl	8002e04 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800053e:	2201      	movs	r2, #1
 8000540:	2113      	movs	r1, #19
 8000542:	4877      	ldr	r0, [pc, #476]	@ (8000720 <LCD_Init+0x1f0>)
 8000544:	f002 fc5e 	bl	8002e04 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2102      	movs	r1, #2
 800054c:	4875      	ldr	r0, [pc, #468]	@ (8000724 <LCD_Init+0x1f4>)
 800054e:	f002 fc59 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000552:	2005      	movs	r0, #5
 8000554:	f001 fe1c 	bl	8002190 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2102      	movs	r1, #2
 800055c:	4871      	ldr	r0, [pc, #452]	@ (8000724 <LCD_Init+0x1f4>)
 800055e:	f002 fc51 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000562:	2014      	movs	r0, #20
 8000564:	f001 fe14 	bl	8002190 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2102      	movs	r1, #2
 800056c:	486d      	ldr	r0, [pc, #436]	@ (8000724 <LCD_Init+0x1f4>)
 800056e:	f002 fc49 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000572:	2096      	movs	r0, #150	@ 0x96
 8000574:	f001 fe0c 	bl	8002190 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4867      	ldr	r0, [pc, #412]	@ (800071c <LCD_Init+0x1ec>)
 800057e:	f002 fc41 	bl	8002e04 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000582:	20e9      	movs	r0, #233	@ 0xe9
 8000584:	f000 f8d0 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x20);
 8000588:	2020      	movs	r0, #32
 800058a:	f000 f973 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800058e:	2011      	movs	r0, #17
 8000590:	f000 f8ca 	bl	8000728 <LCD_CMD>
	HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	@ 0x64
 8000596:	f001 fdfb 	bl	8002190 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800059a:	20d1      	movs	r0, #209	@ 0xd1
 800059c:	f000 f8c4 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f967 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x71);
 80005a6:	2071      	movs	r0, #113	@ 0x71
 80005a8:	f000 f964 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x19);
 80005ac:	2019      	movs	r0, #25
 80005ae:	f000 f961 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 80005b2:	20d0      	movs	r0, #208	@ 0xd0
 80005b4:	f000 f8b8 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x07);
 80005b8:	2007      	movs	r0, #7
 80005ba:	f000 f95b 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f958 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x08);
 80005c4:	2008      	movs	r0, #8
 80005c6:	f000 f955 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80005ca:	2036      	movs	r0, #54	@ 0x36
 80005cc:	f000 f8ac 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80005d0:	20e8      	movs	r0, #232	@ 0xe8
 80005d2:	f000 f94f 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80005d6:	203a      	movs	r0, #58	@ 0x3a
 80005d8:	f000 f8a6 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005dc:	2005      	movs	r0, #5
 80005de:	f000 f949 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005e2:	20c1      	movs	r0, #193	@ 0xc1
 80005e4:	f000 f8a0 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x10);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f000 f943 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x10);
 80005ee:	2010      	movs	r0, #16
 80005f0:	f000 f940 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x02);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 f93d 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x02);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 f93a 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000600:	20c0      	movs	r0, #192	@ 0xc0
 8000602:	f000 f891 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f934 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x35);
 800060c:	2035      	movs	r0, #53	@ 0x35
 800060e:	f000 f931 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f92e 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f92b 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f928 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x02);
 8000624:	2002      	movs	r0, #2
 8000626:	f000 f925 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 800062a:	20c5      	movs	r0, #197	@ 0xc5
 800062c:	f000 f87c 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000630:	2004      	movs	r0, #4
 8000632:	f000 f91f 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000636:	20d2      	movs	r0, #210	@ 0xd2
 8000638:	f000 f876 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x01);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 f919 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x44);
 8000642:	2044      	movs	r0, #68	@ 0x44
 8000644:	f000 f916 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000648:	20c8      	movs	r0, #200	@ 0xc8
 800064a:	f000 f86d 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x04);
 800064e:	2004      	movs	r0, #4
 8000650:	f000 f910 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x67);
 8000654:	2067      	movs	r0, #103	@ 0x67
 8000656:	f000 f90d 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x35);
 800065a:	2035      	movs	r0, #53	@ 0x35
 800065c:	f000 f90a 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x04);
 8000660:	2004      	movs	r0, #4
 8000662:	f000 f907 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x08);
 8000666:	2008      	movs	r0, #8
 8000668:	f000 f904 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x06);
 800066c:	2006      	movs	r0, #6
 800066e:	f000 f901 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x24);
 8000672:	2024      	movs	r0, #36	@ 0x24
 8000674:	f000 f8fe 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 f8fb 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x37);
 800067e:	2037      	movs	r0, #55	@ 0x37
 8000680:	f000 f8f8 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x40);
 8000684:	2040      	movs	r0, #64	@ 0x40
 8000686:	f000 f8f5 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x03);
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f8f2 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x10);
 8000690:	2010      	movs	r0, #16
 8000692:	f000 f8ef 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x08);
 8000696:	2008      	movs	r0, #8
 8000698:	f000 f8ec 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x80);
 800069c:	2080      	movs	r0, #128	@ 0x80
 800069e:	f000 f8e9 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f8e6 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 80006a8:	202a      	movs	r0, #42	@ 0x2a
 80006aa:	f000 f83d 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f8e0 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 f8dd 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f8da 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x3F);
 80006c0:	203f      	movs	r0, #63	@ 0x3f
 80006c2:	f000 f8d7 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 80006c6:	202b      	movs	r0, #43	@ 0x2b
 80006c8:	f000 f82e 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f8d1 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 f8ce 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 f8cb 	bl	8000874 <LCD_DATA>
	LCD_DATA(0xE0);
 80006de:	20e0      	movs	r0, #224	@ 0xe0
 80006e0:	f000 f8c8 	bl	8000874 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006e4:	2029      	movs	r0, #41	@ 0x29
 80006e6:	f000 f81f 	bl	8000728 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006ea:	202c      	movs	r0, #44	@ 0x2c
 80006ec:	f000 f81c 	bl	8000728 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80006f0:	2020      	movs	r0, #32
 80006f2:	f000 f819 	bl	8000728 <LCD_CMD>
	HAL_Delay(120);
 80006f6:	2078      	movs	r0, #120	@ 0x78
 80006f8:	f001 fd4a 	bl	8002190 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80006fc:	2011      	movs	r0, #17
 80006fe:	f000 f813 	bl	8000728 <LCD_CMD>
	HAL_Delay(120);
 8000702:	2078      	movs	r0, #120	@ 0x78
 8000704:	f001 fd44 	bl	8002190 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000708:	2029      	movs	r0, #41	@ 0x29
 800070a:	f000 f80d 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2101      	movs	r1, #1
 8000712:	4802      	ldr	r0, [pc, #8]	@ (800071c <LCD_Init+0x1ec>)
 8000714:	f002 fb76 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020400 	.word	0x40020400
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800

08000728 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	484c      	ldr	r0, [pc, #304]	@ (8000868 <LCD_CMD+0x140>)
 8000738:	f002 fb64 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2102      	movs	r1, #2
 8000740:	4849      	ldr	r0, [pc, #292]	@ (8000868 <LCD_CMD+0x140>)
 8000742:	f002 fb5f 	bl	8002e04 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000756:	4844      	ldr	r0, [pc, #272]	@ (8000868 <LCD_CMD+0x140>)
 8000758:	f002 fb54 	bl	8002e04 <HAL_GPIO_WritePin>
 800075c:	e005      	b.n	800076a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	4840      	ldr	r0, [pc, #256]	@ (8000868 <LCD_CMD+0x140>)
 8000766:	f002 fb4d 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b00      	cmp	r3, #0
 8000772:	d005      	beq.n	8000780 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	483c      	ldr	r0, [pc, #240]	@ (800086c <LCD_CMD+0x144>)
 800077a:	f002 fb43 	bl	8002e04 <HAL_GPIO_WritePin>
 800077e:	e004      	b.n	800078a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	@ 0x80
 8000784:	4839      	ldr	r0, [pc, #228]	@ (800086c <LCD_CMD+0x144>)
 8000786:	f002 fb3d 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	2b00      	cmp	r3, #0
 8000792:	d006      	beq.n	80007a2 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800079a:	4833      	ldr	r0, [pc, #204]	@ (8000868 <LCD_CMD+0x140>)
 800079c:	f002 fb32 	bl	8002e04 <HAL_GPIO_WritePin>
 80007a0:	e005      	b.n	80007ae <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a8:	482f      	ldr	r0, [pc, #188]	@ (8000868 <LCD_CMD+0x140>)
 80007aa:	f002 fb2b 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	482c      	ldr	r0, [pc, #176]	@ (8000870 <LCD_CMD+0x148>)
 80007be:	f002 fb21 	bl	8002e04 <HAL_GPIO_WritePin>
 80007c2:	e004      	b.n	80007ce <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2108      	movs	r1, #8
 80007c8:	4829      	ldr	r0, [pc, #164]	@ (8000870 <LCD_CMD+0x148>)
 80007ca:	f002 fb1b 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f003 0310 	and.w	r3, r3, #16
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d005      	beq.n	80007e4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2120      	movs	r1, #32
 80007dc:	4824      	ldr	r0, [pc, #144]	@ (8000870 <LCD_CMD+0x148>)
 80007de:	f002 fb11 	bl	8002e04 <HAL_GPIO_WritePin>
 80007e2:	e004      	b.n	80007ee <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	4821      	ldr	r0, [pc, #132]	@ (8000870 <LCD_CMD+0x148>)
 80007ea:	f002 fb0b 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2110      	movs	r1, #16
 80007fc:	481c      	ldr	r0, [pc, #112]	@ (8000870 <LCD_CMD+0x148>)
 80007fe:	f002 fb01 	bl	8002e04 <HAL_GPIO_WritePin>
 8000802:	e004      	b.n	800080e <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	4819      	ldr	r0, [pc, #100]	@ (8000870 <LCD_CMD+0x148>)
 800080a:	f002 fafb 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000814:	2b00      	cmp	r3, #0
 8000816:	d006      	beq.n	8000826 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800081e:	4814      	ldr	r0, [pc, #80]	@ (8000870 <LCD_CMD+0x148>)
 8000820:	f002 faf0 	bl	8002e04 <HAL_GPIO_WritePin>
 8000824:	e005      	b.n	8000832 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800082c:	4810      	ldr	r0, [pc, #64]	@ (8000870 <LCD_CMD+0x148>)
 800082e:	f002 fae9 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da06      	bge.n	8000848 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	4809      	ldr	r0, [pc, #36]	@ (8000868 <LCD_CMD+0x140>)
 8000842:	f002 fadf 	bl	8002e04 <HAL_GPIO_WritePin>
 8000846:	e005      	b.n	8000854 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <LCD_CMD+0x140>)
 8000850:	f002 fad8 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2102      	movs	r1, #2
 8000858:	4803      	ldr	r0, [pc, #12]	@ (8000868 <LCD_CMD+0x140>)
 800085a:	f002 fad3 	bl	8002e04 <HAL_GPIO_WritePin>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800
 8000870:	40020400 	.word	0x40020400

08000874 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2110      	movs	r1, #16
 8000882:	484c      	ldr	r0, [pc, #304]	@ (80009b4 <LCD_DATA+0x140>)
 8000884:	f002 fabe 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2102      	movs	r1, #2
 800088c:	4849      	ldr	r0, [pc, #292]	@ (80009b4 <LCD_DATA+0x140>)
 800088e:	f002 fab9 	bl	8002e04 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b00      	cmp	r3, #0
 800089a:	d006      	beq.n	80008aa <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a2:	4844      	ldr	r0, [pc, #272]	@ (80009b4 <LCD_DATA+0x140>)
 80008a4:	f002 faae 	bl	8002e04 <HAL_GPIO_WritePin>
 80008a8:	e005      	b.n	80008b6 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b0:	4840      	ldr	r0, [pc, #256]	@ (80009b4 <LCD_DATA+0x140>)
 80008b2:	f002 faa7 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d005      	beq.n	80008cc <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2180      	movs	r1, #128	@ 0x80
 80008c4:	483c      	ldr	r0, [pc, #240]	@ (80009b8 <LCD_DATA+0x144>)
 80008c6:	f002 fa9d 	bl	8002e04 <HAL_GPIO_WritePin>
 80008ca:	e004      	b.n	80008d6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	4839      	ldr	r0, [pc, #228]	@ (80009b8 <LCD_DATA+0x144>)
 80008d2:	f002 fa97 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d006      	beq.n	80008ee <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e6:	4833      	ldr	r0, [pc, #204]	@ (80009b4 <LCD_DATA+0x140>)
 80008e8:	f002 fa8c 	bl	8002e04 <HAL_GPIO_WritePin>
 80008ec:	e005      	b.n	80008fa <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f4:	482f      	ldr	r0, [pc, #188]	@ (80009b4 <LCD_DATA+0x140>)
 80008f6:	f002 fa85 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d005      	beq.n	8000910 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2108      	movs	r1, #8
 8000908:	482c      	ldr	r0, [pc, #176]	@ (80009bc <LCD_DATA+0x148>)
 800090a:	f002 fa7b 	bl	8002e04 <HAL_GPIO_WritePin>
 800090e:	e004      	b.n	800091a <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2108      	movs	r1, #8
 8000914:	4829      	ldr	r0, [pc, #164]	@ (80009bc <LCD_DATA+0x148>)
 8000916:	f002 fa75 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d005      	beq.n	8000930 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	4824      	ldr	r0, [pc, #144]	@ (80009bc <LCD_DATA+0x148>)
 800092a:	f002 fa6b 	bl	8002e04 <HAL_GPIO_WritePin>
 800092e:	e004      	b.n	800093a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2120      	movs	r1, #32
 8000934:	4821      	ldr	r0, [pc, #132]	@ (80009bc <LCD_DATA+0x148>)
 8000936:	f002 fa65 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	2b00      	cmp	r3, #0
 8000942:	d005      	beq.n	8000950 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	481c      	ldr	r0, [pc, #112]	@ (80009bc <LCD_DATA+0x148>)
 800094a:	f002 fa5b 	bl	8002e04 <HAL_GPIO_WritePin>
 800094e:	e004      	b.n	800095a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2110      	movs	r1, #16
 8000954:	4819      	ldr	r0, [pc, #100]	@ (80009bc <LCD_DATA+0x148>)
 8000956:	f002 fa55 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800096a:	4814      	ldr	r0, [pc, #80]	@ (80009bc <LCD_DATA+0x148>)
 800096c:	f002 fa4a 	bl	8002e04 <HAL_GPIO_WritePin>
 8000970:	e005      	b.n	800097e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000978:	4810      	ldr	r0, [pc, #64]	@ (80009bc <LCD_DATA+0x148>)
 800097a:	f002 fa43 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	da06      	bge.n	8000994 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800098c:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <LCD_DATA+0x140>)
 800098e:	f002 fa39 	bl	8002e04 <HAL_GPIO_WritePin>
 8000992:	e005      	b.n	80009a0 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <LCD_DATA+0x140>)
 800099c:	f002 fa32 	bl	8002e04 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2102      	movs	r1, #2
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <LCD_DATA+0x140>)
 80009a6:	f002 fa2d 	bl	8002e04 <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020400 	.word	0x40020400

080009c0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80009ce:	202a      	movs	r0, #42	@ 0x2a
 80009d0:	f7ff feaa 	bl	8000728 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff4a 	bl	8000874 <LCD_DATA>
	LCD_DATA(x1);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff45 	bl	8000874 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff3f 	bl	8000874 <LCD_DATA>
	LCD_DATA(x2);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff3a 	bl	8000874 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000a00:	202b      	movs	r0, #43	@ 0x2b
 8000a02:	f7ff fe91 	bl	8000728 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff31 	bl	8000874 <LCD_DATA>
	LCD_DATA(y1);
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff2c 	bl	8000874 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff26 	bl	8000874 <LCD_DATA>
	LCD_DATA(y2);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff21 	bl	8000874 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000a32:	202c      	movs	r0, #44	@ 0x2c
 8000a34:	f7ff fe78 	bl	8000728 <LCD_CMD>
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a48:	202c      	movs	r0, #44	@ 0x2c
 8000a4a:	f7ff fe6d 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2110      	movs	r1, #16
 8000a52:	481b      	ldr	r0, [pc, #108]	@ (8000ac0 <LCD_Clear+0x80>)
 8000a54:	f002 f9d6 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <LCD_Clear+0x84>)
 8000a5e:	f002 f9d1 	bl	8002e04 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a62:	23ef      	movs	r3, #239	@ 0xef
 8000a64:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffa8 	bl	80009c0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e016      	b.n	8000aa4 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	e00d      	b.n	8000a98 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fef6 	bl	8000874 <LCD_DATA>
			LCD_DATA(c);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fef1 	bl	8000874 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2bef      	cmp	r3, #239	@ 0xef
 8000a9c:	d9ee      	bls.n	8000a7c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000aaa:	d3e4      	bcc.n	8000a76 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <LCD_Clear+0x84>)
 8000ab2:	f002 f9a7 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <H_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000ad6:	202c      	movs	r0, #44	@ 0x2c
 8000ad8:	f7ff fe26 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2110      	movs	r1, #16
 8000ae0:	4817      	ldr	r0, [pc, #92]	@ (8000b40 <H_line+0x78>)
 8000ae2:	f002 f98f 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4816      	ldr	r0, [pc, #88]	@ (8000b44 <H_line+0x7c>)
 8000aec:	f002 f98a 	bl	8002e04 <HAL_GPIO_WritePin>
	l = l + x;
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4413      	add	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ff5e 	bl	80009c0 <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00d      	b.n	8000b26 <H_line+0x5e>
		LCD_DATA(c >> 8);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff feaf 	bl	8000874 <LCD_DATA>
		LCD_DATA(c);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff feaa 	bl	8000874 <LCD_DATA>
	for (i = 0; i < l; i++) {
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3ed      	bcc.n	8000b0a <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2101      	movs	r1, #1
 8000b32:	4804      	ldr	r0, [pc, #16]	@ (8000b44 <H_line+0x7c>)
 8000b34:	f002 f966 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000b56:	202c      	movs	r0, #44	@ 0x2c
 8000b58:	f7ff fde6 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4817      	ldr	r0, [pc, #92]	@ (8000bc0 <V_line+0x78>)
 8000b62:	f002 f94f 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4816      	ldr	r0, [pc, #88]	@ (8000bc4 <V_line+0x7c>)
 8000b6c:	f002 f94a 	bl	8002e04 <HAL_GPIO_WritePin>
	l = l + y;
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	4413      	add	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff ff1e 	bl	80009c0 <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e00d      	b.n	8000ba6 <V_line+0x5e>
		LCD_DATA(c >> 8);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fe6f 	bl	8000874 <LCD_DATA>
		LCD_DATA(c);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fe6a 	bl	8000874 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d9ed      	bls.n	8000b8a <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <V_line+0x7c>)
 8000bb4:	f002 f926 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000bd6:	202c      	movs	r0, #44	@ 0x2c
 8000bd8:	f7ff fda6 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2110      	movs	r1, #16
 8000be0:	4824      	ldr	r0, [pc, #144]	@ (8000c74 <FillRect+0xac>)
 8000be2:	f002 f90f 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2101      	movs	r1, #1
 8000bea:	4823      	ldr	r0, [pc, #140]	@ (8000c78 <FillRect+0xb0>)
 8000bec:	f002 f90a 	bl	8002e04 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f7ff fed8 	bl	80009c0 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
 8000c22:	e01a      	b.n	8000c5a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	e010      	b.n	8000c4c <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe1f 	bl	8000874 <LCD_DATA>
			LCD_DATA(c);
 8000c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fe1a 	bl	8000874 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c42:	3b02      	subs	r3, #2
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8ea      	bhi.n	8000c2a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	3301      	adds	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d8e0      	bhi.n	8000c24 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2101      	movs	r1, #1
 8000c66:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <FillRect+0xb0>)
 8000c68:	f002 f8cc 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400

08000c7c <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000c8a:	202c      	movs	r0, #44	@ 0x2c
 8000c8c:	f7ff fd4c 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4824      	ldr	r0, [pc, #144]	@ (8000d28 <LCD_Bitmap+0xac>)
 8000c96:	f002 f8b5 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4823      	ldr	r0, [pc, #140]	@ (8000d2c <LCD_Bitmap+0xb0>)
 8000ca0:	f002 f8b0 	bl	8002e04 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fe7e 	bl	80009c0 <SetWindows>
	unsigned int k = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	e01e      	b.n	8000d0c <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e014      	b.n	8000cfe <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fdc9 	bl	8000874 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fdc1 	bl	8000874 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d8e6      	bhi.n	8000cd4 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8dc      	bhi.n	8000cce <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2101      	movs	r1, #1
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <LCD_Bitmap+0xb0>)
 8000d1a:	f002 f873 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020400 	.word	0x40020400

08000d30 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	@ 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000d3e:	202c      	movs	r0, #44	@ 0x2c
 8000d40:	f7ff fcf2 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	484d      	ldr	r0, [pc, #308]	@ (8000e80 <LCD_Sprite+0x150>)
 8000d4a:	f002 f85b 	bl	8002e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2101      	movs	r1, #1
 8000d52:	484c      	ldr	r0, [pc, #304]	@ (8000e84 <LCD_Sprite+0x154>)
 8000d54:	f002 f856 	bl	8002e04 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	4413      	add	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	68b9      	ldr	r1, [r7, #8]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f7ff fe24 	bl	80009c0 <SetWindows>
	int k = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000d86:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d03a      	beq.n	8000e04 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d92:	e032      	b.n	8000dfa <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	fb03 f202 	mul.w	r2, r3, r2
 8000d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000db8:	4413      	add	r3, r2
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dc0:	e014      	b.n	8000dec <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fd52 	bl	8000874 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd4a 	bl	8000874 <LCD_DATA>
				k = k - 2;
 8000de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de2:	3b02      	subs	r3, #2
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	3301      	adds	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbe6      	blt.n	8000dc2 <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df6:	3301      	adds	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dbc8      	blt.n	8000d94 <LCD_Sprite+0x64>
 8000e02:	e034      	b.n	8000e6e <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
 8000e08:	e02d      	b.n	8000e66 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	fb03 f202 	mul.w	r2, r3, r2
 8000e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	fb01 f303 	mul.w	r3, r1, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000e22:	4413      	add	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	e014      	b.n	8000e58 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e32:	4413      	add	r3, r2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fd1c 	bl	8000874 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3e:	3301      	adds	r3, #1
 8000e40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e42:	4413      	add	r3, r2
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fd14 	bl	8000874 <LCD_DATA>
				k = k + 2;
 8000e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4e:	3302      	adds	r3, #2
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3301      	adds	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbe6      	blt.n	8000e2e <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000e60:	6a3b      	ldr	r3, [r7, #32]
 8000e62:	3301      	adds	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	6a3a      	ldr	r2, [r7, #32]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbcd      	blt.n	8000e0a <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2101      	movs	r1, #1
 8000e72:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <LCD_Sprite+0x154>)
 8000e74:	f001 ffc6 	bl	8002e04 <HAL_GPIO_WritePin>
}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	@ 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020400 	.word	0x40020400

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f001 f90d 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f8d9 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fa41 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9a:	f000 f9f7 	bl	800128c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e9e:	f000 f9a1 	bl	80011e4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ea2:	f000 f93f 	bl	8001124 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ea6:	f000 f9c7 	bl	8001238 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000eaa:	f003 fd27 	bl	80048fc <MX_FATFS_Init>
  MX_UART5_Init();
 8000eae:	f000 f96f 	bl	8001190 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

    LCD_Init();
 8000eb2:	f7ff fb3d 	bl	8000530 <LCD_Init>

  	LCD_Clear(0x00);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fdc2 	bl	8000a40 <LCD_Clear>
  	FillRect(0, 0, 319, 239, 0xFFFF);
 8000ebc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	23ef      	movs	r3, #239	@ 0xef
 8000ec4:	f240 123f 	movw	r2, #319	@ 0x13f
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fe7c 	bl	8000bc8 <FillRect>


  	Estado_de_juego = INTRO;
 8000ed0:	4b51      	ldr	r3, [pc, #324]	@ (8001018 <main+0x190>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
  	//LCD_Sprite(0, 0, 319, 240, Title_screen_1, 1, 0, 0, 0);
  	HAL_Delay(100);
 8000ed6:	2064      	movs	r0, #100	@ 0x64
 8000ed8:	f001 f95a 	bl	8002190 <HAL_Delay>


  	HAL_UART_Receive_DMA(&huart2, temp, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	494f      	ldr	r1, [pc, #316]	@ (800101c <main+0x194>)
 8000ee0:	484f      	ldr	r0, [pc, #316]	@ (8001020 <main+0x198>)
 8000ee2:	f002 ff65 	bl	8003db0 <HAL_UART_Receive_DMA>
  	HAL_UART_Receive_DMA(&huart3, temp, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	494c      	ldr	r1, [pc, #304]	@ (800101c <main+0x194>)
 8000eea:	484e      	ldr	r0, [pc, #312]	@ (8001024 <main+0x19c>)
 8000eec:	f002 ff60 	bl	8003db0 <HAL_UART_Receive_DMA>


  	//Condiciones iniciles
  	xf = x0;
 8000ef0:	2264      	movs	r2, #100	@ 0x64
 8000ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8001028 <main+0x1a0>)
 8000ef4:	701a      	strb	r2, [r3, #0]
  	yf = y0;
 8000ef6:	22af      	movs	r2, #175	@ 0xaf
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800102c <main+0x1a4>)
 8000efa:	701a      	strb	r2, [r3, #0]

  	xr = x0r;
 8000efc:	22fa      	movs	r2, #250	@ 0xfa
 8000efe:	4b4c      	ldr	r3, [pc, #304]	@ (8001030 <main+0x1a8>)
 8000f00:	701a      	strb	r2, [r3, #0]
  	yr = y0r;
 8000f02:	22a2      	movs	r2, #162	@ 0xa2
 8000f04:	4b4b      	ldr	r3, [pc, #300]	@ (8001034 <main+0x1ac>)
 8000f06:	701a      	strb	r2, [r3, #0]
  while (1)
  {



	  switch (Estado_de_juego){
 8000f08:	4b43      	ldr	r3, [pc, #268]	@ (8001018 <main+0x190>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d8fa      	bhi.n	8000f08 <main+0x80>
 8000f12:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <main+0x90>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f2d 	.word	0x08000f2d
 8000f1c:	08000f73 	.word	0x08000f73
 8000f20:	08000fc7 	.word	0x08000fc7
 8000f24:	08000f09 	.word	0x08000f09
 8000f28:	08000fdf 	.word	0x08000fdf
	  case INTRO:

		  HAL_UART_Transmit(&huart5, 1, 8, HAL_MAX_DELAY);
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	2208      	movs	r2, #8
 8000f32:	2101      	movs	r1, #1
 8000f34:	4840      	ldr	r0, [pc, #256]	@ (8001038 <main+0x1b0>)
 8000f36:	f002 fe40 	bl	8003bba <HAL_UART_Transmit>

		  LCD_Sprite(0, 0, 319, 240, Title_screen_8, 1, 0, 0, 0);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9304      	str	r3, [sp, #16]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9303      	str	r3, [sp, #12]
 8000f42:	2300      	movs	r3, #0
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	2301      	movs	r3, #1
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <main+0x1b4>)
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	23f0      	movs	r3, #240	@ 0xf0
 8000f50:	f240 123f 	movw	r2, #319	@ 0x13f
 8000f54:	2100      	movs	r1, #0
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff feea 	bl	8000d30 <LCD_Sprite>

		  if (flag_title == 1){
 8000f5c:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <main+0x1b8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d102      	bne.n	8000f6a <main+0xe2>
			  Estado_de_juego = TRANSITION1;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <main+0x190>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_Delay(100);
 8000f6a:	2064      	movs	r0, #100	@ 0x64
 8000f6c:	f001 f910 	bl	8002190 <HAL_Delay>
		  break;
 8000f70:	e051      	b.n	8001016 <main+0x18e>
	  case TRANSITION1:
		  FillRect(0, 0, 319, 206, 0x0000);
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	23ce      	movs	r3, #206	@ 0xce
 8000f78:	f240 123f 	movw	r2, #319	@ 0x13f
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fe22 	bl	8000bc8 <FillRect>
		  for (int x = 0; x < 319; x++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	e015      	b.n	8000fb6 <main+0x12e>
		    LCD_Bitmap(x, 207, 16, 16, tile_brinstar1);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <main+0x1bc>)
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2310      	movs	r3, #16
 8000f92:	2210      	movs	r2, #16
 8000f94:	21cf      	movs	r1, #207	@ 0xcf
 8000f96:	f7ff fe71 	bl	8000c7c <LCD_Bitmap>
		    LCD_Bitmap(x, 223, 16, 16, tile_brinstar1);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <main+0x1bc>)
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	21df      	movs	r1, #223	@ 0xdf
 8000fa6:	f7ff fe69 	bl	8000c7c <LCD_Bitmap>
		    x += 15;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	330f      	adds	r3, #15
 8000fae:	607b      	str	r3, [r7, #4]
		  for (int x = 0; x < 319; x++) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8000fbc:	dde5      	ble.n	8000f8a <main+0x102>
		  }

		  Estado_de_juego = JUEGO;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <main+0x190>)
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	701a      	strb	r2, [r3, #0]
		  break;
 8000fc4:	e027      	b.n	8001016 <main+0x18e>



	  case JUEGO:
		  HAL_UART_Transmit(&huart5, 2, 8,HAL_MAX_DELAY);
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	2208      	movs	r2, #8
 8000fcc:	2102      	movs	r1, #2
 8000fce:	481a      	ldr	r0, [pc, #104]	@ (8001038 <main+0x1b0>)
 8000fd0:	f002 fdf3 	bl	8003bba <HAL_UART_Transmit>
		  MECHANICS_Ridley();
 8000fd4:	f000 fc0a 	bl	80017ec <MECHANICS_Ridley>
		  MECHANICS();
 8000fd8:	f000 fa48 	bl	800146c <MECHANICS>

	  	  break;
 8000fdc:	e01b      	b.n	8001016 <main+0x18e>
	  case GameOver:
		  LCD_Clear(0x00);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fd2e 	bl	8000a40 <LCD_Clear>
		  //FillRect(0, 0, 319, 239, 0xFFFF);
		  LCD_Sprite(159, 120, 81, 9, GameOver, 1, 0, 0, 0);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9304      	str	r3, [sp, #16]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9303      	str	r3, [sp, #12]
 8000fec:	2300      	movs	r3, #0
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2309      	movs	r3, #9
 8000ffa:	2251      	movs	r2, #81	@ 0x51
 8000ffc:	2178      	movs	r1, #120	@ 0x78
 8000ffe:	209f      	movs	r0, #159	@ 0x9f
 8001000:	f7ff fe96 	bl	8000d30 <LCD_Sprite>
		  HAL_Delay(1000);
 8001004:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001008:	f001 f8c2 	bl	8002190 <HAL_Delay>
		  Estado_de_juego = INTRO;
 800100c:	4b02      	ldr	r3, [pc, #8]	@ (8001018 <main+0x190>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]

		  break;
 8001012:	bf00      	nop
 8001014:	e778      	b.n	8000f08 <main+0x80>
	  switch (Estado_de_juego){
 8001016:	e777      	b.n	8000f08 <main+0x80>
 8001018:	20006055 	.word	0x20006055
 800101c:	20006048 	.word	0x20006048
 8001020:	20005d64 	.word	0x20005d64
 8001024:	20005dac 	.word	0x20005dac
 8001028:	20005c86 	.word	0x20005c86
 800102c:	20005c87 	.word	0x20005c87
 8001030:	20005c84 	.word	0x20005c84
 8001034:	20005c85 	.word	0x20005c85
 8001038:	20005d1c 	.word	0x20005d1c
 800103c:	08004af8 	.word	0x08004af8
 8001040:	20006054 	.word	0x20006054
 8001044:	20000000 	.word	0x20000000

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	@ 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2234      	movs	r2, #52	@ 0x34
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fd15 	bl	8004a86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <SystemClock_Config+0xd4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	4a29      	ldr	r2, [pc, #164]	@ (800111c <SystemClock_Config+0xd4>)
 8001076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107a:	6413      	str	r3, [r2, #64]	@ 0x40
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <SystemClock_Config+0xd4>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001088:	2300      	movs	r3, #0
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <SystemClock_Config+0xd8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001094:	4a22      	ldr	r2, [pc, #136]	@ (8001120 <SystemClock_Config+0xd8>)
 8001096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <SystemClock_Config+0xd8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2310      	movs	r3, #16
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010bc:	2310      	movs	r3, #16
 80010be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c6:	2304      	movs	r3, #4
 80010c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f9f8 	bl	80034cc <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010e2:	f000 fcbd 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2302      	movs	r3, #2
 80010ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2102      	movs	r1, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fe98 	bl	8002e38 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800110e:	f000 fca7 	bl	8001a60 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	@ 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_SPI1_Init+0x64>)
 800112a:	4a18      	ldr	r2, [pc, #96]	@ (800118c <MX_SPI1_Init+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001130:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001134:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_SPI1_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001154:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001158:	2210      	movs	r2, #16
 800115a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001170:	220a      	movs	r2, #10
 8001172:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_SPI1_Init+0x64>)
 8001176:	f002 fc47 	bl	8003a08 <HAL_SPI_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 fc6e 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20005cc4 	.word	0x20005cc4
 800118c:	40013000 	.word	0x40013000

08001190 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_UART5_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_UART5_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_UART5_Init+0x4c>)
 800119c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_UART5_Init+0x4c>)
 80011c8:	f002 fca7 	bl	8003b1a <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 fc45 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005d1c 	.word	0x20005d1c
 80011e0:	40005000 	.word	0x40005000

080011e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <MX_USART2_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_USART2_UART_Init+0x4c>)
 800121c:	f002 fc7d 	bl	8003b1a <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 fc1b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20005d64 	.word	0x20005d64
 8001234:	40004400 	.word	0x40004400

08001238 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_USART3_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001244:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001248:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001270:	f002 fc53 	bl	8003b1a <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 fbf1 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20005dac 	.word	0x20005dac
 8001288:	40004800 	.word	0x40004800

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_DMA_Init+0x8c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a1f      	ldr	r2, [pc, #124]	@ (8001318 <MX_DMA_Init+0x8c>)
 800129c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_DMA_Init+0x8c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	200b      	movs	r0, #11
 80012b4:	f001 f86b 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012b8:	200b      	movs	r0, #11
 80012ba:	f001 f884 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	200c      	movs	r0, #12
 80012c4:	f001 f863 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012c8:	200c      	movs	r0, #12
 80012ca:	f001 f87c 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	200e      	movs	r0, #14
 80012d4:	f001 f85b 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012d8:	200e      	movs	r0, #14
 80012da:	f001 f874 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2010      	movs	r0, #16
 80012e4:	f001 f853 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012e8:	2010      	movs	r0, #16
 80012ea:	f001 f86c 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2011      	movs	r0, #17
 80012f4:	f001 f84b 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012f8:	2011      	movs	r0, #17
 80012fa:	f001 f864 	bl	80023c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	202f      	movs	r0, #47	@ 0x2f
 8001304:	f001 f843 	bl	800238e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001308:	202f      	movs	r0, #47	@ 0x2f
 800130a:	f001 f85c 	bl	80023c6 <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b49      	ldr	r3, [pc, #292]	@ (800145c <MX_GPIO_Init+0x140>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a48      	ldr	r2, [pc, #288]	@ (800145c <MX_GPIO_Init+0x140>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b46      	ldr	r3, [pc, #280]	@ (800145c <MX_GPIO_Init+0x140>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b42      	ldr	r3, [pc, #264]	@ (800145c <MX_GPIO_Init+0x140>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a41      	ldr	r2, [pc, #260]	@ (800145c <MX_GPIO_Init+0x140>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <MX_GPIO_Init+0x140>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <MX_GPIO_Init+0x140>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a3a      	ldr	r2, [pc, #232]	@ (800145c <MX_GPIO_Init+0x140>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b38      	ldr	r3, [pc, #224]	@ (800145c <MX_GPIO_Init+0x140>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b34      	ldr	r3, [pc, #208]	@ (800145c <MX_GPIO_Init+0x140>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a33      	ldr	r2, [pc, #204]	@ (800145c <MX_GPIO_Init+0x140>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <MX_GPIO_Init+0x140>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <MX_GPIO_Init+0x140>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a2c      	ldr	r2, [pc, #176]	@ (800145c <MX_GPIO_Init+0x140>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <MX_GPIO_Init+0x140>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2182      	movs	r1, #130	@ 0x82
 80013c2:	4827      	ldr	r0, [pc, #156]	@ (8001460 <MX_GPIO_Init+0x144>)
 80013c4:	f001 fd1e 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80013c8:	2200      	movs	r2, #0
 80013ca:	f246 7113 	movw	r1, #26387	@ 0x6713
 80013ce:	4825      	ldr	r0, [pc, #148]	@ (8001464 <MX_GPIO_Init+0x148>)
 80013d0:	f001 fd18 	bl	8002e04 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin|SYS_JTMS_SWDIO_Pin|SYS_JTCK_SWCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80013d4:	2200      	movs	r2, #0
 80013d6:	f240 4179 	movw	r1, #1145	@ 0x479
 80013da:	4823      	ldr	r0, [pc, #140]	@ (8001468 <MX_GPIO_Init+0x14c>)
 80013dc:	f001 fd12 	bl	8002e04 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	481a      	ldr	r0, [pc, #104]	@ (8001460 <MX_GPIO_Init+0x144>)
 80013f8:	f001 fb70 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 80013fc:	2382      	movs	r3, #130	@ 0x82
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4813      	ldr	r0, [pc, #76]	@ (8001460 <MX_GPIO_Init+0x144>)
 8001414:	f001 fb62 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin SYS_JTMS_SWDIO_Pin SYS_JTCK_SWCLK_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001418:	f246 7313 	movw	r3, #26387	@ 0x6713
 800141c:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin|SYS_JTMS_SWDIO_Pin|SYS_JTCK_SWCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <MX_GPIO_Init+0x148>)
 8001432:	f001 fb53 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001436:	f240 4379 	movw	r3, #1145	@ 0x479
 800143a:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <MX_GPIO_Init+0x14c>)
 8001450:	f001 fb44 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	@ 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400

0800146c <MECHANICS>:

/* USER CODE BEGIN 4 */
void MECHANICS (void){
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af06      	add	r7, sp, #24


//*********************** ACCION DE LA FECHA DERECHA *************************************************************************

	if (flag_right == 1){
 8001472:	4b8b      	ldr	r3, [pc, #556]	@ (80016a0 <MECHANICS+0x234>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d142      	bne.n	8001500 <MECHANICS+0x94>


		for (int var = 0; var < 20; var++ ) {
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	e039      	b.n	80014f4 <MECHANICS+0x88>
		  int anim = (var/5)% 4; //Me entrega los valores para los indices de la animacion de samus
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a88      	ldr	r2, [pc, #544]	@ (80016a4 <MECHANICS+0x238>)
 8001484:	fb82 1203 	smull	r1, r2, r2, r3
 8001488:	1052      	asrs	r2, r2, #1
 800148a:	17db      	asrs	r3, r3, #31
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	425a      	negs	r2, r3
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	bf58      	it	pl
 800149a:	4253      	negpl	r3, r2
 800149c:	607b      	str	r3, [r7, #4]
		  if (xf < 319 - 20){
			xf ++;
 800149e:	4b82      	ldr	r3, [pc, #520]	@ (80016a8 <MECHANICS+0x23c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b80      	ldr	r3, [pc, #512]	@ (80016a8 <MECHANICS+0x23c>)
 80014a8:	701a      	strb	r2, [r3, #0]

			LCD_Sprite(xf, yf, 20, 32, samus_Idle_walk,4, anim, 0, 0);
 80014aa:	4b7f      	ldr	r3, [pc, #508]	@ (80016a8 <MECHANICS+0x23c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	4b7e      	ldr	r3, [pc, #504]	@ (80016ac <MECHANICS+0x240>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	2300      	movs	r3, #0
 80014b8:	9304      	str	r3, [sp, #16]
 80014ba:	2300      	movs	r3, #0
 80014bc:	9303      	str	r3, [sp, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2304      	movs	r3, #4
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	4b7a      	ldr	r3, [pc, #488]	@ (80016b0 <MECHANICS+0x244>)
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2320      	movs	r3, #32
 80014cc:	2214      	movs	r2, #20
 80014ce:	f7ff fc2f 	bl	8000d30 <LCD_Sprite>
		    V_line(xf - 1, yf, 32, 0x0000);
 80014d2:	4b75      	ldr	r3, [pc, #468]	@ (80016a8 <MECHANICS+0x23c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	4b74      	ldr	r3, [pc, #464]	@ (80016ac <MECHANICS+0x240>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	2300      	movs	r3, #0
 80014e2:	2220      	movs	r2, #32
 80014e4:	f7ff fb30 	bl	8000b48 <V_line>

		    HAL_Delay(5);
 80014e8:	2005      	movs	r0, #5
 80014ea:	f000 fe51 	bl	8002190 <HAL_Delay>
		for (int var = 0; var < 20; var++ ) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3301      	adds	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b13      	cmp	r3, #19
 80014f8:	ddc2      	ble.n	8001480 <MECHANICS+0x14>
		   }
	     }
		flag_right = 0;
 80014fa:	4b69      	ldr	r3, [pc, #420]	@ (80016a0 <MECHANICS+0x234>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	  }


//*********************** ACCION DE LA FECHA IZQUIERDA *************************************************************************
	  if (flag_left == 1){
 8001500:	4b6c      	ldr	r3, [pc, #432]	@ (80016b4 <MECHANICS+0x248>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d13e      	bne.n	8001586 <MECHANICS+0x11a>
	 		for (int var = 0; var < 20; var++ ) {
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	e035      	b.n	800157a <MECHANICS+0x10e>
	 		  int anim = (var/5)% 4; //Me entrega los valores para los indices de la animacion de samus
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	4a64      	ldr	r2, [pc, #400]	@ (80016a4 <MECHANICS+0x238>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1052      	asrs	r2, r2, #1
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	425a      	negs	r2, r3
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	bf58      	it	pl
 8001528:	4253      	negpl	r3, r2
 800152a:	603b      	str	r3, [r7, #0]

	 		  if (xf < 319 - 20){
	 			xf --;
 800152c:	4b5e      	ldr	r3, [pc, #376]	@ (80016a8 <MECHANICS+0x23c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b5c      	ldr	r3, [pc, #368]	@ (80016a8 <MECHANICS+0x23c>)
 8001536:	701a      	strb	r2, [r3, #0]

	 		    LCD_Sprite(xf, 175, 20, 32, samus_Idle_walk,4, anim, 1, 0);
 8001538:	4b5b      	ldr	r3, [pc, #364]	@ (80016a8 <MECHANICS+0x23c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	2300      	movs	r3, #0
 8001540:	9304      	str	r3, [sp, #16]
 8001542:	2301      	movs	r3, #1
 8001544:	9303      	str	r3, [sp, #12]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	2304      	movs	r3, #4
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	4b58      	ldr	r3, [pc, #352]	@ (80016b0 <MECHANICS+0x244>)
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2320      	movs	r3, #32
 8001554:	2214      	movs	r2, #20
 8001556:	21af      	movs	r1, #175	@ 0xaf
 8001558:	f7ff fbea 	bl	8000d30 <LCD_Sprite>
	 		    V_line(xf +21, 175, 32, 0x0000);
 800155c:	4b52      	ldr	r3, [pc, #328]	@ (80016a8 <MECHANICS+0x23c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3315      	adds	r3, #21
 8001562:	4618      	mov	r0, r3
 8001564:	2300      	movs	r3, #0
 8001566:	2220      	movs	r2, #32
 8001568:	21af      	movs	r1, #175	@ 0xaf
 800156a:	f7ff faed 	bl	8000b48 <V_line>


	 		    HAL_Delay(5);
 800156e:	2005      	movs	r0, #5
 8001570:	f000 fe0e 	bl	8002190 <HAL_Delay>
	 		for (int var = 0; var < 20; var++ ) {
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	3301      	adds	r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b13      	cmp	r3, #19
 800157e:	ddc6      	ble.n	800150e <MECHANICS+0xa2>
	 		 }

	 		  //if (position_X == 20){position_X = 0;}
	 	   }
	 		flag_left = 0;
 8001580:	4b4c      	ldr	r3, [pc, #304]	@ (80016b4 <MECHANICS+0x248>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	 	  }

//*********************** ACCION DE SALTO *************************************************************************

	  if (flag_A == 1){
 8001586:	4b4c      	ldr	r3, [pc, #304]	@ (80016b8 <MECHANICS+0x24c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b01      	cmp	r3, #1
 800158c:	f040 8119 	bne.w	80017c2 <MECHANICS+0x356>

		  for (yf = y0; yf > h; yf --) {
 8001590:	22af      	movs	r2, #175	@ 0xaf
 8001592:	4b46      	ldr	r3, [pc, #280]	@ (80016ac <MECHANICS+0x240>)
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e079      	b.n	800168c <MECHANICS+0x220>

			  LCD_Sprite(xf, yf, 18, 25, samus_jump, 1, 0, 0, 0);
 8001598:	4b43      	ldr	r3, [pc, #268]	@ (80016a8 <MECHANICS+0x23c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <MECHANICS+0x240>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	2300      	movs	r3, #0
 80015a6:	9304      	str	r3, [sp, #16]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9303      	str	r3, [sp, #12]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2301      	movs	r3, #1
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <MECHANICS+0x250>)
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2319      	movs	r3, #25
 80015ba:	2212      	movs	r2, #18
 80015bc:	f7ff fbb8 	bl	8000d30 <LCD_Sprite>
			 // LCD_Sprite(x, y, width, height, bitmap, columns, index, flip, offset)
			 // H_line(x, y, l, c)
			  H_line(xf, yf + 26, 18, 0x0000);
 80015c0:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <MECHANICS+0x23c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <MECHANICS+0x240>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	331a      	adds	r3, #26
 80015cc:	4619      	mov	r1, r3
 80015ce:	2300      	movs	r3, #0
 80015d0:	2212      	movs	r2, #18
 80015d2:	f7ff fa79 	bl	8000ac8 <H_line>
			  V_line(xf +19, yf, 32, 0x0000);
 80015d6:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <MECHANICS+0x23c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	3313      	adds	r3, #19
 80015dc:	4618      	mov	r0, r3
 80015de:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <MECHANICS+0x240>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	2300      	movs	r3, #0
 80015e6:	2220      	movs	r2, #32
 80015e8:	f7ff faae 	bl	8000b48 <V_line>
			  V_line(xf +20, yf, 32, 0x0000);
 80015ec:	4b2e      	ldr	r3, [pc, #184]	@ (80016a8 <MECHANICS+0x23c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3314      	adds	r3, #20
 80015f2:	4618      	mov	r0, r3
 80015f4:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <MECHANICS+0x240>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	2300      	movs	r3, #0
 80015fc:	2220      	movs	r2, #32
 80015fe:	f7ff faa3 	bl	8000b48 <V_line>
			  V_line(xf +21, yf, 32, 0x0000);
 8001602:	4b29      	ldr	r3, [pc, #164]	@ (80016a8 <MECHANICS+0x23c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3315      	adds	r3, #21
 8001608:	4618      	mov	r0, r3
 800160a:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <MECHANICS+0x240>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	2300      	movs	r3, #0
 8001612:	2220      	movs	r2, #32
 8001614:	f7ff fa98 	bl	8000b48 <V_line>
			 V_line(xf -1, yf, 32, 0x0000);
 8001618:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <MECHANICS+0x23c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4618      	mov	r0, r3
 8001620:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <MECHANICS+0x240>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	2300      	movs	r3, #0
 8001628:	2220      	movs	r2, #32
 800162a:	f7ff fa8d 	bl	8000b48 <V_line>
			 V_line(xf -2, yf, 32, 0x0000);
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MECHANICS+0x23c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3b02      	subs	r3, #2
 8001634:	4618      	mov	r0, r3
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MECHANICS+0x240>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	2300      	movs	r3, #0
 800163e:	2220      	movs	r2, #32
 8001640:	f7ff fa82 	bl	8000b48 <V_line>


			  HAL_Delay(5);
 8001644:	2005      	movs	r0, #5
 8001646:	f000 fda3 	bl	8002190 <HAL_Delay>
			  //xf++;

			  if (flag_right == 1){
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MECHANICS+0x234>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d109      	bne.n	8001666 <MECHANICS+0x1fa>
				  xf = xf + 2;
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MECHANICS+0x23c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3302      	adds	r3, #2
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MECHANICS+0x23c>)
 800165c:	701a      	strb	r2, [r3, #0]
				  flag_right = 0;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MECHANICS+0x234>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e00c      	b.n	8001680 <MECHANICS+0x214>
			  } else if (flag_left == 1){
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <MECHANICS+0x248>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <MECHANICS+0x214>
				  xf = xf - 2;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MECHANICS+0x23c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3b02      	subs	r3, #2
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MECHANICS+0x23c>)
 8001678:	701a      	strb	r2, [r3, #0]
				  flag_left = 0;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MECHANICS+0x248>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
		  for (yf = y0; yf > h; yf --) {
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <MECHANICS+0x240>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <MECHANICS+0x240>)
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <MECHANICS+0x240>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	226f      	movs	r2, #111	@ 0x6f
 8001692:	4293      	cmp	r3, r2
 8001694:	d880      	bhi.n	8001598 <MECHANICS+0x12c>
			  }

		}

		  for (yf = h; yf < y0; yf ++) {
 8001696:	226f      	movs	r2, #111	@ 0x6f
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <MECHANICS+0x240>)
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e089      	b.n	80017b2 <MECHANICS+0x346>
 800169e:	bf00      	nop
 80016a0:	2000604f 	.word	0x2000604f
 80016a4:	66666667 	.word	0x66666667
 80016a8:	20005c86 	.word	0x20005c86
 80016ac:	20005c87 	.word	0x20005c87
 80016b0:	20000200 	.word	0x20000200
 80016b4:	2000604e 	.word	0x2000604e
 80016b8:	20006050 	.word	0x20006050
 80016bc:	20001600 	.word	0x20001600
		  		LCD_Sprite(xf, yf, 18, 25, samus_jump, 1, 0, 0, 0);
 80016c0:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <MECHANICS+0x364>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <MECHANICS+0x368>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	2300      	movs	r3, #0
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	2300      	movs	r3, #0
 80016d2:	9303      	str	r3, [sp, #12]
 80016d4:	2300      	movs	r3, #0
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	4b3e      	ldr	r3, [pc, #248]	@ (80017d8 <MECHANICS+0x36c>)
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2319      	movs	r3, #25
 80016e2:	2212      	movs	r2, #18
 80016e4:	f7ff fb24 	bl	8000d30 <LCD_Sprite>
		    	H_line(xf, yf , 18, 0x0000);
 80016e8:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <MECHANICS+0x364>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <MECHANICS+0x368>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4619      	mov	r1, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	2212      	movs	r2, #18
 80016f8:	f7ff f9e6 	bl	8000ac8 <H_line>
		    	V_line(xf +19, yf, 32, 0x0000);
 80016fc:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <MECHANICS+0x364>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3313      	adds	r3, #19
 8001702:	4618      	mov	r0, r3
 8001704:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <MECHANICS+0x368>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	2300      	movs	r3, #0
 800170c:	2220      	movs	r2, #32
 800170e:	f7ff fa1b 	bl	8000b48 <V_line>
		    	V_line(xf +20, yf, 32, 0x0000);
 8001712:	4b2f      	ldr	r3, [pc, #188]	@ (80017d0 <MECHANICS+0x364>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	3314      	adds	r3, #20
 8001718:	4618      	mov	r0, r3
 800171a:	4b2e      	ldr	r3, [pc, #184]	@ (80017d4 <MECHANICS+0x368>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	2300      	movs	r3, #0
 8001722:	2220      	movs	r2, #32
 8001724:	f7ff fa10 	bl	8000b48 <V_line>
		    	V_line(xf +21, yf, 32, 0x0000);
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <MECHANICS+0x364>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3315      	adds	r3, #21
 800172e:	4618      	mov	r0, r3
 8001730:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <MECHANICS+0x368>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	2300      	movs	r3, #0
 8001738:	2220      	movs	r2, #32
 800173a:	f7ff fa05 	bl	8000b48 <V_line>
		    	V_line(xf -1, yf, 32, 0x0000);
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <MECHANICS+0x364>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	3b01      	subs	r3, #1
 8001744:	4618      	mov	r0, r3
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <MECHANICS+0x368>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	2300      	movs	r3, #0
 800174e:	2220      	movs	r2, #32
 8001750:	f7ff f9fa 	bl	8000b48 <V_line>
		    	V_line(xf -2, yf, 32, 0x0000);
 8001754:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <MECHANICS+0x364>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	3b02      	subs	r3, #2
 800175a:	4618      	mov	r0, r3
 800175c:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <MECHANICS+0x368>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	2300      	movs	r3, #0
 8001764:	2220      	movs	r2, #32
 8001766:	f7ff f9ef 	bl	8000b48 <V_line>
		  		HAL_Delay(5);
 800176a:	2005      	movs	r0, #5
 800176c:	f000 fd10 	bl	8002190 <HAL_Delay>


		  		if (flag_right == 1){
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <MECHANICS+0x370>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d109      	bne.n	800178c <MECHANICS+0x320>
		  			xf = xf+2;
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <MECHANICS+0x364>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3302      	adds	r3, #2
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <MECHANICS+0x364>)
 8001782:	701a      	strb	r2, [r3, #0]
		 			flag_right = 0;
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <MECHANICS+0x370>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e00c      	b.n	80017a6 <MECHANICS+0x33a>
		  		} else if (flag_left == 1){
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MECHANICS+0x374>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d108      	bne.n	80017a6 <MECHANICS+0x33a>
		  			xf=xf-2;
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <MECHANICS+0x364>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3b02      	subs	r3, #2
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MECHANICS+0x364>)
 800179e:	701a      	strb	r2, [r3, #0]
		  			flag_left = 0;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <MECHANICS+0x374>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
		  for (yf = h; yf < y0; yf ++) {
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <MECHANICS+0x368>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MECHANICS+0x368>)
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <MECHANICS+0x368>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	22af      	movs	r2, #175	@ 0xaf
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d381      	bcc.n	80016c0 <MECHANICS+0x254>
		  		  }

		  }

		  flag_A  = 0;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MECHANICS+0x378>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]

	  }

//*********************** ACCION DE DISPARO *************************************************************************

	  if (flag_B == 1){
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <MECHANICS+0x37c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1

	  }



}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20005c86 	.word	0x20005c86
 80017d4:	20005c87 	.word	0x20005c87
 80017d8:	20001600 	.word	0x20001600
 80017dc:	2000604f 	.word	0x2000604f
 80017e0:	2000604e 	.word	0x2000604e
 80017e4:	20006050 	.word	0x20006050
 80017e8:	20006051 	.word	0x20006051

080017ec <MECHANICS_Ridley>:


void MECHANICS_Ridley(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af06      	add	r7, sp, #24
	//LCD_Sprite(x, y, width, height, bitmap, columns, index, flip, offset)
	LCD_Sprite(xr, yr, 31, 46, ridley, 6, 1, 1, 0);
 80017f2:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <MECHANICS_Ridley+0x48>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MECHANICS_Ridley+0x4c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	2300      	movs	r3, #0
 8001800:	9304      	str	r3, [sp, #16]
 8001802:	2301      	movs	r3, #1
 8001804:	9303      	str	r3, [sp, #12]
 8001806:	2301      	movs	r3, #1
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2306      	movs	r3, #6
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <MECHANICS_Ridley+0x50>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	232e      	movs	r3, #46	@ 0x2e
 8001814:	221f      	movs	r2, #31
 8001816:	f7ff fa8b 	bl	8000d30 <LCD_Sprite>

	if (xf >= 250 ){
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MECHANICS_Ridley+0x54>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001820:	d905      	bls.n	800182e <MECHANICS_Ridley+0x42>
		Estado_de_juego = GameOver;
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <MECHANICS_Ridley+0x58>)
 8001824:	2205      	movs	r2, #5
 8001826:	701a      	strb	r2, [r3, #0]
		xf = x0;
 8001828:	2264      	movs	r2, #100	@ 0x64
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <MECHANICS_Ridley+0x54>)
 800182c:	701a      	strb	r2, [r3, #0]
	}
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20005c84 	.word	0x20005c84
 8001838:	20005c85 	.word	0x20005c85
 800183c:	20001984 	.word	0x20001984
 8001840:	20005c86 	.word	0x20005c86
 8001844:	20006055 	.word	0x20006055

08001848 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

	memcpy (buffer + indx, temp, 1);
 8001850:	4b6f      	ldr	r3, [pc, #444]	@ (8001a10 <HAL_UART_RxCpltCallback+0x1c8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4a6f      	ldr	r2, [pc, #444]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001858:	4413      	add	r3, r2
 800185a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a18 <HAL_UART_RxCpltCallback+0x1d0>)
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	701a      	strb	r2, [r3, #0]
	++indx;
 8001860:	4b6b      	ldr	r3, [pc, #428]	@ (8001a10 <HAL_UART_RxCpltCallback+0x1c8>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b69      	ldr	r3, [pc, #420]	@ (8001a10 <HAL_UART_RxCpltCallback+0x1c8>)
 800186a:	801a      	strh	r2, [r3, #0]
	if(indx >= 10){
 800186c:	4b68      	ldr	r3, [pc, #416]	@ (8001a10 <HAL_UART_RxCpltCallback+0x1c8>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2b09      	cmp	r3, #9
 8001872:	d902      	bls.n	800187a <HAL_UART_RxCpltCallback+0x32>
		indx = 0;
 8001874:	4b66      	ldr	r3, [pc, #408]	@ (8001a10 <HAL_UART_RxCpltCallback+0x1c8>)
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
	}


    HAL_UART_Receive_DMA(&huart2, temp, 1);
 800187a:	2201      	movs	r2, #1
 800187c:	4966      	ldr	r1, [pc, #408]	@ (8001a18 <HAL_UART_RxCpltCallback+0x1d0>)
 800187e:	4867      	ldr	r0, [pc, #412]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1d4>)
 8001880:	f002 fa96 	bl	8003db0 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&huart3, temp, 1);
 8001884:	2201      	movs	r2, #1
 8001886:	4964      	ldr	r1, [pc, #400]	@ (8001a18 <HAL_UART_RxCpltCallback+0x1d0>)
 8001888:	4865      	ldr	r0, [pc, #404]	@ (8001a20 <HAL_UART_RxCpltCallback+0x1d8>)
 800188a:	f002 fa91 	bl	8003db0 <HAL_UART_Receive_DMA>

//--------------------------Inicio del bloque para transmitir------------------------------------------------------------
		for(int i = 0; i < 10; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e075      	b.n	8001980 <HAL_UART_RxCpltCallback+0x138>
			if (buffer[i] == 117){   //117 es ASCII de u
 8001894:	4a5f      	ldr	r2, [pc, #380]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800189c:	2b75      	cmp	r3, #117	@ 0x75
 800189e:	d107      	bne.n	80018b0 <HAL_UART_RxCpltCallback+0x68>
						flag_up = 1;
 80018a0:	4b60      	ldr	r3, [pc, #384]	@ (8001a24 <HAL_UART_RxCpltCallback+0x1dc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 80018a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2100      	movs	r1, #0
 80018ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

			if (buffer[i] == 100){   //100 es ASCII de d
 80018b0:	4a58      	ldr	r2, [pc, #352]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b8:	2b64      	cmp	r3, #100	@ 0x64
 80018ba:	d107      	bne.n	80018cc <HAL_UART_RxCpltCallback+0x84>
						flag_down = 1;
 80018bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1e0>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 80018c2:	4a54      	ldr	r2, [pc, #336]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2100      	movs	r1, #0
 80018c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					}

			if (buffer[i] == 108){   //108 es ASCII de l
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d4:	2b6c      	cmp	r3, #108	@ 0x6c
 80018d6:	d107      	bne.n	80018e8 <HAL_UART_RxCpltCallback+0xa0>
						flag_left = 1;
 80018d8:	4b54      	ldr	r3, [pc, #336]	@ (8001a2c <HAL_UART_RxCpltCallback+0x1e4>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 80018de:	4a4d      	ldr	r2, [pc, #308]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2100      	movs	r1, #0
 80018e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

			if (buffer[i] == 114){   //114 es ASCII de l
 80018e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018f0:	2b72      	cmp	r3, #114	@ 0x72
 80018f2:	d107      	bne.n	8001904 <HAL_UART_RxCpltCallback+0xbc>
						flag_right = 1;
 80018f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001a30 <HAL_UART_RxCpltCallback+0x1e8>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 80018fa:	4a46      	ldr	r2, [pc, #280]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2100      	movs	r1, #0
 8001900:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}


			if (buffer[i] == 65){   //65 es ASCII de l
 8001904:	4a43      	ldr	r2, [pc, #268]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190c:	2b41      	cmp	r3, #65	@ 0x41
 800190e:	d107      	bne.n	8001920 <HAL_UART_RxCpltCallback+0xd8>
				    	flag_A = 1;
 8001910:	4b48      	ldr	r3, [pc, #288]	@ (8001a34 <HAL_UART_RxCpltCallback+0x1ec>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
				    	buffer[i] = 0;
 8001916:	4a3f      	ldr	r2, [pc, #252]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2100      	movs	r1, #0
 800191c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}


			if (buffer[i] == 66){   //66 es ASCII de l
 8001920:	4a3c      	ldr	r2, [pc, #240]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001928:	2b42      	cmp	r3, #66	@ 0x42
 800192a:	d107      	bne.n	800193c <HAL_UART_RxCpltCallback+0xf4>
						flag_B = 1;
 800192c:	4b42      	ldr	r3, [pc, #264]	@ (8001a38 <HAL_UART_RxCpltCallback+0x1f0>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 8001932:	4a38      	ldr	r2, [pc, #224]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2100      	movs	r1, #0
 8001938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 }

			if (buffer[i] == 83){ //83 es ASCII de s mayúscula
 800193c:	4a35      	ldr	r2, [pc, #212]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001944:	2b53      	cmp	r3, #83	@ 0x53
 8001946:	d10a      	bne.n	800195e <HAL_UART_RxCpltCallback+0x116>
				flag_Start = 1;
 8001948:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <HAL_UART_RxCpltCallback+0x1f4>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
				flag_title = 1;
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <HAL_UART_RxCpltCallback+0x1f8>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
				buffer[i] = 0;
 8001954:	4a2f      	ldr	r2, [pc, #188]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2100      	movs	r1, #0
 800195a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			if (buffer[i] == 115){ //115 es ASCII de s minúscula
 800195e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001966:	2b73      	cmp	r3, #115	@ 0x73
 8001968:	d107      	bne.n	800197a <HAL_UART_RxCpltCallback+0x132>
				flag_Select = 1;
 800196a:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <HAL_UART_RxCpltCallback+0x1fc>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
				//Estado_de_juego = PAUSE;
				buffer[i] = 0;
 8001970:	4a28      	ldr	r2, [pc, #160]	@ (8001a14 <HAL_UART_RxCpltCallback+0x1cc>)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2100      	movs	r1, #0
 8001976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 10; i++) {
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b09      	cmp	r3, #9
 8001984:	dd86      	ble.n	8001894 <HAL_UART_RxCpltCallback+0x4c>

		    } //Fin del for



	  if (flag_up == 1){
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_UART_RxCpltCallback+0x1dc>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d104      	bne.n	8001998 <HAL_UART_RxCpltCallback+0x150>
		  //HAL_UART_Transmit(&huart2, Up, sizeof(Up), 2000);
		  HAL_UART_Transmit_DMA(&huart2, Up, sizeof(Up));
 800198e:	2205      	movs	r2, #5
 8001990:	492d      	ldr	r1, [pc, #180]	@ (8001a48 <HAL_UART_RxCpltCallback+0x200>)
 8001992:	4822      	ldr	r0, [pc, #136]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1d4>)
 8001994:	f002 f99c 	bl	8003cd0 <HAL_UART_Transmit_DMA>
		  	 //LCD_Bitmap(100, 50, 20, 32, Samus_Stand);

		  //flag_up = 0;
		  }

	  if (flag_down == 1){
 8001998:	4b23      	ldr	r3, [pc, #140]	@ (8001a28 <HAL_UART_RxCpltCallback+0x1e0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_UART_RxCpltCallback+0x166>
		  HAL_UART_Transmit(&huart2, Down, sizeof(Down), 2000);
 80019a0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019a4:	2207      	movs	r2, #7
 80019a6:	4929      	ldr	r1, [pc, #164]	@ (8001a4c <HAL_UART_RxCpltCallback+0x204>)
 80019a8:	481c      	ldr	r0, [pc, #112]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1d4>)
 80019aa:	f002 f906 	bl	8003bba <HAL_UART_Transmit>
		  //flag_title = 1;
		  //flag_down = 0;
		  }

	  if (flag_left == 1){
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <HAL_UART_RxCpltCallback+0x1e4>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d106      	bne.n	80019c4 <HAL_UART_RxCpltCallback+0x17c>
		  HAL_UART_Transmit(&huart2, Left, sizeof(Left), 2000);
 80019b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019ba:	2207      	movs	r2, #7
 80019bc:	4924      	ldr	r1, [pc, #144]	@ (8001a50 <HAL_UART_RxCpltCallback+0x208>)
 80019be:	4817      	ldr	r0, [pc, #92]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1d4>)
 80019c0:	f002 f8fb 	bl	8003bba <HAL_UART_Transmit>
		  //flag_title = 1;
		  //flag_left = 0;
		  }

	  if (flag_right == 1){
 80019c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_UART_RxCpltCallback+0x1e8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <HAL_UART_RxCpltCallback+0x192>
		  HAL_UART_Transmit(&huart2, Right, sizeof(Right), 2000);
 80019cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019d0:	2208      	movs	r2, #8
 80019d2:	4920      	ldr	r1, [pc, #128]	@ (8001a54 <HAL_UART_RxCpltCallback+0x20c>)
 80019d4:	4811      	ldr	r0, [pc, #68]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1d4>)
 80019d6:	f002 f8f0 	bl	8003bba <HAL_UART_Transmit>
		  //flag_title = 1;
		  // flag_right = 0;
		  }

	  if (flag_A == 1){
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_UART_RxCpltCallback+0x1ec>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d106      	bne.n	80019f0 <HAL_UART_RxCpltCallback+0x1a8>
		  HAL_UART_Transmit(&huart2, A, sizeof(A), 2000);
 80019e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019e6:	2204      	movs	r2, #4
 80019e8:	491b      	ldr	r1, [pc, #108]	@ (8001a58 <HAL_UART_RxCpltCallback+0x210>)
 80019ea:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1d4>)
 80019ec:	f002 f8e5 	bl	8003bba <HAL_UART_Transmit>
		  //flag_title = 1;
		  //flag_A = 0;
		  }

	   if (flag_B == 1){
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_UART_RxCpltCallback+0x1f0>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0x1be>
		   HAL_UART_Transmit(&huart2, B, sizeof(B), 2000);
 80019f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019fc:	2204      	movs	r2, #4
 80019fe:	4917      	ldr	r1, [pc, #92]	@ (8001a5c <HAL_UART_RxCpltCallback+0x214>)
 8001a00:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <HAL_UART_RxCpltCallback+0x1d4>)
 8001a02:	f002 f8da 	bl	8003bba <HAL_UART_Transmit>
		   }
	   ;
//--------------------------Fin del bloque para transmitir-------------------


}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000604a 	.word	0x2000604a
 8001a14:	20006034 	.word	0x20006034
 8001a18:	20006048 	.word	0x20006048
 8001a1c:	20005d64 	.word	0x20005d64
 8001a20:	20005dac 	.word	0x20005dac
 8001a24:	2000604c 	.word	0x2000604c
 8001a28:	2000604d 	.word	0x2000604d
 8001a2c:	2000604e 	.word	0x2000604e
 8001a30:	2000604f 	.word	0x2000604f
 8001a34:	20006050 	.word	0x20006050
 8001a38:	20006051 	.word	0x20006051
 8001a3c:	20006052 	.word	0x20006052
 8001a40:	20006054 	.word	0x20006054
 8001a44:	20006053 	.word	0x20006053
 8001a48:	20005c5c 	.word	0x20005c5c
 8001a4c:	20005c64 	.word	0x20005c64
 8001a50:	20005c6c 	.word	0x20005c6c
 8001a54:	20005c74 	.word	0x20005c74
 8001a58:	20005c7c 	.word	0x20005c7c
 8001a5c:	20005c80 	.word	0x20005c80

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <Error_Handler+0x8>

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab8 <HAL_MspInit+0x4c>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <HAL_MspInit+0x4c>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aaa:	2007      	movs	r0, #7
 8001aac:	f000 fc64 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <HAL_SPI_MspInit+0x84>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12b      	bne.n	8001b36 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <HAL_SPI_MspInit+0x88>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_SPI_MspInit+0x88>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_SPI_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b16:	23e0      	movs	r3, #224	@ 0xe0
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b26:	2305      	movs	r3, #5
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <HAL_SPI_MspInit+0x8c>)
 8001b32:	f000 ffd3 	bl	8002adc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	@ 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40013000 	.word	0x40013000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	@ 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a9d      	ldr	r2, [pc, #628]	@ (8001de0 <HAL_UART_MspInit+0x294>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 80a8 	bne.w	8001cc0 <HAL_UART_MspInit+0x174>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	4b9b      	ldr	r3, [pc, #620]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	4a9a      	ldr	r2, [pc, #616]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b80:	4b98      	ldr	r3, [pc, #608]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	4b94      	ldr	r3, [pc, #592]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4a93      	ldr	r2, [pc, #588]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9c:	4b91      	ldr	r3, [pc, #580]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	4b8d      	ldr	r3, [pc, #564]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	4a8c      	ldr	r2, [pc, #560]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bde:	4619      	mov	r1, r3
 8001be0:	4881      	ldr	r0, [pc, #516]	@ (8001de8 <HAL_UART_MspInit+0x29c>)
 8001be2:	f000 ff7b 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be6:	2304      	movs	r3, #4
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfe:	4619      	mov	r1, r3
 8001c00:	487a      	ldr	r0, [pc, #488]	@ (8001dec <HAL_UART_MspInit+0x2a0>)
 8001c02:	f000 ff6b 	bl	8002adc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001c06:	4b7a      	ldr	r3, [pc, #488]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c08:	4a7a      	ldr	r2, [pc, #488]	@ (8001df4 <HAL_UART_MspInit+0x2a8>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001c0c:	4b78      	ldr	r3, [pc, #480]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c12:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c14:	4b76      	ldr	r3, [pc, #472]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1a:	4b75      	ldr	r3, [pc, #468]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c20:	4b73      	ldr	r3, [pc, #460]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c26:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c28:	4b71      	ldr	r3, [pc, #452]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2e:	4b70      	ldr	r3, [pc, #448]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001c34:	4b6e      	ldr	r3, [pc, #440]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c40:	4b6b      	ldr	r3, [pc, #428]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001c46:	486a      	ldr	r0, [pc, #424]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c48:	f000 fbd8 	bl	80023fc <HAL_DMA_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001c52:	f7ff ff05 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a65      	ldr	r2, [pc, #404]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c5c:	4a64      	ldr	r2, [pc, #400]	@ (8001df0 <HAL_UART_MspInit+0x2a4>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001c62:	4b65      	ldr	r3, [pc, #404]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c64:	4a65      	ldr	r2, [pc, #404]	@ (8001dfc <HAL_UART_MspInit+0x2b0>)
 8001c66:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001c68:	4b63      	ldr	r3, [pc, #396]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c70:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c72:	2240      	movs	r2, #64	@ 0x40
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c76:	4b60      	ldr	r3, [pc, #384]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c84:	4b5c      	ldr	r3, [pc, #368]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c96:	4b58      	ldr	r3, [pc, #352]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9c:	4b56      	ldr	r3, [pc, #344]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001ca2:	4855      	ldr	r0, [pc, #340]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001ca4:	f000 fbaa 	bl	80023fc <HAL_DMA_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001cae:	f7ff fed7 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001cb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001df8 <HAL_UART_MspInit+0x2ac>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cbe:	e13a      	b.n	8001f36 <HAL_UART_MspInit+0x3ea>
  else if(huart->Instance==USART2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001e00 <HAL_UART_MspInit+0x2b4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f040 80a6 	bne.w	8001e18 <HAL_UART_MspInit+0x2cc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	4b44      	ldr	r3, [pc, #272]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	4a43      	ldr	r2, [pc, #268]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cdc:	4b41      	ldr	r3, [pc, #260]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	4b3d      	ldr	r3, [pc, #244]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	4a3c      	ldr	r2, [pc, #240]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8001de4 <HAL_UART_MspInit+0x298>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d04:	230c      	movs	r3, #12
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d14:	2307      	movs	r3, #7
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4839      	ldr	r0, [pc, #228]	@ (8001e04 <HAL_UART_MspInit+0x2b8>)
 8001d20:	f000 fedc 	bl	8002adc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d24:	4b38      	ldr	r3, [pc, #224]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d26:	4a39      	ldr	r2, [pc, #228]	@ (8001e0c <HAL_UART_MspInit+0x2c0>)
 8001d28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d32:	4b35      	ldr	r3, [pc, #212]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d38:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d3e:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d46:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d52:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d58:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d64:	4828      	ldr	r0, [pc, #160]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d66:	f000 fb49 	bl	80023fc <HAL_DMA_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001d70:	f7ff fe76 	bl	8001a60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a24      	ldr	r2, [pc, #144]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d7a:	4a23      	ldr	r2, [pc, #140]	@ (8001e08 <HAL_UART_MspInit+0x2bc>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d80:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001d82:	4a24      	ldr	r2, [pc, #144]	@ (8001e14 <HAL_UART_MspInit+0x2c8>)
 8001d84:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d86:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001d88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001d90:	2240      	movs	r2, #64	@ 0x40
 8001d92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001db4:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001dc0:	4813      	ldr	r0, [pc, #76]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001dc2:	f000 fb1b 	bl	80023fc <HAL_DMA_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8001dcc:	f7ff fe48 	bl	8001a60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <HAL_UART_MspInit+0x2c4>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ddc:	e0ab      	b.n	8001f36 <HAL_UART_MspInit+0x3ea>
 8001dde:	bf00      	nop
 8001de0:	40005000 	.word	0x40005000
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	20005df4 	.word	0x20005df4
 8001df4:	40026010 	.word	0x40026010
 8001df8:	20005e54 	.word	0x20005e54
 8001dfc:	400260b8 	.word	0x400260b8
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40020000 	.word	0x40020000
 8001e08:	20005eb4 	.word	0x20005eb4
 8001e0c:	40026088 	.word	0x40026088
 8001e10:	20005f14 	.word	0x20005f14
 8001e14:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a48      	ldr	r2, [pc, #288]	@ (8001f40 <HAL_UART_MspInit+0x3f4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f040 8089 	bne.w	8001f36 <HAL_UART_MspInit+0x3ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4b46      	ldr	r3, [pc, #280]	@ (8001f44 <HAL_UART_MspInit+0x3f8>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a45      	ldr	r2, [pc, #276]	@ (8001f44 <HAL_UART_MspInit+0x3f8>)
 8001e2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b43      	ldr	r3, [pc, #268]	@ (8001f44 <HAL_UART_MspInit+0x3f8>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <HAL_UART_MspInit+0x3f8>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	4a3e      	ldr	r2, [pc, #248]	@ (8001f44 <HAL_UART_MspInit+0x3f8>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e50:	4b3c      	ldr	r3, [pc, #240]	@ (8001f44 <HAL_UART_MspInit+0x3f8>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001e5c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e6e:	2307      	movs	r3, #7
 8001e70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4833      	ldr	r0, [pc, #204]	@ (8001f48 <HAL_UART_MspInit+0x3fc>)
 8001e7a:	f000 fe2f 	bl	8002adc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001e7e:	4b33      	ldr	r3, [pc, #204]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001e80:	4a33      	ldr	r2, [pc, #204]	@ (8001f50 <HAL_UART_MspInit+0x404>)
 8001e82:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001e84:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001e86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e8a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001e8e:	2240      	movs	r2, #64	@ 0x40
 8001e90:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e92:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e98:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e9e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ea6:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb2:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eb8:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ebe:	4823      	ldr	r0, [pc, #140]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001ec0:	f000 fa9c 	bl	80023fc <HAL_DMA_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_UART_MspInit+0x382>
      Error_Handler();
 8001eca:	f7ff fdc9 	bl	8001a60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001ed2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f4c <HAL_UART_MspInit+0x400>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001edc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_UART_MspInit+0x40c>)
 8001ede:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001ee2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ee6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eee:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001ef6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001efa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f1a:	480e      	ldr	r0, [pc, #56]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001f1c:	f000 fa6e 	bl	80023fc <HAL_DMA_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_MspInit+0x3de>
      Error_Handler();
 8001f26:	f7ff fd9b 	bl	8001a60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f30:	4a08      	ldr	r2, [pc, #32]	@ (8001f54 <HAL_UART_MspInit+0x408>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	@ 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40004800 	.word	0x40004800
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	20005f74 	.word	0x20005f74
 8001f50:	40026058 	.word	0x40026058
 8001f54:	20005fd4 	.word	0x20005fd4
 8001f58:	40026028 	.word	0x40026028

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <NMI_Handler+0x4>

08001f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <MemManage_Handler+0x4>

08001f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb2:	f000 f8cd 	bl	8002150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <DMA1_Stream0_IRQHandler+0x10>)
 8001fc2:	f000 fb21 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20005df4 	.word	0x20005df4

08001fd0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <DMA1_Stream1_IRQHandler+0x10>)
 8001fd6:	f000 fb17 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20005fd4 	.word	0x20005fd4

08001fe4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <DMA1_Stream3_IRQHandler+0x10>)
 8001fea:	f000 fb0d 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20005f74 	.word	0x20005f74

08001ff8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <DMA1_Stream5_IRQHandler+0x10>)
 8001ffe:	f000 fb03 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20005eb4 	.word	0x20005eb4

0800200c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <DMA1_Stream6_IRQHandler+0x10>)
 8002012:	f000 faf9 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20005f14 	.word	0x20005f14

08002020 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA1_Stream7_IRQHandler+0x10>)
 8002026:	f000 faef 	bl	8002608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20005e54 	.word	0x20005e54

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <SystemInit+0x20>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <SystemInit+0x20>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  



  ldr   sp, =_estack      /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800205c:	f7ff ffea 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	@ (8002098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	@ (80020a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002086:	f002 fd07 	bl	8004a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7fe fefd 	bl	8000e88 <main>
  bx  lr    
 800208e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002098:	20005ca8 	.word	0x20005ca8
  ldr r2, =_sidata
 800209c:	0802a148 	.word	0x0802a148
  ldr r2, =_sbss
 80020a0:	20005ca8 	.word	0x20005ca8
  ldr r4, =_ebss
 80020a4:	20006070 	.word	0x20006070

080020a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC_IRQHandler>
	...

080020ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_Init+0x40>)
 80020b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <HAL_Init+0x40>)
 80020c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <HAL_Init+0x40>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 f94f 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	2000      	movs	r0, #0
 80020dc:	f000 f808 	bl	80020f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff fcc4 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f8:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_InitTick+0x54>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x58>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002106:	fbb3 f3f1 	udiv	r3, r3, r1
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f967 	bl	80023e2 <HAL_SYSTICK_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00e      	b.n	800213c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d80a      	bhi.n	800213a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f000 f92f 	bl	800238e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002130:	4a06      	ldr	r2, [pc, #24]	@ (800214c <HAL_InitTick+0x5c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20005c88 	.word	0x20005c88
 8002148:	20005c90 	.word	0x20005c90
 800214c:	20005c8c 	.word	0x20005c8c

08002150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_IncTick+0x20>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_IncTick+0x24>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <HAL_IncTick+0x24>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20005c90 	.word	0x20005c90
 8002174:	20006058 	.word	0x20006058

08002178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <HAL_GetTick+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20006058 	.word	0x20006058

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff ffee 	bl	8002178 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffde 	bl	8002178 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20005c90 	.word	0x20005c90

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	@ (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f7ff ff8e 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff29 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a0:	f7ff ff3e 	bl	8002220 <__NVIC_GetPriorityGrouping>
 80023a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	6978      	ldr	r0, [r7, #20]
 80023ac:	f7ff ff8e 	bl	80022cc <NVIC_EncodePriority>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff5d 	bl	8002278 <__NVIC_SetPriority>
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff31 	bl	800223c <__NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ffa2 	bl	8002334 <SysTick_Config>
 80023f0:	4603      	mov	r3, r0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff feb6 	bl	8002178 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e099      	b.n	800254c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	e00f      	b.n	800245a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243a:	f7ff fe9d 	bl	8002178 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b05      	cmp	r3, #5
 8002446:	d908      	bls.n	800245a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2203      	movs	r2, #3
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e078      	b.n	800254c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e8      	bne.n	800243a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <HAL_DMA_Init+0x158>)
 8002474:	4013      	ands	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	4313      	orrs	r3, r2
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 0307 	bic.w	r3, r3, #7
 80024da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d117      	bne.n	800251e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fa6f 	bl	80029e4 <DMA_CheckFifoParam>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	@ 0x40
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800251a:	2301      	movs	r3, #1
 800251c:	e016      	b.n	800254c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa26 	bl	8002978 <DMA_CalcBaseAndBitshift>
 800252c:	4603      	mov	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	223f      	movs	r2, #63	@ 0x3f
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	f010803f 	.word	0xf010803f

08002558 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_DMA_Start_IT+0x26>
 800257a:	2302      	movs	r3, #2
 800257c:	e040      	b.n	8002600 <HAL_DMA_Start_IT+0xa8>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d12f      	bne.n	80025f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f9b8 	bl	800291c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b0:	223f      	movs	r2, #63	@ 0x3f
 80025b2:	409a      	lsls	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0216 	orr.w	r2, r2, #22
 80025c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0208 	orr.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e005      	b.n	80025fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002614:	4b8e      	ldr	r3, [pc, #568]	@ (8002850 <HAL_DMA_IRQHandler+0x248>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a8e      	ldr	r2, [pc, #568]	@ (8002854 <HAL_DMA_IRQHandler+0x24c>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0a9b      	lsrs	r3, r3, #10
 8002620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	2208      	movs	r2, #8
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01a      	beq.n	8002674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	2208      	movs	r2, #8
 8002662:	409a      	lsls	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	2201      	movs	r2, #1
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	2204      	movs	r2, #4
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d012      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2204      	movs	r2, #4
 80026ce:	409a      	lsls	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	f043 0204 	orr.w	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	2210      	movs	r2, #16
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d043      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03c      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	2210      	movs	r2, #16
 8002704:	409a      	lsls	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d018      	beq.n	800274a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d108      	bne.n	8002738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d024      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
 8002736:	e01f      	b.n	8002778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01b      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
 8002748:	e016      	b.n	8002778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0208 	bic.w	r2, r2, #8
 8002766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277c:	2220      	movs	r2, #32
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 808f 	beq.w	80028a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8087 	beq.w	80028a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	2220      	movs	r2, #32
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d136      	bne.n	8002820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0216 	bic.w	r2, r2, #22
 80027c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x1da>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	223f      	movs	r2, #63	@ 0x3f
 80027f8:	409a      	lsls	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002812:	2b00      	cmp	r3, #0
 8002814:	d07e      	beq.n	8002914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
        }
        return;
 800281e:	e079      	b.n	8002914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01d      	beq.n	800286a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	2b00      	cmp	r3, #0
 8002842:	d031      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e02c      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
 800284e:	bf00      	nop
 8002850:	20005c88 	.word	0x20005c88
 8002854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d023      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e01e      	b.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10f      	bne.n	8002898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0210 	bic.w	r2, r2, #16
 8002886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d032      	beq.n	8002916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d022      	beq.n	8002902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2205      	movs	r2, #5
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3301      	adds	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d307      	bcc.n	80028f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f2      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x2cc>
 80028ee:	e000      	b.n	80028f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
 8002912:	e000      	b.n	8002916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002914:	bf00      	nop
    }
  }
}
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002938:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b40      	cmp	r3, #64	@ 0x40
 8002948:	d108      	bne.n	800295c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800295a:	e007      	b.n	800296c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3b10      	subs	r3, #16
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <DMA_CalcBaseAndBitshift+0x64>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002992:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d909      	bls.n	80029ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	1d1a      	adds	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b8:	e007      	b.n	80029ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	aaaaaaab 	.word	0xaaaaaaab
 80029e0:	0802a130 	.word	0x0802a130

080029e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d11f      	bne.n	8002a3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d856      	bhi.n	8002ab2 <DMA_CheckFifoParam+0xce>
 8002a04:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <DMA_CheckFifoParam+0x28>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a2f 	.word	0x08002a2f
 8002a14:	08002a1d 	.word	0x08002a1d
 8002a18:	08002ab3 	.word	0x08002ab3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d046      	beq.n	8002ab6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2c:	e043      	b.n	8002ab6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a36:	d140      	bne.n	8002aba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e03d      	b.n	8002aba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a46:	d121      	bne.n	8002a8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d837      	bhi.n	8002abe <DMA_CheckFifoParam+0xda>
 8002a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <DMA_CheckFifoParam+0x70>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a6b 	.word	0x08002a6b
 8002a5c:	08002a65 	.word	0x08002a65
 8002a60:	08002a7d 	.word	0x08002a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      break;
 8002a68:	e030      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d025      	beq.n	8002ac2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7a:	e022      	b.n	8002ac2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a84:	d11f      	bne.n	8002ac6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a8a:	e01c      	b.n	8002ac6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d903      	bls.n	8002a9a <DMA_CheckFifoParam+0xb6>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d003      	beq.n	8002aa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a98:	e018      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9e:	e015      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00e      	beq.n	8002aca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e00b      	b.n	8002aca <DMA_CheckFifoParam+0xe6>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e00a      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e008      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e006      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e004      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
    }
  } 
  
  return status; 
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	@ 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e165      	b.n	8002dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8154 	bne.w	8002dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80ae 	beq.w	8002dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b5d      	ldr	r3, [pc, #372]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c72:	4b5a      	ldr	r3, [pc, #360]	@ (8002ddc <HAL_GPIO_Init+0x300>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a58      	ldr	r2, [pc, #352]	@ (8002de0 <HAL_GPIO_Init+0x304>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8002de4 <HAL_GPIO_Init+0x308>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	@ (8002de8 <HAL_GPIO_Init+0x30c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x216>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002dec <HAL_GPIO_Init+0x310>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x212>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002df0 <HAL_GPIO_Init+0x314>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x20e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002df4 <HAL_GPIO_Init+0x318>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x20a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8002df8 <HAL_GPIO_Init+0x31c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x206>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a49      	ldr	r2, [pc, #292]	@ (8002dfc <HAL_GPIO_Init+0x320>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x202>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x21c>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d08:	4935      	ldr	r1, [pc, #212]	@ (8002de0 <HAL_GPIO_Init+0x304>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3a:	4a31      	ldr	r2, [pc, #196]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d40:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d64:	4a26      	ldr	r2, [pc, #152]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db8:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <HAL_GPIO_Init+0x324>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f ae96 	bls.w	8002af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3724      	adds	r7, #36	@ 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0cc      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d90c      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b65      	ldr	r3, [pc, #404]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a58      	ldr	r2, [pc, #352]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d044      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d119      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e067      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f16:	4b37      	ldr	r3, [pc, #220]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 0203 	bic.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4934      	ldr	r1, [pc, #208]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f28:	f7ff f926 	bl	8002178 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7ff f922 	bl	8002178 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e04f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 020c 	and.w	r2, r3, #12
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1eb      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b25      	ldr	r3, [pc, #148]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d20c      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b22      	ldr	r3, [pc, #136]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002faa:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f855 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f886 	bl	80020f0 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	0802a118 	.word	0x0802a118
 8002ffc:	20005c88 	.word	0x20005c88
 8003000:	20005c8c 	.word	0x20005c8c

08003004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003008:	4b03      	ldr	r3, [pc, #12]	@ (8003018 <HAL_RCC_GetHCLKFreq+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20005c88 	.word	0x20005c88

0800301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003020:	f7ff fff0 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	0a9b      	lsrs	r3, r3, #10
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4903      	ldr	r1, [pc, #12]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	0802a128 	.word	0x0802a128

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003048:	f7ff ffdc 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0b5b      	lsrs	r3, r3, #13
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	@ (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	0802a128 	.word	0x0802a128

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003070:	b0ae      	sub	sp, #184	@ 0xb8
 8003072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003092:	4bcb      	ldr	r3, [pc, #812]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b0c      	cmp	r3, #12
 800309c:	f200 8206 	bhi.w	80034ac <HAL_RCC_GetSysClockFreq+0x440>
 80030a0:	a201      	add	r2, pc, #4	@ (adr r2, 80030a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030dd 	.word	0x080030dd
 80030ac:	080034ad 	.word	0x080034ad
 80030b0:	080034ad 	.word	0x080034ad
 80030b4:	080034ad 	.word	0x080034ad
 80030b8:	080030e5 	.word	0x080030e5
 80030bc:	080034ad 	.word	0x080034ad
 80030c0:	080034ad 	.word	0x080034ad
 80030c4:	080034ad 	.word	0x080034ad
 80030c8:	080030ed 	.word	0x080030ed
 80030cc:	080034ad 	.word	0x080034ad
 80030d0:	080034ad 	.word	0x080034ad
 80030d4:	080034ad 	.word	0x080034ad
 80030d8:	080032dd 	.word	0x080032dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030dc:	4bb9      	ldr	r3, [pc, #740]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80030de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030e2:	e1e7      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4bb8      	ldr	r3, [pc, #736]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ea:	e1e3      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ec:	4bb4      	ldr	r3, [pc, #720]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f8:	4bb1      	ldr	r3, [pc, #708]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d071      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003104:	4bae      	ldr	r3, [pc, #696]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	2200      	movs	r2, #0
 800310c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003110:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800312a:	4622      	mov	r2, r4
 800312c:	462b      	mov	r3, r5
 800312e:	f04f 0000 	mov.w	r0, #0
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	0159      	lsls	r1, r3, #5
 8003138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800313c:	0150      	lsls	r0, r2, #5
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4621      	mov	r1, r4
 8003144:	1a51      	subs	r1, r2, r1
 8003146:	6439      	str	r1, [r7, #64]	@ 0x40
 8003148:	4629      	mov	r1, r5
 800314a:	eb63 0301 	sbc.w	r3, r3, r1
 800314e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800315c:	4649      	mov	r1, r9
 800315e:	018b      	lsls	r3, r1, #6
 8003160:	4641      	mov	r1, r8
 8003162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003166:	4641      	mov	r1, r8
 8003168:	018a      	lsls	r2, r1, #6
 800316a:	4641      	mov	r1, r8
 800316c:	1a51      	subs	r1, r2, r1
 800316e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003170:	4649      	mov	r1, r9
 8003172:	eb63 0301 	sbc.w	r3, r3, r1
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003184:	4649      	mov	r1, r9
 8003186:	00cb      	lsls	r3, r1, #3
 8003188:	4641      	mov	r1, r8
 800318a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318e:	4641      	mov	r1, r8
 8003190:	00ca      	lsls	r2, r1, #3
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	4603      	mov	r3, r0
 8003198:	4622      	mov	r2, r4
 800319a:	189b      	adds	r3, r3, r2
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
 800319e:	462b      	mov	r3, r5
 80031a0:	460a      	mov	r2, r1
 80031a2:	eb42 0303 	adc.w	r3, r2, r3
 80031a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031b4:	4629      	mov	r1, r5
 80031b6:	024b      	lsls	r3, r1, #9
 80031b8:	4621      	mov	r1, r4
 80031ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031be:	4621      	mov	r1, r4
 80031c0:	024a      	lsls	r2, r1, #9
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80031d8:	f7fd f814 	bl	8000204 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031e6:	e067      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e8:	4b75      	ldr	r3, [pc, #468]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80031f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003202:	2300      	movs	r3, #0
 8003204:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003206:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4621      	mov	r1, r4
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003228:	4629      	mov	r1, r5
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800323c:	4649      	mov	r1, r9
 800323e:	018b      	lsls	r3, r1, #6
 8003240:	4641      	mov	r1, r8
 8003242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003246:	4641      	mov	r1, r8
 8003248:	018a      	lsls	r2, r1, #6
 800324a:	4641      	mov	r1, r8
 800324c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003250:	4649      	mov	r1, r9
 8003252:	eb63 0b01 	sbc.w	fp, r3, r1
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003262:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800326a:	4692      	mov	sl, r2
 800326c:	469b      	mov	fp, r3
 800326e:	4623      	mov	r3, r4
 8003270:	eb1a 0303 	adds.w	r3, sl, r3
 8003274:	623b      	str	r3, [r7, #32]
 8003276:	462b      	mov	r3, r5
 8003278:	eb4b 0303 	adc.w	r3, fp, r3
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032a0:	2200      	movs	r2, #0
 80032a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80032a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80032a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80032aa:	f7fc ffab 	bl	8000204 <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4613      	mov	r3, r2
 80032b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032b8:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80032ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032da:	e0eb      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e8:	4b35      	ldr	r3, [pc, #212]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d06b      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f4:	4b32      	ldr	r3, [pc, #200]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	2200      	movs	r2, #0
 80032fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003306:	663b      	str	r3, [r7, #96]	@ 0x60
 8003308:	2300      	movs	r3, #0
 800330a:	667b      	str	r3, [r7, #100]	@ 0x64
 800330c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003310:	4622      	mov	r2, r4
 8003312:	462b      	mov	r3, r5
 8003314:	f04f 0000 	mov.w	r0, #0
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	0159      	lsls	r1, r3, #5
 800331e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003322:	0150      	lsls	r0, r2, #5
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4621      	mov	r1, r4
 800332a:	1a51      	subs	r1, r2, r1
 800332c:	61b9      	str	r1, [r7, #24]
 800332e:	4629      	mov	r1, r5
 8003330:	eb63 0301 	sbc.w	r3, r3, r1
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003342:	4659      	mov	r1, fp
 8003344:	018b      	lsls	r3, r1, #6
 8003346:	4651      	mov	r1, sl
 8003348:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334c:	4651      	mov	r1, sl
 800334e:	018a      	lsls	r2, r1, #6
 8003350:	4651      	mov	r1, sl
 8003352:	ebb2 0801 	subs.w	r8, r2, r1
 8003356:	4659      	mov	r1, fp
 8003358:	eb63 0901 	sbc.w	r9, r3, r1
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003368:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003370:	4690      	mov	r8, r2
 8003372:	4699      	mov	r9, r3
 8003374:	4623      	mov	r3, r4
 8003376:	eb18 0303 	adds.w	r3, r8, r3
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	462b      	mov	r3, r5
 800337e:	eb49 0303 	adc.w	r3, r9, r3
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003390:	4629      	mov	r1, r5
 8003392:	024b      	lsls	r3, r1, #9
 8003394:	4621      	mov	r1, r4
 8003396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800339a:	4621      	mov	r1, r4
 800339c:	024a      	lsls	r2, r1, #9
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033a6:	2200      	movs	r2, #0
 80033a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80033ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033b0:	f7fc ff28 	bl	8000204 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033be:	e065      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x420>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033cc:	4b3d      	ldr	r3, [pc, #244]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	2200      	movs	r2, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	4611      	mov	r1, r2
 80033d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80033de:	2300      	movs	r3, #0
 80033e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80033e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80033e6:	4642      	mov	r2, r8
 80033e8:	464b      	mov	r3, r9
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	0159      	lsls	r1, r3, #5
 80033f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f8:	0150      	lsls	r0, r2, #5
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4641      	mov	r1, r8
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	4649      	mov	r1, r9
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003418:	4659      	mov	r1, fp
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	4651      	mov	r1, sl
 800341e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003422:	4651      	mov	r1, sl
 8003424:	018a      	lsls	r2, r1, #6
 8003426:	4651      	mov	r1, sl
 8003428:	1a54      	subs	r4, r2, r1
 800342a:	4659      	mov	r1, fp
 800342c:	eb63 0501 	sbc.w	r5, r3, r1
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	00eb      	lsls	r3, r5, #3
 800343a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343e:	00e2      	lsls	r2, r4, #3
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	4643      	mov	r3, r8
 8003446:	18e3      	adds	r3, r4, r3
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	464b      	mov	r3, r9
 800344c:	eb45 0303 	adc.w	r3, r5, r3
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345e:	4629      	mov	r1, r5
 8003460:	028b      	lsls	r3, r1, #10
 8003462:	4621      	mov	r1, r4
 8003464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003468:	4621      	mov	r1, r4
 800346a:	028a      	lsls	r2, r1, #10
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003474:	2200      	movs	r2, #0
 8003476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003478:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800347a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800347e:	f7fc fec1 	bl	8000204 <__aeabi_uldivmod>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4613      	mov	r3, r2
 8003488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800348c:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0f1b      	lsrs	r3, r3, #28
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800349a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800349e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034aa:	e003      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80034ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	37b8      	adds	r7, #184	@ 0xb8
 80034bc:	46bd      	mov	sp, r7
 80034be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	00f42400 	.word	0x00f42400

080034cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e28d      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8083 	beq.w	80035f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034ec:	4b94      	ldr	r3, [pc, #592]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d019      	beq.n	800352c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034f8:	4b91      	ldr	r3, [pc, #580]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8003500:	2b08      	cmp	r3, #8
 8003502:	d106      	bne.n	8003512 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003504:	4b8e      	ldr	r3, [pc, #568]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003510:	d00c      	beq.n	800352c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b8b      	ldr	r3, [pc, #556]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d112      	bne.n	8003544 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b88      	ldr	r3, [pc, #544]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003526:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800352a:	d10b      	bne.n	8003544 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b84      	ldr	r3, [pc, #528]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05b      	beq.n	80035f0 <HAL_RCC_OscConfig+0x124>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d157      	bne.n	80035f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e25a      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x90>
 800354e:	4b7c      	ldr	r3, [pc, #496]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7b      	ldr	r2, [pc, #492]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xcc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0xb4>
 8003566:	4b76      	ldr	r3, [pc, #472]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a72      	ldr	r2, [pc, #456]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xcc>
 8003580:	4b6f      	ldr	r3, [pc, #444]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6e      	ldr	r2, [pc, #440]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b6c      	ldr	r3, [pc, #432]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6b      	ldr	r2, [pc, #428]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fdea 	bl	8002178 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fde6 	bl	8002178 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	@ 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e21f      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b61      	ldr	r3, [pc, #388]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xdc>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fdd6 	bl	8002178 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fdd2 	bl	8002178 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	@ 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e20b      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	4b57      	ldr	r3, [pc, #348]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x104>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d06f      	beq.n	80036de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035fe:	4b50      	ldr	r3, [pc, #320]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b00      	cmp	r3, #0
 8003608:	d017      	beq.n	800363a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800360a:	4b4d      	ldr	r3, [pc, #308]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003612:	2b08      	cmp	r3, #8
 8003614:	d105      	bne.n	8003622 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003616:	4b4a      	ldr	r3, [pc, #296]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b47      	ldr	r3, [pc, #284]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d11c      	bne.n	8003668 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b44      	ldr	r3, [pc, #272]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d116      	bne.n	8003668 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	4b41      	ldr	r3, [pc, #260]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x186>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e1d3      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	4b3b      	ldr	r3, [pc, #236]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4937      	ldr	r1, [pc, #220]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	e03a      	b.n	80036de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003670:	4b34      	ldr	r3, [pc, #208]	@ (8003744 <HAL_RCC_OscConfig+0x278>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fe fd7f 	bl	8002178 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367e:	f7fe fd7b 	bl	8002178 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e1b4      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369c:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4925      	ldr	r1, [pc, #148]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	e015      	b.n	80036de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b2:	4b24      	ldr	r3, [pc, #144]	@ (8003744 <HAL_RCC_OscConfig+0x278>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe fd5e 	bl	8002178 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fe fd5a 	bl	8002178 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e193      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d036      	beq.n	8003758 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f2:	4b15      	ldr	r3, [pc, #84]	@ (8003748 <HAL_RCC_OscConfig+0x27c>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fe fd3e 	bl	8002178 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003700:	f7fe fd3a 	bl	8002178 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e173      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003712:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x234>
 800371e:	e01b      	b.n	8003758 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003720:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_OscConfig+0x27c>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fe fd27 	bl	8002178 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	e00e      	b.n	800374c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372e:	f7fe fd23 	bl	8002178 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d907      	bls.n	800374c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e15c      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
 8003740:	40023800 	.word	0x40023800
 8003744:	42470000 	.word	0x42470000
 8003748:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b8a      	ldr	r3, [pc, #552]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ea      	bne.n	800372e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8097 	beq.w	8003894 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b83      	ldr	r3, [pc, #524]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b7f      	ldr	r3, [pc, #508]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	4a7e      	ldr	r2, [pc, #504]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	@ 0x40
 8003786:	4b7c      	ldr	r3, [pc, #496]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003796:	4b79      	ldr	r3, [pc, #484]	@ (800397c <HAL_RCC_OscConfig+0x4b0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d118      	bne.n	80037d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a2:	4b76      	ldr	r3, [pc, #472]	@ (800397c <HAL_RCC_OscConfig+0x4b0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	@ (800397c <HAL_RCC_OscConfig+0x4b0>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7fe fce3 	bl	8002178 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7fe fcdf 	bl	8002178 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e118      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c8:	4b6c      	ldr	r3, [pc, #432]	@ (800397c <HAL_RCC_OscConfig+0x4b0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d106      	bne.n	80037ea <HAL_RCC_OscConfig+0x31e>
 80037dc:	4b66      	ldr	r3, [pc, #408]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e0:	4a65      	ldr	r2, [pc, #404]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e8:	e01c      	b.n	8003824 <HAL_RCC_OscConfig+0x358>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0x340>
 80037f2:	4b61      	ldr	r3, [pc, #388]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f6:	4a60      	ldr	r2, [pc, #384]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	4a5d      	ldr	r2, [pc, #372]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	@ 0x70
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0x358>
 800380c:	4b5a      	ldr	r3, [pc, #360]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003810:	4a59      	ldr	r2, [pc, #356]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	@ 0x70
 8003818:	4b57      	ldr	r3, [pc, #348]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381c:	4a56      	ldr	r2, [pc, #344]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800381e:	f023 0304 	bic.w	r3, r3, #4
 8003822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fe fca4 	bl	8002178 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7fe fca0 	bl	8002178 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0d7      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384a:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ee      	beq.n	8003834 <HAL_RCC_OscConfig+0x368>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe fc8e 	bl	8002178 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe fc8a 	bl	8002178 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0c1      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003876:	4b40      	ldr	r3, [pc, #256]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1ee      	bne.n	8003860 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b3b      	ldr	r3, [pc, #236]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	4a3a      	ldr	r2, [pc, #232]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003892:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80ad 	beq.w	80039f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800389e:	4b36      	ldr	r3, [pc, #216]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d060      	beq.n	800396c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d145      	bne.n	800393e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b33      	ldr	r3, [pc, #204]	@ (8003980 <HAL_RCC_OscConfig+0x4b4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe fc5e 	bl	8002178 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe fc5a 	bl	8002178 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e093      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	491b      	ldr	r1, [pc, #108]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_RCC_OscConfig+0x4b4>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fe fc2f 	bl	8002178 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fc2b 	bl	8002178 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e064      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003930:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x452>
 800393c:	e05c      	b.n	80039f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b10      	ldr	r3, [pc, #64]	@ (8003980 <HAL_RCC_OscConfig+0x4b4>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fc18 	bl	8002178 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fc14 	bl	8002178 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e04d      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x480>
 800396a:	e045      	b.n	80039f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e040      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
 8003978:	40023800 	.word	0x40023800
 800397c:	40007000 	.word	0x40007000
 8003980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003984:	4b1f      	ldr	r3, [pc, #124]	@ (8003a04 <HAL_RCC_OscConfig+0x538>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d030      	beq.n	80039f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d129      	bne.n	80039f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d122      	bne.n	80039f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039b4:	4013      	ands	r3, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	4293      	cmp	r3, r2
 80039be:	d119      	bne.n	80039f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	3b01      	subs	r3, #1
 80039ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d10f      	bne.n	80039f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e07b      	b.n	8003b12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a2a:	d009      	beq.n	8003a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe f82e 	bl	8001abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	f003 0104 	and.w	r1, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	f003 0210 	and.w	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e042      	b.n	8003bb2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fe f803 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2224      	movs	r2, #36	@ 0x24
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fc58 	bl	8004414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08a      	sub	sp, #40	@ 0x28
 8003bbe:	af02      	add	r7, sp, #8
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d175      	bne.n	8003cc6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_Transmit+0x2c>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e06e      	b.n	8003cc8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2221      	movs	r2, #33	@ 0x21
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bf8:	f7fe fabe 	bl	8002178 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	88fa      	ldrh	r2, [r7, #6]
 8003c02:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c12:	d108      	bne.n	8003c26 <HAL_UART_Transmit+0x6c>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	e003      	b.n	8003c2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c2e:	e02e      	b.n	8003c8e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2200      	movs	r2, #0
 8003c38:	2180      	movs	r1, #128	@ 0x80
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fa6a 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e03a      	b.n	8003cc8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c66:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e007      	b.n	8003c80 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1cb      	bne.n	8003c30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2140      	movs	r1, #64	@ 0x40
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fa36 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e006      	b.n	8003cc8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	@ 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d156      	bne.n	8003d98 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UART_Transmit_DMA+0x26>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e04f      	b.n	8003d9a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2221      	movs	r2, #33	@ 0x21
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	4a21      	ldr	r2, [pc, #132]	@ (8003da4 <HAL_UART_Transmit_DMA+0xd4>)
 8003d20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d26:	4a20      	ldr	r2, [pc, #128]	@ (8003da8 <HAL_UART_Transmit_DMA+0xd8>)
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dac <HAL_UART_Transmit_DMA+0xdc>)
 8003d30:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	2200      	movs	r2, #0
 8003d38:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	461a      	mov	r2, r3
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	f7fe fc01 	bl	8002558 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d80:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e5      	bne.n	8003d60 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3730      	adds	r7, #48	@ 0x30
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08003e63 	.word	0x08003e63
 8003da8:	08003efd 	.word	0x08003efd
 8003dac:	08004081 	.word	0x08004081

08003db0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d112      	bne.n	8003df0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_UART_Receive_DMA+0x26>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00b      	b.n	8003df2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f9ee 	bl	80041c8 <UART_Start_Receive_DMA>
 8003dec:	4603      	mov	r3, r0
 8003dee:	e000      	b.n	8003df2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b090      	sub	sp, #64	@ 0x40
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d137      	bne.n	8003eee <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e80:	2200      	movs	r2, #0
 8003e82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3314      	adds	r3, #20
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	623b      	str	r3, [r7, #32]
   return(result);
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3314      	adds	r3, #20
 8003ea2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ea4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e5      	bne.n	8003e84 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ed8:	61fa      	str	r2, [r7, #28]
 8003eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	69b9      	ldr	r1, [r7, #24]
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eec:	e002      	b.n	8003ef4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003eee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003ef0:	f7ff ff83 	bl	8003dfa <HAL_UART_TxCpltCallback>
}
 8003ef4:	bf00      	nop
 8003ef6:	3740      	adds	r7, #64	@ 0x40
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff7f 	bl	8003e0e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b09c      	sub	sp, #112	@ 0x70
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d172      	bne.n	800401a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f36:	2200      	movs	r2, #0
 8003f38:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f5c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e5      	bne.n	8003f3a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003fc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e5      	bne.n	8003fa2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d119      	bne.n	800401a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f023 0310 	bic.w	r3, r3, #16
 8003ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004006:	61fa      	str	r2, [r7, #28]
 8004008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	617b      	str	r3, [r7, #20]
   return(result);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e5      	bne.n	8003fe6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800401c:	2200      	movs	r2, #0
 800401e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	2b01      	cmp	r3, #1
 8004026:	d106      	bne.n	8004036 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800402a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800402c:	4619      	mov	r1, r3
 800402e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004030:	f7ff ff0b 	bl	8003e4a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004034:	e002      	b.n	800403c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004036:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004038:	f7fd fc06 	bl	8001848 <HAL_UART_RxCpltCallback>
}
 800403c:	bf00      	nop
 800403e:	3770      	adds	r7, #112	@ 0x70
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	4619      	mov	r1, r3
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff feed 	bl	8003e4a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004070:	e002      	b.n	8004078 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff fed5 	bl	8003e22 <HAL_UART_RxHalfCpltCallback>
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409c:	2b80      	cmp	r3, #128	@ 0x80
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b21      	cmp	r3, #33	@ 0x21
 80040b2:	d108      	bne.n	80040c6 <UART_DMAError+0x46>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80040c0:	68b8      	ldr	r0, [r7, #8]
 80040c2:	f000 f91b 	bl	80042fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b22      	cmp	r3, #34	@ 0x22
 80040e6:	d108      	bne.n	80040fa <UART_DMAError+0x7a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80040f4:	68b8      	ldr	r0, [r7, #8]
 80040f6:	f000 f929 	bl	800434c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0210 	orr.w	r2, r3, #16
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004106:	68b8      	ldr	r0, [r7, #8]
 8004108:	f7ff fe95 	bl	8003e36 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004124:	e03b      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d037      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fe f823 	bl	8002178 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <UART_WaitOnFlagUntilTimeout+0x30>
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e03a      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d023      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b80      	cmp	r3, #128	@ 0x80
 800415a:	d020      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0x8a>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d01d      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d116      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8e0 	bl	800434c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2208      	movs	r2, #8
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e00f      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d0b4      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b098      	sub	sp, #96	@ 0x60
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	88fa      	ldrh	r2, [r7, #6]
 80041e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2222      	movs	r2, #34	@ 0x22
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	4a3e      	ldr	r2, [pc, #248]	@ (80042f0 <UART_Start_Receive_DMA+0x128>)
 80041f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fc:	4a3d      	ldr	r2, [pc, #244]	@ (80042f4 <UART_Start_Receive_DMA+0x12c>)
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004204:	4a3c      	ldr	r2, [pc, #240]	@ (80042f8 <UART_Start_Receive_DMA+0x130>)
 8004206:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420c:	2200      	movs	r2, #0
 800420e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	f7fe f996 	bl	8002558 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d019      	beq.n	800427e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800425a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004260:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800426a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800426c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004270:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e5      	bne.n	800424a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	657b      	str	r3, [r7, #84]	@ 0x54
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800429e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3314      	adds	r3, #20
 80042b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	617b      	str	r3, [r7, #20]
   return(result);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3314      	adds	r3, #20
 80042d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80042d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6a39      	ldr	r1, [r7, #32]
 80042d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e5      	bne.n	80042b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3760      	adds	r7, #96	@ 0x60
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	08003f19 	.word	0x08003f19
 80042f4:	08004045 	.word	0x08004045
 80042f8:	08004081 	.word	0x08004081

080042fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	@ 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	60bb      	str	r3, [r7, #8]
   return(result);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	61ba      	str	r2, [r7, #24]
 8004326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6979      	ldr	r1, [r7, #20]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	613b      	str	r3, [r7, #16]
   return(result);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004340:	bf00      	nop
 8004342:	3724      	adds	r7, #36	@ 0x24
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b095      	sub	sp, #84	@ 0x54
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004374:	643a      	str	r2, [r7, #64]	@ 0x40
 8004376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3314      	adds	r3, #20
 800438e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	61fb      	str	r3, [r7, #28]
   return(result);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d119      	bne.n	80043f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	647b      	str	r3, [r7, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043e4:	61ba      	str	r2, [r7, #24]
 80043e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	613b      	str	r3, [r7, #16]
   return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e5      	bne.n	80043c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004406:	bf00      	nop
 8004408:	3754      	adds	r7, #84	@ 0x54
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004418:	b0c0      	sub	sp, #256	@ 0x100
 800441a:	af00      	add	r7, sp, #0
 800441c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	68d9      	ldr	r1, [r3, #12]
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	ea40 0301 	orr.w	r3, r0, r1
 800443c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	431a      	orrs	r2, r3
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800446c:	f021 010c 	bic.w	r1, r1, #12
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800447a:	430b      	orrs	r3, r1
 800447c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	ea40 0301 	orr.w	r3, r0, r1
 800449a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8f      	ldr	r3, [pc, #572]	@ (80046e0 <UART_SetConfig+0x2cc>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d005      	beq.n	80044b4 <UART_SetConfig+0xa0>
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4b8d      	ldr	r3, [pc, #564]	@ (80046e4 <UART_SetConfig+0x2d0>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d104      	bne.n	80044be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe fdc6 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 80044b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044bc:	e003      	b.n	80044c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe fdad 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 80044c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d0:	f040 810c 	bne.w	80046ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	1891      	adds	r1, r2, r2
 80044ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044ee:	415b      	adcs	r3, r3
 80044f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044f6:	4621      	mov	r1, r4
 80044f8:	eb12 0801 	adds.w	r8, r2, r1
 80044fc:	4629      	mov	r1, r5
 80044fe:	eb43 0901 	adc.w	r9, r3, r1
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004516:	4690      	mov	r8, r2
 8004518:	4699      	mov	r9, r3
 800451a:	4623      	mov	r3, r4
 800451c:	eb18 0303 	adds.w	r3, r8, r3
 8004520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004524:	462b      	mov	r3, r5
 8004526:	eb49 0303 	adc.w	r3, r9, r3
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800453a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800453e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004542:	460b      	mov	r3, r1
 8004544:	18db      	adds	r3, r3, r3
 8004546:	653b      	str	r3, [r7, #80]	@ 0x50
 8004548:	4613      	mov	r3, r2
 800454a:	eb42 0303 	adc.w	r3, r2, r3
 800454e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004558:	f7fb fe54 	bl	8000204 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4b61      	ldr	r3, [pc, #388]	@ (80046e8 <UART_SetConfig+0x2d4>)
 8004562:	fba3 2302 	umull	r2, r3, r3, r2
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	011c      	lsls	r4, r3, #4
 800456a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004574:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004584:	415b      	adcs	r3, r3
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800458c:	4641      	mov	r1, r8
 800458e:	eb12 0a01 	adds.w	sl, r2, r1
 8004592:	4649      	mov	r1, r9
 8004594:	eb43 0b01 	adc.w	fp, r3, r1
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ac:	4692      	mov	sl, r2
 80045ae:	469b      	mov	fp, r3
 80045b0:	4643      	mov	r3, r8
 80045b2:	eb1a 0303 	adds.w	r3, sl, r3
 80045b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ba:	464b      	mov	r3, r9
 80045bc:	eb4b 0303 	adc.w	r3, fp, r3
 80045c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045d8:	460b      	mov	r3, r1
 80045da:	18db      	adds	r3, r3, r3
 80045dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80045de:	4613      	mov	r3, r2
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045ee:	f7fb fe09 	bl	8000204 <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	4b3b      	ldr	r3, [pc, #236]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80045fa:	fba3 2301 	umull	r2, r3, r3, r1
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2264      	movs	r2, #100	@ 0x64
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	1acb      	subs	r3, r1, r3
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800460e:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <UART_SetConfig+0x2d4>)
 8004610:	fba3 2302 	umull	r2, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800461c:	441c      	add	r4, r3
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004628:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800462c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004638:	415b      	adcs	r3, r3
 800463a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800463c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6339      	str	r1, [r7, #48]	@ 0x30
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800468c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004694:	460b      	mov	r3, r1
 8004696:	18db      	adds	r3, r3, r3
 8004698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800469a:	4613      	mov	r3, r2
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046aa:	f7fb fdab 	bl	8000204 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80046b4:	fba3 1302 	umull	r1, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2164      	movs	r1, #100	@ 0x64
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	3332      	adds	r3, #50	@ 0x32
 80046c6:	4a08      	ldr	r2, [pc, #32]	@ (80046e8 <UART_SetConfig+0x2d4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4422      	add	r2, r4
 80046da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046dc:	e106      	b.n	80048ec <UART_SetConfig+0x4d8>
 80046de:	bf00      	nop
 80046e0:	40011000 	.word	0x40011000
 80046e4:	40011400 	.word	0x40011400
 80046e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046fe:	4642      	mov	r2, r8
 8004700:	464b      	mov	r3, r9
 8004702:	1891      	adds	r1, r2, r2
 8004704:	6239      	str	r1, [r7, #32]
 8004706:	415b      	adcs	r3, r3
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800470e:	4641      	mov	r1, r8
 8004710:	1854      	adds	r4, r2, r1
 8004712:	4649      	mov	r1, r9
 8004714:	eb43 0501 	adc.w	r5, r3, r1
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	00eb      	lsls	r3, r5, #3
 8004722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004726:	00e2      	lsls	r2, r4, #3
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	4643      	mov	r3, r8
 800472e:	18e3      	adds	r3, r4, r3
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004734:	464b      	mov	r3, r9
 8004736:	eb45 0303 	adc.w	r3, r5, r3
 800473a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800474a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800475a:	4629      	mov	r1, r5
 800475c:	008b      	lsls	r3, r1, #2
 800475e:	4621      	mov	r1, r4
 8004760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004764:	4621      	mov	r1, r4
 8004766:	008a      	lsls	r2, r1, #2
 8004768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800476c:	f7fb fd4a 	bl	8000204 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4b60      	ldr	r3, [pc, #384]	@ (80048f8 <UART_SetConfig+0x4e4>)
 8004776:	fba3 2302 	umull	r2, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	011c      	lsls	r4, r3, #4
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004788:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800478c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	1891      	adds	r1, r2, r2
 8004796:	61b9      	str	r1, [r7, #24]
 8004798:	415b      	adcs	r3, r3
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a0:	4641      	mov	r1, r8
 80047a2:	1851      	adds	r1, r2, r1
 80047a4:	6139      	str	r1, [r7, #16]
 80047a6:	4649      	mov	r1, r9
 80047a8:	414b      	adcs	r3, r1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b8:	4659      	mov	r1, fp
 80047ba:	00cb      	lsls	r3, r1, #3
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c2:	4651      	mov	r1, sl
 80047c4:	00ca      	lsls	r2, r1, #3
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	4642      	mov	r2, r8
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047d4:	464b      	mov	r3, r9
 80047d6:	460a      	mov	r2, r1
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047f8:	4649      	mov	r1, r9
 80047fa:	008b      	lsls	r3, r1, #2
 80047fc:	4641      	mov	r1, r8
 80047fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004802:	4641      	mov	r1, r8
 8004804:	008a      	lsls	r2, r1, #2
 8004806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800480a:	f7fb fcfb 	bl	8000204 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4611      	mov	r1, r2
 8004814:	4b38      	ldr	r3, [pc, #224]	@ (80048f8 <UART_SetConfig+0x4e4>)
 8004816:	fba3 2301 	umull	r2, r3, r3, r1
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2264      	movs	r2, #100	@ 0x64
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	1acb      	subs	r3, r1, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	@ 0x32
 8004828:	4a33      	ldr	r2, [pc, #204]	@ (80048f8 <UART_SetConfig+0x4e4>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004834:	441c      	add	r4, r3
 8004836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800483a:	2200      	movs	r2, #0
 800483c:	673b      	str	r3, [r7, #112]	@ 0x70
 800483e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004840:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	1891      	adds	r1, r2, r2
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	415b      	adcs	r3, r3
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004854:	4641      	mov	r1, r8
 8004856:	1851      	adds	r1, r2, r1
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	4649      	mov	r1, r9
 800485c:	414b      	adcs	r3, r1
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800486c:	4659      	mov	r1, fp
 800486e:	00cb      	lsls	r3, r1, #3
 8004870:	4651      	mov	r1, sl
 8004872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004876:	4651      	mov	r1, sl
 8004878:	00ca      	lsls	r2, r1, #3
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	4603      	mov	r3, r0
 8004880:	4642      	mov	r2, r8
 8004882:	189b      	adds	r3, r3, r2
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004886:	464b      	mov	r3, r9
 8004888:	460a      	mov	r2, r1
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	663b      	str	r3, [r7, #96]	@ 0x60
 800489a:	667a      	str	r2, [r7, #100]	@ 0x64
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048ba:	f7fb fca3 	bl	8000204 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <UART_SetConfig+0x4e4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	@ 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	@ 0x32
 80048d6:	4a08      	ldr	r2, [pc, #32]	@ (80048f8 <UART_SetConfig+0x4e4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 020f 	and.w	r2, r3, #15
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4422      	add	r2, r4
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048f2:	46bd      	mov	sp, r7
 80048f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f8:	51eb851f 	.word	0x51eb851f

080048fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004900:	4904      	ldr	r1, [pc, #16]	@ (8004914 <MX_FATFS_Init+0x18>)
 8004902:	4805      	ldr	r0, [pc, #20]	@ (8004918 <MX_FATFS_Init+0x1c>)
 8004904:	f000 f8b0 	bl	8004a68 <FATFS_LinkDriver>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	4b03      	ldr	r3, [pc, #12]	@ (800491c <MX_FATFS_Init+0x20>)
 800490e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004910:	bf00      	nop
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20006060 	.word	0x20006060
 8004918:	20005c94 	.word	0x20005c94
 800491c:	2000605c 	.word	0x2000605c

08004920 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800492a:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <USER_initialize+0x24>)
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004930:	4b04      	ldr	r3, [pc, #16]	@ (8004944 <USER_initialize+0x24>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20005c91 	.word	0x20005c91

08004948 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004952:	4b06      	ldr	r3, [pc, #24]	@ (800496c <USER_status+0x24>)
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004958:	4b04      	ldr	r3, [pc, #16]	@ (800496c <USER_status+0x24>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20005c91 	.word	0x20005c91

08004970 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004980:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4603      	mov	r3, r0
 800499c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800499e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	603a      	str	r2, [r7, #0]
 80049b6:	71fb      	strb	r3, [r7, #7]
 80049b8:	460b      	mov	r3, r1
 80049ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
    return res;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80049e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 80049e8:	7a5b      	ldrb	r3, [r3, #9]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d131      	bne.n	8004a54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80049f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 80049f2:	7a5b      	ldrb	r3, [r3, #9]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80049fe:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 8004a00:	7a5b      	ldrb	r3, [r3, #9]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004a0e:	4b15      	ldr	r3, [pc, #84]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 8004a10:	7a5b      	ldrb	r3, [r3, #9]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b13      	ldr	r3, [pc, #76]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 8004a18:	4413      	add	r3, r2
 8004a1a:	79fa      	ldrb	r2, [r7, #7]
 8004a1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004a1e:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 8004a20:	7a5b      	ldrb	r3, [r3, #9]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	b2d1      	uxtb	r1, r2
 8004a28:	4a0e      	ldr	r2, [pc, #56]	@ (8004a64 <FATFS_LinkDriverEx+0x94>)
 8004a2a:	7251      	strb	r1, [r2, #9]
 8004a2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004a2e:	7dbb      	ldrb	r3, [r7, #22]
 8004a30:	3330      	adds	r3, #48	@ 0x30
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	223a      	movs	r2, #58	@ 0x3a
 8004a3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	3302      	adds	r3, #2
 8004a44:	222f      	movs	r2, #47	@ 0x2f
 8004a46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	3303      	adds	r3, #3
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20006064 	.word	0x20006064

08004a68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ffaa 	bl	80049d0 <FATFS_LinkDriverEx>
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <memset>:
 8004a86:	4402      	add	r2, r0
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d100      	bne.n	8004a90 <memset+0xa>
 8004a8e:	4770      	bx	lr
 8004a90:	f803 1b01 	strb.w	r1, [r3], #1
 8004a94:	e7f9      	b.n	8004a8a <memset+0x4>
	...

08004a98 <__libc_init_array>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ad0 <__libc_init_array+0x38>)
 8004a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ad4 <__libc_init_array+0x3c>)
 8004a9e:	1b64      	subs	r4, r4, r5
 8004aa0:	10a4      	asrs	r4, r4, #2
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	42a6      	cmp	r6, r4
 8004aa6:	d109      	bne.n	8004abc <__libc_init_array+0x24>
 8004aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ad8 <__libc_init_array+0x40>)
 8004aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8004adc <__libc_init_array+0x44>)
 8004aac:	f000 f818 	bl	8004ae0 <_init>
 8004ab0:	1b64      	subs	r4, r4, r5
 8004ab2:	10a4      	asrs	r4, r4, #2
 8004ab4:	2600      	movs	r6, #0
 8004ab6:	42a6      	cmp	r6, r4
 8004ab8:	d105      	bne.n	8004ac6 <__libc_init_array+0x2e>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac0:	4798      	blx	r3
 8004ac2:	3601      	adds	r6, #1
 8004ac4:	e7ee      	b.n	8004aa4 <__libc_init_array+0xc>
 8004ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aca:	4798      	blx	r3
 8004acc:	3601      	adds	r6, #1
 8004ace:	e7f2      	b.n	8004ab6 <__libc_init_array+0x1e>
 8004ad0:	0802a140 	.word	0x0802a140
 8004ad4:	0802a140 	.word	0x0802a140
 8004ad8:	0802a140 	.word	0x0802a140
 8004adc:	0802a144 	.word	0x0802a144

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
