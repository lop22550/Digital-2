
Proyecto2_videojuego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000876c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000705d4  0800893c  0800893c  0000993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08078f10  08078f10  0007ba28  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08078f10  08078f10  00079f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08078f18  08078f18  0007ba28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08078f18  08078f18  00079f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08078f1c  08078f1c  00079f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001a28  20000000  08078f20  0007a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025e0  20001a28  0807a948  0007ba28  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004008  0807a948  0007c008  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0007ba28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6a4  00000000  00000000  0007ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  0008b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0008d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2b  00000000  00000000  0008e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045a8  00000000  00000000  0008f05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ffb  00000000  00000000  00093603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce8cf  00000000  00000000  000a75fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  00175f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00179994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001a28 	.word	0x20001a28
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008924 	.word	0x08008924

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001a2c 	.word	0x20001a2c
 800020c:	08008924 	.word	0x08008924

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2101      	movs	r1, #1
 80005f4:	4878      	ldr	r0, [pc, #480]	@ (80007d8 <LCD_Init+0x1ec>)
 80005f6:	f002 fbeb 	bl	8002dd0 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 80005fa:	2201      	movs	r2, #1
 80005fc:	2113      	movs	r1, #19
 80005fe:	4877      	ldr	r0, [pc, #476]	@ (80007dc <LCD_Init+0x1f0>)
 8000600:	f002 fbe6 	bl	8002dd0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2102      	movs	r1, #2
 8000608:	4875      	ldr	r0, [pc, #468]	@ (80007e0 <LCD_Init+0x1f4>)
 800060a:	f002 fbe1 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800060e:	2005      	movs	r0, #5
 8000610:	f001 fd12 	bl	8002038 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2102      	movs	r1, #2
 8000618:	4871      	ldr	r0, [pc, #452]	@ (80007e0 <LCD_Init+0x1f4>)
 800061a:	f002 fbd9 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800061e:	2014      	movs	r0, #20
 8000620:	f001 fd0a 	bl	8002038 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	486d      	ldr	r0, [pc, #436]	@ (80007e0 <LCD_Init+0x1f4>)
 800062a:	f002 fbd1 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 800062e:	2096      	movs	r0, #150	@ 0x96
 8000630:	f001 fd02 	bl	8002038 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2101      	movs	r1, #1
 8000638:	4867      	ldr	r0, [pc, #412]	@ (80007d8 <LCD_Init+0x1ec>)
 800063a:	f002 fbc9 	bl	8002dd0 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 800063e:	20e9      	movs	r0, #233	@ 0xe9
 8000640:	f000 f8d0 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x20);
 8000644:	2020      	movs	r0, #32
 8000646:	f000 f973 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800064a:	2011      	movs	r0, #17
 800064c:	f000 f8ca 	bl	80007e4 <LCD_CMD>
	HAL_Delay(100);
 8000650:	2064      	movs	r0, #100	@ 0x64
 8000652:	f001 fcf1 	bl	8002038 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 8000656:	20d1      	movs	r0, #209	@ 0xd1
 8000658:	f000 f8c4 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x00);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f967 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x71);
 8000662:	2071      	movs	r0, #113	@ 0x71
 8000664:	f000 f964 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x19);
 8000668:	2019      	movs	r0, #25
 800066a:	f000 f961 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 800066e:	20d0      	movs	r0, #208	@ 0xd0
 8000670:	f000 f8b8 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x07);
 8000674:	2007      	movs	r0, #7
 8000676:	f000 f95b 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x01);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f958 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x08);
 8000680:	2008      	movs	r0, #8
 8000682:	f000 f955 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 8000686:	2036      	movs	r0, #54	@ 0x36
 8000688:	f000 f8ac 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 800068c:	20e8      	movs	r0, #232	@ 0xe8
 800068e:	f000 f94f 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000692:	203a      	movs	r0, #58	@ 0x3a
 8000694:	f000 f8a6 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8000698:	2005      	movs	r0, #5
 800069a:	f000 f949 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 800069e:	20c1      	movs	r0, #193	@ 0xc1
 80006a0:	f000 f8a0 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x10);
 80006a4:	2010      	movs	r0, #16
 80006a6:	f000 f943 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x10);
 80006aa:	2010      	movs	r0, #16
 80006ac:	f000 f940 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x02);
 80006b0:	2002      	movs	r0, #2
 80006b2:	f000 f93d 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x02);
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 f93a 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 80006bc:	20c0      	movs	r0, #192	@ 0xc0
 80006be:	f000 f891 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x00);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f934 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x35);
 80006c8:	2035      	movs	r0, #53	@ 0x35
 80006ca:	f000 f931 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x00);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f92e 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x00);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 f92b 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x01);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 f928 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x02);
 80006e0:	2002      	movs	r0, #2
 80006e2:	f000 f925 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80006e6:	20c5      	movs	r0, #197	@ 0xc5
 80006e8:	f000 f87c 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 80006ec:	2004      	movs	r0, #4
 80006ee:	f000 f91f 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 80006f2:	20d2      	movs	r0, #210	@ 0xd2
 80006f4:	f000 f876 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x01);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 f919 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x44);
 80006fe:	2044      	movs	r0, #68	@ 0x44
 8000700:	f000 f916 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000704:	20c8      	movs	r0, #200	@ 0xc8
 8000706:	f000 f86d 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x04);
 800070a:	2004      	movs	r0, #4
 800070c:	f000 f910 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x67);
 8000710:	2067      	movs	r0, #103	@ 0x67
 8000712:	f000 f90d 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x35);
 8000716:	2035      	movs	r0, #53	@ 0x35
 8000718:	f000 f90a 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x04);
 800071c:	2004      	movs	r0, #4
 800071e:	f000 f907 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x08);
 8000722:	2008      	movs	r0, #8
 8000724:	f000 f904 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x06);
 8000728:	2006      	movs	r0, #6
 800072a:	f000 f901 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x24);
 800072e:	2024      	movs	r0, #36	@ 0x24
 8000730:	f000 f8fe 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x01);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 f8fb 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x37);
 800073a:	2037      	movs	r0, #55	@ 0x37
 800073c:	f000 f8f8 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x40);
 8000740:	2040      	movs	r0, #64	@ 0x40
 8000742:	f000 f8f5 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x03);
 8000746:	2003      	movs	r0, #3
 8000748:	f000 f8f2 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x10);
 800074c:	2010      	movs	r0, #16
 800074e:	f000 f8ef 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x08);
 8000752:	2008      	movs	r0, #8
 8000754:	f000 f8ec 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x80);
 8000758:	2080      	movs	r0, #128	@ 0x80
 800075a:	f000 f8e9 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x00);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f8e6 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000764:	202a      	movs	r0, #42	@ 0x2a
 8000766:	f000 f83d 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x00);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f8e0 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x00);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f8dd 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x01);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 f8da 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x3F);
 800077c:	203f      	movs	r0, #63	@ 0x3f
 800077e:	f000 f8d7 	bl	8000930 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000782:	202b      	movs	r0, #43	@ 0x2b
 8000784:	f000 f82e 	bl	80007e4 <LCD_CMD>
	LCD_DATA(0x00);
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f8d1 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x00);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f8ce 	bl	8000930 <LCD_DATA>
	LCD_DATA(0x01);
 8000794:	2001      	movs	r0, #1
 8000796:	f000 f8cb 	bl	8000930 <LCD_DATA>
	LCD_DATA(0xE0);
 800079a:	20e0      	movs	r0, #224	@ 0xe0
 800079c:	f000 f8c8 	bl	8000930 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80007a0:	2029      	movs	r0, #41	@ 0x29
 80007a2:	f000 f81f 	bl	80007e4 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80007a6:	202c      	movs	r0, #44	@ 0x2c
 80007a8:	f000 f81c 	bl	80007e4 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80007ac:	2020      	movs	r0, #32
 80007ae:	f000 f819 	bl	80007e4 <LCD_CMD>
	HAL_Delay(120);
 80007b2:	2078      	movs	r0, #120	@ 0x78
 80007b4:	f001 fc40 	bl	8002038 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80007b8:	2011      	movs	r0, #17
 80007ba:	f000 f813 	bl	80007e4 <LCD_CMD>
	HAL_Delay(120);
 80007be:	2078      	movs	r0, #120	@ 0x78
 80007c0:	f001 fc3a 	bl	8002038 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 80007c4:	2029      	movs	r0, #41	@ 0x29
 80007c6:	f000 f80d 	bl	80007e4 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2101      	movs	r1, #1
 80007ce:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <LCD_Init+0x1ec>)
 80007d0:	f002 fafe 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020800 	.word	0x40020800

080007e4 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2110      	movs	r1, #16
 80007f2:	484c      	ldr	r0, [pc, #304]	@ (8000924 <LCD_CMD+0x140>)
 80007f4:	f002 faec 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2102      	movs	r1, #2
 80007fc:	4849      	ldr	r0, [pc, #292]	@ (8000924 <LCD_CMD+0x140>)
 80007fe:	f002 fae7 	bl	8002dd0 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	d006      	beq.n	800081a <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000812:	4844      	ldr	r0, [pc, #272]	@ (8000924 <LCD_CMD+0x140>)
 8000814:	f002 fadc 	bl	8002dd0 <HAL_GPIO_WritePin>
 8000818:	e005      	b.n	8000826 <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000820:	4840      	ldr	r0, [pc, #256]	@ (8000924 <LCD_CMD+0x140>)
 8000822:	f002 fad5 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	2b00      	cmp	r3, #0
 800082e:	d005      	beq.n	800083c <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2180      	movs	r1, #128	@ 0x80
 8000834:	483c      	ldr	r0, [pc, #240]	@ (8000928 <LCD_CMD+0x144>)
 8000836:	f002 facb 	bl	8002dd0 <HAL_GPIO_WritePin>
 800083a:	e004      	b.n	8000846 <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2180      	movs	r1, #128	@ 0x80
 8000840:	4839      	ldr	r0, [pc, #228]	@ (8000928 <LCD_CMD+0x144>)
 8000842:	f002 fac5 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000856:	4833      	ldr	r0, [pc, #204]	@ (8000924 <LCD_CMD+0x140>)
 8000858:	f002 faba 	bl	8002dd0 <HAL_GPIO_WritePin>
 800085c:	e005      	b.n	800086a <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000864:	482f      	ldr	r0, [pc, #188]	@ (8000924 <LCD_CMD+0x140>)
 8000866:	f002 fab3 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2108      	movs	r1, #8
 8000878:	482c      	ldr	r0, [pc, #176]	@ (800092c <LCD_CMD+0x148>)
 800087a:	f002 faa9 	bl	8002dd0 <HAL_GPIO_WritePin>
 800087e:	e004      	b.n	800088a <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2108      	movs	r1, #8
 8000884:	4829      	ldr	r0, [pc, #164]	@ (800092c <LCD_CMD+0x148>)
 8000886:	f002 faa3 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2120      	movs	r1, #32
 8000898:	4824      	ldr	r0, [pc, #144]	@ (800092c <LCD_CMD+0x148>)
 800089a:	f002 fa99 	bl	8002dd0 <HAL_GPIO_WritePin>
 800089e:	e004      	b.n	80008aa <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4821      	ldr	r0, [pc, #132]	@ (800092c <LCD_CMD+0x148>)
 80008a6:	f002 fa93 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	481c      	ldr	r0, [pc, #112]	@ (800092c <LCD_CMD+0x148>)
 80008ba:	f002 fa89 	bl	8002dd0 <HAL_GPIO_WritePin>
 80008be:	e004      	b.n	80008ca <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2110      	movs	r1, #16
 80008c4:	4819      	ldr	r0, [pc, #100]	@ (800092c <LCD_CMD+0x148>)
 80008c6:	f002 fa83 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008da:	4814      	ldr	r0, [pc, #80]	@ (800092c <LCD_CMD+0x148>)
 80008dc:	f002 fa78 	bl	8002dd0 <HAL_GPIO_WritePin>
 80008e0:	e005      	b.n	80008ee <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e8:	4810      	ldr	r0, [pc, #64]	@ (800092c <LCD_CMD+0x148>)
 80008ea:	f002 fa71 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da06      	bge.n	8000904 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <LCD_CMD+0x140>)
 80008fe:	f002 fa67 	bl	8002dd0 <HAL_GPIO_WritePin>
 8000902:	e005      	b.n	8000910 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <LCD_CMD+0x140>)
 800090c:	f002 fa60 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2102      	movs	r1, #2
 8000914:	4803      	ldr	r0, [pc, #12]	@ (8000924 <LCD_CMD+0x140>)
 8000916:	f002 fa5b 	bl	8002dd0 <HAL_GPIO_WritePin>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020000 	.word	0x40020000
 8000928:	40020800 	.word	0x40020800
 800092c:	40020400 	.word	0x40020400

08000930 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2110      	movs	r1, #16
 800093e:	484c      	ldr	r0, [pc, #304]	@ (8000a70 <LCD_DATA+0x140>)
 8000940:	f002 fa46 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	4849      	ldr	r0, [pc, #292]	@ (8000a70 <LCD_DATA+0x140>)
 800094a:	f002 fa41 	bl	8002dd0 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d006      	beq.n	8000966 <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095e:	4844      	ldr	r0, [pc, #272]	@ (8000a70 <LCD_DATA+0x140>)
 8000960:	f002 fa36 	bl	8002dd0 <HAL_GPIO_WritePin>
 8000964:	e005      	b.n	8000972 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800096c:	4840      	ldr	r0, [pc, #256]	@ (8000a70 <LCD_DATA+0x140>)
 800096e:	f002 fa2f 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d005      	beq.n	8000988 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2180      	movs	r1, #128	@ 0x80
 8000980:	483c      	ldr	r0, [pc, #240]	@ (8000a74 <LCD_DATA+0x144>)
 8000982:	f002 fa25 	bl	8002dd0 <HAL_GPIO_WritePin>
 8000986:	e004      	b.n	8000992 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	4839      	ldr	r0, [pc, #228]	@ (8000a74 <LCD_DATA+0x144>)
 800098e:	f002 fa1f 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	2b00      	cmp	r3, #0
 800099a:	d006      	beq.n	80009aa <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a2:	4833      	ldr	r0, [pc, #204]	@ (8000a70 <LCD_DATA+0x140>)
 80009a4:	f002 fa14 	bl	8002dd0 <HAL_GPIO_WritePin>
 80009a8:	e005      	b.n	80009b6 <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b0:	482f      	ldr	r0, [pc, #188]	@ (8000a70 <LCD_DATA+0x140>)
 80009b2:	f002 fa0d 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2108      	movs	r1, #8
 80009c4:	482c      	ldr	r0, [pc, #176]	@ (8000a78 <LCD_DATA+0x148>)
 80009c6:	f002 fa03 	bl	8002dd0 <HAL_GPIO_WritePin>
 80009ca:	e004      	b.n	80009d6 <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2108      	movs	r1, #8
 80009d0:	4829      	ldr	r0, [pc, #164]	@ (8000a78 <LCD_DATA+0x148>)
 80009d2:	f002 f9fd 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d005      	beq.n	80009ec <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2120      	movs	r1, #32
 80009e4:	4824      	ldr	r0, [pc, #144]	@ (8000a78 <LCD_DATA+0x148>)
 80009e6:	f002 f9f3 	bl	8002dd0 <HAL_GPIO_WritePin>
 80009ea:	e004      	b.n	80009f6 <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2120      	movs	r1, #32
 80009f0:	4821      	ldr	r0, [pc, #132]	@ (8000a78 <LCD_DATA+0x148>)
 80009f2:	f002 f9ed 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 0320 	and.w	r3, r3, #32
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2110      	movs	r1, #16
 8000a04:	481c      	ldr	r0, [pc, #112]	@ (8000a78 <LCD_DATA+0x148>)
 8000a06:	f002 f9e3 	bl	8002dd0 <HAL_GPIO_WritePin>
 8000a0a:	e004      	b.n	8000a16 <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4819      	ldr	r0, [pc, #100]	@ (8000a78 <LCD_DATA+0x148>)
 8000a12:	f002 f9dd 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a26:	4814      	ldr	r0, [pc, #80]	@ (8000a78 <LCD_DATA+0x148>)
 8000a28:	f002 f9d2 	bl	8002dd0 <HAL_GPIO_WritePin>
 8000a2c:	e005      	b.n	8000a3a <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <LCD_DATA+0x148>)
 8000a36:	f002 f9cb 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da06      	bge.n	8000a50 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <LCD_DATA+0x140>)
 8000a4a:	f002 f9c1 	bl	8002dd0 <HAL_GPIO_WritePin>
 8000a4e:	e005      	b.n	8000a5c <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <LCD_DATA+0x140>)
 8000a58:	f002 f9ba 	bl	8002dd0 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4803      	ldr	r0, [pc, #12]	@ (8000a70 <LCD_DATA+0x140>)
 8000a62:	f002 f9b5 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020400 	.word	0x40020400

08000a7c <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000a8a:	202a      	movs	r0, #42	@ 0x2a
 8000a8c:	f7ff feaa 	bl	80007e4 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff4a 	bl	8000930 <LCD_DATA>
	LCD_DATA(x1);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff45 	bl	8000930 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff3f 	bl	8000930 <LCD_DATA>
	LCD_DATA(x2);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff3a 	bl	8000930 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000abc:	202b      	movs	r0, #43	@ 0x2b
 8000abe:	f7ff fe91 	bl	80007e4 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff31 	bl	8000930 <LCD_DATA>
	LCD_DATA(y1);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff2c 	bl	8000930 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff26 	bl	8000930 <LCD_DATA>
	LCD_DATA(y2);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff21 	bl	8000930 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000aee:	202c      	movs	r0, #44	@ 0x2c
 8000af0:	f7ff fe78 	bl	80007e4 <LCD_CMD>
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000b04:	202c      	movs	r0, #44	@ 0x2c
 8000b06:	f7ff fe6d 	bl	80007e4 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	481b      	ldr	r0, [pc, #108]	@ (8000b7c <LCD_Clear+0x80>)
 8000b10:	f002 f95e 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	4819      	ldr	r0, [pc, #100]	@ (8000b80 <LCD_Clear+0x84>)
 8000b1a:	f002 f959 	bl	8002dd0 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000b1e:	23ef      	movs	r3, #239	@ 0xef
 8000b20:	f240 123f 	movw	r2, #319	@ 0x13f
 8000b24:	2100      	movs	r1, #0
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ffa8 	bl	8000a7c <SetWindows>
	for (x = 0; x < 320; x++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e016      	b.n	8000b60 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	e00d      	b.n	8000b54 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fef6 	bl	8000930 <LCD_DATA>
			LCD_DATA(c);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fef1 	bl	8000930 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2bef      	cmp	r3, #239	@ 0xef
 8000b58:	d9ee      	bls.n	8000b38 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b66:	d3e4      	bcc.n	8000b32 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <LCD_Clear+0x84>)
 8000b6e:	f002 f92f 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400

08000b84 <H_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea horizontal - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void H_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000b92:	202c      	movs	r0, #44	@ 0x2c
 8000b94:	f7ff fe26 	bl	80007e4 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4817      	ldr	r0, [pc, #92]	@ (8000bfc <H_line+0x78>)
 8000b9e:	f002 f917 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4816      	ldr	r0, [pc, #88]	@ (8000c00 <H_line+0x7c>)
 8000ba8:	f002 f912 	bl	8002dd0 <HAL_GPIO_WritePin>
	l = l + x;
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, l, y);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ff5e 	bl	8000a7c <SetWindows>
	//j = l; // * 2;
	for (i = 0; i < l; i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00d      	b.n	8000be2 <H_line+0x5e>
		LCD_DATA(c >> 8);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff feaf 	bl	8000930 <LCD_DATA>
		LCD_DATA(c);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff feaa 	bl	8000930 <LCD_DATA>
	for (i = 0; i < l; i++) {
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3ed      	bcc.n	8000bc6 <H_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2101      	movs	r1, #1
 8000bee:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <H_line+0x7c>)
 8000bf0:	f002 f8ee 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400

08000c04 <V_line>:
//***************************************************************************************************************************************
// Función para dibujar una línea vertical - parámetros ( coordenada x, cordenada y, longitud, color)
//***************************************************************************************************************************************
void V_line(unsigned int x, unsigned int y, unsigned int l, unsigned int c) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
	unsigned int i;
	LCD_CMD(0x02c); //write_memory_start
 8000c12:	202c      	movs	r0, #44	@ 0x2c
 8000c14:	f7ff fde6 	bl	80007e4 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <V_line+0x78>)
 8000c1e:	f002 f8d7 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2101      	movs	r1, #1
 8000c26:	4816      	ldr	r0, [pc, #88]	@ (8000c80 <V_line+0x7c>)
 8000c28:	f002 f8d2 	bl	8002dd0 <HAL_GPIO_WritePin>
	l = l + y;
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	4413      	add	r3, r2
 8000c32:	607b      	str	r3, [r7, #4]
	SetWindows(x, y, x, l);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff ff1e 	bl	8000a7c <SetWindows>
	//j = l; //* 2;
	for (i = 1; i <= l; i++) {
 8000c40:	2301      	movs	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00d      	b.n	8000c62 <V_line+0x5e>
		LCD_DATA(c >> 8);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe6f 	bl	8000930 <LCD_DATA>
		LCD_DATA(c);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe6a 	bl	8000930 <LCD_DATA>
	for (i = 1; i <= l; i++) {
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d9ed      	bls.n	8000c46 <V_line+0x42>
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <V_line+0x7c>)
 8000c70:	f002 f8ae 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400

08000c84 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000c92:	202c      	movs	r0, #44	@ 0x2c
 8000c94:	f7ff fda6 	bl	80007e4 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	4824      	ldr	r0, [pc, #144]	@ (8000d30 <FillRect+0xac>)
 8000c9e:	f002 f897 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4823      	ldr	r0, [pc, #140]	@ (8000d34 <FillRect+0xb0>)
 8000ca8:	f002 f892 	bl	8002dd0 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	1e5a      	subs	r2, r3, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fed8 	bl	8000a7c <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	fb02 f303 	mul.w	r3, r2, r3
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	e01a      	b.n	8000d16 <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	e010      	b.n	8000d08 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fe1f 	bl	8000930 <LCD_DATA>
			LCD_DATA(c);
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe1a 	bl	8000930 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3301      	adds	r3, #1
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8ea      	bhi.n	8000ce6 <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	3301      	adds	r3, #1
 8000d14:	623b      	str	r3, [r7, #32]
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d8e0      	bhi.n	8000ce0 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2101      	movs	r1, #1
 8000d22:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <FillRect+0xb0>)
 8000d24:	f002 f854 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	@ 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020400 	.word	0x40020400

08000d38 <LCD_Bitmap>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000d46:	202c      	movs	r0, #44	@ 0x2c
 8000d48:	f7ff fd4c 	bl	80007e4 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2110      	movs	r1, #16
 8000d50:	4824      	ldr	r0, [pc, #144]	@ (8000de4 <LCD_Bitmap+0xac>)
 8000d52:	f002 f83d 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4823      	ldr	r0, [pc, #140]	@ (8000de8 <LCD_Bitmap+0xb0>)
 8000d5c:	f002 f838 	bl	8002dd0 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff fe7e 	bl	8000a7c <SetWindows>
	unsigned int k = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
 8000d88:	e01e      	b.n	8000dc8 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e014      	b.n	8000dba <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fdc9 	bl	8000930 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	3301      	adds	r3, #1
 8000da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fdc1 	bl	8000930 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db0:	3302      	adds	r3, #2
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3301      	adds	r3, #1
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d8e6      	bhi.n	8000d90 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8dc      	bhi.n	8000d8a <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <LCD_Bitmap+0xb0>)
 8000dd6:	f001 fffb 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	@ 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400

08000dec <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	@ 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000dfa:	202c      	movs	r0, #44	@ 0x2c
 8000dfc:	f7ff fcf2 	bl	80007e4 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	484d      	ldr	r0, [pc, #308]	@ (8000f3c <LCD_Sprite+0x150>)
 8000e06:	f001 ffe3 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	484c      	ldr	r0, [pc, #304]	@ (8000f40 <LCD_Sprite+0x154>)
 8000e10:	f001 ffde 	bl	8002dd0 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	1e5a      	subs	r2, r3, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f7ff fe24 	bl	8000a7c <SetWindows>
	int k = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000e42:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d03a      	beq.n	8000ec0 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e4e:	e032      	b.n	8000eb6 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	fb03 f202 	mul.w	r2, r3, r2
 8000e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	fb01 f303 	mul.w	r3, r1, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e74:	4413      	add	r3, r2
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7c:	e014      	b.n	8000ea8 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fd52 	bl	8000930 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e8e:	3301      	adds	r3, #1
 8000e90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd4a 	bl	8000930 <LCD_DATA>
				k = k - 2;
 8000e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbe6      	blt.n	8000e7e <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	dbc8      	blt.n	8000e50 <LCD_Sprite+0x64>
 8000ebe:	e034      	b.n	8000f2a <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
 8000ec4:	e02d      	b.n	8000f22 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	fb03 f202 	mul.w	r2, r3, r2
 8000ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	e014      	b.n	8000f14 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fd1c 	bl	8000930 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efa:	3301      	adds	r3, #1
 8000efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd14 	bl	8000930 <LCD_DATA>
				k = k + 2;
 8000f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbe6      	blt.n	8000eea <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	623b      	str	r3, [r7, #32]
 8000f22:	6a3a      	ldr	r2, [r7, #32]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbcd      	blt.n	8000ec6 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <LCD_Sprite+0x154>)
 8000f30:	f001 ff4e 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	@ 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400

08000f44 <transmit_uart>:
/* USER CODE BEGIN PFP */

void MECHANICS(void);

//FUNCIÓN PARA MOSTRAR ESTADOS DE LECTURA DE LA TARJETA SD
void transmit_uart(char *string){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff f95f 	bl	8000210 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string , len, 200);
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	23c8      	movs	r3, #200	@ 0xc8
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <transmit_uart+0x28>)
 8000f60:	f002 fe11 	bl	8003b86 <HAL_UART_Transmit>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20003b08 	.word	0x20003b08

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0a0      	sub	sp, #128	@ 0x80
 8000f74:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 ffed 	bl	8001f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f94f 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 fa6d 	bl	800145c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f82:	f000 fa43 	bl	800140c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f86:	f000 f9ed 	bl	8001364 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f8a:	f000 f9b5 	bl	80012f8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000f8e:	f000 fa13 	bl	80013b8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000f92:	f004 f865 	bl	8005060 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

    LCD_Init();
 8000f96:	f7ff fb29 	bl	80005ec <LCD_Init>

  	LCD_Clear(0x00);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fdae 	bl	8000afc <LCD_Clear>
  	FillRect(0, 0, 319, 239, 0xFFFF);
 8000fa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	23ef      	movs	r3, #239	@ 0xef
 8000fa8:	f240 123f 	movw	r2, #319	@ 0x13f
 8000fac:	2100      	movs	r1, #0
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff fe68 	bl	8000c84 <FillRect>


  	Estado_de_juego = INTRO;
 8000fb4:	4b7f      	ldr	r3, [pc, #508]	@ (80011b4 <main+0x244>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
  	LCD_Sprite(0, 0, 319, 240, Title_screen_1, 1, 0, 0, 0);
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9304      	str	r3, [sp, #16]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	9303      	str	r3, [sp, #12]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	4b7b      	ldr	r3, [pc, #492]	@ (80011b8 <main+0x248>)
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	23f0      	movs	r3, #240	@ 0xf0
 8000fd0:	f240 123f 	movw	r2, #319	@ 0x13f
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ff08 	bl	8000dec <LCD_Sprite>
  	HAL_Delay(100);
 8000fdc:	2064      	movs	r0, #100	@ 0x64
 8000fde:	f001 f82b 	bl	8002038 <HAL_Delay>
  	LCD_Sprite(0, 0, 319, 240, Title_screen_7, 1, 0, 0, 0);
  	HAL_Delay(100);*/



  	HAL_UART_Receive_DMA(&huart2, temp, 1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4975      	ldr	r1, [pc, #468]	@ (80011bc <main+0x24c>)
 8000fe6:	4876      	ldr	r0, [pc, #472]	@ (80011c0 <main+0x250>)
 8000fe8:	f002 fec8 	bl	8003d7c <HAL_UART_Receive_DMA>


  	//Condiciones iniciles
  	xf = x0;
 8000fec:	229f      	movs	r2, #159	@ 0x9f
 8000fee:	4b75      	ldr	r3, [pc, #468]	@ (80011c4 <main+0x254>)
 8000ff0:	701a      	strb	r2, [r3, #0]
  	yf = y0;
 8000ff2:	22af      	movs	r2, #175	@ 0xaf
 8000ff4:	4b74      	ldr	r3, [pc, #464]	@ (80011c8 <main+0x258>)
 8000ff6:	701a      	strb	r2, [r3, #0]
  while (1)
  {



	  switch (Estado_de_juego){
 8000ff8:	4b6e      	ldr	r3, [pc, #440]	@ (80011b4 <main+0x244>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d8fa      	bhi.n	8000ff8 <main+0x88>
 8001002:	a201      	add	r2, pc, #4	@ (adr r2, 8001008 <main+0x98>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001019 	.word	0x08001019
 800100c:	0800112b 	.word	0x0800112b
 8001010:	080011a9 	.word	0x080011a9
 8001014:	0800117f 	.word	0x0800117f
	  case INTRO:

		  //Montamos el sistema de archivos
		    		    fres = f_mount(&fs, "/", 0);
 8001018:	2200      	movs	r2, #0
 800101a:	496c      	ldr	r1, [pc, #432]	@ (80011cc <main+0x25c>)
 800101c:	486c      	ldr	r0, [pc, #432]	@ (80011d0 <main+0x260>)
 800101e:	f006 fa6b 	bl	80074f8 <f_mount>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b6b      	ldr	r3, [pc, #428]	@ (80011d4 <main+0x264>)
 8001028:	701a      	strb	r2, [r3, #0]
		    		    if (fres == FR_OK){
 800102a:	4b6a      	ldr	r3, [pc, #424]	@ (80011d4 <main+0x264>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d103      	bne.n	800103a <main+0xca>
		    		  	  transmit_uart("Micro SD card is mounted successfully\n");
 8001032:	4869      	ldr	r0, [pc, #420]	@ (80011d8 <main+0x268>)
 8001034:	f7ff ff86 	bl	8000f44 <transmit_uart>
 8001038:	e006      	b.n	8001048 <main+0xd8>
		    		    } else if (fres != FR_OK){
 800103a:	4b66      	ldr	r3, [pc, #408]	@ (80011d4 <main+0x264>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <main+0xd8>
		    		  	  transmit_uart("Micro SD card's mount error!\n");
 8001042:	4866      	ldr	r0, [pc, #408]	@ (80011dc <main+0x26c>)
 8001044:	f7ff ff7e 	bl	8000f44 <transmit_uart>
		    		    }

		                    //Abrimos el archivo en modo lectura
		          		    fres = f_open(&fil, pruebas, FA_READ);
 8001048:	2201      	movs	r2, #1
 800104a:	4965      	ldr	r1, [pc, #404]	@ (80011e0 <main+0x270>)
 800104c:	4865      	ldr	r0, [pc, #404]	@ (80011e4 <main+0x274>)
 800104e:	f006 fa99 	bl	8007584 <f_open>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b5f      	ldr	r3, [pc, #380]	@ (80011d4 <main+0x264>)
 8001058:	701a      	strb	r2, [r3, #0]
		          		    if (fres == FR_OK){
 800105a:	4b5e      	ldr	r3, [pc, #376]	@ (80011d4 <main+0x264>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <main+0xfa>
		          		  	  transmit_uart("File opened for reading. \n");
 8001062:	4861      	ldr	r0, [pc, #388]	@ (80011e8 <main+0x278>)
 8001064:	f7ff ff6e 	bl	8000f44 <transmit_uart>
 8001068:	e011      	b.n	800108e <main+0x11e>
		          		    } else if (fres != FR_OK){
 800106a:	4b5a      	ldr	r3, [pc, #360]	@ (80011d4 <main+0x264>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <main+0x11e>
		          		  	  transmit_uart("File was not opened for reading. \n");
 8001072:	485e      	ldr	r0, [pc, #376]	@ (80011ec <main+0x27c>)
 8001074:	f7ff ff66 	bl	8000f44 <transmit_uart>
		          		    }

		          		    //Leemos el archivo
		          		    while (f_gets(buffer, sizeof(buffer), &fil)){
 8001078:	e009      	b.n	800108e <main+0x11e>
		          		  	  char mRd[100];
		          		  	  sprintf(mRd, "%s", buffer);
 800107a:	463b      	mov	r3, r7
 800107c:	4a5c      	ldr	r2, [pc, #368]	@ (80011f0 <main+0x280>)
 800107e:	495d      	ldr	r1, [pc, #372]	@ (80011f4 <main+0x284>)
 8001080:	4618      	mov	r0, r3
 8001082:	f006 ffaf 	bl	8007fe4 <siprintf>
		          		  	  transmit_uart(mRd);
 8001086:	463b      	mov	r3, r7
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5b 	bl	8000f44 <transmit_uart>
		          		    while (f_gets(buffer, sizeof(buffer), &fil)){
 800108e:	4a55      	ldr	r2, [pc, #340]	@ (80011e4 <main+0x274>)
 8001090:	2114      	movs	r1, #20
 8001092:	4857      	ldr	r0, [pc, #348]	@ (80011f0 <main+0x280>)
 8001094:	f006 fe45 	bl	8007d22 <f_gets>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1ed      	bne.n	800107a <main+0x10a>
		          		    }

		          		    //Cerramos el archivo
		          		      fres = f_close(&fil);
 800109e:	4851      	ldr	r0, [pc, #324]	@ (80011e4 <main+0x274>)
 80010a0:	f006 fe15 	bl	8007cce <f_close>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <main+0x264>)
 80010aa:	701a      	strb	r2, [r3, #0]
		          		      if (fres == FR_OK){
 80010ac:	4b49      	ldr	r3, [pc, #292]	@ (80011d4 <main+0x264>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <main+0x14c>
		          		    	  transmit_uart("The file is closed. \n");
 80010b4:	4850      	ldr	r0, [pc, #320]	@ (80011f8 <main+0x288>)
 80010b6:	f7ff ff45 	bl	8000f44 <transmit_uart>
 80010ba:	e006      	b.n	80010ca <main+0x15a>
		          		      } else if (fres != FR_OK){
 80010bc:	4b45      	ldr	r3, [pc, #276]	@ (80011d4 <main+0x264>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <main+0x15a>
		          		    	  transmit_uart("The file was not closed. \n");
 80010c4:	484d      	ldr	r0, [pc, #308]	@ (80011fc <main+0x28c>)
 80010c6:	f7ff ff3d 	bl	8000f44 <transmit_uart>
		          		      }

		          		    //Desmontamos el sistema de archivos
		          		            	    	 f_mount(NULL,  "", 1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	494c      	ldr	r1, [pc, #304]	@ (8001200 <main+0x290>)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f006 fa12 	bl	80074f8 <f_mount>
		          		            	    	 if (fres == FR_OK){
 80010d4:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <main+0x264>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d103      	bne.n	80010e4 <main+0x174>
		          		            	    		 transmit_uart("The Micro SD card is unmounted! \n");
 80010dc:	4849      	ldr	r0, [pc, #292]	@ (8001204 <main+0x294>)
 80010de:	f7ff ff31 	bl	8000f44 <transmit_uart>
 80010e2:	e006      	b.n	80010f2 <main+0x182>
		          		            	    	 } else if (fres != FR_OK){
 80010e4:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <main+0x264>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <main+0x182>
		          		            	    		 transmit_uart("The Micro SD card was not unmounted! \n");
 80010ec:	4846      	ldr	r0, [pc, #280]	@ (8001208 <main+0x298>)
 80010ee:	f7ff ff29 	bl	8000f44 <transmit_uart>
		  LCD_Sprite(0, 0, 319, 240, Title_screen_3, 1, 0, 0, 0);
		  LCD_Sprite(0, 0, 319, 240, Title_screen_4, 1, 0, 0, 0);
		  LCD_Sprite(0, 0, 319, 240, Title_screen_5, 1, 0, 0, 0);
		  LCD_Sprite(0, 0, 319, 240, Title_screen_6, 1, 0, 0, 0);
		  LCD_Sprite(0, 0, 319, 240, Title_screen_7, 1, 0, 0, 0);*/
		  LCD_Sprite(0, 0, 319, 240, Title_screen_8, 1, 0, 0, 0);
 80010f2:	2300      	movs	r3, #0
 80010f4:	9304      	str	r3, [sp, #16]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9303      	str	r3, [sp, #12]
 80010fa:	2300      	movs	r3, #0
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	2301      	movs	r3, #1
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	4b42      	ldr	r3, [pc, #264]	@ (800120c <main+0x29c>)
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	23f0      	movs	r3, #240	@ 0xf0
 8001108:	f240 123f 	movw	r2, #319	@ 0x13f
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fe6c 	bl	8000dec <LCD_Sprite>

		  if (flag_title == 1){
 8001114:	4b3e      	ldr	r3, [pc, #248]	@ (8001210 <main+0x2a0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <main+0x1b2>
			  Estado_de_juego = TRANSITION1;
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <main+0x244>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	@ 0x64
 8001124:	f000 ff88 	bl	8002038 <HAL_Delay>
		  break;
 8001128:	e042      	b.n	80011b0 <main+0x240>
	  case TRANSITION1:
		  FillRect(0, 0, 319, 206, 0x0000);
 800112a:	2300      	movs	r3, #0
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	23ce      	movs	r3, #206	@ 0xce
 8001130:	f240 123f 	movw	r2, #319	@ 0x13f
 8001134:	2100      	movs	r1, #0
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff fda4 	bl	8000c84 <FillRect>
		  for (int x = 0; x < 319; x++) {
 800113c:	2300      	movs	r3, #0
 800113e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001140:	e015      	b.n	800116e <main+0x1fe>
		    LCD_Bitmap(x, 207, 16, 16, tile_brinstar1);
 8001142:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <main+0x2a4>)
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2310      	movs	r3, #16
 800114a:	2210      	movs	r2, #16
 800114c:	21cf      	movs	r1, #207	@ 0xcf
 800114e:	f7ff fdf3 	bl	8000d38 <LCD_Bitmap>
		    LCD_Bitmap(x, 223, 16, 16, tile_brinstar1);
 8001152:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001154:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <main+0x2a4>)
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2310      	movs	r3, #16
 800115a:	2210      	movs	r2, #16
 800115c:	21df      	movs	r1, #223	@ 0xdf
 800115e:	f7ff fdeb 	bl	8000d38 <LCD_Bitmap>
		    x += 15;
 8001162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001164:	330f      	adds	r3, #15
 8001166:	667b      	str	r3, [r7, #100]	@ 0x64
		  for (int x = 0; x < 319; x++) {
 8001168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800116a:	3301      	adds	r3, #1
 800116c:	667b      	str	r3, [r7, #100]	@ 0x64
 800116e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001170:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001174:	dde5      	ble.n	8001142 <main+0x1d2>
		  }

		  Estado_de_juego = JUEGO;
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <main+0x244>)
 8001178:	2203      	movs	r2, #3
 800117a:	701a      	strb	r2, [r3, #0]
		  break;
 800117c:	e018      	b.n	80011b0 <main+0x240>

	   case PAUSE:
		  LCD_Sprite(0, 0, 319, 240, PAUSE_MENU, 1, 0, 0, 0);
 800117e:	2300      	movs	r3, #0
 8001180:	9304      	str	r3, [sp, #16]
 8001182:	2300      	movs	r3, #0
 8001184:	9303      	str	r3, [sp, #12]
 8001186:	2300      	movs	r3, #0
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <main+0x2a8>)
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	23f0      	movs	r3, #240	@ 0xf0
 8001194:	f240 123f 	movw	r2, #319	@ 0x13f
 8001198:	2100      	movs	r1, #0
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fe26 	bl	8000dec <LCD_Sprite>
		  for (int x = 0; x < 319; x++) {
			LCD_Bitmap(x, 207, 16, 16, tile_brinstar1);
		  	LCD_Bitmap(x, 223, 16, 16, tile_brinstar1);
		  	x += 15;
		  }*/
		   Estado_de_juego = JUEGO;
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <main+0x244>)
 80011a2:	2203      	movs	r2, #3
 80011a4:	701a      	strb	r2, [r3, #0]
		  break;
 80011a6:	e003      	b.n	80011b0 <main+0x240>

	  case JUEGO:
		  MECHANICS();
 80011a8:	f000 f9f2 	bl	8001590 <MECHANICS>
	  	  break;
 80011ac:	bf00      	nop
 80011ae:	e723      	b.n	8000ff8 <main+0x88>
	  switch (Estado_de_juego){
 80011b0:	e722      	b.n	8000ff8 <main+0x88>
 80011b2:	bf00      	nop
 80011b4:	20003c7b 	.word	0x20003c7b
 80011b8:	0802e0b8 	.word	0x0802e0b8
 80011bc:	20003c6c 	.word	0x20003c6c
 80011c0:	20003b08 	.word	0x20003b08
 80011c4:	20003c78 	.word	0x20003c78
 80011c8:	20003c79 	.word	0x20003c79
 80011cc:	0800893c 	.word	0x0800893c
 80011d0:	20001a44 	.word	0x20001a44
 80011d4:	20003aac 	.word	0x20003aac
 80011d8:	08008940 	.word	0x08008940
 80011dc:	08008968 	.word	0x08008968
 80011e0:	200019ac 	.word	0x200019ac
 80011e4:	20002a7c 	.word	0x20002a7c
 80011e8:	08008988 	.word	0x08008988
 80011ec:	080089a4 	.word	0x080089a4
 80011f0:	20003c58 	.word	0x20003c58
 80011f4:	080089c8 	.word	0x080089c8
 80011f8:	080089cc 	.word	0x080089cc
 80011fc:	080089e4 	.word	0x080089e4
 8001200:	08008a00 	.word	0x08008a00
 8001204:	08008a04 	.word	0x08008a04
 8001208:	08008a28 	.word	0x08008a28
 800120c:	08008a98 	.word	0x08008a98
 8001210:	20003c7a 	.word	0x20003c7a
 8001214:	20000000 	.word	0x20000000
 8001218:	080536d8 	.word	0x080536d8

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2234      	movs	r2, #52	@ 0x34
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f006 fefc 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <SystemClock_Config+0xd4>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <SystemClock_Config+0xd8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001268:	4a22      	ldr	r2, [pc, #136]	@ (80012f4 <SystemClock_Config+0xd8>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <SystemClock_Config+0xd8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001290:	2310      	movs	r3, #16
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001294:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001298:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800129a:	2304      	movs	r3, #4
 800129c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800129e:	2302      	movs	r3, #2
 80012a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f8f4 	bl	8003498 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012b6:	f000 fc2b 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ba:	230f      	movs	r3, #15
 80012bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012be:	2302      	movs	r3, #2
 80012c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	2102      	movs	r1, #2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fd94 	bl	8002e04 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012e2:	f000 fc15 	bl	8001b10 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	@ 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_SPI1_Init+0x64>)
 80012fe:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <MX_SPI1_Init+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_SPI1_Init+0x64>)
 8001304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_SPI1_Init+0x64>)
 8001324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_SPI1_Init+0x64>)
 800132c:	2210      	movs	r2, #16
 800132e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_SPI1_Init+0x64>)
 8001344:	220a      	movs	r2, #10
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_SPI1_Init+0x64>)
 800134a:	f002 fb43 	bl	80039d4 <HAL_SPI_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001354:	f000 fbdc 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20003ab0 	.word	0x20003ab0
 8001360:	40013000 	.word	0x40013000

08001364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <MX_USART2_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001370:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800139c:	f002 fba3 	bl	8003ae6 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 fbb3 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20003b08 	.word	0x20003b08
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_USART3_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_USART3_UART_Init+0x4c>)
 80013f0:	f002 fb79 	bl	8003ae6 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 fb89 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20003b50 	.word	0x20003b50
 8001408:	40004800 	.word	0x40004800

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_DMA_Init+0x4c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <MX_DMA_Init+0x4c>)
 800141c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <MX_DMA_Init+0x4c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2010      	movs	r0, #16
 8001434:	f000 feff 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001438:	2010      	movs	r0, #16
 800143a:	f000 ff18 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	2011      	movs	r0, #17
 8001444:	f000 fef7 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001448:	2011      	movs	r0, #17
 800144a:	f000 ff10 	bl	800226e <HAL_NVIC_EnableIRQ>

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b42      	ldr	r3, [pc, #264]	@ (8001580 <MX_GPIO_Init+0x124>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a41      	ldr	r2, [pc, #260]	@ (8001580 <MX_GPIO_Init+0x124>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b3f      	ldr	r3, [pc, #252]	@ (8001580 <MX_GPIO_Init+0x124>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <MX_GPIO_Init+0x124>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a3a      	ldr	r2, [pc, #232]	@ (8001580 <MX_GPIO_Init+0x124>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <MX_GPIO_Init+0x124>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <MX_GPIO_Init+0x124>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <MX_GPIO_Init+0x124>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <MX_GPIO_Init+0x124>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001580 <MX_GPIO_Init+0x124>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001580 <MX_GPIO_Init+0x124>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <MX_GPIO_Init+0x124>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2182      	movs	r1, #130	@ 0x82
 80014e6:	4827      	ldr	r0, [pc, #156]	@ (8001584 <MX_GPIO_Init+0x128>)
 80014e8:	f001 fc72 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80014ec:	2200      	movs	r2, #0
 80014ee:	f246 7113 	movw	r1, #26387	@ 0x6713
 80014f2:	4825      	ldr	r0, [pc, #148]	@ (8001588 <MX_GPIO_Init+0x12c>)
 80014f4:	f001 fc6c 	bl	8002dd0 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin|SYS_JTMS_SWDIO_Pin|SYS_JTCK_SWCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80014f8:	2200      	movs	r2, #0
 80014fa:	f240 4179 	movw	r1, #1145	@ 0x479
 80014fe:	4823      	ldr	r0, [pc, #140]	@ (800158c <MX_GPIO_Init+0x130>)
 8001500:	f001 fc66 	bl	8002dd0 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	481a      	ldr	r0, [pc, #104]	@ (8001584 <MX_GPIO_Init+0x128>)
 800151c:	f001 fac4 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8001520:	2382      	movs	r3, #130	@ 0x82
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	@ (8001584 <MX_GPIO_Init+0x128>)
 8001538:	f001 fab6 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin SYS_JTMS_SWDIO_Pin SYS_JTCK_SWCLK_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 800153c:	f246 7313 	movw	r3, #26387	@ 0x6713
 8001540:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin|SYS_JTMS_SWDIO_Pin|SYS_JTCK_SWCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <MX_GPIO_Init+0x12c>)
 8001556:	f001 faa7 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 800155a:	f240 4379 	movw	r3, #1145	@ 0x479
 800155e:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	@ (800158c <MX_GPIO_Init+0x130>)
 8001574:	f001 fa98 	bl	8002aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	@ 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800
 8001584:	40020800 	.word	0x40020800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400

08001590 <MECHANICS>:

/* USER CODE BEGIN 4 */
void MECHANICS (void){
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af06      	add	r7, sp, #24


//*********************** ACCION DE LA FECHA DERECHA *************************************************************************

	if (flag_right == 1){
 8001596:	4b8b      	ldr	r3, [pc, #556]	@ (80017c4 <MECHANICS+0x234>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d142      	bne.n	8001624 <MECHANICS+0x94>


		for (int var = 0; var < 20; var++ ) {
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e039      	b.n	8001618 <MECHANICS+0x88>
		  int anim = (var/5)% 4; //Me entrega los valores para los indices de la animacion de samus
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4a88      	ldr	r2, [pc, #544]	@ (80017c8 <MECHANICS+0x238>)
 80015a8:	fb82 1203 	smull	r1, r2, r2, r3
 80015ac:	1052      	asrs	r2, r2, #1
 80015ae:	17db      	asrs	r3, r3, #31
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	425a      	negs	r2, r3
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	f002 0203 	and.w	r2, r2, #3
 80015bc:	bf58      	it	pl
 80015be:	4253      	negpl	r3, r2
 80015c0:	607b      	str	r3, [r7, #4]
		  if (xf < 319 - 20){
			xf ++;
 80015c2:	4b82      	ldr	r3, [pc, #520]	@ (80017cc <MECHANICS+0x23c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b80      	ldr	r3, [pc, #512]	@ (80017cc <MECHANICS+0x23c>)
 80015cc:	701a      	strb	r2, [r3, #0]

			LCD_Sprite(xf, yf, 20, 32, samus_Idle_walk,4, anim, 0, 0);
 80015ce:	4b7f      	ldr	r3, [pc, #508]	@ (80017cc <MECHANICS+0x23c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	4b7e      	ldr	r3, [pc, #504]	@ (80017d0 <MECHANICS+0x240>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	2300      	movs	r3, #0
 80015dc:	9304      	str	r3, [sp, #16]
 80015de:	2300      	movs	r3, #0
 80015e0:	9303      	str	r3, [sp, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	2304      	movs	r3, #4
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	4b7a      	ldr	r3, [pc, #488]	@ (80017d4 <MECHANICS+0x244>)
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2320      	movs	r3, #32
 80015f0:	2214      	movs	r2, #20
 80015f2:	f7ff fbfb 	bl	8000dec <LCD_Sprite>
		    V_line(xf - 1, yf, 32, 0x0000);
 80015f6:	4b75      	ldr	r3, [pc, #468]	@ (80017cc <MECHANICS+0x23c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	4b74      	ldr	r3, [pc, #464]	@ (80017d0 <MECHANICS+0x240>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	2300      	movs	r3, #0
 8001606:	2220      	movs	r2, #32
 8001608:	f7ff fafc 	bl	8000c04 <V_line>

		    HAL_Delay(5);
 800160c:	2005      	movs	r0, #5
 800160e:	f000 fd13 	bl	8002038 <HAL_Delay>
		for (int var = 0; var < 20; var++ ) {
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b13      	cmp	r3, #19
 800161c:	ddc2      	ble.n	80015a4 <MECHANICS+0x14>
		   }
	     }
		flag_right = 0;
 800161e:	4b69      	ldr	r3, [pc, #420]	@ (80017c4 <MECHANICS+0x234>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	  }


//*********************** ACCION DE LA FECHA IZQUIERDA *************************************************************************
	  if (flag_left == 1){
 8001624:	4b6c      	ldr	r3, [pc, #432]	@ (80017d8 <MECHANICS+0x248>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d13e      	bne.n	80016aa <MECHANICS+0x11a>
	 		for (int var = 0; var < 20; var++ ) {
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	e035      	b.n	800169e <MECHANICS+0x10e>
	 		  int anim = (var/5)% 4; //Me entrega los valores para los indices de la animacion de samus
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4a64      	ldr	r2, [pc, #400]	@ (80017c8 <MECHANICS+0x238>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	1052      	asrs	r2, r2, #1
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	425a      	negs	r2, r3
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	bf58      	it	pl
 800164c:	4253      	negpl	r3, r2
 800164e:	603b      	str	r3, [r7, #0]

	 		  if (xf < 319 - 20){
	 			xf --;
 8001650:	4b5e      	ldr	r3, [pc, #376]	@ (80017cc <MECHANICS+0x23c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b5c      	ldr	r3, [pc, #368]	@ (80017cc <MECHANICS+0x23c>)
 800165a:	701a      	strb	r2, [r3, #0]

	 		    LCD_Sprite(xf, 175, 20, 32, samus_Idle_walk,4, anim, 1, 0);
 800165c:	4b5b      	ldr	r3, [pc, #364]	@ (80017cc <MECHANICS+0x23c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	2300      	movs	r3, #0
 8001664:	9304      	str	r3, [sp, #16]
 8001666:	2301      	movs	r3, #1
 8001668:	9303      	str	r3, [sp, #12]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	2304      	movs	r3, #4
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	4b58      	ldr	r3, [pc, #352]	@ (80017d4 <MECHANICS+0x244>)
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2320      	movs	r3, #32
 8001678:	2214      	movs	r2, #20
 800167a:	21af      	movs	r1, #175	@ 0xaf
 800167c:	f7ff fbb6 	bl	8000dec <LCD_Sprite>
	 		    V_line(xf +21, 175, 32, 0x0000);
 8001680:	4b52      	ldr	r3, [pc, #328]	@ (80017cc <MECHANICS+0x23c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	3315      	adds	r3, #21
 8001686:	4618      	mov	r0, r3
 8001688:	2300      	movs	r3, #0
 800168a:	2220      	movs	r2, #32
 800168c:	21af      	movs	r1, #175	@ 0xaf
 800168e:	f7ff fab9 	bl	8000c04 <V_line>


	 		    HAL_Delay(5);
 8001692:	2005      	movs	r0, #5
 8001694:	f000 fcd0 	bl	8002038 <HAL_Delay>
	 		for (int var = 0; var < 20; var++ ) {
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	3301      	adds	r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b13      	cmp	r3, #19
 80016a2:	ddc6      	ble.n	8001632 <MECHANICS+0xa2>
	 		 }

	 		  //if (position_X == 20){position_X = 0;}
	 	   }
	 		flag_left = 0;
 80016a4:	4b4c      	ldr	r3, [pc, #304]	@ (80017d8 <MECHANICS+0x248>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	 	  }

//*********************** ACCION DE SALTO *************************************************************************

	  if (flag_A == 1){
 80016aa:	4b4c      	ldr	r3, [pc, #304]	@ (80017dc <MECHANICS+0x24c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f040 810e 	bne.w	80018d0 <MECHANICS+0x340>

		  for (yf = y0; yf > h; yf --) {
 80016b4:	22af      	movs	r2, #175	@ 0xaf
 80016b6:	4b46      	ldr	r3, [pc, #280]	@ (80017d0 <MECHANICS+0x240>)
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e079      	b.n	80017b0 <MECHANICS+0x220>

			  LCD_Sprite(xf, yf, 18, 25, samus_jump, 1, 0, 0, 0);
 80016bc:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <MECHANICS+0x23c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <MECHANICS+0x240>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	2300      	movs	r3, #0
 80016ca:	9304      	str	r3, [sp, #16]
 80016cc:	2300      	movs	r3, #0
 80016ce:	9303      	str	r3, [sp, #12]
 80016d0:	2300      	movs	r3, #0
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	4b41      	ldr	r3, [pc, #260]	@ (80017e0 <MECHANICS+0x250>)
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2319      	movs	r3, #25
 80016de:	2212      	movs	r2, #18
 80016e0:	f7ff fb84 	bl	8000dec <LCD_Sprite>
			 // LCD_Sprite(x, y, width, height, bitmap, columns, index, flip, offset)
			 // H_line(x, y, l, c)
			  H_line(xf, yf + 26, 18, 0x0000);
 80016e4:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <MECHANICS+0x23c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <MECHANICS+0x240>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	331a      	adds	r3, #26
 80016f0:	4619      	mov	r1, r3
 80016f2:	2300      	movs	r3, #0
 80016f4:	2212      	movs	r2, #18
 80016f6:	f7ff fa45 	bl	8000b84 <H_line>
			  V_line(xf +19, yf, 32, 0x0000);
 80016fa:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <MECHANICS+0x23c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3313      	adds	r3, #19
 8001700:	4618      	mov	r0, r3
 8001702:	4b33      	ldr	r3, [pc, #204]	@ (80017d0 <MECHANICS+0x240>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	2300      	movs	r3, #0
 800170a:	2220      	movs	r2, #32
 800170c:	f7ff fa7a 	bl	8000c04 <V_line>
			  V_line(xf +20, yf, 32, 0x0000);
 8001710:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <MECHANICS+0x23c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	3314      	adds	r3, #20
 8001716:	4618      	mov	r0, r3
 8001718:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <MECHANICS+0x240>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	2300      	movs	r3, #0
 8001720:	2220      	movs	r2, #32
 8001722:	f7ff fa6f 	bl	8000c04 <V_line>
			  V_line(xf +21, yf, 32, 0x0000);
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <MECHANICS+0x23c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	3315      	adds	r3, #21
 800172c:	4618      	mov	r0, r3
 800172e:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <MECHANICS+0x240>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	2300      	movs	r3, #0
 8001736:	2220      	movs	r2, #32
 8001738:	f7ff fa64 	bl	8000c04 <V_line>
			 V_line(xf -1, yf, 32, 0x0000);
 800173c:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <MECHANICS+0x23c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	4618      	mov	r0, r3
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <MECHANICS+0x240>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	2300      	movs	r3, #0
 800174c:	2220      	movs	r2, #32
 800174e:	f7ff fa59 	bl	8000c04 <V_line>
			 V_line(xf -2, yf, 32, 0x0000);
 8001752:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <MECHANICS+0x23c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3b02      	subs	r3, #2
 8001758:	4618      	mov	r0, r3
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <MECHANICS+0x240>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	2300      	movs	r3, #0
 8001762:	2220      	movs	r2, #32
 8001764:	f7ff fa4e 	bl	8000c04 <V_line>


			  HAL_Delay(5);
 8001768:	2005      	movs	r0, #5
 800176a:	f000 fc65 	bl	8002038 <HAL_Delay>
			  //xf++;

			  if (flag_right == 1){
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MECHANICS+0x234>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d109      	bne.n	800178a <MECHANICS+0x1fa>
				  xf = xf + 2;
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <MECHANICS+0x23c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	3302      	adds	r3, #2
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MECHANICS+0x23c>)
 8001780:	701a      	strb	r2, [r3, #0]
				  flag_right = 0;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MECHANICS+0x234>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e00c      	b.n	80017a4 <MECHANICS+0x214>
			  } else if (flag_left == 1){
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <MECHANICS+0x248>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <MECHANICS+0x214>
				  xf = xf - 2;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MECHANICS+0x23c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	3b02      	subs	r3, #2
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MECHANICS+0x23c>)
 800179c:	701a      	strb	r2, [r3, #0]
				  flag_left = 0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <MECHANICS+0x248>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
		  for (yf = y0; yf > h; yf --) {
 80017a4:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <MECHANICS+0x240>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <MECHANICS+0x240>)
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <MECHANICS+0x240>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	226f      	movs	r2, #111	@ 0x6f
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d880      	bhi.n	80016bc <MECHANICS+0x12c>
			  }

		}

		  for (yf = h; yf < y0; yf ++) {
 80017ba:	226f      	movs	r2, #111	@ 0x6f
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <MECHANICS+0x240>)
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e07e      	b.n	80018c0 <MECHANICS+0x330>
 80017c2:	bf00      	nop
 80017c4:	20003c73 	.word	0x20003c73
 80017c8:	66666667 	.word	0x66666667
 80017cc:	20003c78 	.word	0x20003c78
 80017d0:	20003c79 	.word	0x20003c79
 80017d4:	20000200 	.word	0x20000200
 80017d8:	20003c72 	.word	0x20003c72
 80017dc:	20003c74 	.word	0x20003c74
 80017e0:	20001600 	.word	0x20001600
		  		LCD_Sprite(xf, yf, 18, 25, samus_jump, 1, 0, 0, 0);
 80017e4:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <MECHANICS+0x350>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	4b3e      	ldr	r3, [pc, #248]	@ (80018e4 <MECHANICS+0x354>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	9304      	str	r3, [sp, #16]
 80017f4:	2300      	movs	r3, #0
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	2300      	movs	r3, #0
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	2301      	movs	r3, #1
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <MECHANICS+0x358>)
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2319      	movs	r3, #25
 8001806:	2212      	movs	r2, #18
 8001808:	f7ff faf0 	bl	8000dec <LCD_Sprite>
		    	H_line(xf, yf , 18, 0x0000);
 800180c:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <MECHANICS+0x350>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <MECHANICS+0x354>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	2300      	movs	r3, #0
 800181a:	2212      	movs	r2, #18
 800181c:	f7ff f9b2 	bl	8000b84 <H_line>
		    	V_line(xf +19, yf, 32, 0x0000);
 8001820:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <MECHANICS+0x350>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3313      	adds	r3, #19
 8001826:	4618      	mov	r0, r3
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <MECHANICS+0x354>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	2300      	movs	r3, #0
 8001830:	2220      	movs	r2, #32
 8001832:	f7ff f9e7 	bl	8000c04 <V_line>
		    	V_line(xf +20, yf, 32, 0x0000);
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <MECHANICS+0x350>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3314      	adds	r3, #20
 800183c:	4618      	mov	r0, r3
 800183e:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <MECHANICS+0x354>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4619      	mov	r1, r3
 8001844:	2300      	movs	r3, #0
 8001846:	2220      	movs	r2, #32
 8001848:	f7ff f9dc 	bl	8000c04 <V_line>
		    	V_line(xf -1, yf, 32, 0x0000);
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <MECHANICS+0x350>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3b01      	subs	r3, #1
 8001852:	4618      	mov	r0, r3
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <MECHANICS+0x354>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	2300      	movs	r3, #0
 800185c:	2220      	movs	r2, #32
 800185e:	f7ff f9d1 	bl	8000c04 <V_line>
		    	V_line(xf -2, yf, 32, 0x0000);
 8001862:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <MECHANICS+0x350>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	3b02      	subs	r3, #2
 8001868:	4618      	mov	r0, r3
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <MECHANICS+0x354>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	2300      	movs	r3, #0
 8001872:	2220      	movs	r2, #32
 8001874:	f7ff f9c6 	bl	8000c04 <V_line>
		  		HAL_Delay(5);
 8001878:	2005      	movs	r0, #5
 800187a:	f000 fbdd 	bl	8002038 <HAL_Delay>


		  		if (flag_right == 1){
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <MECHANICS+0x35c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d109      	bne.n	800189a <MECHANICS+0x30a>
		  			xf = xf+2;
 8001886:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <MECHANICS+0x350>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	3302      	adds	r3, #2
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <MECHANICS+0x350>)
 8001890:	701a      	strb	r2, [r3, #0]
		 			flag_right = 0;
 8001892:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <MECHANICS+0x35c>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	e00c      	b.n	80018b4 <MECHANICS+0x324>
		  		} else if (flag_left == 1){
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <MECHANICS+0x360>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <MECHANICS+0x324>
		  			xf=xf-2;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <MECHANICS+0x350>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b02      	subs	r3, #2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <MECHANICS+0x350>)
 80018ac:	701a      	strb	r2, [r3, #0]
		  			flag_left = 0;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MECHANICS+0x360>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
		  for (yf = h; yf < y0; yf ++) {
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <MECHANICS+0x354>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <MECHANICS+0x354>)
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <MECHANICS+0x354>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	22af      	movs	r2, #175	@ 0xaf
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d38c      	bcc.n	80017e4 <MECHANICS+0x254>
		  		  }

		  }

		  flag_A  = 0;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <MECHANICS+0x364>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]

	  }

//*********************** ACCION DE DISPARO *************************************************************************

	  if (flag_B == 1){
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <MECHANICS+0x368>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1

	  }



}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20003c78 	.word	0x20003c78
 80018e4:	20003c79 	.word	0x20003c79
 80018e8:	20001600 	.word	0x20001600
 80018ec:	20003c73 	.word	0x20003c73
 80018f0:	20003c72 	.word	0x20003c72
 80018f4:	20003c74 	.word	0x20003c74
 80018f8:	20003c75 	.word	0x20003c75

080018fc <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

	memcpy (buffer + indx, temp, 1);
 8001904:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 800190c:	4413      	add	r3, r2
 800190e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	701a      	strb	r2, [r3, #0]
	++indx;
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b68      	ldr	r3, [pc, #416]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x1c4>)
 800191e:	801a      	strh	r2, [r3, #0]
	if(indx >= 10){
 8001920:	4b67      	ldr	r3, [pc, #412]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d902      	bls.n	800192e <HAL_UART_RxCpltCallback+0x32>
		indx = 0;
 8001928:	4b65      	ldr	r3, [pc, #404]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x1c4>)
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
	}


	//HAL_UART_Receive_IT(&huart2, temp, 1);

	HAL_UART_Receive_DMA(&huart2, temp, 1);
 800192e:	2201      	movs	r2, #1
 8001930:	4965      	ldr	r1, [pc, #404]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001932:	4866      	ldr	r0, [pc, #408]	@ (8001acc <HAL_UART_RxCpltCallback+0x1d0>)
 8001934:	f002 fa22 	bl	8003d7c <HAL_UART_Receive_DMA>

//--------------------------Inicio del bloque para transmitir------------------------------------------------------------
		for(int i = 0; i < 10; i++) {
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e078      	b.n	8001a30 <HAL_UART_RxCpltCallback+0x134>
			if (buffer[i] == 117){   //117 es ASCII de u
 800193e:	4a61      	ldr	r2, [pc, #388]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001946:	2b75      	cmp	r3, #117	@ 0x75
 8001948:	d107      	bne.n	800195a <HAL_UART_RxCpltCallback+0x5e>
						flag_up = 1;
 800194a:	4b61      	ldr	r3, [pc, #388]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x1d4>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 8001950:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2100      	movs	r1, #0
 8001956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

			if (buffer[i] == 100){   //100 es ASCII de d
 800195a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001962:	2b64      	cmp	r3, #100	@ 0x64
 8001964:	d107      	bne.n	8001976 <HAL_UART_RxCpltCallback+0x7a>
						flag_down = 1;
 8001966:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 800196c:	4a55      	ldr	r2, [pc, #340]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2100      	movs	r1, #0
 8001972:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					}

			if (buffer[i] == 108){   //108 es ASCII de l
 8001976:	4a53      	ldr	r2, [pc, #332]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800197e:	2b6c      	cmp	r3, #108	@ 0x6c
 8001980:	d107      	bne.n	8001992 <HAL_UART_RxCpltCallback+0x96>
						flag_left = 1;
 8001982:	4b55      	ldr	r3, [pc, #340]	@ (8001ad8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 8001988:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2100      	movs	r1, #0
 800198e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

			if (buffer[i] == 114){   //114 es ASCII de l
 8001992:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199a:	2b72      	cmp	r3, #114	@ 0x72
 800199c:	d107      	bne.n	80019ae <HAL_UART_RxCpltCallback+0xb2>
						flag_right = 1;
 800199e:	4b4f      	ldr	r3, [pc, #316]	@ (8001adc <HAL_UART_RxCpltCallback+0x1e0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 80019a4:	4a47      	ldr	r2, [pc, #284]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2100      	movs	r1, #0
 80019aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}


			if (buffer[i] == 65){   //65 es ASCII de l
 80019ae:	4a45      	ldr	r2, [pc, #276]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b6:	2b41      	cmp	r3, #65	@ 0x41
 80019b8:	d107      	bne.n	80019ca <HAL_UART_RxCpltCallback+0xce>
				    	flag_A = 1;
 80019ba:	4b49      	ldr	r3, [pc, #292]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x1e4>)
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
				    	buffer[i] = 0;
 80019c0:	4a40      	ldr	r2, [pc, #256]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2100      	movs	r1, #0
 80019c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}


			if (buffer[i] == 66){   //66 es ASCII de l
 80019ca:	4a3e      	ldr	r2, [pc, #248]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d2:	2b42      	cmp	r3, #66	@ 0x42
 80019d4:	d107      	bne.n	80019e6 <HAL_UART_RxCpltCallback+0xea>
						flag_B = 1;
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x1e8>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
						buffer[i] = 0;
 80019dc:	4a39      	ldr	r2, [pc, #228]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2100      	movs	r1, #0
 80019e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 }

			if (buffer[i] == 83){ //83 es ASCII de s mayúscula
 80019e6:	4a37      	ldr	r2, [pc, #220]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ee:	2b53      	cmp	r3, #83	@ 0x53
 80019f0:	d10a      	bne.n	8001a08 <HAL_UART_RxCpltCallback+0x10c>
				flag_Start = 1;
 80019f2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae8 <HAL_UART_RxCpltCallback+0x1ec>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
				flag_title = 1;
 80019f8:	4b3c      	ldr	r3, [pc, #240]	@ (8001aec <HAL_UART_RxCpltCallback+0x1f0>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
				buffer[i] = 0;
 80019fe:	4a31      	ldr	r2, [pc, #196]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2100      	movs	r1, #0
 8001a04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			if (buffer[i] == 115){ //83 es ASCII de s minúscula
 8001a08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a10:	2b73      	cmp	r3, #115	@ 0x73
 8001a12:	d10a      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0x12e>
				flag_Select = 1;
 8001a14:	4b36      	ldr	r3, [pc, #216]	@ (8001af0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
				Estado_de_juego = PAUSE;
 8001a1a:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	701a      	strb	r2, [r3, #0]
				buffer[i] = 0;
 8001a20:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2100      	movs	r1, #0
 8001a26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 10; i++) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b09      	cmp	r3, #9
 8001a34:	dd83      	ble.n	800193e <HAL_UART_RxCpltCallback+0x42>

		    } //Fin del for



	  if (flag_up == 1){
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d104      	bne.n	8001a48 <HAL_UART_RxCpltCallback+0x14c>
		  //HAL_UART_Transmit(&huart2, Up, sizeof(Up), 2000);
		  HAL_UART_Transmit_DMA(&huart2, Up, sizeof(Up));
 8001a3e:	2205      	movs	r2, #5
 8001a40:	492d      	ldr	r1, [pc, #180]	@ (8001af8 <HAL_UART_RxCpltCallback+0x1fc>)
 8001a42:	4822      	ldr	r0, [pc, #136]	@ (8001acc <HAL_UART_RxCpltCallback+0x1d0>)
 8001a44:	f002 f92a 	bl	8003c9c <HAL_UART_Transmit_DMA>
		  	 //LCD_Bitmap(100, 50, 20, 32, Samus_Stand);

		  //flag_up = 0;
		  }

	  if (flag_down == 1){
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d106      	bne.n	8001a5e <HAL_UART_RxCpltCallback+0x162>
		  HAL_UART_Transmit(&huart2, Down, sizeof(Down), 2000);
 8001a50:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a54:	2207      	movs	r2, #7
 8001a56:	4929      	ldr	r1, [pc, #164]	@ (8001afc <HAL_UART_RxCpltCallback+0x200>)
 8001a58:	481c      	ldr	r0, [pc, #112]	@ (8001acc <HAL_UART_RxCpltCallback+0x1d0>)
 8001a5a:	f002 f894 	bl	8003b86 <HAL_UART_Transmit>
		  //flag_title = 1;
		  //flag_down = 0;
		  }

	  if (flag_left == 1){
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d106      	bne.n	8001a74 <HAL_UART_RxCpltCallback+0x178>
		  HAL_UART_Transmit(&huart2, Left, sizeof(Left), 2000);
 8001a66:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	4924      	ldr	r1, [pc, #144]	@ (8001b00 <HAL_UART_RxCpltCallback+0x204>)
 8001a6e:	4817      	ldr	r0, [pc, #92]	@ (8001acc <HAL_UART_RxCpltCallback+0x1d0>)
 8001a70:	f002 f889 	bl	8003b86 <HAL_UART_Transmit>
		  //flag_title = 1;
		  //flag_left = 0;
		  }

	  if (flag_right == 1){
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_UART_RxCpltCallback+0x1e0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d106      	bne.n	8001a8a <HAL_UART_RxCpltCallback+0x18e>
		  HAL_UART_Transmit(&huart2, Right, sizeof(Right), 2000);
 8001a7c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a80:	2208      	movs	r2, #8
 8001a82:	4920      	ldr	r1, [pc, #128]	@ (8001b04 <HAL_UART_RxCpltCallback+0x208>)
 8001a84:	4811      	ldr	r0, [pc, #68]	@ (8001acc <HAL_UART_RxCpltCallback+0x1d0>)
 8001a86:	f002 f87e 	bl	8003b86 <HAL_UART_Transmit>
		  //flag_title = 1;
		  // flag_right = 0;
		  }

	  if (flag_A == 1){
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d106      	bne.n	8001aa0 <HAL_UART_RxCpltCallback+0x1a4>
		  HAL_UART_Transmit(&huart2, A, sizeof(A), 2000);
 8001a92:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a96:	2204      	movs	r2, #4
 8001a98:	491b      	ldr	r1, [pc, #108]	@ (8001b08 <HAL_UART_RxCpltCallback+0x20c>)
 8001a9a:	480c      	ldr	r0, [pc, #48]	@ (8001acc <HAL_UART_RxCpltCallback+0x1d0>)
 8001a9c:	f002 f873 	bl	8003b86 <HAL_UART_Transmit>
		  //flag_title = 1;
		  //flag_A = 0;
		  }

	   if (flag_B == 1){
 8001aa0:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <HAL_UART_RxCpltCallback+0x1e8>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_UART_RxCpltCallback+0x1ba>
		   HAL_UART_Transmit(&huart2, B, sizeof(B), 2000);
 8001aa8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001aac:	2204      	movs	r2, #4
 8001aae:	4917      	ldr	r1, [pc, #92]	@ (8001b0c <HAL_UART_RxCpltCallback+0x210>)
 8001ab0:	4806      	ldr	r0, [pc, #24]	@ (8001acc <HAL_UART_RxCpltCallback+0x1d0>)
 8001ab2:	f002 f868 	bl	8003b86 <HAL_UART_Transmit>
		   }
	   ;
//--------------------------Fin del bloque para transmitir-------------------


}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20003c6e 	.word	0x20003c6e
 8001ac4:	20003c58 	.word	0x20003c58
 8001ac8:	20003c6c 	.word	0x20003c6c
 8001acc:	20003b08 	.word	0x20003b08
 8001ad0:	20003c70 	.word	0x20003c70
 8001ad4:	20003c71 	.word	0x20003c71
 8001ad8:	20003c72 	.word	0x20003c72
 8001adc:	20003c73 	.word	0x20003c73
 8001ae0:	20003c74 	.word	0x20003c74
 8001ae4:	20003c75 	.word	0x20003c75
 8001ae8:	20003c76 	.word	0x20003c76
 8001aec:	20003c7a 	.word	0x20003c7a
 8001af0:	20003c77 	.word	0x20003c77
 8001af4:	20003c7b 	.word	0x20003c7b
 8001af8:	20001984 	.word	0x20001984
 8001afc:	2000198c 	.word	0x2000198c
 8001b00:	20001994 	.word	0x20001994
 8001b04:	2000199c 	.word	0x2000199c
 8001b08:	200019a4 	.word	0x200019a4
 8001b0c:	200019a8 	.word	0x200019a8

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b68 <HAL_MspInit+0x4c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <HAL_MspInit+0x4c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b5a:	2007      	movs	r0, #7
 8001b5c:	f000 fb60 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_SPI_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bc6:	23e0      	movs	r3, #224	@ 0xe0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <HAL_SPI_MspInit+0x8c>)
 8001be2:	f000 ff61 	bl	8002aa8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	@ 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a65      	ldr	r2, [pc, #404]	@ (8001db0 <HAL_UART_MspInit+0x1b4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	f040 8089 	bne.w	8001d32 <HAL_UART_MspInit+0x136>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	4a62      	ldr	r2, [pc, #392]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c30:	4b60      	ldr	r3, [pc, #384]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	4b5c      	ldr	r3, [pc, #368]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	4a5b      	ldr	r2, [pc, #364]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4c:	4b59      	ldr	r3, [pc, #356]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c58:	230c      	movs	r3, #12
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c68:	2307      	movs	r3, #7
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4851      	ldr	r0, [pc, #324]	@ (8001db8 <HAL_UART_MspInit+0x1bc>)
 8001c74:	f000 ff18 	bl	8002aa8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001c7a:	4a51      	ldr	r2, [pc, #324]	@ (8001dc0 <HAL_UART_MspInit+0x1c4>)
 8001c7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001c80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c86:	4b4d      	ldr	r3, [pc, #308]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c92:	4b4a      	ldr	r3, [pc, #296]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001c94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9a:	4b48      	ldr	r3, [pc, #288]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca0:	4b46      	ldr	r3, [pc, #280]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cac:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb2:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001cb8:	4840      	ldr	r0, [pc, #256]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001cba:	f000 faf3 	bl	80022a4 <HAL_DMA_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001cc4:	f7ff ff24 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cce:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <HAL_UART_MspInit+0x1c0>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc8 <HAL_UART_MspInit+0x1cc>)
 8001cd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001cda:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001cdc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ce0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ce2:	4b38      	ldr	r3, [pc, #224]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001ce4:	2240      	movs	r2, #64	@ 0x40
 8001ce6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce8:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	4b35      	ldr	r3, [pc, #212]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf6:	4b33      	ldr	r3, [pc, #204]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfc:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d02:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d08:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d14:	482b      	ldr	r0, [pc, #172]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001d16:	f000 fac5 	bl	80022a4 <HAL_DMA_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001d20:	f7ff fef6 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a27      	ldr	r2, [pc, #156]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001d28:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d2a:	4a26      	ldr	r2, [pc, #152]	@ (8001dc4 <HAL_UART_MspInit+0x1c8>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d30:	e039      	b.n	8001da6 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a25      	ldr	r2, [pc, #148]	@ (8001dcc <HAL_UART_MspInit+0x1d0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d134      	bne.n	8001da6 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_UART_MspInit+0x1b8>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001d74:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d86:	2307      	movs	r3, #7
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480f      	ldr	r0, [pc, #60]	@ (8001dd0 <HAL_UART_MspInit+0x1d4>)
 8001d92:	f000 fe89 	bl	8002aa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2027      	movs	r0, #39	@ 0x27
 8001d9c:	f000 fa4b 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001da0:	2027      	movs	r0, #39	@ 0x27
 8001da2:	f000 fa64 	bl	800226e <HAL_NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3730      	adds	r7, #48	@ 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40004400 	.word	0x40004400
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	20003b98 	.word	0x20003b98
 8001dc0:	40026088 	.word	0x40026088
 8001dc4:	20003bf8 	.word	0x20003bf8
 8001dc8:	400260a0 	.word	0x400260a0
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	40020800 	.word	0x40020800

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <NMI_Handler+0x4>

08001ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <MemManage_Handler+0x4>

08001dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 f8e5 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e38:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <DMA1_Stream5_IRQHandler+0x10>)
 8001e3a:	f000 fbcb 	bl	80025d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20003b98 	.word	0x20003b98

08001e48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <DMA1_Stream6_IRQHandler+0x10>)
 8001e4e:	f000 fbc1 	bl	80025d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20003bf8 	.word	0x20003bf8

08001e5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <USART3_IRQHandler+0x10>)
 8001e62:	f001 ffb1 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20003b50 	.word	0x20003b50

08001e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <_sbrk+0x5c>)
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <_sbrk+0x60>)
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <_sbrk+0x64>)
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <_sbrk+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d207      	bcs.n	8001eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea0:	f006 f8ca 	bl	8008038 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e009      	b.n	8001ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <_sbrk+0x64>)
 8001ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20020000 	.word	0x20020000
 8001ed0:	00000400 	.word	0x00000400
 8001ed4:	20003c7c 	.word	0x20003c7c
 8001ed8:	20004008 	.word	0x20004008

08001edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  



  ldr   sp, =_estack      /* set stack pointer */
 8001f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f04:	f7ff ffea 	bl	8001edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f08:	480c      	ldr	r0, [pc, #48]	@ (8001f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f0a:	490d      	ldr	r1, [pc, #52]	@ (8001f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f20:	4c0a      	ldr	r4, [pc, #40]	@ (8001f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f006 f889 	bl	8008044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f32:	f7ff f81d 	bl	8000f70 <main>
  bx  lr    
 8001f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	20001a28 	.word	0x20001a28
  ldr r2, =_sidata
 8001f44:	08078f20 	.word	0x08078f20
  ldr r2, =_sbss
 8001f48:	20001a28 	.word	0x20001a28
  ldr r4, =_ebss
 8001f4c:	20004008 	.word	0x20004008

08001f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC_IRQHandler>
	...

08001f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <HAL_Init+0x40>)
 8001f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <HAL_Init+0x40>)
 8001f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <HAL_Init+0x40>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 f94f 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f000 f808 	bl	8001f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f88:	f7ff fdc8 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023c00 	.word	0x40023c00

08001f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <HAL_InitTick+0x54>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_InitTick+0x58>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f967 	bl	800228a <HAL_SYSTICK_Config>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00e      	b.n	8001fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	d80a      	bhi.n	8001fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f000 f92f 	bl	8002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd8:	4a06      	ldr	r2, [pc, #24]	@ (8001ff4 <HAL_InitTick+0x5c>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200019b8 	.word	0x200019b8
 8001ff0:	200019c0 	.word	0x200019c0
 8001ff4:	200019bc 	.word	0x200019bc

08001ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_IncTick+0x20>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_IncTick+0x24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_IncTick+0x24>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	200019c0 	.word	0x200019c0
 800201c:	20003c80 	.word	0x20003c80

08002020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <HAL_GetTick+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20003c80 	.word	0x20003c80

08002038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff ffee 	bl	8002020 <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d005      	beq.n	800205e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_Delay+0x44>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800205e:	bf00      	nop
 8002060:	f7ff ffde 	bl	8002020 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d8f7      	bhi.n	8002060 <HAL_Delay+0x28>
  {
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200019c0 	.word	0x200019c0

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	@ (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	@ 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	@ (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff3e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff31 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff feb6 	bl	8002020 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e099      	b.n	80023f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e0:	e00f      	b.n	8002302 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e2:	f7ff fe9d 	bl	8002020 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d908      	bls.n	8002302 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e078      	b.n	80023f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e8      	bne.n	80022e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4b38      	ldr	r3, [pc, #224]	@ (80023fc <HAL_DMA_Init+0x158>)
 800231c:	4013      	ands	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	2b04      	cmp	r3, #4
 800235a:	d107      	bne.n	800236c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	4313      	orrs	r3, r2
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0307 	bic.w	r3, r3, #7
 8002382:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	2b04      	cmp	r3, #4
 8002394:	d117      	bne.n	80023c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00e      	beq.n	80023c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fb01 	bl	80029b0 <DMA_CheckFifoParam>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2240      	movs	r2, #64	@ 0x40
 80023b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023c2:	2301      	movs	r3, #1
 80023c4:	e016      	b.n	80023f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fab8 	bl	8002944 <DMA_CalcBaseAndBitshift>
 80023d4:	4603      	mov	r3, r0
 80023d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	223f      	movs	r2, #63	@ 0x3f
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	f010803f 	.word	0xf010803f

08002400 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002416:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_DMA_Start_IT+0x26>
 8002422:	2302      	movs	r3, #2
 8002424:	e040      	b.n	80024a8 <HAL_DMA_Start_IT+0xa8>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d12f      	bne.n	800249a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa4a 	bl	80028e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	223f      	movs	r2, #63	@ 0x3f
 800245a:	409a      	lsls	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0216 	orr.w	r2, r2, #22
 800246e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0208 	orr.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e005      	b.n	80024a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024be:	f7ff fdaf 	bl	8002020 <HAL_GetTick>
 80024c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	@ 0x80
 80024d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e052      	b.n	8002588 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002500:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_Abort+0x62>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002532:	e013      	b.n	800255c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002534:	f7ff fd74 	bl	8002020 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b05      	cmp	r3, #5
 8002540:	d90c      	bls.n	800255c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e015      	b.n	8002588 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e4      	bne.n	8002534 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256e:	223f      	movs	r2, #63	@ 0x3f
 8002570:	409a      	lsls	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d004      	beq.n	80025ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00c      	b.n	80025c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e0:	4b8e      	ldr	r3, [pc, #568]	@ (800281c <HAL_DMA_IRQHandler+0x248>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002820 <HAL_DMA_IRQHandler+0x24c>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	2208      	movs	r2, #8
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01a      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	2208      	movs	r2, #8
 800262e:	409a      	lsls	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	2201      	movs	r2, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	2201      	movs	r2, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266e:	f043 0202 	orr.w	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	2204      	movs	r2, #4
 800267c:	409a      	lsls	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	2204      	movs	r2, #4
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a4:	f043 0204 	orr.w	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	2210      	movs	r2, #16
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d043      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03c      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	2210      	movs	r2, #16
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d018      	beq.n	8002716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e01f      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e016      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0208 	bic.w	r2, r2, #8
 8002732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	2220      	movs	r2, #32
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 808f 	beq.w	8002874 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8087 	beq.w	8002874 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	2220      	movs	r2, #32
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d136      	bne.n	80027ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0216 	bic.w	r2, r2, #22
 800278c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800279c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_DMA_IRQHandler+0x1da>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c2:	223f      	movs	r2, #63	@ 0x3f
 80027c4:	409a      	lsls	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d07e      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
        }
        return;
 80027ea:	e079      	b.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280c:	2b00      	cmp	r3, #0
 800280e:	d031      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e02c      	b.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
 800281a:	bf00      	nop
 800281c:	200019b8 	.word	0x200019b8
 8002820:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d023      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e01e      	b.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10f      	bne.n	8002864 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0210 	bic.w	r2, r2, #16
 8002852:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	d032      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2205      	movs	r2, #5
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d307      	bcc.n	80028bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f2      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x2cc>
 80028ba:	e000      	b.n	80028be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
 80028de:	e000      	b.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e0:	bf00      	nop
    }
  }
}
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002904:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b40      	cmp	r3, #64	@ 0x40
 8002914:	d108      	bne.n	8002928 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002926:	e007      	b.n	8002938 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3b10      	subs	r3, #16
 8002954:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800295e:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <DMA_CalcBaseAndBitshift+0x68>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d909      	bls.n	8002986 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	1d1a      	adds	r2, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	659a      	str	r2, [r3, #88]	@ 0x58
 8002984:	e007      	b.n	8002996 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	aaaaaaab 	.word	0xaaaaaaab
 80029ac:	08078a94 	.word	0x08078a94

080029b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11f      	bne.n	8002a0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d856      	bhi.n	8002a7e <DMA_CheckFifoParam+0xce>
 80029d0:	a201      	add	r2, pc, #4	@ (adr r2, 80029d8 <DMA_CheckFifoParam+0x28>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	080029e9 	.word	0x080029e9
 80029dc:	080029fb 	.word	0x080029fb
 80029e0:	080029e9 	.word	0x080029e9
 80029e4:	08002a7f 	.word	0x08002a7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d046      	beq.n	8002a82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e043      	b.n	8002a82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a02:	d140      	bne.n	8002a86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a08:	e03d      	b.n	8002a86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a12:	d121      	bne.n	8002a58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d837      	bhi.n	8002a8a <DMA_CheckFifoParam+0xda>
 8002a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <DMA_CheckFifoParam+0x70>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a37 	.word	0x08002a37
 8002a28:	08002a31 	.word	0x08002a31
 8002a2c:	08002a49 	.word	0x08002a49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      break;
 8002a34:	e030      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d025      	beq.n	8002a8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a46:	e022      	b.n	8002a8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a50:	d11f      	bne.n	8002a92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a56:	e01c      	b.n	8002a92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d903      	bls.n	8002a66 <DMA_CheckFifoParam+0xb6>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d003      	beq.n	8002a6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a64:	e018      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6a:	e015      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e00b      	b.n	8002a96 <DMA_CheckFifoParam+0xe6>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e00a      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a82:	bf00      	nop
 8002a84:	e008      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e006      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e004      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <DMA_CheckFifoParam+0xe8>
      break;
 8002a96:	bf00      	nop
    }
  } 
  
  return status; 
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	e165      	b.n	8002d90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f040 8154 	bne.w	8002d8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d005      	beq.n	8002afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d130      	bne.n	8002b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 0201 	and.w	r2, r3, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d017      	beq.n	8002b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d123      	bne.n	8002bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	08da      	lsrs	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3208      	adds	r2, #8
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	08da      	lsrs	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3208      	adds	r2, #8
 8002be6:	69b9      	ldr	r1, [r7, #24]
 8002be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0203 	and.w	r2, r3, #3
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80ae 	beq.w	8002d8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_GPIO_Init+0x300>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	4a5c      	ldr	r2, [pc, #368]	@ (8002da8 <HAL_GPIO_Init+0x300>)
 8002c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002da8 <HAL_GPIO_Init+0x300>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4a:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_GPIO_Init+0x304>)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4f      	ldr	r2, [pc, #316]	@ (8002db0 <HAL_GPIO_Init+0x308>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d025      	beq.n	8002cc2 <HAL_GPIO_Init+0x21a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	@ (8002db4 <HAL_GPIO_Init+0x30c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <HAL_GPIO_Init+0x216>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4d      	ldr	r2, [pc, #308]	@ (8002db8 <HAL_GPIO_Init+0x310>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x212>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	@ (8002dbc <HAL_GPIO_Init+0x314>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x20e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc0 <HAL_GPIO_Init+0x318>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x20a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc4 <HAL_GPIO_Init+0x31c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x206>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	@ (8002dc8 <HAL_GPIO_Init+0x320>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x202>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002caa:	2307      	movs	r3, #7
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x21c>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	@ (8002dac <HAL_GPIO_Init+0x304>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d06:	4a31      	ldr	r2, [pc, #196]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d30:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d36:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d84:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <HAL_GPIO_Init+0x324>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f ae96 	bls.w	8002ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	@ 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40021800 	.word	0x40021800
 8002dcc:	40013c00 	.word	0x40013c00

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7ff f894 	bl	8002020 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7ff f890 	bl	8002020 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f855 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fff4 	bl	8001f98 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	08078a7c 	.word	0x08078a7c
 8002fc8:	200019b8 	.word	0x200019b8
 8002fcc:	200019bc 	.word	0x200019bc

08002fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	200019b8 	.word	0x200019b8

08002fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fec:	f7ff fff0 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	@ (800300c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	08078a8c 	.word	0x08078a8c

08003010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003014:	f7ff ffdc 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0b5b      	lsrs	r3, r3, #13
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	@ (8003034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	08078a8c 	.word	0x08078a8c

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b0ae      	sub	sp, #184	@ 0xb8
 800303e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305e:	4bcb      	ldr	r3, [pc, #812]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b0c      	cmp	r3, #12
 8003068:	f200 8206 	bhi.w	8003478 <HAL_RCC_GetSysClockFreq+0x440>
 800306c:	a201      	add	r2, pc, #4	@ (adr r2, 8003074 <HAL_RCC_GetSysClockFreq+0x3c>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	080030a9 	.word	0x080030a9
 8003078:	08003479 	.word	0x08003479
 800307c:	08003479 	.word	0x08003479
 8003080:	08003479 	.word	0x08003479
 8003084:	080030b1 	.word	0x080030b1
 8003088:	08003479 	.word	0x08003479
 800308c:	08003479 	.word	0x08003479
 8003090:	08003479 	.word	0x08003479
 8003094:	080030b9 	.word	0x080030b9
 8003098:	08003479 	.word	0x08003479
 800309c:	08003479 	.word	0x08003479
 80030a0:	08003479 	.word	0x08003479
 80030a4:	080032a9 	.word	0x080032a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4bb9      	ldr	r3, [pc, #740]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x358>)
 80030aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ae:	e1e7      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b0:	4bb8      	ldr	r3, [pc, #736]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030b6:	e1e3      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4bb4      	ldr	r3, [pc, #720]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c4:	4bb1      	ldr	r3, [pc, #708]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d071      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4bae      	ldr	r3, [pc, #696]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80030e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030f6:	4622      	mov	r2, r4
 80030f8:	462b      	mov	r3, r5
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	0159      	lsls	r1, r3, #5
 8003104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003108:	0150      	lsls	r0, r2, #5
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4621      	mov	r1, r4
 8003110:	1a51      	subs	r1, r2, r1
 8003112:	6439      	str	r1, [r7, #64]	@ 0x40
 8003114:	4629      	mov	r1, r5
 8003116:	eb63 0301 	sbc.w	r3, r3, r1
 800311a:	647b      	str	r3, [r7, #68]	@ 0x44
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003128:	4649      	mov	r1, r9
 800312a:	018b      	lsls	r3, r1, #6
 800312c:	4641      	mov	r1, r8
 800312e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003132:	4641      	mov	r1, r8
 8003134:	018a      	lsls	r2, r1, #6
 8003136:	4641      	mov	r1, r8
 8003138:	1a51      	subs	r1, r2, r1
 800313a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800313c:	4649      	mov	r1, r9
 800313e:	eb63 0301 	sbc.w	r3, r3, r1
 8003142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003150:	4649      	mov	r1, r9
 8003152:	00cb      	lsls	r3, r1, #3
 8003154:	4641      	mov	r1, r8
 8003156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315a:	4641      	mov	r1, r8
 800315c:	00ca      	lsls	r2, r1, #3
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	4603      	mov	r3, r0
 8003164:	4622      	mov	r2, r4
 8003166:	189b      	adds	r3, r3, r2
 8003168:	633b      	str	r3, [r7, #48]	@ 0x30
 800316a:	462b      	mov	r3, r5
 800316c:	460a      	mov	r2, r1
 800316e:	eb42 0303 	adc.w	r3, r2, r3
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003180:	4629      	mov	r1, r5
 8003182:	024b      	lsls	r3, r1, #9
 8003184:	4621      	mov	r1, r4
 8003186:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800318a:	4621      	mov	r1, r4
 800318c:	024a      	lsls	r2, r1, #9
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800319c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80031a4:	f7fd f88c 	bl	80002c0 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4613      	mov	r3, r2
 80031ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031b2:	e067      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b4:	4b75      	ldr	r3, [pc, #468]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80031c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ce:	2300      	movs	r3, #0
 80031d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	f04f 0000 	mov.w	r0, #0
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	0159      	lsls	r1, r3, #5
 80031e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e8:	0150      	lsls	r0, r2, #5
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4621      	mov	r1, r4
 80031f0:	1a51      	subs	r1, r2, r1
 80031f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80031f4:	4629      	mov	r1, r5
 80031f6:	eb63 0301 	sbc.w	r3, r3, r1
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003208:	4649      	mov	r1, r9
 800320a:	018b      	lsls	r3, r1, #6
 800320c:	4641      	mov	r1, r8
 800320e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003212:	4641      	mov	r1, r8
 8003214:	018a      	lsls	r2, r1, #6
 8003216:	4641      	mov	r1, r8
 8003218:	ebb2 0a01 	subs.w	sl, r2, r1
 800321c:	4649      	mov	r1, r9
 800321e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800322e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003236:	4692      	mov	sl, r2
 8003238:	469b      	mov	fp, r3
 800323a:	4623      	mov	r3, r4
 800323c:	eb1a 0303 	adds.w	r3, sl, r3
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	462b      	mov	r3, r5
 8003244:	eb4b 0303 	adc.w	r3, fp, r3
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003256:	4629      	mov	r1, r5
 8003258:	028b      	lsls	r3, r1, #10
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003260:	4621      	mov	r1, r4
 8003262:	028a      	lsls	r2, r1, #10
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800326c:	2200      	movs	r2, #0
 800326e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003270:	677a      	str	r2, [r7, #116]	@ 0x74
 8003272:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003276:	f7fd f823 	bl	80002c0 <__aeabi_uldivmod>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4613      	mov	r3, r2
 8003280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003284:	4b41      	ldr	r3, [pc, #260]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	3301      	adds	r3, #1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800329a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032a6:	e0eb      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a8:	4b38      	ldr	r3, [pc, #224]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b4:	4b35      	ldr	r3, [pc, #212]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d06b      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c0:	4b32      	ldr	r3, [pc, #200]	@ (800338c <HAL_RCC_GetSysClockFreq+0x354>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	2200      	movs	r2, #0
 80032c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80032d4:	2300      	movs	r3, #0
 80032d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80032d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80032dc:	4622      	mov	r2, r4
 80032de:	462b      	mov	r3, r5
 80032e0:	f04f 0000 	mov.w	r0, #0
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	0159      	lsls	r1, r3, #5
 80032ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ee:	0150      	lsls	r0, r2, #5
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4621      	mov	r1, r4
 80032f6:	1a51      	subs	r1, r2, r1
 80032f8:	61b9      	str	r1, [r7, #24]
 80032fa:	4629      	mov	r1, r5
 80032fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800330e:	4659      	mov	r1, fp
 8003310:	018b      	lsls	r3, r1, #6
 8003312:	4651      	mov	r1, sl
 8003314:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003318:	4651      	mov	r1, sl
 800331a:	018a      	lsls	r2, r1, #6
 800331c:	4651      	mov	r1, sl
 800331e:	ebb2 0801 	subs.w	r8, r2, r1
 8003322:	4659      	mov	r1, fp
 8003324:	eb63 0901 	sbc.w	r9, r3, r1
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800333c:	4690      	mov	r8, r2
 800333e:	4699      	mov	r9, r3
 8003340:	4623      	mov	r3, r4
 8003342:	eb18 0303 	adds.w	r3, r8, r3
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	462b      	mov	r3, r5
 800334a:	eb49 0303 	adc.w	r3, r9, r3
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800335c:	4629      	mov	r1, r5
 800335e:	024b      	lsls	r3, r1, #9
 8003360:	4621      	mov	r1, r4
 8003362:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003366:	4621      	mov	r1, r4
 8003368:	024a      	lsls	r2, r1, #9
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003372:	2200      	movs	r2, #0
 8003374:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003376:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003378:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800337c:	f7fc ffa0 	bl	80002c0 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800338a:	e065      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x420>
 800338c:	40023800 	.word	0x40023800
 8003390:	00f42400 	.word	0x00f42400
 8003394:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003398:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x458>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	2200      	movs	r2, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	4611      	mov	r1, r2
 80033a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80033aa:	2300      	movs	r3, #0
 80033ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80033ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80033b2:	4642      	mov	r2, r8
 80033b4:	464b      	mov	r3, r9
 80033b6:	f04f 0000 	mov.w	r0, #0
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	0159      	lsls	r1, r3, #5
 80033c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c4:	0150      	lsls	r0, r2, #5
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4641      	mov	r1, r8
 80033cc:	1a51      	subs	r1, r2, r1
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	4649      	mov	r1, r9
 80033d2:	eb63 0301 	sbc.w	r3, r3, r1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80033e4:	4659      	mov	r1, fp
 80033e6:	018b      	lsls	r3, r1, #6
 80033e8:	4651      	mov	r1, sl
 80033ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ee:	4651      	mov	r1, sl
 80033f0:	018a      	lsls	r2, r1, #6
 80033f2:	4651      	mov	r1, sl
 80033f4:	1a54      	subs	r4, r2, r1
 80033f6:	4659      	mov	r1, fp
 80033f8:	eb63 0501 	sbc.w	r5, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	00eb      	lsls	r3, r5, #3
 8003406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	4614      	mov	r4, r2
 800340e:	461d      	mov	r5, r3
 8003410:	4643      	mov	r3, r8
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	464b      	mov	r3, r9
 8003418:	eb45 0303 	adc.w	r3, r5, r3
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003440:	2200      	movs	r2, #0
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003444:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003446:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800344a:	f7fc ff39 	bl	80002c0 <__aeabi_uldivmod>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4613      	mov	r3, r2
 8003454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003458:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x458>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0f1b      	lsrs	r3, r3, #28
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800346a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003476:	e003      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x45c>)
 800347a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800347e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003484:	4618      	mov	r0, r3
 8003486:	37b8      	adds	r7, #184	@ 0xb8
 8003488:	46bd      	mov	sp, r7
 800348a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	00f42400 	.word	0x00f42400

08003498 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e28d      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8083 	beq.w	80035be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034b8:	4b94      	ldr	r3, [pc, #592]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d019      	beq.n	80034f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034c4:	4b91      	ldr	r3, [pc, #580]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034d0:	4b8e      	ldr	r3, [pc, #568]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034dc:	d00c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034de:	4b8b      	ldr	r3, [pc, #556]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d112      	bne.n	8003510 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b88      	ldr	r3, [pc, #544]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f6:	d10b      	bne.n	8003510 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	4b84      	ldr	r3, [pc, #528]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d05b      	beq.n	80035bc <HAL_RCC_OscConfig+0x124>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d157      	bne.n	80035bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e25a      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x90>
 800351a:	4b7c      	ldr	r3, [pc, #496]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7b      	ldr	r2, [pc, #492]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e01d      	b.n	8003564 <HAL_RCC_OscConfig+0xcc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0xb4>
 8003532:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a75      	ldr	r2, [pc, #468]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b73      	ldr	r3, [pc, #460]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a72      	ldr	r2, [pc, #456]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0xcc>
 800354c:	4b6f      	ldr	r3, [pc, #444]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6e      	ldr	r2, [pc, #440]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b6c      	ldr	r3, [pc, #432]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6b      	ldr	r2, [pc, #428]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 800355e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fd58 	bl	8002020 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fd54 	bl	8002020 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	@ 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e21f      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	4b61      	ldr	r3, [pc, #388]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0xdc>
 8003592:	e014      	b.n	80035be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe fd44 	bl	8002020 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fd40 	bl	8002020 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	@ 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e20b      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	4b57      	ldr	r3, [pc, #348]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x104>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d06f      	beq.n	80036aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035ca:	4b50      	ldr	r3, [pc, #320]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d017      	beq.n	8003606 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035d6:	4b4d      	ldr	r3, [pc, #308]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
        || \
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035e2:	4b4a      	ldr	r3, [pc, #296]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d11c      	bne.n	8003634 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b44      	ldr	r3, [pc, #272]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x186>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1d3      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4937      	ldr	r1, [pc, #220]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e03a      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363c:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_RCC_OscConfig+0x278>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fe fced 	bl	8002020 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364a:	f7fe fce9 	bl	8002020 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1b4      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4925      	ldr	r1, [pc, #148]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
 800367c:	e015      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367e:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <HAL_RCC_OscConfig+0x278>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe fccc 	bl	8002020 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368c:	f7fe fcc8 	bl	8002020 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e193      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d036      	beq.n	8003724 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_RCC_OscConfig+0x27c>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe fcac 	bl	8002020 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe fca8 	bl	8002020 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e173      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_OscConfig+0x274>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x234>
 80036ea:	e01b      	b.n	8003724 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_OscConfig+0x27c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fe fc95 	bl	8002020 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f8:	e00e      	b.n	8003718 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fe fc91 	bl	8002020 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d907      	bls.n	8003718 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e15c      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
 800370c:	40023800 	.word	0x40023800
 8003710:	42470000 	.word	0x42470000
 8003714:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	4b8a      	ldr	r3, [pc, #552]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ea      	bne.n	80036fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8097 	beq.w	8003860 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b83      	ldr	r3, [pc, #524]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b7f      	ldr	r3, [pc, #508]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	4a7e      	ldr	r2, [pc, #504]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	@ 0x40
 8003752:	4b7c      	ldr	r3, [pc, #496]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b79      	ldr	r3, [pc, #484]	@ (8003948 <HAL_RCC_OscConfig+0x4b0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b76      	ldr	r3, [pc, #472]	@ (8003948 <HAL_RCC_OscConfig+0x4b0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a75      	ldr	r2, [pc, #468]	@ (8003948 <HAL_RCC_OscConfig+0x4b0>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fe fc51 	bl	8002020 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fe fc4d 	bl	8002020 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e118      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b6c      	ldr	r3, [pc, #432]	@ (8003948 <HAL_RCC_OscConfig+0x4b0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x31e>
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b4:	e01c      	b.n	80037f0 <HAL_RCC_OscConfig+0x358>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x340>
 80037be:	4b61      	ldr	r3, [pc, #388]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a60      	ldr	r2, [pc, #384]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0x358>
 80037d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a59      	ldr	r2, [pc, #356]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	4b57      	ldr	r3, [pc, #348]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	4a56      	ldr	r2, [pc, #344]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80037ea:	f023 0304 	bic.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fe fc12 	bl	8002020 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe fc0e 	bl	8002020 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0d7      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	4b4b      	ldr	r3, [pc, #300]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ee      	beq.n	8003800 <HAL_RCC_OscConfig+0x368>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fe fbfc 	bl	8002020 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe fbf8 	bl	8002020 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0c1      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	4b40      	ldr	r3, [pc, #256]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ee      	bne.n	800382c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003854:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	4a3a      	ldr	r2, [pc, #232]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 800385a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80ad 	beq.w	80039c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800386a:	4b36      	ldr	r3, [pc, #216]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d060      	beq.n	8003938 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d145      	bne.n	800390a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b33      	ldr	r3, [pc, #204]	@ (800394c <HAL_RCC_OscConfig+0x4b4>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe fbcc 	bl	8002020 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe fbc8 	bl	8002020 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e093      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b29      	ldr	r3, [pc, #164]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	3b01      	subs	r3, #1
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	071b      	lsls	r3, r3, #28
 80038d6:	491b      	ldr	r1, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x4b4>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe fb9d 	bl	8002020 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fe fb99 	bl	8002020 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e064      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x452>
 8003908:	e05c      	b.n	80039c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <HAL_RCC_OscConfig+0x4b4>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fb86 	bl	8002020 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe fb82 	bl	8002020 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04d      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_RCC_OscConfig+0x4ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x480>
 8003936:	e045      	b.n	80039c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e040      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000
 800394c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003950:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <HAL_RCC_OscConfig+0x538>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d030      	beq.n	80039c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d129      	bne.n	80039c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d122      	bne.n	80039c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	4293      	cmp	r3, r2
 800398a:	d119      	bne.n	80039c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d10f      	bne.n	80039c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800

080039d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07b      	b.n	8003ade <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039f6:	d009      	beq.n	8003a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
 80039fe:	e005      	b.n	8003a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fe f8a0 	bl	8001b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a90:	ea42 0103 	orr.w	r1, r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	f003 0104 	and.w	r1, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	f003 0210 	and.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e042      	b.n	8003b7e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fe f875 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2224      	movs	r2, #36	@ 0x24
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 f824 	bl	8004b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b08a      	sub	sp, #40	@ 0x28
 8003b8a:	af02      	add	r7, sp, #8
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d175      	bne.n	8003c92 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_Transmit+0x2c>
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e06e      	b.n	8003c94 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2221      	movs	r2, #33	@ 0x21
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fa2c 	bl	8002020 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bde:	d108      	bne.n	8003bf2 <HAL_UART_Transmit+0x6c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e003      	b.n	8003bfa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bfa:	e02e      	b.n	8003c5a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2180      	movs	r1, #128	@ 0x80
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fcfd 	bl	8004606 <UART_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e03a      	b.n	8003c94 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10b      	bne.n	8003c3c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c32:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	3302      	adds	r3, #2
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e007      	b.n	8003c4c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1cb      	bne.n	8003bfc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2140      	movs	r1, #64	@ 0x40
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fcc9 	bl	8004606 <UART_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e006      	b.n	8003c94 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	@ 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d156      	bne.n	8003d64 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_UART_Transmit_DMA+0x26>
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e04f      	b.n	8003d66 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2221      	movs	r2, #33	@ 0x21
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cea:	4a21      	ldr	r2, [pc, #132]	@ (8003d70 <HAL_UART_Transmit_DMA+0xd4>)
 8003cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf2:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <HAL_UART_Transmit_DMA+0xd8>)
 8003cf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003d78 <HAL_UART_Transmit_DMA+0xdc>)
 8003cfc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	2200      	movs	r2, #0
 8003d04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	f7fe fb6f 	bl	8002400 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3730      	adds	r7, #48	@ 0x30
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	08004355 	.word	0x08004355
 8003d74:	080043ef 	.word	0x080043ef
 8003d78:	08004573 	.word	0x08004573

08003d7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d112      	bne.n	8003dbc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_UART_Receive_DMA+0x26>
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e00b      	b.n	8003dbe <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fc80 	bl	80046b8 <UART_Start_Receive_DMA>
 8003db8:	4603      	mov	r3, r0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0ba      	sub	sp, #232	@ 0xe8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_UART_IRQHandler+0x66>
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fde7 	bl	80049fa <UART_Receive_IT>
      return;
 8003e2c:	e25b      	b.n	80042e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80de 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x22c>
 8003e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80d1 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_UART_IRQHandler+0xae>
 8003e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HAL_UART_IRQHandler+0xd2>
 8003e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	f043 0202 	orr.w	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_UART_IRQHandler+0xf6>
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d011      	beq.n	8003eee <HAL_UART_IRQHandler+0x126>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f043 0208 	orr.w	r2, r3, #8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 81f2 	beq.w	80042dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_UART_IRQHandler+0x14e>
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fd72 	bl	80049fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b40      	cmp	r3, #64	@ 0x40
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d103      	bne.n	8003f42 <HAL_UART_IRQHandler+0x17a>
 8003f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04f      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fc7a 	bl	800483c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f52:	2b40      	cmp	r3, #64	@ 0x40
 8003f54:	d141      	bne.n	8003fda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3314      	adds	r3, #20
 8003f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1d9      	bne.n	8003f56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d013      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fae:	4a7e      	ldr	r2, [pc, #504]	@ (80041a8 <HAL_UART_IRQHandler+0x3e0>)
 8003fb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe faea 	bl	8002590 <HAL_DMA_Abort_IT>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	e00e      	b.n	8003ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f9a8 	bl	8004328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd8:	e00a      	b.n	8003ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9a4 	bl	8004328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	e006      	b.n	8003ff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f9a0 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fee:	e175      	b.n	80042dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	bf00      	nop
    return;
 8003ff2:	e173      	b.n	80042dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f040 814f 	bne.w	800429c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8148 	beq.w	800429c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8141 	beq.w	800429c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	f040 80b6 	bne.w	80041ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800404c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8145 	beq.w	80042e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800405a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800405e:	429a      	cmp	r2, r3
 8004060:	f080 813e 	bcs.w	80042e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800406a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004076:	f000 8088 	beq.w	800418a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004090:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1d9      	bne.n	800407a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3314      	adds	r3, #20
 80040e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e1      	bne.n	80040c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004118:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004126:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004128:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800412c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e3      	bne.n	8004102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800416c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800416e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800417a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e3      	bne.n	8004148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f993 	bl	80024b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004198:	b29b      	uxth	r3, r3
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	b29b      	uxth	r3, r3
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f8cb 	bl	800433c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a6:	e09b      	b.n	80042e0 <HAL_UART_IRQHandler+0x518>
 80041a8:	08004903 	.word	0x08004903
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 808e 	beq.w	80042e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8089 	beq.w	80042e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	623b      	str	r3, [r7, #32]
   return(result);
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800422e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e3      	bne.n	800420a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0310 	bic.w	r3, r3, #16
 8004266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004274:	61fa      	str	r2, [r7, #28]
 8004276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	617b      	str	r3, [r7, #20]
   return(result);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e3      	bne.n	8004250 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800428e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f851 	bl	800433c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800429a:	e023      	b.n	80042e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_UART_IRQHandler+0x4f4>
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fb38 	bl	800492a <UART_Transmit_IT>
    return;
 80042ba:	e014      	b.n	80042e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <HAL_UART_IRQHandler+0x51e>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb78 	bl	80049ca <UART_EndTransmit_IT>
    return;
 80042da:	e004      	b.n	80042e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80042dc:	bf00      	nop
 80042de:	e002      	b.n	80042e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042e0:	bf00      	nop
 80042e2:	e000      	b.n	80042e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042e4:	bf00      	nop
  }
}
 80042e6:	37e8      	adds	r7, #232	@ 0xe8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b090      	sub	sp, #64	@ 0x40
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d137      	bne.n	80043e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004372:	2200      	movs	r2, #0
 8004374:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	623b      	str	r3, [r7, #32]
   return(result);
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800438c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800438e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004396:	633a      	str	r2, [r7, #48]	@ 0x30
 8004398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800439c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043ca:	61fa      	str	r2, [r7, #28]
 80043cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	69b9      	ldr	r1, [r7, #24]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	617b      	str	r3, [r7, #20]
   return(result);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e5      	bne.n	80043aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043de:	e002      	b.n	80043e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80043e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043e2:	f7ff ff83 	bl	80042ec <HAL_UART_TxCpltCallback>
}
 80043e6:	bf00      	nop
 80043e8:	3740      	adds	r7, #64	@ 0x40
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff ff7f 	bl	8004300 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b09c      	sub	sp, #112	@ 0x70
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004416:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d172      	bne.n	800450c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004428:	2200      	movs	r2, #0
 800442a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800443c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004442:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800444c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800444e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004452:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800445a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e5      	bne.n	800442c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3314      	adds	r3, #20
 8004466:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	667b      	str	r3, [r7, #100]	@ 0x64
 8004478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3314      	adds	r3, #20
 800447e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004480:	647a      	str	r2, [r7, #68]	@ 0x44
 8004482:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800448e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e5      	bne.n	8004460 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	623b      	str	r3, [r7, #32]
   return(result);
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80044b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d119      	bne.n	800450c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0310 	bic.w	r3, r3, #16
 80044ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044f8:	61fa      	str	r2, [r7, #28]
 80044fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	617b      	str	r3, [r7, #20]
   return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800450c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450e:	2200      	movs	r2, #0
 8004510:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	2b01      	cmp	r3, #1
 8004518:	d106      	bne.n	8004528 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800451a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800451e:	4619      	mov	r1, r3
 8004520:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004522:	f7ff ff0b 	bl	800433c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004526:	e002      	b.n	800452e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004528:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800452a:	f7fd f9e7 	bl	80018fc <HAL_UART_RxCpltCallback>
}
 800452e:	bf00      	nop
 8004530:	3770      	adds	r7, #112	@ 0x70
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004542:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	2b01      	cmp	r3, #1
 8004550:	d108      	bne.n	8004564 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	4619      	mov	r1, r3
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff feed 	bl	800433c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004562:	e002      	b.n	800456a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fed5 	bl	8004314 <HAL_UART_RxHalfCpltCallback>
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458e:	2b80      	cmp	r3, #128	@ 0x80
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b21      	cmp	r3, #33	@ 0x21
 80045a4:	d108      	bne.n	80045b8 <UART_DMAError+0x46>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80045b2:	68b8      	ldr	r0, [r7, #8]
 80045b4:	f000 f91a 	bl	80047ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c2:	2b40      	cmp	r3, #64	@ 0x40
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b22      	cmp	r3, #34	@ 0x22
 80045d8:	d108      	bne.n	80045ec <UART_DMAError+0x7a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2200      	movs	r2, #0
 80045e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80045e6:	68b8      	ldr	r0, [r7, #8]
 80045e8:	f000 f928 	bl	800483c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f0:	f043 0210 	orr.w	r2, r3, #16
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f7ff fe95 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004616:	e03b      	b.n	8004690 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d037      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004620:	f7fd fcfe 	bl	8002020 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	6a3a      	ldr	r2, [r7, #32]
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <UART_WaitOnFlagUntilTimeout+0x30>
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e03a      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d023      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b80      	cmp	r3, #128	@ 0x80
 800464c:	d020      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x8a>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d01d      	beq.n	8004690 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b08      	cmp	r3, #8
 8004660:	d116      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f8df 	bl	800483c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2208      	movs	r2, #8
 8004682:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e00f      	b.n	80046b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d0b4      	beq.n	8004618 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b098      	sub	sp, #96	@ 0x60
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2222      	movs	r2, #34	@ 0x22
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e4:	4a3e      	ldr	r2, [pc, #248]	@ (80047e0 <UART_Start_Receive_DMA+0x128>)
 80046e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ec:	4a3d      	ldr	r2, [pc, #244]	@ (80047e4 <UART_Start_Receive_DMA+0x12c>)
 80046ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	4a3c      	ldr	r2, [pc, #240]	@ (80047e8 <UART_Start_Receive_DMA+0x130>)
 80046f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fc:	2200      	movs	r2, #0
 80046fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	f7fd fe72 	bl	8002400 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d019      	beq.n	800476e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800474a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800474c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800475a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800475c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3314      	adds	r3, #20
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	657b      	str	r3, [r7, #84]	@ 0x54
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800478e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e5      	bne.n	800476e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	617b      	str	r3, [r7, #20]
   return(result);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80047c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6a39      	ldr	r1, [r7, #32]
 80047c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3760      	adds	r7, #96	@ 0x60
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	0800440b 	.word	0x0800440b
 80047e4:	08004537 	.word	0x08004537
 80047e8:	08004573 	.word	0x08004573

080047ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	@ 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	60bb      	str	r3, [r7, #8]
   return(result);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	61ba      	str	r2, [r7, #24]
 8004816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	613b      	str	r3, [r7, #16]
   return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e5      	bne.n	80047f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004830:	bf00      	nop
 8004832:	3724      	adds	r7, #36	@ 0x24
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b095      	sub	sp, #84	@ 0x54
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800485a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004864:	643a      	str	r2, [r7, #64]	@ 0x40
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800486a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e5      	bne.n	8004844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3314      	adds	r3, #20
 800487e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	61fb      	str	r3, [r7, #28]
   return(result);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3314      	adds	r3, #20
 8004896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d119      	bne.n	80048e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f023 0310 	bic.w	r3, r3, #16
 80048ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d4:	61ba      	str	r2, [r7, #24]
 80048d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6979      	ldr	r1, [r7, #20]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	613b      	str	r3, [r7, #16]
   return(result);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048f6:	bf00      	nop
 80048f8:	3754      	adds	r7, #84	@ 0x54
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff fd03 	bl	8004328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b21      	cmp	r3, #33	@ 0x21
 800493c:	d13e      	bne.n	80049bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004946:	d114      	bne.n	8004972 <UART_Transmit_IT+0x48>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d110      	bne.n	8004972 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004964:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	621a      	str	r2, [r3, #32]
 8004970:	e008      	b.n	8004984 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	1c59      	adds	r1, r3, #1
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6211      	str	r1, [r2, #32]
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29b      	uxth	r3, r3
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4619      	mov	r1, r3
 8004992:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10f      	bne.n	80049b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fc7e 	bl	80042ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b08c      	sub	sp, #48	@ 0x30
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b22      	cmp	r3, #34	@ 0x22
 8004a0c:	f040 80ae 	bne.w	8004b6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a18:	d117      	bne.n	8004a4a <UART_Receive_IT+0x50>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d113      	bne.n	8004a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a48:	e026      	b.n	8004a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5c:	d007      	beq.n	8004a6e <UART_Receive_IT+0x74>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <UART_Receive_IT+0x82>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e008      	b.n	8004a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d15d      	bne.n	8004b68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0220 	bic.w	r2, r2, #32
 8004aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d135      	bne.n	8004b5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	613b      	str	r3, [r7, #16]
   return(result);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b18:	623a      	str	r2, [r7, #32]
 8004b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	69f9      	ldr	r1, [r7, #28]
 8004b1e:	6a3a      	ldr	r2, [r7, #32]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d10a      	bne.n	8004b50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fbf0 	bl	800433c <HAL_UARTEx_RxEventCallback>
 8004b5c:	e002      	b.n	8004b64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc fecc 	bl	80018fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e002      	b.n	8004b6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3730      	adds	r7, #48	@ 0x30
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b7c:	b0c0      	sub	sp, #256	@ 0x100
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	68d9      	ldr	r1, [r3, #12]
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	ea40 0301 	orr.w	r3, r0, r1
 8004ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bd0:	f021 010c 	bic.w	r1, r1, #12
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bde:	430b      	orrs	r3, r1
 8004be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	6999      	ldr	r1, [r3, #24]
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	ea40 0301 	orr.w	r3, r0, r1
 8004bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b8f      	ldr	r3, [pc, #572]	@ (8004e44 <UART_SetConfig+0x2cc>)
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d005      	beq.n	8004c18 <UART_SetConfig+0xa0>
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b8d      	ldr	r3, [pc, #564]	@ (8004e48 <UART_SetConfig+0x2d0>)
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d104      	bne.n	8004c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7fe f9fa 	bl	8003010 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c20:	e003      	b.n	8004c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c22:	f7fe f9e1 	bl	8002fe8 <HAL_RCC_GetPCLK1Freq>
 8004c26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c34:	f040 810c 	bne.w	8004e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	1891      	adds	r1, r2, r2
 8004c50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c52:	415b      	adcs	r3, r3
 8004c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	eb12 0801 	adds.w	r8, r2, r1
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb43 0901 	adc.w	r9, r3, r1
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c7a:	4690      	mov	r8, r2
 8004c7c:	4699      	mov	r9, r3
 8004c7e:	4623      	mov	r3, r4
 8004c80:	eb18 0303 	adds.w	r3, r8, r3
 8004c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c88:	462b      	mov	r3, r5
 8004c8a:	eb49 0303 	adc.w	r3, r9, r3
 8004c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	18db      	adds	r3, r3, r3
 8004caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cac:	4613      	mov	r3, r2
 8004cae:	eb42 0303 	adc.w	r3, r2, r3
 8004cb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cbc:	f7fb fb00 	bl	80002c0 <__aeabi_uldivmod>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4b61      	ldr	r3, [pc, #388]	@ (8004e4c <UART_SetConfig+0x2d4>)
 8004cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	011c      	lsls	r4, r3, #4
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	1891      	adds	r1, r2, r2
 8004ce6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ce8:	415b      	adcs	r3, r3
 8004cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d10:	4692      	mov	sl, r2
 8004d12:	469b      	mov	fp, r3
 8004d14:	4643      	mov	r3, r8
 8004d16:	eb1a 0303 	adds.w	r3, sl, r3
 8004d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	eb4b 0303 	adc.w	r3, fp, r3
 8004d24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	18db      	adds	r3, r3, r3
 8004d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d42:	4613      	mov	r3, r2
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d52:	f7fb fab5 	bl	80002c0 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e4c <UART_SetConfig+0x2d4>)
 8004d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2264      	movs	r2, #100	@ 0x64
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	1acb      	subs	r3, r1, r3
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d72:	4b36      	ldr	r3, [pc, #216]	@ (8004e4c <UART_SetConfig+0x2d4>)
 8004d74:	fba3 2302 	umull	r2, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d80:	441c      	add	r4, r3
 8004d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	1891      	adds	r1, r2, r2
 8004d9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d9c:	415b      	adcs	r3, r3
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004da4:	4641      	mov	r1, r8
 8004da6:	1851      	adds	r1, r2, r1
 8004da8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004daa:	4649      	mov	r1, r9
 8004dac:	414b      	adcs	r3, r1
 8004dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	00cb      	lsls	r3, r1, #3
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	00ca      	lsls	r2, r1, #3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd8:	464b      	mov	r3, r9
 8004dda:	460a      	mov	r2, r1
 8004ddc:	eb42 0303 	adc.w	r3, r2, r3
 8004de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004df0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004df8:	460b      	mov	r3, r1
 8004dfa:	18db      	adds	r3, r3, r3
 8004dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dfe:	4613      	mov	r3, r2
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e0e:	f7fb fa57 	bl	80002c0 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <UART_SetConfig+0x2d4>)
 8004e18:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	2164      	movs	r1, #100	@ 0x64
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	3332      	adds	r3, #50	@ 0x32
 8004e2a:	4a08      	ldr	r2, [pc, #32]	@ (8004e4c <UART_SetConfig+0x2d4>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	f003 0207 	and.w	r2, r3, #7
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4422      	add	r2, r4
 8004e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e40:	e106      	b.n	8005050 <UART_SetConfig+0x4d8>
 8004e42:	bf00      	nop
 8004e44:	40011000 	.word	0x40011000
 8004e48:	40011400 	.word	0x40011400
 8004e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e62:	4642      	mov	r2, r8
 8004e64:	464b      	mov	r3, r9
 8004e66:	1891      	adds	r1, r2, r2
 8004e68:	6239      	str	r1, [r7, #32]
 8004e6a:	415b      	adcs	r3, r3
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e72:	4641      	mov	r1, r8
 8004e74:	1854      	adds	r4, r2, r1
 8004e76:	4649      	mov	r1, r9
 8004e78:	eb43 0501 	adc.w	r5, r3, r1
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	00eb      	lsls	r3, r5, #3
 8004e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e8a:	00e2      	lsls	r2, r4, #3
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	461d      	mov	r5, r3
 8004e90:	4643      	mov	r3, r8
 8004e92:	18e3      	adds	r3, r4, r3
 8004e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e98:	464b      	mov	r3, r9
 8004e9a:	eb45 0303 	adc.w	r3, r5, r3
 8004e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	008b      	lsls	r3, r1, #2
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec8:	4621      	mov	r1, r4
 8004eca:	008a      	lsls	r2, r1, #2
 8004ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ed0:	f7fb f9f6 	bl	80002c0 <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4b60      	ldr	r3, [pc, #384]	@ (800505c <UART_SetConfig+0x4e4>)
 8004eda:	fba3 2302 	umull	r2, r3, r3, r2
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	011c      	lsls	r4, r3, #4
 8004ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004eec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	1891      	adds	r1, r2, r2
 8004efa:	61b9      	str	r1, [r7, #24]
 8004efc:	415b      	adcs	r3, r3
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f04:	4641      	mov	r1, r8
 8004f06:	1851      	adds	r1, r2, r1
 8004f08:	6139      	str	r1, [r7, #16]
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	414b      	adcs	r3, r1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	00cb      	lsls	r3, r1, #3
 8004f20:	4651      	mov	r1, sl
 8004f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f26:	4651      	mov	r1, sl
 8004f28:	00ca      	lsls	r2, r1, #3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4642      	mov	r2, r8
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f38:	464b      	mov	r3, r9
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	eb42 0303 	adc.w	r3, r2, r3
 8004f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	008b      	lsls	r3, r1, #2
 8004f60:	4641      	mov	r1, r8
 8004f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f66:	4641      	mov	r1, r8
 8004f68:	008a      	lsls	r2, r1, #2
 8004f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f6e:	f7fb f9a7 	bl	80002c0 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	4b38      	ldr	r3, [pc, #224]	@ (800505c <UART_SetConfig+0x4e4>)
 8004f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2264      	movs	r2, #100	@ 0x64
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	1acb      	subs	r3, r1, r3
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	3332      	adds	r3, #50	@ 0x32
 8004f8c:	4a33      	ldr	r2, [pc, #204]	@ (800505c <UART_SetConfig+0x4e4>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f98:	441c      	add	r4, r3
 8004f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	1891      	adds	r1, r2, r2
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	415b      	adcs	r3, r3
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb8:	4641      	mov	r1, r8
 8004fba:	1851      	adds	r1, r2, r1
 8004fbc:	6039      	str	r1, [r7, #0]
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	414b      	adcs	r3, r1
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fd0:	4659      	mov	r1, fp
 8004fd2:	00cb      	lsls	r3, r1, #3
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fda:	4651      	mov	r1, sl
 8004fdc:	00ca      	lsls	r2, r1, #3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fea:	464b      	mov	r3, r9
 8004fec:	460a      	mov	r2, r1
 8004fee:	eb42 0303 	adc.w	r3, r2, r3
 8004ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ffe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800500c:	4649      	mov	r1, r9
 800500e:	008b      	lsls	r3, r1, #2
 8005010:	4641      	mov	r1, r8
 8005012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005016:	4641      	mov	r1, r8
 8005018:	008a      	lsls	r2, r1, #2
 800501a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800501e:	f7fb f94f 	bl	80002c0 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <UART_SetConfig+0x4e4>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	@ 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	3332      	adds	r3, #50	@ 0x32
 800503a:	4a08      	ldr	r2, [pc, #32]	@ (800505c <UART_SetConfig+0x4e4>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4422      	add	r2, r4
 800504e:	609a      	str	r2, [r3, #8]
}
 8005050:	bf00      	nop
 8005052:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005056:	46bd      	mov	sp, r7
 8005058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505c:	51eb851f 	.word	0x51eb851f

08005060 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005064:	4904      	ldr	r1, [pc, #16]	@ (8005078 <MX_FATFS_Init+0x18>)
 8005066:	4805      	ldr	r0, [pc, #20]	@ (800507c <MX_FATFS_Init+0x1c>)
 8005068:	f002 fee6 	bl	8007e38 <FATFS_LinkDriver>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	4b03      	ldr	r3, [pc, #12]	@ (8005080 <MX_FATFS_Init+0x20>)
 8005072:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20003c88 	.word	0x20003c88
 800507c:	200019c4 	.word	0x200019c4
 8005080:	20003c84 	.word	0x20003c84

08005084 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005088:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800508a:	4618      	mov	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <USER_initialize+0x24>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80050a4:	4b04      	ldr	r3, [pc, #16]	@ (80050b8 <USER_initialize+0x24>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	200019c1 	.word	0x200019c1

080050bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80050c6:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <USER_status+0x24>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
    return Stat;
 80050cc:	4b04      	ldr	r3, [pc, #16]	@ (80050e0 <USER_status+0x24>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	200019c1 	.word	0x200019c1

080050e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4603      	mov	r3, r0
 80050f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80050f4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005112:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	603a      	str	r2, [r7, #0]
 800512a:	71fb      	strb	r3, [r7, #7]
 800512c:	460b      	mov	r3, r1
 800512e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
    return res;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	4a08      	ldr	r2, [pc, #32]	@ (8005174 <disk_status+0x30>)
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	79fa      	ldrb	r2, [r7, #7]
 800515c:	4905      	ldr	r1, [pc, #20]	@ (8005174 <disk_status+0x30>)
 800515e:	440a      	add	r2, r1
 8005160:	7a12      	ldrb	r2, [r2, #8]
 8005162:	4610      	mov	r0, r2
 8005164:	4798      	blx	r3
 8005166:	4603      	mov	r3, r0
 8005168:	73fb      	strb	r3, [r7, #15]
  return stat;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20003eb4 	.word	0x20003eb4

08005178 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	4a0e      	ldr	r2, [pc, #56]	@ (80051c4 <disk_initialize+0x4c>)
 800518a:	5cd3      	ldrb	r3, [r2, r3]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d114      	bne.n	80051ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	4a0c      	ldr	r2, [pc, #48]	@ (80051c4 <disk_initialize+0x4c>)
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	79fa      	ldrb	r2, [r7, #7]
 800519e:	4909      	ldr	r1, [pc, #36]	@ (80051c4 <disk_initialize+0x4c>)
 80051a0:	440a      	add	r2, r1
 80051a2:	7a12      	ldrb	r2, [r2, #8]
 80051a4:	4610      	mov	r0, r2
 80051a6:	4798      	blx	r3
 80051a8:	4603      	mov	r3, r0
 80051aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	4a03      	ldr	r2, [pc, #12]	@ (80051c4 <disk_initialize+0x4c>)
 80051b6:	2101      	movs	r1, #1
 80051b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20003eb4 	.word	0x20003eb4

080051c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	4a0a      	ldr	r2, [pc, #40]	@ (8005204 <disk_read+0x3c>)
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	689c      	ldr	r4, [r3, #8]
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	4a07      	ldr	r2, [pc, #28]	@ (8005204 <disk_read+0x3c>)
 80051e8:	4413      	add	r3, r2
 80051ea:	7a18      	ldrb	r0, [r3, #8]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	47a0      	blx	r4
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}
 8005202:	bf00      	nop
 8005204:	20003eb4 	.word	0x20003eb4

08005208 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	4a0a      	ldr	r2, [pc, #40]	@ (8005244 <disk_write+0x3c>)
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68dc      	ldr	r4, [r3, #12]
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	4a07      	ldr	r2, [pc, #28]	@ (8005244 <disk_write+0x3c>)
 8005228:	4413      	add	r3, r2
 800522a:	7a18      	ldrb	r0, [r3, #8]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	47a0      	blx	r4
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]
  return res;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd90      	pop	{r4, r7, pc}
 8005242:	bf00      	nop
 8005244:	20003eb4 	.word	0x20003eb4

08005248 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	603a      	str	r2, [r7, #0]
 8005252:	71fb      	strb	r3, [r7, #7]
 8005254:	460b      	mov	r3, r1
 8005256:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	4a09      	ldr	r2, [pc, #36]	@ (8005280 <disk_ioctl+0x38>)
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	79fa      	ldrb	r2, [r7, #7]
 8005266:	4906      	ldr	r1, [pc, #24]	@ (8005280 <disk_ioctl+0x38>)
 8005268:	440a      	add	r2, r1
 800526a:	7a10      	ldrb	r0, [r2, #8]
 800526c:	79b9      	ldrb	r1, [r7, #6]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	4798      	blx	r3
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]
  return res;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20003eb4 	.word	0x20003eb4

08005284 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3301      	adds	r3, #1
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	b21a      	sxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	b21b      	sxth	r3, r3
 80052a2:	4313      	orrs	r3, r2
 80052a4:	b21b      	sxth	r3, r3
 80052a6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80052a8:	89fb      	ldrh	r3, [r7, #14]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3303      	adds	r3, #3
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	3202      	adds	r2, #2
 80052ce:	7812      	ldrb	r2, [r2, #0]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	3201      	adds	r2, #1
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
	return rv;
 80052ee:	68fb      	ldr	r3, [r7, #12]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	887a      	ldrh	r2, [r7, #2]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800538a:	b480      	push	{r7}
 800538c:	b087      	sub	sp, #28
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	1c53      	adds	r3, r2, #1
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	6179      	str	r1, [r7, #20]
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f1      	bne.n	80053a4 <mem_cpy+0x1a>
	}
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	617a      	str	r2, [r7, #20]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f3      	bne.n	80053dc <mem_set+0x10>
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005402:	b480      	push	{r7}
 8005404:	b089      	sub	sp, #36	@ 0x24
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	61fa      	str	r2, [r7, #28]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	4619      	mov	r1, r3
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	61ba      	str	r2, [r7, #24]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	1acb      	subs	r3, r1, r3
 800542e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3b01      	subs	r3, #1
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <mem_cmp+0x40>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0eb      	beq.n	800541a <mem_cmp+0x18>

	return r;
 8005442:	697b      	ldr	r3, [r7, #20]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3724      	adds	r7, #36	@ 0x24
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800545a:	e002      	b.n	8005462 <chk_chr+0x12>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3301      	adds	r3, #1
 8005460:	607b      	str	r3, [r7, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <chk_chr+0x26>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	4293      	cmp	r3, r2
 8005474:	d1f2      	bne.n	800545c <chk_chr+0xc>
	return *str;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	781b      	ldrb	r3, [r3, #0]
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e029      	b.n	80054f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800549c:	4a27      	ldr	r2, [pc, #156]	@ (800553c <chk_lock+0xb4>)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	4413      	add	r3, r2
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01d      	beq.n	80054e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054aa:	4a24      	ldr	r2, [pc, #144]	@ (800553c <chk_lock+0xb4>)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	4413      	add	r3, r2
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d116      	bne.n	80054ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80054bc:	4a1f      	ldr	r2, [pc, #124]	@ (800553c <chk_lock+0xb4>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	4413      	add	r3, r2
 80054c4:	3304      	adds	r3, #4
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d10c      	bne.n	80054ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054d0:	4a1a      	ldr	r2, [pc, #104]	@ (800553c <chk_lock+0xb4>)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	4413      	add	r3, r2
 80054d8:	3308      	adds	r3, #8
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d102      	bne.n	80054ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054e4:	e007      	b.n	80054f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3301      	adds	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d9d2      	bls.n	800549c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d109      	bne.n	8005510 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <chk_lock+0x80>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d101      	bne.n	800550c <chk_lock+0x84>
 8005508:	2300      	movs	r3, #0
 800550a:	e010      	b.n	800552e <chk_lock+0xa6>
 800550c:	2312      	movs	r3, #18
 800550e:	e00e      	b.n	800552e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <chk_lock+0xa0>
 8005516:	4a09      	ldr	r2, [pc, #36]	@ (800553c <chk_lock+0xb4>)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	4413      	add	r3, r2
 800551e:	330c      	adds	r3, #12
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005526:	d101      	bne.n	800552c <chk_lock+0xa4>
 8005528:	2310      	movs	r3, #16
 800552a:	e000      	b.n	800552e <chk_lock+0xa6>
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20003c94 	.word	0x20003c94

08005540 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	e002      	b.n	8005552 <enq_lock+0x12>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3301      	adds	r3, #1
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d806      	bhi.n	8005566 <enq_lock+0x26>
 8005558:	4a09      	ldr	r2, [pc, #36]	@ (8005580 <enq_lock+0x40>)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4413      	add	r3, r2
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f2      	bne.n	800554c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b02      	cmp	r3, #2
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20003c94 	.word	0x20003c94

08005584 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e01f      	b.n	80055d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005594:	4a41      	ldr	r2, [pc, #260]	@ (800569c <inc_lock+0x118>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	4413      	add	r3, r2
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d113      	bne.n	80055ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80055a6:	4a3d      	ldr	r2, [pc, #244]	@ (800569c <inc_lock+0x118>)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	4413      	add	r3, r2
 80055ae:	3304      	adds	r3, #4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d109      	bne.n	80055ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80055ba:	4a38      	ldr	r2, [pc, #224]	@ (800569c <inc_lock+0x118>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	4413      	add	r3, r2
 80055c2:	3308      	adds	r3, #8
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d006      	beq.n	80055dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d9dc      	bls.n	8005594 <inc_lock+0x10>
 80055da:	e000      	b.n	80055de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80055dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d132      	bne.n	800564a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	e002      	b.n	80055f0 <inc_lock+0x6c>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d806      	bhi.n	8005604 <inc_lock+0x80>
 80055f6:	4a29      	ldr	r2, [pc, #164]	@ (800569c <inc_lock+0x118>)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	4413      	add	r3, r2
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f2      	bne.n	80055ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d101      	bne.n	800560e <inc_lock+0x8a>
 800560a:	2300      	movs	r3, #0
 800560c:	e040      	b.n	8005690 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4922      	ldr	r1, [pc, #136]	@ (800569c <inc_lock+0x118>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	440b      	add	r3, r1
 800561a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	491e      	ldr	r1, [pc, #120]	@ (800569c <inc_lock+0x118>)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	440b      	add	r3, r1
 8005628:	3304      	adds	r3, #4
 800562a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695a      	ldr	r2, [r3, #20]
 8005630:	491a      	ldr	r1, [pc, #104]	@ (800569c <inc_lock+0x118>)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	440b      	add	r3, r1
 8005638:	3308      	adds	r3, #8
 800563a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800563c:	4a17      	ldr	r2, [pc, #92]	@ (800569c <inc_lock+0x118>)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	4413      	add	r3, r2
 8005644:	330c      	adds	r3, #12
 8005646:	2200      	movs	r2, #0
 8005648:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <inc_lock+0xe0>
 8005650:	4a12      	ldr	r2, [pc, #72]	@ (800569c <inc_lock+0x118>)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	4413      	add	r3, r2
 8005658:	330c      	adds	r3, #12
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <inc_lock+0xe0>
 8005660:	2300      	movs	r3, #0
 8005662:	e015      	b.n	8005690 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d108      	bne.n	800567c <inc_lock+0xf8>
 800566a:	4a0c      	ldr	r2, [pc, #48]	@ (800569c <inc_lock+0x118>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4413      	add	r3, r2
 8005672:	330c      	adds	r3, #12
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	e001      	b.n	8005680 <inc_lock+0xfc>
 800567c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005680:	4906      	ldr	r1, [pc, #24]	@ (800569c <inc_lock+0x118>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	440b      	add	r3, r1
 8005688:	330c      	adds	r3, #12
 800568a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20003c94 	.word	0x20003c94

080056a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d825      	bhi.n	8005700 <dec_lock+0x60>
		n = Files[i].ctr;
 80056b4:	4a17      	ldr	r2, [pc, #92]	@ (8005714 <dec_lock+0x74>)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4413      	add	r3, r2
 80056bc:	330c      	adds	r3, #12
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c8:	d101      	bne.n	80056ce <dec_lock+0x2e>
 80056ca:	2300      	movs	r3, #0
 80056cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <dec_lock+0x3a>
 80056d4:	89fb      	ldrh	r3, [r7, #14]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80056da:	4a0e      	ldr	r2, [pc, #56]	@ (8005714 <dec_lock+0x74>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	4413      	add	r3, r2
 80056e2:	330c      	adds	r3, #12
 80056e4:	89fa      	ldrh	r2, [r7, #14]
 80056e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056e8:	89fb      	ldrh	r3, [r7, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <dec_lock+0x5a>
 80056ee:	4a09      	ldr	r2, [pc, #36]	@ (8005714 <dec_lock+0x74>)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	4413      	add	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	737b      	strb	r3, [r7, #13]
 80056fe:	e001      	b.n	8005704 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005700:	2302      	movs	r3, #2
 8005702:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005704:	7b7b      	ldrb	r3, [r7, #13]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20003c94 	.word	0x20003c94

08005718 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e010      	b.n	8005748 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005726:	4a0d      	ldr	r2, [pc, #52]	@ (800575c <clear_lock+0x44>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	4413      	add	r3, r2
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d105      	bne.n	8005742 <clear_lock+0x2a>
 8005736:	4a09      	ldr	r2, [pc, #36]	@ (800575c <clear_lock+0x44>)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	4413      	add	r3, r2
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d9eb      	bls.n	8005726 <clear_lock+0xe>
	}
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20003c94 	.word	0x20003c94

08005760 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	78db      	ldrb	r3, [r3, #3]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d034      	beq.n	80057de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005778:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7858      	ldrb	r0, [r3, #1]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005784:	2301      	movs	r3, #1
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	f7ff fd3e 	bl	8005208 <disk_write>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	e022      	b.n	80057de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	1ad2      	subs	r2, r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d217      	bcs.n	80057de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	789b      	ldrb	r3, [r3, #2]
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e010      	b.n	80057d8 <sync_window+0x78>
					wsect += fs->fsize;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7858      	ldrb	r0, [r3, #1]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80057ca:	2301      	movs	r3, #1
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	f7ff fd1b 	bl	8005208 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d8eb      	bhi.n	80057b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d01b      	beq.n	8005838 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff ffad 	bl	8005760 <sync_window>
 8005806:	4603      	mov	r3, r0
 8005808:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d113      	bne.n	8005838 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7858      	ldrb	r0, [r3, #1]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800581a:	2301      	movs	r3, #1
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	f7ff fcd3 	bl	80051c8 <disk_read>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005828:	f04f 33ff 	mov.w	r3, #4294967295
 800582c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ff87 	bl	8005760 <sync_window>
 8005852:	4603      	mov	r3, r0
 8005854:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d159      	bne.n	8005910 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d149      	bne.n	80058f8 <sync_fs+0xb4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	791b      	ldrb	r3, [r3, #4]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d145      	bne.n	80058f8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	899b      	ldrh	r3, [r3, #12]
 8005876:	461a      	mov	r2, r3
 8005878:	2100      	movs	r1, #0
 800587a:	f7ff fda7 	bl	80053cc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3338      	adds	r3, #56	@ 0x38
 8005882:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005886:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fd36 	bl	80052fc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3338      	adds	r3, #56	@ 0x38
 8005894:	4921      	ldr	r1, [pc, #132]	@ (800591c <sync_fs+0xd8>)
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff fd4b 	bl	8005332 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3338      	adds	r3, #56	@ 0x38
 80058a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80058a4:	491e      	ldr	r1, [pc, #120]	@ (8005920 <sync_fs+0xdc>)
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fd43 	bl	8005332 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3338      	adds	r3, #56	@ 0x38
 80058b0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7ff fd39 	bl	8005332 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3338      	adds	r3, #56	@ 0x38
 80058c4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7ff fd2f 	bl	8005332 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7858      	ldrb	r0, [r3, #1]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ec:	2301      	movs	r3, #1
 80058ee:	f7ff fc8b 	bl	8005208 <disk_write>
			fs->fsi_flag = 0;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fca1 	bl	8005248 <disk_ioctl>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <sync_fs+0xcc>
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	41615252 	.word	0x41615252
 8005920:	61417272 	.word	0x61417272

08005924 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	3b02      	subs	r3, #2
 8005932:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	3b02      	subs	r3, #2
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d301      	bcc.n	8005944 <clust2sect+0x20>
 8005940:	2300      	movs	r3, #0
 8005942:	e008      	b.n	8005956 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	895b      	ldrh	r3, [r3, #10]
 8005948:	461a      	mov	r2, r3
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	fb03 f202 	mul.w	r2, r3, r2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005954:	4413      	add	r3, r2
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d904      	bls.n	8005982 <get_fat+0x20>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005982:	2301      	movs	r3, #1
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e0ba      	b.n	8005afe <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005988:	f04f 33ff 	mov.w	r3, #4294967295
 800598c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b03      	cmp	r3, #3
 8005994:	f000 8082 	beq.w	8005a9c <get_fat+0x13a>
 8005998:	2b03      	cmp	r3, #3
 800599a:	f300 80a6 	bgt.w	8005aea <get_fat+0x188>
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d002      	beq.n	80059a8 <get_fat+0x46>
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d055      	beq.n	8005a52 <get_fat+0xf0>
 80059a6:	e0a0      	b.n	8005aea <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	085b      	lsrs	r3, r3, #1
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	899b      	ldrh	r3, [r3, #12]
 80059be:	4619      	mov	r1, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c6:	4413      	add	r3, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	6938      	ldr	r0, [r7, #16]
 80059cc:	f7ff ff0c 	bl	80057e8 <move_window>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 808c 	bne.w	8005af0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	60fa      	str	r2, [r7, #12]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	8992      	ldrh	r2, [r2, #12]
 80059e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80059e6:	fb01 f202 	mul.w	r2, r1, r2
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4413      	add	r3, r2
 80059f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	899b      	ldrh	r3, [r3, #12]
 80059fe:	4619      	mov	r1, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a06:	4413      	add	r3, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f7ff feec 	bl	80057e8 <move_window>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d16e      	bne.n	8005af4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	899b      	ldrh	r3, [r3, #12]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a22:	fb01 f202 	mul.w	r2, r1, r2
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <get_fat+0xe6>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	e002      	b.n	8005a4e <get_fat+0xec>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4e:	617b      	str	r3, [r7, #20]
			break;
 8005a50:	e055      	b.n	8005afe <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	899b      	ldrh	r3, [r3, #12]
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a66:	4413      	add	r3, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f7ff febc 	bl	80057e8 <move_window>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d140      	bne.n	8005af8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	8992      	ldrh	r2, [r2, #12]
 8005a84:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a88:	fb00 f202 	mul.w	r2, r0, r2
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	440b      	add	r3, r1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fbf7 	bl	8005284 <ld_word>
 8005a96:	4603      	mov	r3, r0
 8005a98:	617b      	str	r3, [r7, #20]
			break;
 8005a9a:	e030      	b.n	8005afe <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	899b      	ldrh	r3, [r3, #12]
 8005aa4:	089b      	lsrs	r3, r3, #2
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6938      	ldr	r0, [r7, #16]
 8005ab6:	f7ff fe97 	bl	80057e8 <move_window>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d11d      	bne.n	8005afc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	8992      	ldrh	r2, [r2, #12]
 8005ace:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ad2:	fb00 f202 	mul.w	r2, r0, r2
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	440b      	add	r3, r1
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fbeb 	bl	80052b6 <ld_dword>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ae6:	617b      	str	r3, [r7, #20]
			break;
 8005ae8:	e009      	b.n	8005afe <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005aea:	2301      	movs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e006      	b.n	8005afe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005af0:	bf00      	nop
 8005af2:	e004      	b.n	8005afe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005af4:	bf00      	nop
 8005af6:	e002      	b.n	8005afe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005afc:	bf00      	nop
		}
	}

	return val;
 8005afe:	697b      	ldr	r3, [r7, #20]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b089      	sub	sp, #36	@ 0x24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005b14:	2302      	movs	r3, #2
 8005b16:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	f240 8109 	bls.w	8005d32 <put_fat+0x22a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	f080 8103 	bcs.w	8005d32 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	f000 80b6 	beq.w	8005ca2 <put_fat+0x19a>
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	f300 80fb 	bgt.w	8005d32 <put_fat+0x22a>
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d003      	beq.n	8005b48 <put_fat+0x40>
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	f000 8083 	beq.w	8005c4c <put_fat+0x144>
 8005b46:	e0f4      	b.n	8005d32 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4413      	add	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	899b      	ldrh	r3, [r3, #12]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b66:	4413      	add	r3, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff fe3c 	bl	80057e8 <move_window>
 8005b70:	4603      	mov	r3, r0
 8005b72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b74:	7ffb      	ldrb	r3, [r7, #31]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f040 80d4 	bne.w	8005d24 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	61ba      	str	r2, [r7, #24]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	8992      	ldrh	r2, [r2, #12]
 8005b8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b90:	fb00 f202 	mul.w	r2, r0, r2
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	440b      	add	r3, r1
 8005b98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00d      	beq.n	8005bc0 <put_fat+0xb8>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	b25a      	sxtb	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e001      	b.n	8005bc4 <put_fat+0xbc>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	899b      	ldrh	r3, [r3, #12]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bde:	4413      	add	r3, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fe00 	bl	80057e8 <move_window>
 8005be8:	4603      	mov	r3, r0
 8005bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 809a 	bne.w	8005d28 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	899b      	ldrh	r3, [r3, #12]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c06:	fb00 f202 	mul.w	r2, r0, r2
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <put_fat+0x11a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e00e      	b.n	8005c40 <put_fat+0x138>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	f023 030f 	bic.w	r3, r3, #15
 8005c2c:	b25a      	sxtb	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	b25b      	sxtb	r3, r3
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	b25b      	sxtb	r3, r3
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b25b      	sxtb	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	70da      	strb	r2, [r3, #3]
			break;
 8005c4a:	e072      	b.n	8005d32 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	899b      	ldrh	r3, [r3, #12]
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	4619      	mov	r1, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c60:	4413      	add	r3, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff fdbf 	bl	80057e8 <move_window>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d15b      	bne.n	8005d2c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	8992      	ldrh	r2, [r2, #12]
 8005c82:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c86:	fb00 f202 	mul.w	r2, r0, r2
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	b292      	uxth	r2, r2
 8005c92:	4611      	mov	r1, r2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fb31 	bl	80052fc <st_word>
			fs->wflag = 1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	70da      	strb	r2, [r3, #3]
			break;
 8005ca0:	e047      	b.n	8005d32 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	899b      	ldrh	r3, [r3, #12]
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cb6:	4413      	add	r3, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fd94 	bl	80057e8 <move_window>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cc4:	7ffb      	ldrb	r3, [r7, #31]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d132      	bne.n	8005d30 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	8992      	ldrh	r2, [r2, #12]
 8005cde:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ce2:	fb00 f202 	mul.w	r2, r0, r2
 8005ce6:	1a9b      	subs	r3, r3, r2
 8005ce8:	440b      	add	r3, r1
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fae3 	bl	80052b6 <ld_dword>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005cf6:	4323      	orrs	r3, r4
 8005cf8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	8992      	ldrh	r2, [r2, #12]
 8005d08:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d0c:	fb00 f202 	mul.w	r2, r0, r2
 8005d10:	1a9b      	subs	r3, r3, r2
 8005d12:	440b      	add	r3, r1
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fb0b 	bl	8005332 <st_dword>
			fs->wflag = 1;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	70da      	strb	r2, [r3, #3]
			break;
 8005d22:	e006      	b.n	8005d32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d24:	bf00      	nop
 8005d26:	e004      	b.n	8005d32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d28:	bf00      	nop
 8005d2a:	e002      	b.n	8005d32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005d30:	bf00      	nop
		}
	}
	return res;
 8005d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3724      	adds	r7, #36	@ 0x24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd90      	pop	{r4, r7, pc}

08005d3c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d904      	bls.n	8005d62 <remove_chain+0x26>
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d301      	bcc.n	8005d66 <remove_chain+0x2a>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e04b      	b.n	8005dfe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f7ff fec8 	bl	8005b08 <put_fat>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005d7c:	7ffb      	ldrb	r3, [r7, #31]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <remove_chain+0x4a>
 8005d82:	7ffb      	ldrb	r3, [r7, #31]
 8005d84:	e03b      	b.n	8005dfe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff fdea 	bl	8005962 <get_fat>
 8005d8e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d031      	beq.n	8005dfa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <remove_chain+0x64>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e02e      	b.n	8005dfe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d101      	bne.n	8005dac <remove_chain+0x70>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e028      	b.n	8005dfe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005dac:	2200      	movs	r2, #0
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f7ff fea9 	bl	8005b08 <put_fat>
 8005db6:	4603      	mov	r3, r0
 8005db8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005dba:	7ffb      	ldrb	r3, [r7, #31]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <remove_chain+0x88>
 8005dc0:	7ffb      	ldrb	r3, [r7, #31]
 8005dc2:	e01c      	b.n	8005dfe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	699a      	ldr	r2, [r3, #24]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	3b02      	subs	r3, #2
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d20b      	bcs.n	8005dea <remove_chain+0xae>
			fs->free_clst++;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	791b      	ldrb	r3, [r3, #4]
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3c6      	bcc.n	8005d86 <remove_chain+0x4a>
 8005df8:	e000      	b.n	8005dfc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005dfa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3720      	adds	r7, #32
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b088      	sub	sp, #32
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10d      	bne.n	8005e38 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <create_chain+0x2c>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d31b      	bcc.n	8005e6a <create_chain+0x64>
 8005e32:	2301      	movs	r3, #1
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	e018      	b.n	8005e6a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff fd91 	bl	8005962 <get_fat>
 8005e40:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d801      	bhi.n	8005e4c <create_chain+0x46>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e070      	b.n	8005f2e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d101      	bne.n	8005e58 <create_chain+0x52>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	e06a      	b.n	8005f2e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d201      	bcs.n	8005e66 <create_chain+0x60>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	e063      	b.n	8005f2e <create_chain+0x128>
		scl = clst;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d307      	bcc.n	8005e8e <create_chain+0x88>
				ncl = 2;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d901      	bls.n	8005e8e <create_chain+0x88>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e04f      	b.n	8005f2e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e8e:	69f9      	ldr	r1, [r7, #28]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fd66 	bl	8005962 <get_fat>
 8005e96:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d003      	beq.n	8005eac <create_chain+0xa6>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	d101      	bne.n	8005eb0 <create_chain+0xaa>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	e03e      	b.n	8005f2e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d1da      	bne.n	8005e6e <create_chain+0x68>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e038      	b.n	8005f2e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005ebc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	69f9      	ldr	r1, [r7, #28]
 8005ec4:	6938      	ldr	r0, [r7, #16]
 8005ec6:	f7ff fe1f 	bl	8005b08 <put_fat>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <create_chain+0xe2>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d006      	beq.n	8005ee8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6938      	ldr	r0, [r7, #16]
 8005ee0:	f7ff fe12 	bl	8005b08 <put_fat>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <create_chain+0x116>
		fs->last_clst = ncl;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	3b02      	subs	r3, #2
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d804      	bhi.n	8005f0c <create_chain+0x106>
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	1e5a      	subs	r2, r3, #1
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	791b      	ldrb	r3, [r3, #4]
 8005f10:	f043 0301 	orr.w	r3, r3, #1
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	711a      	strb	r2, [r3, #4]
 8005f1a:	e007      	b.n	8005f2c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <create_chain+0x122>
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	e000      	b.n	8005f2a <create_chain+0x124>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005f2c:	69fb      	ldr	r3, [r7, #28]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b087      	sub	sp, #28
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	899b      	ldrh	r3, [r3, #12]
 8005f52:	461a      	mov	r2, r3
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	8952      	ldrh	r2, [r2, #10]
 8005f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	613a      	str	r2, [r7, #16]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <clmt_clust+0x42>
 8005f74:	2300      	movs	r3, #0
 8005f76:	e010      	b.n	8005f9a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d307      	bcc.n	8005f90 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f8e:	e7e9      	b.n	8005f64 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005f90:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fbc:	d204      	bcs.n	8005fc8 <dir_sdi+0x22>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <dir_sdi+0x26>
		return FR_INT_ERR;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e071      	b.n	80060b0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <dir_sdi+0x46>
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d902      	bls.n	8005fec <dir_sdi+0x46>
		clst = fs->dirbase;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	8912      	ldrh	r2, [r2, #8]
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d301      	bcc.n	8006002 <dir_sdi+0x5c>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e056      	b.n	80060b0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	61da      	str	r2, [r3, #28]
 800600a:	e02d      	b.n	8006068 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	895b      	ldrh	r3, [r3, #10]
 8006010:	461a      	mov	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	899b      	ldrh	r3, [r3, #12]
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800601c:	e019      	b.n	8006052 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6979      	ldr	r1, [r7, #20]
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fc9d 	bl	8005962 <get_fat>
 8006028:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d101      	bne.n	8006036 <dir_sdi+0x90>
 8006032:	2301      	movs	r3, #1
 8006034:	e03c      	b.n	80060b0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d904      	bls.n	8006046 <dir_sdi+0xa0>
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	429a      	cmp	r2, r3
 8006044:	d301      	bcc.n	800604a <dir_sdi+0xa4>
 8006046:	2302      	movs	r3, #2
 8006048:	e032      	b.n	80060b0 <dir_sdi+0x10a>
			ofs -= csz;
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	429a      	cmp	r2, r3
 8006058:	d2e1      	bcs.n	800601e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800605a:	6979      	ldr	r1, [r7, #20]
 800605c:	6938      	ldr	r0, [r7, #16]
 800605e:	f7ff fc61 	bl	8005924 <clust2sect>
 8006062:	4602      	mov	r2, r0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <dir_sdi+0xd4>
 8006076:	2302      	movs	r3, #2
 8006078:	e01a      	b.n	80060b0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69da      	ldr	r2, [r3, #28]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	899b      	ldrh	r3, [r3, #12]
 8006082:	4619      	mov	r1, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	fbb3 f3f1 	udiv	r3, r3, r1
 800608a:	441a      	add	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	899b      	ldrh	r3, [r3, #12]
 800609a:	461a      	mov	r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	fbb3 f0f2 	udiv	r0, r3, r2
 80060a2:	fb00 f202 	mul.w	r2, r0, r2
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	18ca      	adds	r2, r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	3320      	adds	r3, #32
 80060ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <dir_next+0x28>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060de:	d301      	bcc.n	80060e4 <dir_next+0x2c>
 80060e0:	2304      	movs	r3, #4
 80060e2:	e0bb      	b.n	800625c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	899b      	ldrh	r3, [r3, #12]
 80060e8:	461a      	mov	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80060f0:	fb01 f202 	mul.w	r2, r1, r2
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 809d 	bne.w	8006236 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	8912      	ldrh	r2, [r2, #8]
 8006116:	4293      	cmp	r3, r2
 8006118:	f0c0 808d 	bcc.w	8006236 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	61da      	str	r2, [r3, #28]
 8006122:	2304      	movs	r3, #4
 8006124:	e09a      	b.n	800625c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	899b      	ldrh	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	8952      	ldrh	r2, [r2, #10]
 8006136:	3a01      	subs	r2, #1
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d17b      	bne.n	8006236 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7ff fc0b 	bl	8005962 <get_fat>
 800614c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d801      	bhi.n	8006158 <dir_next+0xa0>
 8006154:	2302      	movs	r3, #2
 8006156:	e081      	b.n	800625c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d101      	bne.n	8006164 <dir_next+0xac>
 8006160:	2301      	movs	r3, #1
 8006162:	e07b      	b.n	800625c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	429a      	cmp	r2, r3
 800616c:	d359      	bcc.n	8006222 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	61da      	str	r2, [r3, #28]
 800617a:	2304      	movs	r3, #4
 800617c:	e06e      	b.n	800625c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7ff fe3d 	bl	8005e06 <create_chain>
 800618c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <dir_next+0xe0>
 8006194:	2307      	movs	r3, #7
 8006196:	e061      	b.n	800625c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <dir_next+0xea>
 800619e:	2302      	movs	r3, #2
 80061a0:	e05c      	b.n	800625c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d101      	bne.n	80061ae <dir_next+0xf6>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e056      	b.n	800625c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff fad6 	bl	8005760 <sync_window>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <dir_next+0x106>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e04e      	b.n	800625c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	899b      	ldrh	r3, [r3, #12]
 80061c8:	461a      	mov	r2, r3
 80061ca:	2100      	movs	r1, #0
 80061cc:	f7ff f8fe 	bl	80053cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	6979      	ldr	r1, [r7, #20]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff fba4 	bl	8005924 <clust2sect>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80061e2:	e012      	b.n	800620a <dir_next+0x152>
						fs->wflag = 1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff fab8 	bl	8005760 <sync_window>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <dir_next+0x142>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e030      	b.n	800625c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	3301      	adds	r3, #1
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	635a      	str	r2, [r3, #52]	@ 0x34
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	895b      	ldrh	r3, [r3, #10]
 800620e:	461a      	mov	r2, r3
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4293      	cmp	r3, r2
 8006214:	d3e6      	bcc.n	80061e4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006228:	6979      	ldr	r1, [r7, #20]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff fb7a 	bl	8005924 <clust2sect>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	899b      	ldrh	r3, [r3, #12]
 8006246:	461a      	mov	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	fbb3 f0f2 	udiv	r0, r3, r2
 800624e:	fb00 f202 	mul.w	r2, r0, r2
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	18ca      	adds	r2, r1, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006274:	2100      	movs	r1, #0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff fe95 	bl	8005fa6 <dir_sdi>
 800627c:	4603      	mov	r3, r0
 800627e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d12b      	bne.n	80062de <dir_alloc+0x7a>
		n = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4619      	mov	r1, r3
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff faa9 	bl	80057e8 <move_window>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11d      	bne.n	80062dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2be5      	cmp	r3, #229	@ 0xe5
 80062a8:	d004      	beq.n	80062b4 <dir_alloc+0x50>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	3301      	adds	r3, #1
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d102      	bne.n	80062c8 <dir_alloc+0x64>
 80062c2:	e00c      	b.n	80062de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80062c8:	2101      	movs	r1, #1
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fef4 	bl	80060b8 <dir_next>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0d7      	beq.n	800628a <dir_alloc+0x26>
 80062da:	e000      	b.n	80062de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80062dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d101      	bne.n	80062e8 <dir_alloc+0x84>
 80062e4:	2307      	movs	r3, #7
 80062e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	331a      	adds	r3, #26
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe ffbf 	bl	8005284 <ld_word>
 8006306:	4603      	mov	r3, r0
 8006308:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d109      	bne.n	8006326 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	3314      	adds	r3, #20
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe ffb4 	bl	8005284 <ld_word>
 800631c:	4603      	mov	r3, r0
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006326:	68fb      	ldr	r3, [r7, #12]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	331a      	adds	r3, #26
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	b292      	uxth	r2, r2
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe ffd8 	bl	80052fc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b03      	cmp	r3, #3
 8006352:	d109      	bne.n	8006368 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f103 0214 	add.w	r2, r3, #20
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	b29b      	uxth	r3, r3
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f7fe ffca 	bl	80052fc <st_word>
	}
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	331a      	adds	r3, #26
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe ff80 	bl	8005284 <ld_word>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <cmp_lfn+0x1e>
 800638a:	2300      	movs	r3, #0
 800638c:	e059      	b.n	8006442 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006396:	1e5a      	subs	r2, r3, #1
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80063a4:	2301      	movs	r3, #1
 80063a6:	81fb      	strh	r3, [r7, #14]
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	e033      	b.n	8006416 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80063ae:	4a27      	ldr	r2, [pc, #156]	@ (800644c <cmp_lfn+0xdc>)
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4413      	add	r3, r2
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	4413      	add	r3, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe ff61 	bl	8005284 <ld_word>
 80063c2:	4603      	mov	r3, r0
 80063c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80063c6:	89fb      	ldrh	r3, [r7, #14]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01a      	beq.n	8006402 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80063d0:	d812      	bhi.n	80063f8 <cmp_lfn+0x88>
 80063d2:	89bb      	ldrh	r3, [r7, #12]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fd7b 	bl	8007ed0 <ff_wtoupper>
 80063da:	4603      	mov	r3, r0
 80063dc:	461c      	mov	r4, r3
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	617a      	str	r2, [r7, #20]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 fd6f 	bl	8007ed0 <ff_wtoupper>
 80063f2:	4603      	mov	r3, r0
 80063f4:	429c      	cmp	r4, r3
 80063f6:	d001      	beq.n	80063fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80063f8:	2300      	movs	r3, #0
 80063fa:	e022      	b.n	8006442 <cmp_lfn+0xd2>
			}
			wc = uc;
 80063fc:	89bb      	ldrh	r3, [r7, #12]
 80063fe:	81fb      	strh	r3, [r7, #14]
 8006400:	e006      	b.n	8006410 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006402:	89bb      	ldrh	r3, [r7, #12]
 8006404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006408:	4293      	cmp	r3, r2
 800640a:	d001      	beq.n	8006410 <cmp_lfn+0xa0>
 800640c:	2300      	movs	r3, #0
 800640e:	e018      	b.n	8006442 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	3301      	adds	r3, #1
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b0c      	cmp	r3, #12
 800641a:	d9c8      	bls.n	80063ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <cmp_lfn+0xd0>
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <cmp_lfn+0xd0>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <cmp_lfn+0xd0>
 800643c:	2300      	movs	r3, #0
 800643e:	e000      	b.n	8006442 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006440:	2301      	movs	r3, #1
}
 8006442:	4618      	mov	r0, r3
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd90      	pop	{r4, r7, pc}
 800644a:	bf00      	nop
 800644c:	08078b1c 	.word	0x08078b1c

08006450 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4611      	mov	r1, r2
 800645c:	461a      	mov	r2, r3
 800645e:	460b      	mov	r3, r1
 8006460:	71fb      	strb	r3, [r7, #7]
 8006462:	4613      	mov	r3, r2
 8006464:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	330d      	adds	r3, #13
 800646a:	79ba      	ldrb	r2, [r7, #6]
 800646c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	330b      	adds	r3, #11
 8006472:	220f      	movs	r2, #15
 8006474:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	330c      	adds	r3, #12
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	331a      	adds	r3, #26
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe ff39 	bl	80052fc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	1e5a      	subs	r2, r3, #1
 800648e:	4613      	mov	r3, r2
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	82fb      	strh	r3, [r7, #22]
 800649e:	2300      	movs	r3, #0
 80064a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80064a2:	8afb      	ldrh	r3, [r7, #22]
 80064a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <put_lfn+0x6c>
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	61fa      	str	r2, [r7, #28]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80064bc:	4a17      	ldr	r2, [pc, #92]	@ (800651c <put_lfn+0xcc>)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	4413      	add	r3, r2
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	4413      	add	r3, r2
 80064ca:	8afa      	ldrh	r2, [r7, #22]
 80064cc:	4611      	mov	r1, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe ff14 	bl	80052fc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80064d4:	8afb      	ldrh	r3, [r7, #22]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <put_lfn+0x90>
 80064da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b0c      	cmp	r3, #12
 80064ea:	d9da      	bls.n	80064a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80064ec:	8afb      	ldrh	r3, [r7, #22]
 80064ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d006      	beq.n	8006504 <put_lfn+0xb4>
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <put_lfn+0xbc>
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	79fa      	ldrb	r2, [r7, #7]
 8006510:	701a      	strb	r2, [r3, #0]
}
 8006512:	bf00      	nop
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	08078b1c 	.word	0x08078b1c

08006520 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	@ 0x30
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800652e:	220b      	movs	r2, #11
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7fe ff29 	bl	800538a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b05      	cmp	r3, #5
 800653c:	d92b      	bls.n	8006596 <gen_numname+0x76>
		sr = seq;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006542:	e022      	b.n	800658a <gen_numname+0x6a>
			wc = *lfn++;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	1c9a      	adds	r2, r3, #2
 8006548:	607a      	str	r2, [r7, #4]
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800654e:	2300      	movs	r3, #0
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006552:	e017      	b.n	8006584 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	005a      	lsls	r2, r3, #1
 8006558:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	4413      	add	r3, r2
 8006560:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006562:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <gen_numname+0x5e>
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006578:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800657c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	3301      	adds	r3, #1
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	2b0f      	cmp	r3, #15
 8006588:	d9e4      	bls.n	8006554 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1d8      	bne.n	8006544 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006596:	2307      	movs	r3, #7
 8006598:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	3330      	adds	r3, #48	@ 0x30
 80065a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80065aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065ae:	2b39      	cmp	r3, #57	@ 0x39
 80065b0:	d904      	bls.n	80065bc <gen_numname+0x9c>
 80065b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065b6:	3307      	adds	r3, #7
 80065b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	1e5a      	subs	r2, r3, #1
 80065c0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80065c2:	3330      	adds	r3, #48	@ 0x30
 80065c4:	443b      	add	r3, r7
 80065c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80065ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	091b      	lsrs	r3, r3, #4
 80065d2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1df      	bne.n	800659a <gen_numname+0x7a>
	ns[i] = '~';
 80065da:	f107 0214 	add.w	r2, r7, #20
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	4413      	add	r3, r2
 80065e2:	227e      	movs	r2, #126	@ 0x7e
 80065e4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ea:	e002      	b.n	80065f2 <gen_numname+0xd2>
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	3301      	adds	r3, #1
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d205      	bcs.n	8006606 <gen_numname+0xe6>
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	4413      	add	r3, r2
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b20      	cmp	r3, #32
 8006604:	d1f2      	bne.n	80065ec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	2b07      	cmp	r3, #7
 800660a:	d807      	bhi.n	800661c <gen_numname+0xfc>
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006612:	3330      	adds	r3, #48	@ 0x30
 8006614:	443b      	add	r3, r7
 8006616:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800661a:	e000      	b.n	800661e <gen_numname+0xfe>
 800661c:	2120      	movs	r1, #32
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	627a      	str	r2, [r7, #36]	@ 0x24
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	460a      	mov	r2, r1
 800662a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	2b07      	cmp	r3, #7
 8006630:	d9e9      	bls.n	8006606 <gen_numname+0xe6>
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	3730      	adds	r7, #48	@ 0x30
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006648:	230b      	movs	r3, #11
 800664a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	b2da      	uxtb	r2, r3
 8006650:	0852      	lsrs	r2, r2, #1
 8006652:	01db      	lsls	r3, r3, #7
 8006654:	4313      	orrs	r3, r2
 8006656:	b2da      	uxtb	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	6079      	str	r1, [r7, #4]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	4413      	add	r3, r2
 8006662:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3b01      	subs	r3, #1
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1ed      	bne.n	800664c <sum_sfn+0x10>
	return sum;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b086      	sub	sp, #24
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800668c:	2100      	movs	r1, #0
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fc89 	bl	8005fa6 <dir_sdi>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <dir_find+0x24>
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	e0a9      	b.n	80067f6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80066a2:	23ff      	movs	r3, #255	@ 0xff
 80066a4:	753b      	strb	r3, [r7, #20]
 80066a6:	7d3b      	ldrb	r3, [r7, #20]
 80066a8:	757b      	strb	r3, [r7, #21]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6938      	ldr	r0, [r7, #16]
 80066ba:	f7ff f895 	bl	80057e8 <move_window>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 8090 	bne.w	80067ea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066d2:	7dbb      	ldrb	r3, [r7, #22]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <dir_find+0x60>
 80066d8:	2304      	movs	r3, #4
 80066da:	75fb      	strb	r3, [r7, #23]
 80066dc:	e08a      	b.n	80067f4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	330b      	adds	r3, #11
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	7bfa      	ldrb	r2, [r7, #15]
 80066f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80066f2:	7dbb      	ldrb	r3, [r7, #22]
 80066f4:	2be5      	cmp	r3, #229	@ 0xe5
 80066f6:	d007      	beq.n	8006708 <dir_find+0x8a>
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <dir_find+0x98>
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	2b0f      	cmp	r3, #15
 8006706:	d006      	beq.n	8006716 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006708:	23ff      	movs	r3, #255	@ 0xff
 800670a:	757b      	strb	r3, [r7, #21]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f04f 32ff 	mov.w	r2, #4294967295
 8006712:	631a      	str	r2, [r3, #48]	@ 0x30
 8006714:	e05e      	b.n	80067d4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b0f      	cmp	r3, #15
 800671a:	d136      	bne.n	800678a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d154      	bne.n	80067d4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800672a:	7dbb      	ldrb	r3, [r7, #22]
 800672c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00d      	beq.n	8006750 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	7b5b      	ldrb	r3, [r3, #13]
 800673a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800673c:	7dbb      	ldrb	r3, [r7, #22]
 800673e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006742:	75bb      	strb	r3, [r7, #22]
 8006744:	7dbb      	ldrb	r3, [r7, #22]
 8006746:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695a      	ldr	r2, [r3, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006750:	7dba      	ldrb	r2, [r7, #22]
 8006752:	7d7b      	ldrb	r3, [r7, #21]
 8006754:	429a      	cmp	r2, r3
 8006756:	d115      	bne.n	8006784 <dir_find+0x106>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	330d      	adds	r3, #13
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	7d3a      	ldrb	r2, [r7, #20]
 8006762:	429a      	cmp	r2, r3
 8006764:	d10e      	bne.n	8006784 <dir_find+0x106>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7ff fdfd 	bl	8006370 <cmp_lfn>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <dir_find+0x106>
 800677c:	7d7b      	ldrb	r3, [r7, #21]
 800677e:	3b01      	subs	r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e000      	b.n	8006786 <dir_find+0x108>
 8006784:	23ff      	movs	r3, #255	@ 0xff
 8006786:	757b      	strb	r3, [r7, #21]
 8006788:	e024      	b.n	80067d4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800678a:	7d7b      	ldrb	r3, [r7, #21]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <dir_find+0x126>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff ff51 	bl	800663c <sum_sfn>
 800679a:	4603      	mov	r3, r0
 800679c:	461a      	mov	r2, r3
 800679e:	7d3b      	ldrb	r3, [r7, #20]
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d024      	beq.n	80067ee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <dir_find+0x14a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a18      	ldr	r0, [r3, #32]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	@ 0x24
 80067ba:	220b      	movs	r2, #11
 80067bc:	4619      	mov	r1, r3
 80067be:	f7fe fe20 	bl	8005402 <mem_cmp>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d014      	beq.n	80067f2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80067c8:	23ff      	movs	r3, #255	@ 0xff
 80067ca:	757b      	strb	r3, [r7, #21]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f04f 32ff 	mov.w	r2, #4294967295
 80067d2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80067d4:	2100      	movs	r1, #0
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fc6e 	bl	80060b8 <dir_next>
 80067dc:	4603      	mov	r3, r0
 80067de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f43f af65 	beq.w	80066b2 <dir_find+0x34>
 80067e8:	e004      	b.n	80067f4 <dir_find+0x176>
		if (res != FR_OK) break;
 80067ea:	bf00      	nop
 80067ec:	e002      	b.n	80067f4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80067f2:	bf00      	nop

	return res;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	@ 0x30
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006814:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <dir_register+0x20>
 800681c:	2306      	movs	r3, #6
 800681e:	e0e0      	b.n	80069e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006820:	2300      	movs	r3, #0
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
 8006824:	e002      	b.n	800682c <dir_register+0x2c>
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	3301      	adds	r3, #1
 800682a:	627b      	str	r3, [r7, #36]	@ 0x24
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f4      	bne.n	8006826 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006842:	f107 030c 	add.w	r3, r7, #12
 8006846:	220c      	movs	r2, #12
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fd9e 	bl	800538a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d032      	beq.n	80068be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2240      	movs	r2, #64	@ 0x40
 800685c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006860:	2301      	movs	r3, #1
 8006862:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006864:	e016      	b.n	8006894 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	f107 010c 	add.w	r1, r7, #12
 8006874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006876:	f7ff fe53 	bl	8006520 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff feff 	bl	800667e <dir_find>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006886:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	3301      	adds	r3, #1
 8006892:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	2b63      	cmp	r3, #99	@ 0x63
 8006898:	d9e5      	bls.n	8006866 <dir_register+0x66>
 800689a:	e000      	b.n	800689e <dir_register+0x9e>
			if (res != FR_OK) break;
 800689c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	2b64      	cmp	r3, #100	@ 0x64
 80068a2:	d101      	bne.n	80068a8 <dir_register+0xa8>
 80068a4:	2307      	movs	r3, #7
 80068a6:	e09c      	b.n	80069e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80068a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d002      	beq.n	80068b6 <dir_register+0xb6>
 80068b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068b4:	e095      	b.n	80069e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80068b6:	7dfa      	ldrb	r2, [r7, #23]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <dir_register+0xd8>
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	330c      	adds	r3, #12
 80068cc:	4a47      	ldr	r2, [pc, #284]	@ (80069ec <dir_register+0x1ec>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	3301      	adds	r3, #1
 80068d6:	e000      	b.n	80068da <dir_register+0xda>
 80068d8:	2301      	movs	r3, #1
 80068da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80068dc:	6a39      	ldr	r1, [r7, #32]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fcc0 	bl	8006264 <dir_alloc>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80068ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d148      	bne.n	8006984 <dir_register+0x184>
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d042      	beq.n	8006984 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	015b      	lsls	r3, r3, #5
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fb4b 	bl	8005fa6 <dir_sdi>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006916:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800691a:	2b00      	cmp	r3, #0
 800691c:	d132      	bne.n	8006984 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3324      	adds	r3, #36	@ 0x24
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fe8a 	bl	800663c <sum_sfn>
 8006928:	4603      	mov	r3, r0
 800692a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	4619      	mov	r1, r3
 8006932:	69f8      	ldr	r0, [r7, #28]
 8006934:	f7fe ff58 	bl	80057e8 <move_window>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800693e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11d      	bne.n	8006982 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	6918      	ldr	r0, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a19      	ldr	r1, [r3, #32]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	7efb      	ldrb	r3, [r7, #27]
 8006954:	f7ff fd7c 	bl	8006450 <put_lfn>
				fs->wflag = 1;
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2201      	movs	r2, #1
 800695c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800695e:	2100      	movs	r1, #0
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fba9 	bl	80060b8 <dir_next>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800696c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <dir_register+0x184>
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3b01      	subs	r3, #1
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1d5      	bne.n	800692c <dir_register+0x12c>
 8006980:	e000      	b.n	8006984 <dir_register+0x184>
				if (res != FR_OK) break;
 8006982:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006988:	2b00      	cmp	r3, #0
 800698a:	d128      	bne.n	80069de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	4619      	mov	r1, r3
 8006992:	69f8      	ldr	r0, [r7, #28]
 8006994:	f7fe ff28 	bl	80057e8 <move_window>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800699e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d11b      	bne.n	80069de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	2220      	movs	r2, #32
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fd0c 	bl	80053cc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a18      	ldr	r0, [r3, #32]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3324      	adds	r3, #36	@ 0x24
 80069bc:	220b      	movs	r2, #11
 80069be:	4619      	mov	r1, r3
 80069c0:	f7fe fce3 	bl	800538a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	330c      	adds	r3, #12
 80069d0:	f002 0218 	and.w	r2, r2, #24
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2201      	movs	r2, #1
 80069dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80069de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3730      	adds	r7, #48	@ 0x30
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	4ec4ec4f 	.word	0x4ec4ec4f

080069f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	@ 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	61ba      	str	r2, [r7, #24]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4413      	add	r3, r2
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006a1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a20:	2b1f      	cmp	r3, #31
 8006a22:	d940      	bls.n	8006aa6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006a24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a26:	2b2f      	cmp	r3, #47	@ 0x2f
 8006a28:	d006      	beq.n	8006a38 <create_name+0x48>
 8006a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a2c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a2e:	d110      	bne.n	8006a52 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006a30:	e002      	b.n	8006a38 <create_name+0x48>
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	3301      	adds	r3, #1
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b2f      	cmp	r3, #47	@ 0x2f
 8006a42:	d0f6      	beq.n	8006a32 <create_name+0x42>
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	4413      	add	r3, r2
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a4e:	d0f0      	beq.n	8006a32 <create_name+0x42>
			break;
 8006a50:	e02a      	b.n	8006aa8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a56:	d901      	bls.n	8006a5c <create_name+0x6c>
 8006a58:	2306      	movs	r3, #6
 8006a5a:	e17d      	b.n	8006d58 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006a5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006a62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a64:	2101      	movs	r1, #1
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f9f6 	bl	8007e58 <ff_convert>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006a70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <create_name+0x8a>
 8006a76:	2306      	movs	r3, #6
 8006a78:	e16e      	b.n	8006d58 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a7e:	d809      	bhi.n	8006a94 <create_name+0xa4>
 8006a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a82:	4619      	mov	r1, r3
 8006a84:	488d      	ldr	r0, [pc, #564]	@ (8006cbc <create_name+0x2cc>)
 8006a86:	f7fe fce3 	bl	8005450 <chk_chr>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <create_name+0xa4>
 8006a90:	2306      	movs	r3, #6
 8006a92:	e161      	b.n	8006d58 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	617a      	str	r2, [r7, #20]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006aa2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006aa4:	e7b4      	b.n	8006a10 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006aa6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	441a      	add	r2, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006ab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ab4:	2b1f      	cmp	r3, #31
 8006ab6:	d801      	bhi.n	8006abc <create_name+0xcc>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	e000      	b.n	8006abe <create_name+0xce>
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ac2:	e011      	b.n	8006ae8 <create_name+0xf8>
		w = lfn[di - 1];
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006aca:	3b01      	subs	r3, #1
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006ad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d002      	beq.n	8006ae2 <create_name+0xf2>
 8006adc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ade:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ae0:	d106      	bne.n	8006af0 <create_name+0x100>
		di--;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1ea      	bne.n	8006ac4 <create_name+0xd4>
 8006aee:	e000      	b.n	8006af2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006af0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <create_name+0x118>
 8006b04:	2306      	movs	r3, #6
 8006b06:	e127      	b.n	8006d58 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3324      	adds	r3, #36	@ 0x24
 8006b0c:	220b      	movs	r2, #11
 8006b0e:	2120      	movs	r1, #32
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fe fc5b 	bl	80053cc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e002      	b.n	8006b22 <create_name+0x132>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d0f5      	beq.n	8006b1c <create_name+0x12c>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b3c:	d0ee      	beq.n	8006b1c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <create_name+0x168>
 8006b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b48:	f043 0303 	orr.w	r3, r3, #3
 8006b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006b50:	e002      	b.n	8006b58 <create_name+0x168>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <create_name+0x182>
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006b64:	3b01      	subs	r3, #1
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b70:	d1ef      	bne.n	8006b52 <create_name+0x162>

	i = b = 0; ni = 8;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006b78:	2300      	movs	r3, #0
 8006b7a:	623b      	str	r3, [r7, #32]
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	61ba      	str	r2, [r7, #24]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006b90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8090 	beq.w	8006cb8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006b98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d006      	beq.n	8006bac <create_name+0x1bc>
 8006b9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ba2:	d10a      	bne.n	8006bba <create_name+0x1ca>
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d006      	beq.n	8006bba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bb0:	f043 0303 	orr.w	r3, r3, #3
 8006bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bb8:	e07d      	b.n	8006cb6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d203      	bcs.n	8006bca <create_name+0x1da>
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d123      	bne.n	8006c12 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	2b0b      	cmp	r3, #11
 8006bce:	d106      	bne.n	8006bde <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bd4:	f043 0303 	orr.w	r3, r3, #3
 8006bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bdc:	e075      	b.n	8006cca <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d005      	beq.n	8006bf2 <create_name+0x202>
 8006be6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bea:	f043 0303 	orr.w	r3, r3, #3
 8006bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d866      	bhi.n	8006cc8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	2308      	movs	r3, #8
 8006c00:	623b      	str	r3, [r7, #32]
 8006c02:	230b      	movs	r3, #11
 8006c04:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006c06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006c10:	e051      	b.n	8006cb6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006c12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c14:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c16:	d914      	bls.n	8006c42 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006c18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 f91b 	bl	8007e58 <ff_convert>
 8006c22:	4603      	mov	r3, r0
 8006c24:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006c26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <create_name+0x246>
 8006c2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c2e:	3b80      	subs	r3, #128	@ 0x80
 8006c30:	4a23      	ldr	r2, [pc, #140]	@ (8006cc0 <create_name+0x2d0>)
 8006c32:	5cd3      	ldrb	r3, [r2, r3]
 8006c34:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c3a:	f043 0302 	orr.w	r3, r3, #2
 8006c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006c42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <create_name+0x268>
 8006c48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	481d      	ldr	r0, [pc, #116]	@ (8006cc4 <create_name+0x2d4>)
 8006c4e:	f7fe fbff 	bl	8005450 <chk_chr>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006c58:	235f      	movs	r3, #95	@ 0x5f
 8006c5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c60:	f043 0303 	orr.w	r3, r3, #3
 8006c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c68:	e01b      	b.n	8006ca2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006c6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c6c:	2b40      	cmp	r3, #64	@ 0x40
 8006c6e:	d909      	bls.n	8006c84 <create_name+0x294>
 8006c70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c72:	2b5a      	cmp	r3, #90	@ 0x5a
 8006c74:	d806      	bhi.n	8006c84 <create_name+0x294>
					b |= 2;
 8006c76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c7a:	f043 0302 	orr.w	r3, r3, #2
 8006c7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006c82:	e00e      	b.n	8006ca2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006c84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c86:	2b60      	cmp	r3, #96	@ 0x60
 8006c88:	d90b      	bls.n	8006ca2 <create_name+0x2b2>
 8006c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c8c:	2b7a      	cmp	r3, #122	@ 0x7a
 8006c8e:	d808      	bhi.n	8006ca2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006c90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c9e:	3b20      	subs	r3, #32
 8006ca0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	623a      	str	r2, [r7, #32]
 8006ca8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006caa:	b2d1      	uxtb	r1, r2
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006cb6:	e763      	b.n	8006b80 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006cb8:	bf00      	nop
 8006cba:	e006      	b.n	8006cca <create_name+0x2da>
 8006cbc:	08008a50 	.word	0x08008a50
 8006cc0:	08078a9c 	.word	0x08078a9c
 8006cc4:	08008a5c 	.word	0x08008a5c
			if (si > di) break;			/* No extension */
 8006cc8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cd0:	2be5      	cmp	r3, #229	@ 0xe5
 8006cd2:	d103      	bne.n	8006cdc <create_name+0x2ec>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2205      	movs	r2, #5
 8006cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d104      	bne.n	8006cec <create_name+0x2fc>
 8006ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006cec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006cf0:	f003 030c 	and.w	r3, r3, #12
 8006cf4:	2b0c      	cmp	r3, #12
 8006cf6:	d005      	beq.n	8006d04 <create_name+0x314>
 8006cf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d105      	bne.n	8006d10 <create_name+0x320>
 8006d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d08:	f043 0302 	orr.w	r3, r3, #2
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d117      	bne.n	8006d4c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d105      	bne.n	8006d34 <create_name+0x344>
 8006d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d2c:	f043 0310 	orr.w	r3, r3, #16
 8006d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006d34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d38:	f003 030c 	and.w	r3, r3, #12
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d105      	bne.n	8006d4c <create_name+0x35c>
 8006d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d44:	f043 0308 	orr.w	r3, r3, #8
 8006d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006d52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006d56:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	@ 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d74:	e002      	b.n	8006d7c <follow_path+0x1c>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d82:	d0f8      	beq.n	8006d76 <follow_path+0x16>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d8a:	d0f4      	beq.n	8006d76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b1f      	cmp	r3, #31
 8006d98:	d80a      	bhi.n	8006db0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2280      	movs	r2, #128	@ 0x80
 8006d9e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006da2:	2100      	movs	r1, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff f8fe 	bl	8005fa6 <dir_sdi>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]
 8006dae:	e048      	b.n	8006e42 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006db0:	463b      	mov	r3, r7
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff fe1b 	bl	80069f0 <create_name>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d139      	bne.n	8006e38 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff fc5a 	bl	800667e <dir_find>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006dd4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d12c      	bne.n	8006e3c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d127      	bne.n	8006e3c <follow_path+0xdc>
 8006dec:	2305      	movs	r3, #5
 8006dee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006df0:	e024      	b.n	8006e3c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d121      	bne.n	8006e40 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	799b      	ldrb	r3, [r3, #6]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e08:	2305      	movs	r3, #5
 8006e0a:	75fb      	strb	r3, [r7, #23]
 8006e0c:	e019      	b.n	8006e42 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	8992      	ldrh	r2, [r2, #12]
 8006e1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e20:	fb00 f202 	mul.w	r2, r0, r2
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	440b      	add	r3, r1
 8006e28:	4619      	mov	r1, r3
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f7ff fa61 	bl	80062f2 <ld_clust>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e36:	e7bb      	b.n	8006db0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e38:	bf00      	nop
 8006e3a:	e002      	b.n	8006e42 <follow_path+0xe2>
				break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e40:	bf00      	nop
			}
		}
	}

	return res;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e54:	f04f 33ff 	mov.w	r3, #4294967295
 8006e58:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d031      	beq.n	8006ec6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e002      	b.n	8006e70 <get_ldnumber+0x24>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b1f      	cmp	r3, #31
 8006e76:	d903      	bls.n	8006e80 <get_ldnumber+0x34>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e7e:	d1f4      	bne.n	8006e6a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e86:	d11c      	bne.n	8006ec2 <get_ldnumber+0x76>
			tp = *path;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	60fa      	str	r2, [r7, #12]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	3b30      	subs	r3, #48	@ 0x30
 8006e98:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b09      	cmp	r3, #9
 8006e9e:	d80e      	bhi.n	8006ebe <get_ldnumber+0x72>
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d10a      	bne.n	8006ebe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d107      	bne.n	8006ebe <get_ldnumber+0x72>
					vol = (int)i;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	e002      	b.n	8006ec8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ec6:	693b      	ldr	r3, [r7, #16]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	70da      	strb	r2, [r3, #3]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eea:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fe fc7a 	bl	80057e8 <move_window>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <check_fs+0x2a>
 8006efa:	2304      	movs	r3, #4
 8006efc:	e038      	b.n	8006f70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3338      	adds	r3, #56	@ 0x38
 8006f02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe f9bc 	bl	8005284 <ld_word>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d001      	beq.n	8006f1c <check_fs+0x48>
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e029      	b.n	8006f70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f22:	2be9      	cmp	r3, #233	@ 0xe9
 8006f24:	d009      	beq.n	8006f3a <check_fs+0x66>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f2c:	2beb      	cmp	r3, #235	@ 0xeb
 8006f2e:	d11e      	bne.n	8006f6e <check_fs+0x9a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006f36:	2b90      	cmp	r3, #144	@ 0x90
 8006f38:	d119      	bne.n	8006f6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3338      	adds	r3, #56	@ 0x38
 8006f3e:	3336      	adds	r3, #54	@ 0x36
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe f9b8 	bl	80052b6 <ld_dword>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f78 <check_fs+0xa4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d101      	bne.n	8006f56 <check_fs+0x82>
 8006f52:	2300      	movs	r3, #0
 8006f54:	e00c      	b.n	8006f70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3338      	adds	r3, #56	@ 0x38
 8006f5a:	3352      	adds	r3, #82	@ 0x52
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe f9aa 	bl	80052b6 <ld_dword>
 8006f62:	4603      	mov	r3, r0
 8006f64:	4a05      	ldr	r2, [pc, #20]	@ (8006f7c <check_fs+0xa8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d101      	bne.n	8006f6e <check_fs+0x9a>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e000      	b.n	8006f70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f6e:	2302      	movs	r3, #2
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	00544146 	.word	0x00544146
 8006f7c:	33544146 	.word	0x33544146

08006f80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b096      	sub	sp, #88	@ 0x58
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff ff59 	bl	8006e4c <get_ldnumber>
 8006f9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da01      	bge.n	8006fa6 <find_volume+0x26>
 8006fa2:	230b      	movs	r3, #11
 8006fa4:	e265      	b.n	8007472 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fa6:	4a9f      	ldr	r2, [pc, #636]	@ (8007224 <find_volume+0x2a4>)
 8006fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <find_volume+0x3a>
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	e25b      	b.n	8007472 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01a      	beq.n	8007006 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe f8b5 	bl	8005144 <disk_status>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <find_volume+0x82>
 8006ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006ffe:	230a      	movs	r3, #10
 8007000:	e237      	b.n	8007472 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007002:	2300      	movs	r3, #0
 8007004:	e235      	b.n	8007472 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800700c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800700e:	b2da      	uxtb	r2, r3
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe f8ad 	bl	8005178 <disk_initialize>
 800701e:	4603      	mov	r3, r0
 8007020:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007024:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007030:	2303      	movs	r3, #3
 8007032:	e21e      	b.n	8007472 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <find_volume+0xca>
 800703a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007046:	230a      	movs	r3, #10
 8007048:	e213      	b.n	8007472 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	7858      	ldrb	r0, [r3, #1]
 800704e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007050:	330c      	adds	r3, #12
 8007052:	461a      	mov	r2, r3
 8007054:	2102      	movs	r1, #2
 8007056:	f7fe f8f7 	bl	8005248 <disk_ioctl>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <find_volume+0xe4>
 8007060:	2301      	movs	r3, #1
 8007062:	e206      	b.n	8007472 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007066:	899b      	ldrh	r3, [r3, #12]
 8007068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800706c:	d80d      	bhi.n	800708a <find_volume+0x10a>
 800706e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007070:	899b      	ldrh	r3, [r3, #12]
 8007072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007076:	d308      	bcc.n	800708a <find_volume+0x10a>
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	899b      	ldrh	r3, [r3, #12]
 800707c:	461a      	mov	r2, r3
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	899b      	ldrh	r3, [r3, #12]
 8007082:	3b01      	subs	r3, #1
 8007084:	4013      	ands	r3, r2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <find_volume+0x10e>
 800708a:	2301      	movs	r3, #1
 800708c:	e1f1      	b.n	8007472 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007092:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007094:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007096:	f7ff ff1d 	bl	8006ed4 <check_fs>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80070a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d149      	bne.n	800713c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070a8:	2300      	movs	r3, #0
 80070aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80070ac:	e01e      	b.n	80070ec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80070b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80070bc:	4413      	add	r3, r2
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	3304      	adds	r3, #4
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <find_volume+0x158>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	3308      	adds	r3, #8
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe f8f1 	bl	80052b6 <ld_dword>
 80070d4:	4602      	mov	r2, r0
 80070d6:	e000      	b.n	80070da <find_volume+0x15a>
 80070d8:	2200      	movs	r2, #0
 80070da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	3358      	adds	r3, #88	@ 0x58
 80070e0:	443b      	add	r3, r7
 80070e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070e8:	3301      	adds	r3, #1
 80070ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80070ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d9dd      	bls.n	80070ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070f2:	2300      	movs	r3, #0
 80070f4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80070f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <find_volume+0x182>
 80070fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070fe:	3b01      	subs	r3, #1
 8007100:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	3358      	adds	r3, #88	@ 0x58
 8007108:	443b      	add	r3, r7
 800710a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800710e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <find_volume+0x1a2>
 8007116:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007118:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800711a:	f7ff fedb 	bl	8006ed4 <check_fs>
 800711e:	4603      	mov	r3, r0
 8007120:	e000      	b.n	8007124 <find_volume+0x1a4>
 8007122:	2303      	movs	r3, #3
 8007124:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007128:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800712c:	2b01      	cmp	r3, #1
 800712e:	d905      	bls.n	800713c <find_volume+0x1bc>
 8007130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007132:	3301      	adds	r3, #1
 8007134:	643b      	str	r3, [r7, #64]	@ 0x40
 8007136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007138:	2b03      	cmp	r3, #3
 800713a:	d9e2      	bls.n	8007102 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800713c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007140:	2b04      	cmp	r3, #4
 8007142:	d101      	bne.n	8007148 <find_volume+0x1c8>
 8007144:	2301      	movs	r3, #1
 8007146:	e194      	b.n	8007472 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007148:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800714c:	2b01      	cmp	r3, #1
 800714e:	d901      	bls.n	8007154 <find_volume+0x1d4>
 8007150:	230d      	movs	r3, #13
 8007152:	e18e      	b.n	8007472 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	3338      	adds	r3, #56	@ 0x38
 8007158:	330b      	adds	r3, #11
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe f892 	bl	8005284 <ld_word>
 8007160:	4603      	mov	r3, r0
 8007162:	461a      	mov	r2, r3
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	899b      	ldrh	r3, [r3, #12]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <find_volume+0x1f0>
 800716c:	230d      	movs	r3, #13
 800716e:	e180      	b.n	8007472 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007172:	3338      	adds	r3, #56	@ 0x38
 8007174:	3316      	adds	r3, #22
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe f884 	bl	8005284 <ld_word>
 800717c:	4603      	mov	r3, r0
 800717e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <find_volume+0x214>
 8007186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007188:	3338      	adds	r3, #56	@ 0x38
 800718a:	3324      	adds	r3, #36	@ 0x24
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe f892 	bl	80052b6 <ld_dword>
 8007192:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007196:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007198:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800719a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80071a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	789b      	ldrb	r3, [r3, #2]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d005      	beq.n	80071b8 <find_volume+0x238>
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	789b      	ldrb	r3, [r3, #2]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d001      	beq.n	80071b8 <find_volume+0x238>
 80071b4:	230d      	movs	r3, #13
 80071b6:	e15c      	b.n	8007472 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	789b      	ldrb	r3, [r3, #2]
 80071bc:	461a      	mov	r2, r3
 80071be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071cc:	461a      	mov	r2, r3
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80071d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d4:	895b      	ldrh	r3, [r3, #10]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d008      	beq.n	80071ec <find_volume+0x26c>
 80071da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071dc:	895b      	ldrh	r3, [r3, #10]
 80071de:	461a      	mov	r2, r3
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	895b      	ldrh	r3, [r3, #10]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <find_volume+0x270>
 80071ec:	230d      	movs	r3, #13
 80071ee:	e140      	b.n	8007472 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	3338      	adds	r3, #56	@ 0x38
 80071f4:	3311      	adds	r3, #17
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe f844 	bl	8005284 <ld_word>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007202:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	891b      	ldrh	r3, [r3, #8]
 8007208:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800720a:	8992      	ldrh	r2, [r2, #12]
 800720c:	0952      	lsrs	r2, r2, #5
 800720e:	b292      	uxth	r2, r2
 8007210:	fbb3 f1f2 	udiv	r1, r3, r2
 8007214:	fb01 f202 	mul.w	r2, r1, r2
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <find_volume+0x2a8>
 8007220:	230d      	movs	r3, #13
 8007222:	e126      	b.n	8007472 <find_volume+0x4f2>
 8007224:	20003c8c 	.word	0x20003c8c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722a:	3338      	adds	r3, #56	@ 0x38
 800722c:	3313      	adds	r3, #19
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe f828 	bl	8005284 <ld_word>
 8007234:	4603      	mov	r3, r0
 8007236:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <find_volume+0x2cc>
 800723e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007240:	3338      	adds	r3, #56	@ 0x38
 8007242:	3320      	adds	r3, #32
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe f836 	bl	80052b6 <ld_dword>
 800724a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724e:	3338      	adds	r3, #56	@ 0x38
 8007250:	330e      	adds	r3, #14
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe f816 	bl	8005284 <ld_word>
 8007258:	4603      	mov	r3, r0
 800725a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800725c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <find_volume+0x2e6>
 8007262:	230d      	movs	r3, #13
 8007264:	e105      	b.n	8007472 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007266:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800726a:	4413      	add	r3, r2
 800726c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800726e:	8911      	ldrh	r1, [r2, #8]
 8007270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007272:	8992      	ldrh	r2, [r2, #12]
 8007274:	0952      	lsrs	r2, r2, #5
 8007276:	b292      	uxth	r2, r2
 8007278:	fbb1 f2f2 	udiv	r2, r1, r2
 800727c:	b292      	uxth	r2, r2
 800727e:	4413      	add	r3, r2
 8007280:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	429a      	cmp	r2, r3
 8007288:	d201      	bcs.n	800728e <find_volume+0x30e>
 800728a:	230d      	movs	r3, #13
 800728c:	e0f1      	b.n	8007472 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800728e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007296:	8952      	ldrh	r2, [r2, #10]
 8007298:	fbb3 f3f2 	udiv	r3, r3, r2
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <find_volume+0x328>
 80072a4:	230d      	movs	r3, #13
 80072a6:	e0e4      	b.n	8007472 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80072a8:	2303      	movs	r3, #3
 80072aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d802      	bhi.n	80072be <find_volume+0x33e>
 80072b8:	2302      	movs	r3, #2
 80072ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d802      	bhi.n	80072ce <find_volume+0x34e>
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	1c9a      	adds	r2, r3, #2
 80072d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072da:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80072de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e0:	441a      	add	r2, r3
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80072e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	441a      	add	r2, r3
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80072f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d11e      	bne.n	8007336 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	3338      	adds	r3, #56	@ 0x38
 80072fc:	332a      	adds	r3, #42	@ 0x2a
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fd ffc0 	bl	8005284 <ld_word>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <find_volume+0x38e>
 800730a:	230d      	movs	r3, #13
 800730c:	e0b1      	b.n	8007472 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800730e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007310:	891b      	ldrh	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <find_volume+0x39a>
 8007316:	230d      	movs	r3, #13
 8007318:	e0ab      	b.n	8007472 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	3338      	adds	r3, #56	@ 0x38
 800731e:	332c      	adds	r3, #44	@ 0x2c
 8007320:	4618      	mov	r0, r3
 8007322:	f7fd ffc8 	bl	80052b6 <ld_dword>
 8007326:	4602      	mov	r2, r0
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	647b      	str	r3, [r7, #68]	@ 0x44
 8007334:	e01f      	b.n	8007376 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	891b      	ldrh	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <find_volume+0x3c2>
 800733e:	230d      	movs	r3, #13
 8007340:	e097      	b.n	8007472 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007348:	441a      	add	r2, r3
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800734e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007352:	2b02      	cmp	r3, #2
 8007354:	d103      	bne.n	800735e <find_volume+0x3de>
 8007356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	e00a      	b.n	8007374 <find_volume+0x3f4>
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	69da      	ldr	r2, [r3, #28]
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	085a      	lsrs	r2, r3, #1
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007374:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007378:	6a1a      	ldr	r2, [r3, #32]
 800737a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737c:	899b      	ldrh	r3, [r3, #12]
 800737e:	4619      	mov	r1, r3
 8007380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007382:	440b      	add	r3, r1
 8007384:	3b01      	subs	r3, #1
 8007386:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007388:	8989      	ldrh	r1, [r1, #12]
 800738a:	fbb3 f3f1 	udiv	r3, r3, r1
 800738e:	429a      	cmp	r2, r3
 8007390:	d201      	bcs.n	8007396 <find_volume+0x416>
 8007392:	230d      	movs	r3, #13
 8007394:	e06d      	b.n	8007472 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007398:	f04f 32ff 	mov.w	r2, #4294967295
 800739c:	619a      	str	r2, [r3, #24]
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a8:	2280      	movs	r2, #128	@ 0x80
 80073aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80073ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d149      	bne.n	8007448 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	3338      	adds	r3, #56	@ 0x38
 80073b8:	3330      	adds	r3, #48	@ 0x30
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fd ff62 	bl	8005284 <ld_word>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d140      	bne.n	8007448 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80073c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c8:	3301      	adds	r3, #1
 80073ca:	4619      	mov	r1, r3
 80073cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073ce:	f7fe fa0b 	bl	80057e8 <move_window>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d137      	bne.n	8007448 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	2200      	movs	r2, #0
 80073dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	3338      	adds	r3, #56	@ 0x38
 80073e2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fd ff4c 	bl	8005284 <ld_word>
 80073ec:	4603      	mov	r3, r0
 80073ee:	461a      	mov	r2, r3
 80073f0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d127      	bne.n	8007448 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80073f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fa:	3338      	adds	r3, #56	@ 0x38
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fd ff5a 	bl	80052b6 <ld_dword>
 8007402:	4603      	mov	r3, r0
 8007404:	4a1d      	ldr	r2, [pc, #116]	@ (800747c <find_volume+0x4fc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d11e      	bne.n	8007448 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	3338      	adds	r3, #56	@ 0x38
 800740e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007412:	4618      	mov	r0, r3
 8007414:	f7fd ff4f 	bl	80052b6 <ld_dword>
 8007418:	4603      	mov	r3, r0
 800741a:	4a19      	ldr	r2, [pc, #100]	@ (8007480 <find_volume+0x500>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d113      	bne.n	8007448 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	3338      	adds	r3, #56	@ 0x38
 8007424:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007428:	4618      	mov	r0, r3
 800742a:	f7fd ff44 	bl	80052b6 <ld_dword>
 800742e:	4602      	mov	r2, r0
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	3338      	adds	r3, #56	@ 0x38
 8007438:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800743c:	4618      	mov	r0, r3
 800743e:	f7fd ff3a 	bl	80052b6 <ld_dword>
 8007442:	4602      	mov	r2, r0
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800744e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007450:	4b0c      	ldr	r3, [pc, #48]	@ (8007484 <find_volume+0x504>)
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <find_volume+0x504>)
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	4b09      	ldr	r3, [pc, #36]	@ (8007484 <find_volume+0x504>)
 800745e:	881a      	ldrh	r2, [r3, #0]
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	4a08      	ldr	r2, [pc, #32]	@ (8007488 <find_volume+0x508>)
 8007468:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800746a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800746c:	f7fe f954 	bl	8005718 <clear_lock>
#endif
	return FR_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3758      	adds	r7, #88	@ 0x58
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	41615252 	.word	0x41615252
 8007480:	61417272 	.word	0x61417272
 8007484:	20003c90 	.word	0x20003c90
 8007488:	20003cb4 	.word	0x20003cb4

0800748c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007496:	2309      	movs	r3, #9
 8007498:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01c      	beq.n	80074da <validate+0x4e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d018      	beq.n	80074da <validate+0x4e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d013      	beq.n	80074da <validate+0x4e>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	889a      	ldrh	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	88db      	ldrh	r3, [r3, #6]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d10c      	bne.n	80074da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd fe3c 	bl	8005144 <disk_status>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <validate+0x4e>
			res = FR_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <validate+0x5a>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	e000      	b.n	80074e8 <validate+0x5c>
 80074e6:	2300      	movs	r3, #0
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	6013      	str	r3, [r2, #0]
	return res;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4613      	mov	r3, r2
 8007504:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800750a:	f107 0310 	add.w	r3, r7, #16
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fc9c 	bl	8006e4c <get_ldnumber>
 8007514:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da01      	bge.n	8007520 <f_mount+0x28>
 800751c:	230b      	movs	r3, #11
 800751e:	e02b      	b.n	8007578 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007520:	4a17      	ldr	r2, [pc, #92]	@ (8007580 <f_mount+0x88>)
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007528:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007530:	69b8      	ldr	r0, [r7, #24]
 8007532:	f7fe f8f1 	bl	8005718 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2200      	movs	r2, #0
 800753a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	490d      	ldr	r1, [pc, #52]	@ (8007580 <f_mount+0x88>)
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <f_mount+0x66>
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d001      	beq.n	8007562 <f_mount+0x6a>
 800755e:	2300      	movs	r3, #0
 8007560:	e00a      	b.n	8007578 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007562:	f107 010c 	add.w	r1, r7, #12
 8007566:	f107 0308 	add.w	r3, r7, #8
 800756a:	2200      	movs	r2, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fd07 	bl	8006f80 <find_volume>
 8007572:	4603      	mov	r3, r0
 8007574:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007576:	7dfb      	ldrb	r3, [r7, #23]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3720      	adds	r7, #32
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20003c8c 	.word	0x20003c8c

08007584 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b09a      	sub	sp, #104	@ 0x68
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <f_open+0x18>
 8007598:	2309      	movs	r3, #9
 800759a:	e1b7      	b.n	800790c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80075a4:	79fa      	ldrb	r2, [r7, #7]
 80075a6:	f107 0114 	add.w	r1, r7, #20
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fce6 	bl	8006f80 <find_volume>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80075ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f040 819b 	bne.w	80078fa <f_open+0x376>
		dj.obj.fs = fs;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	f107 0318 	add.w	r3, r7, #24
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fbc5 	bl	8006d60 <follow_path>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d118      	bne.n	8007616 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80075e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da03      	bge.n	80075f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80075ee:	2306      	movs	r3, #6
 80075f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80075f4:	e00f      	b.n	8007616 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	bf8c      	ite	hi
 80075fc:	2301      	movhi	r3, #1
 80075fe:	2300      	movls	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	f107 0318 	add.w	r3, r7, #24
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd ff3c 	bl	8005488 <chk_lock>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	f003 031c 	and.w	r3, r3, #28
 800761c:	2b00      	cmp	r3, #0
 800761e:	d07f      	beq.n	8007720 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007620:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007624:	2b00      	cmp	r3, #0
 8007626:	d017      	beq.n	8007658 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007628:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800762c:	2b04      	cmp	r3, #4
 800762e:	d10e      	bne.n	800764e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007630:	f7fd ff86 	bl	8005540 <enq_lock>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d006      	beq.n	8007648 <f_open+0xc4>
 800763a:	f107 0318 	add.w	r3, r7, #24
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff f8de 	bl	8006800 <dir_register>
 8007644:	4603      	mov	r3, r0
 8007646:	e000      	b.n	800764a <f_open+0xc6>
 8007648:	2312      	movs	r3, #18
 800764a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	f043 0308 	orr.w	r3, r3, #8
 8007654:	71fb      	strb	r3, [r7, #7]
 8007656:	e010      	b.n	800767a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007658:	7fbb      	ldrb	r3, [r7, #30]
 800765a:	f003 0311 	and.w	r3, r3, #17
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <f_open+0xe6>
					res = FR_DENIED;
 8007662:	2307      	movs	r3, #7
 8007664:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007668:	e007      	b.n	800767a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800766a:	79fb      	ldrb	r3, [r7, #7]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <f_open+0xf6>
 8007674:	2308      	movs	r3, #8
 8007676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800767a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800767e:	2b00      	cmp	r3, #0
 8007680:	d168      	bne.n	8007754 <f_open+0x1d0>
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d063      	beq.n	8007754 <f_open+0x1d0>
				dw = GET_FATTIME();
 800768c:	f7fd fcfa 	bl	8005084 <get_fattime>
 8007690:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	330e      	adds	r3, #14
 8007696:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007698:	4618      	mov	r0, r3
 800769a:	f7fd fe4a 	bl	8005332 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	3316      	adds	r3, #22
 80076a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fd fe44 	bl	8005332 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80076aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ac:	330b      	adds	r3, #11
 80076ae:	2220      	movs	r2, #32
 80076b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe fe1a 	bl	80062f2 <ld_clust>
 80076be:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80076c4:	2200      	movs	r2, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fe32 	bl	8006330 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	331c      	adds	r3, #28
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd fe2d 	bl	8005332 <st_dword>
					fs->wflag = 1;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2201      	movs	r2, #1
 80076dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80076de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d037      	beq.n	8007754 <f_open+0x1d0>
						dw = fs->winsect;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80076ea:	f107 0318 	add.w	r3, r7, #24
 80076ee:	2200      	movs	r2, #0
 80076f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fb22 	bl	8005d3c <remove_chain>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80076fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007702:	2b00      	cmp	r3, #0
 8007704:	d126      	bne.n	8007754 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe f86c 	bl	80057e8 <move_window>
 8007710:	4603      	mov	r3, r0
 8007712:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800771a:	3a01      	subs	r2, #1
 800771c:	615a      	str	r2, [r3, #20]
 800771e:	e019      	b.n	8007754 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007720:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007724:	2b00      	cmp	r3, #0
 8007726:	d115      	bne.n	8007754 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007728:	7fbb      	ldrb	r3, [r7, #30]
 800772a:	f003 0310 	and.w	r3, r3, #16
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007732:	2304      	movs	r3, #4
 8007734:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007738:	e00c      	b.n	8007754 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d007      	beq.n	8007754 <f_open+0x1d0>
 8007744:	7fbb      	ldrb	r3, [r7, #30]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <f_open+0x1d0>
						res = FR_DENIED;
 800774e:	2307      	movs	r3, #7
 8007750:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007754:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007758:	2b00      	cmp	r3, #0
 800775a:	d126      	bne.n	80077aa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007766:	79fb      	ldrb	r3, [r7, #7]
 8007768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	2b01      	cmp	r3, #1
 8007780:	bf8c      	ite	hi
 8007782:	2301      	movhi	r3, #1
 8007784:	2300      	movls	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	f107 0318 	add.w	r3, r7, #24
 800778e:	4611      	mov	r1, r2
 8007790:	4618      	mov	r0, r3
 8007792:	f7fd fef7 	bl	8005584 <inc_lock>
 8007796:	4602      	mov	r2, r0
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <f_open+0x226>
 80077a4:	2302      	movs	r3, #2
 80077a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80077aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f040 80a3 	bne.w	80078fa <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fd99 	bl	80062f2 <ld_clust>
 80077c0:	4602      	mov	r2, r0
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	331c      	adds	r3, #28
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd fd73 	bl	80052b6 <ld_dword>
 80077d0:	4602      	mov	r2, r0
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	88da      	ldrh	r2, [r3, #6]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	79fa      	ldrb	r2, [r7, #7]
 80077ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3330      	adds	r3, #48	@ 0x30
 8007806:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f7fd fddd 	bl	80053cc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d06e      	beq.n	80078fa <f_open+0x376>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d06a      	beq.n	80078fa <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	895b      	ldrh	r3, [r3, #10]
 8007830:	461a      	mov	r2, r3
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	899b      	ldrh	r3, [r3, #12]
 8007836:	fb02 f303 	mul.w	r3, r2, r3
 800783a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007848:	e016      	b.n	8007878 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe f887 	bl	8005962 <get_fat>
 8007854:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007858:	2b01      	cmp	r3, #1
 800785a:	d802      	bhi.n	8007862 <f_open+0x2de>
 800785c:	2302      	movs	r3, #2
 800785e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d102      	bne.n	8007870 <f_open+0x2ec>
 800786a:	2301      	movs	r3, #1
 800786c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007870:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007878:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800787c:	2b00      	cmp	r3, #0
 800787e:	d103      	bne.n	8007888 <f_open+0x304>
 8007880:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007884:	429a      	cmp	r2, r3
 8007886:	d8e0      	bhi.n	800784a <f_open+0x2c6>
				}
				fp->clust = clst;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800788c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800788e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007892:	2b00      	cmp	r3, #0
 8007894:	d131      	bne.n	80078fa <f_open+0x376>
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	899b      	ldrh	r3, [r3, #12]
 800789a:	461a      	mov	r2, r3
 800789c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800789e:	fbb3 f1f2 	udiv	r1, r3, r2
 80078a2:	fb01 f202 	mul.w	r2, r1, r2
 80078a6:	1a9b      	subs	r3, r3, r2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d026      	beq.n	80078fa <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe f837 	bl	8005924 <clust2sect>
 80078b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80078b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <f_open+0x342>
						res = FR_INT_ERR;
 80078be:	2302      	movs	r3, #2
 80078c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80078c4:	e019      	b.n	80078fa <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	899b      	ldrh	r3, [r3, #12]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80078d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d4:	441a      	add	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	7858      	ldrb	r0, [r3, #1]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a1a      	ldr	r2, [r3, #32]
 80078e8:	2301      	movs	r3, #1
 80078ea:	f7fd fc6d 	bl	80051c8 <disk_read>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <f_open+0x376>
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80078fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <f_open+0x384>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007908:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800790c:	4618      	mov	r0, r3
 800790e:	3768      	adds	r7, #104	@ 0x68
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08e      	sub	sp, #56	@ 0x38
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f107 0214 	add.w	r2, r7, #20
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fda9 	bl	800748c <validate>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007940:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007944:	2b00      	cmp	r3, #0
 8007946:	d107      	bne.n	8007958 <f_read+0x44>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	7d5b      	ldrb	r3, [r3, #21]
 800794c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <f_read+0x4a>
 8007958:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800795c:	e135      	b.n	8007bca <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	7d1b      	ldrb	r3, [r3, #20]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <f_read+0x5a>
 800796a:	2307      	movs	r3, #7
 800796c:	e12d      	b.n	8007bca <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	429a      	cmp	r2, r3
 8007980:	f240 811e 	bls.w	8007bc0 <f_read+0x2ac>
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007988:	e11a      	b.n	8007bc0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	8992      	ldrh	r2, [r2, #12]
 8007992:	fbb3 f1f2 	udiv	r1, r3, r2
 8007996:	fb01 f202 	mul.w	r2, r1, r2
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 80d5 	bne.w	8007b4c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	8992      	ldrh	r2, [r2, #12]
 80079aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	8952      	ldrh	r2, [r2, #10]
 80079b2:	3a01      	subs	r2, #1
 80079b4:	4013      	ands	r3, r2
 80079b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d12f      	bne.n	8007a1e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80079cc:	e013      	b.n	80079f6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d007      	beq.n	80079e6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7fe faaa 	bl	8005f36 <clmt_clust>
 80079e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80079e4:	e007      	b.n	80079f6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f7fd ffb7 	bl	8005962 <get_fat>
 80079f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d804      	bhi.n	8007a06 <f_read+0xf2>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2202      	movs	r2, #2
 8007a00:	755a      	strb	r2, [r3, #21]
 8007a02:	2302      	movs	r3, #2
 8007a04:	e0e1      	b.n	8007bca <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0c:	d104      	bne.n	8007a18 <f_read+0x104>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	755a      	strb	r2, [r3, #21]
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0d8      	b.n	8007bca <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a1c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f7fd ff7c 	bl	8005924 <clust2sect>
 8007a2c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <f_read+0x12a>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2202      	movs	r2, #2
 8007a38:	755a      	strb	r2, [r3, #21]
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e0c5      	b.n	8007bca <f_read+0x2b6>
			sect += csect;
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	4413      	add	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	899b      	ldrh	r3, [r3, #12]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a52:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d041      	beq.n	8007ade <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	4413      	add	r3, r2
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	8952      	ldrh	r2, [r2, #10]
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d905      	bls.n	8007a74 <f_read+0x160>
					cc = fs->csize - csect;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	895b      	ldrh	r3, [r3, #10]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	7858      	ldrb	r0, [r3, #1]
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a7e:	f7fd fba3 	bl	80051c8 <disk_read>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <f_read+0x17e>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	755a      	strb	r2, [r3, #21]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e09b      	b.n	8007bca <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	7d1b      	ldrb	r3, [r3, #20]
 8007a96:	b25b      	sxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	da18      	bge.n	8007ace <f_read+0x1ba>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a1a      	ldr	r2, [r3, #32]
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d911      	bls.n	8007ace <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a1a      	ldr	r2, [r3, #32]
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	8992      	ldrh	r2, [r2, #12]
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007abc:	18d0      	adds	r0, r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	899b      	ldrh	r3, [r3, #12]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f7fd fc5e 	bl	800538a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	899b      	ldrh	r3, [r3, #12]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
 8007ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007adc:	e05c      	b.n	8007b98 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d02e      	beq.n	8007b46 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	7d1b      	ldrb	r3, [r3, #20]
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da18      	bge.n	8007b24 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	7858      	ldrb	r0, [r3, #1]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1a      	ldr	r2, [r3, #32]
 8007b00:	2301      	movs	r3, #1
 8007b02:	f7fd fb81 	bl	8005208 <disk_write>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d004      	beq.n	8007b16 <f_read+0x202>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	755a      	strb	r2, [r3, #21]
 8007b12:	2301      	movs	r3, #1
 8007b14:	e059      	b.n	8007bca <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	7d1b      	ldrb	r3, [r3, #20]
 8007b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	7858      	ldrb	r0, [r3, #1]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b2e:	2301      	movs	r3, #1
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	f7fd fb49 	bl	80051c8 <disk_read>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <f_read+0x232>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	755a      	strb	r2, [r3, #21]
 8007b42:	2301      	movs	r3, #1
 8007b44:	e041      	b.n	8007bca <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	899b      	ldrh	r3, [r3, #12]
 8007b50:	4618      	mov	r0, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	8992      	ldrh	r2, [r2, #12]
 8007b5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b5e:	fb01 f202 	mul.w	r2, r1, r2
 8007b62:	1a9b      	subs	r3, r3, r2
 8007b64:	1ac3      	subs	r3, r0, r3
 8007b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d901      	bls.n	8007b74 <f_read+0x260>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	8992      	ldrh	r2, [r2, #12]
 8007b82:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b86:	fb00 f202 	mul.w	r2, r0, r2
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b90:	4619      	mov	r1, r3
 8007b92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b94:	f7fd fbf9 	bl	800538a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9c:	4413      	add	r3, r2
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	699a      	ldr	r2, [r3, #24]
 8007ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba6:	441a      	add	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	619a      	str	r2, [r3, #24]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	441a      	add	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f47f aee1 	bne.w	800798a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3738      	adds	r7, #56	@ 0x38
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b086      	sub	sp, #24
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f107 0208 	add.w	r2, r7, #8
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff fc52 	bl	800748c <validate>
 8007be8:	4603      	mov	r3, r0
 8007bea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d168      	bne.n	8007cc4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7d1b      	ldrb	r3, [r3, #20]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d062      	beq.n	8007cc4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7d1b      	ldrb	r3, [r3, #20]
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da15      	bge.n	8007c34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	7858      	ldrb	r0, [r3, #1]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	2301      	movs	r3, #1
 8007c18:	f7fd faf6 	bl	8005208 <disk_write>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <f_sync+0x54>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e04f      	b.n	8007cc6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	7d1b      	ldrb	r3, [r3, #20]
 8007c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c34:	f7fd fa26 	bl	8005084 <get_fattime>
 8007c38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f7fd fdd0 	bl	80057e8 <move_window>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d138      	bne.n	8007cc4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	330b      	adds	r3, #11
 8007c5c:	781a      	ldrb	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	330b      	adds	r3, #11
 8007c62:	f042 0220 	orr.w	r2, r2, #32
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68f9      	ldr	r1, [r7, #12]
 8007c76:	f7fe fb5b 	bl	8006330 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f103 021c 	add.w	r2, r3, #28
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	4619      	mov	r1, r3
 8007c86:	4610      	mov	r0, r2
 8007c88:	f7fd fb53 	bl	8005332 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3316      	adds	r3, #22
 8007c90:	6939      	ldr	r1, [r7, #16]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fd fb4d 	bl	8005332 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3312      	adds	r3, #18
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fd fb2c 	bl	80052fc <st_word>
					fs->wflag = 1;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd fdc9 	bl	8005844 <sync_fs>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7d1b      	ldrb	r3, [r3, #20]
 8007cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff ff7b 	bl	8007bd2 <f_sync>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d118      	bne.n	8007d18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f107 0208 	add.w	r2, r7, #8
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fbcc 	bl	800748c <validate>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10c      	bne.n	8007d18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fd fccc 	bl	80056a0 <dec_lock>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b088      	sub	sp, #32
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007d36:	e01c      	b.n	8007d72 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007d38:	f107 0310 	add.w	r3, r7, #16
 8007d3c:	f107 0114 	add.w	r1, r7, #20
 8007d40:	2201      	movs	r2, #1
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff fde6 	bl	8007914 <f_read>
		if (rc != 1) break;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d117      	bne.n	8007d7e <f_gets+0x5c>
		c = s[0];
 8007d4e:	7d3b      	ldrb	r3, [r7, #20]
 8007d50:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	2b0d      	cmp	r3, #13
 8007d56:	d00b      	beq.n	8007d70 <f_gets+0x4e>
		*p++ = c;
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	61ba      	str	r2, [r7, #24]
 8007d5e:	7dfa      	ldrb	r2, [r7, #23]
 8007d60:	701a      	strb	r2, [r3, #0]
		n++;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3301      	adds	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	2b0a      	cmp	r3, #10
 8007d6c:	d009      	beq.n	8007d82 <f_gets+0x60>
 8007d6e:	e000      	b.n	8007d72 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007d70:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	dbdd      	blt.n	8007d38 <f_gets+0x16>
 8007d7c:	e002      	b.n	8007d84 <f_gets+0x62>
		if (rc != 1) break;
 8007d7e:	bf00      	nop
 8007d80:	e000      	b.n	8007d84 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007d82:	bf00      	nop
	}
	*p = 0;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <f_gets+0x72>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	e000      	b.n	8007d96 <f_gets+0x74>
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
	...

08007da0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007dae:	2301      	movs	r3, #1
 8007db0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007db6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007db8:	7a5b      	ldrb	r3, [r3, #9]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d131      	bne.n	8007e24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007dc2:	7a5b      	ldrb	r3, [r3, #9]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007dca:	2100      	movs	r1, #0
 8007dcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007dce:	4b19      	ldr	r3, [pc, #100]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007dd0:	7a5b      	ldrb	r3, [r3, #9]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	4a17      	ldr	r2, [pc, #92]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007dde:	4b15      	ldr	r3, [pc, #84]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007de0:	7a5b      	ldrb	r3, [r3, #9]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007de8:	4413      	add	r3, r2
 8007dea:	79fa      	ldrb	r2, [r7, #7]
 8007dec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007dee:	4b11      	ldr	r3, [pc, #68]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007df0:	7a5b      	ldrb	r3, [r3, #9]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	b2d1      	uxtb	r1, r2
 8007df8:	4a0e      	ldr	r2, [pc, #56]	@ (8007e34 <FATFS_LinkDriverEx+0x94>)
 8007dfa:	7251      	strb	r1, [r2, #9]
 8007dfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007dfe:	7dbb      	ldrb	r3, [r7, #22]
 8007e00:	3330      	adds	r3, #48	@ 0x30
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	223a      	movs	r2, #58	@ 0x3a
 8007e0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	3302      	adds	r3, #2
 8007e14:	222f      	movs	r2, #47	@ 0x2f
 8007e16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	3303      	adds	r3, #3
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20003eb4 	.word	0x20003eb4

08007e38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff ffaa 	bl	8007da0 <FATFS_LinkDriverEx>
 8007e4c:	4603      	mov	r3, r0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e68:	d802      	bhi.n	8007e70 <ff_convert+0x18>
		c = chr;
 8007e6a:	88fb      	ldrh	r3, [r7, #6]
 8007e6c:	81fb      	strh	r3, [r7, #14]
 8007e6e:	e025      	b.n	8007ebc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2bff      	cmp	r3, #255	@ 0xff
 8007e7a:	d805      	bhi.n	8007e88 <ff_convert+0x30>
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	3b80      	subs	r3, #128	@ 0x80
 8007e80:	4a12      	ldr	r2, [pc, #72]	@ (8007ecc <ff_convert+0x74>)
 8007e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e86:	e000      	b.n	8007e8a <ff_convert+0x32>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	81fb      	strh	r3, [r7, #14]
 8007e8c:	e016      	b.n	8007ebc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007e8e:	2300      	movs	r3, #0
 8007e90:	81fb      	strh	r3, [r7, #14]
 8007e92:	e009      	b.n	8007ea8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007e94:	89fb      	ldrh	r3, [r7, #14]
 8007e96:	4a0d      	ldr	r2, [pc, #52]	@ (8007ecc <ff_convert+0x74>)
 8007e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d006      	beq.n	8007eb0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007ea2:	89fb      	ldrh	r3, [r7, #14]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	81fb      	strh	r3, [r7, #14]
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007eac:	d9f2      	bls.n	8007e94 <ff_convert+0x3c>
 8007eae:	e000      	b.n	8007eb2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007eb0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	3380      	adds	r3, #128	@ 0x80
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007ebc:	89fb      	ldrh	r3, [r7, #14]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	08078b2c 	.word	0x08078b2c

08007ed0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee0:	d201      	bcs.n	8007ee6 <ff_wtoupper+0x16>
 8007ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8007fdc <ff_wtoupper+0x10c>)
 8007ee4:	e000      	b.n	8007ee8 <ff_wtoupper+0x18>
 8007ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fe0 <ff_wtoupper+0x110>)
 8007ee8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	1c9a      	adds	r2, r3, #2
 8007eee:	617a      	str	r2, [r7, #20]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007ef4:	8a7b      	ldrh	r3, [r7, #18]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d068      	beq.n	8007fcc <ff_wtoupper+0xfc>
 8007efa:	88fa      	ldrh	r2, [r7, #6]
 8007efc:	8a7b      	ldrh	r3, [r7, #18]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d364      	bcc.n	8007fcc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	1c9a      	adds	r2, r3, #2
 8007f06:	617a      	str	r2, [r7, #20]
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	823b      	strh	r3, [r7, #16]
 8007f0c:	8a3b      	ldrh	r3, [r7, #16]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	81fb      	strh	r3, [r7, #14]
 8007f12:	8a3b      	ldrh	r3, [r7, #16]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	8a79      	ldrh	r1, [r7, #18]
 8007f1c:	8a3b      	ldrh	r3, [r7, #16]
 8007f1e:	440b      	add	r3, r1
 8007f20:	429a      	cmp	r2, r3
 8007f22:	da49      	bge.n	8007fb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	2b08      	cmp	r3, #8
 8007f28:	d84f      	bhi.n	8007fca <ff_wtoupper+0xfa>
 8007f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f30 <ff_wtoupper+0x60>)
 8007f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f67 	.word	0x08007f67
 8007f38:	08007f7d 	.word	0x08007f7d
 8007f3c:	08007f85 	.word	0x08007f85
 8007f40:	08007f8d 	.word	0x08007f8d
 8007f44:	08007f95 	.word	0x08007f95
 8007f48:	08007f9d 	.word	0x08007f9d
 8007f4c:	08007fa5 	.word	0x08007fa5
 8007f50:	08007fad 	.word	0x08007fad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007f54:	88fa      	ldrh	r2, [r7, #6]
 8007f56:	8a7b      	ldrh	r3, [r7, #18]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	80fb      	strh	r3, [r7, #6]
 8007f64:	e027      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	8a7b      	ldrh	r3, [r7, #18]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	80fb      	strh	r3, [r7, #6]
 8007f7a:	e01c      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	3b10      	subs	r3, #16
 8007f80:	80fb      	strh	r3, [r7, #6]
 8007f82:	e018      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	3b20      	subs	r3, #32
 8007f88:	80fb      	strh	r3, [r7, #6]
 8007f8a:	e014      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	3b30      	subs	r3, #48	@ 0x30
 8007f90:	80fb      	strh	r3, [r7, #6]
 8007f92:	e010      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007f94:	88fb      	ldrh	r3, [r7, #6]
 8007f96:	3b1a      	subs	r3, #26
 8007f98:	80fb      	strh	r3, [r7, #6]
 8007f9a:	e00c      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	80fb      	strh	r3, [r7, #6]
 8007fa2:	e008      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	3b50      	subs	r3, #80	@ 0x50
 8007fa8:	80fb      	strh	r3, [r7, #6]
 8007faa:	e004      	b.n	8007fb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007fb2:	80fb      	strh	r3, [r7, #6]
 8007fb4:	bf00      	nop
			}
			break;
 8007fb6:	e008      	b.n	8007fca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007fb8:	89fb      	ldrh	r3, [r7, #14]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d195      	bne.n	8007eea <ff_wtoupper+0x1a>
 8007fbe:	8a3b      	ldrh	r3, [r7, #16]
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007fc8:	e78f      	b.n	8007eea <ff_wtoupper+0x1a>
			break;
 8007fca:	bf00      	nop
	}

	return chr;
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	08078c2c 	.word	0x08078c2c
 8007fe0:	08078e20 	.word	0x08078e20

08007fe4 <siprintf>:
 8007fe4:	b40e      	push	{r1, r2, r3}
 8007fe6:	b510      	push	{r4, lr}
 8007fe8:	b09d      	sub	sp, #116	@ 0x74
 8007fea:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007fec:	9002      	str	r0, [sp, #8]
 8007fee:	9006      	str	r0, [sp, #24]
 8007ff0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ff4:	480a      	ldr	r0, [pc, #40]	@ (8008020 <siprintf+0x3c>)
 8007ff6:	9107      	str	r1, [sp, #28]
 8007ff8:	9104      	str	r1, [sp, #16]
 8007ffa:	490a      	ldr	r1, [pc, #40]	@ (8008024 <siprintf+0x40>)
 8007ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008000:	9105      	str	r1, [sp, #20]
 8008002:	2400      	movs	r4, #0
 8008004:	a902      	add	r1, sp, #8
 8008006:	6800      	ldr	r0, [r0, #0]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800800c:	f000 f994 	bl	8008338 <_svfiprintf_r>
 8008010:	9b02      	ldr	r3, [sp, #8]
 8008012:	701c      	strb	r4, [r3, #0]
 8008014:	b01d      	add	sp, #116	@ 0x74
 8008016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801a:	b003      	add	sp, #12
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	200019d8 	.word	0x200019d8
 8008024:	ffff0208 	.word	0xffff0208

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <__errno>:
 8008038:	4b01      	ldr	r3, [pc, #4]	@ (8008040 <__errno+0x8>)
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	200019d8 	.word	0x200019d8

08008044 <__libc_init_array>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	4d0d      	ldr	r5, [pc, #52]	@ (800807c <__libc_init_array+0x38>)
 8008048:	4c0d      	ldr	r4, [pc, #52]	@ (8008080 <__libc_init_array+0x3c>)
 800804a:	1b64      	subs	r4, r4, r5
 800804c:	10a4      	asrs	r4, r4, #2
 800804e:	2600      	movs	r6, #0
 8008050:	42a6      	cmp	r6, r4
 8008052:	d109      	bne.n	8008068 <__libc_init_array+0x24>
 8008054:	4d0b      	ldr	r5, [pc, #44]	@ (8008084 <__libc_init_array+0x40>)
 8008056:	4c0c      	ldr	r4, [pc, #48]	@ (8008088 <__libc_init_array+0x44>)
 8008058:	f000 fc64 	bl	8008924 <_init>
 800805c:	1b64      	subs	r4, r4, r5
 800805e:	10a4      	asrs	r4, r4, #2
 8008060:	2600      	movs	r6, #0
 8008062:	42a6      	cmp	r6, r4
 8008064:	d105      	bne.n	8008072 <__libc_init_array+0x2e>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	f855 3b04 	ldr.w	r3, [r5], #4
 800806c:	4798      	blx	r3
 800806e:	3601      	adds	r6, #1
 8008070:	e7ee      	b.n	8008050 <__libc_init_array+0xc>
 8008072:	f855 3b04 	ldr.w	r3, [r5], #4
 8008076:	4798      	blx	r3
 8008078:	3601      	adds	r6, #1
 800807a:	e7f2      	b.n	8008062 <__libc_init_array+0x1e>
 800807c:	08078f18 	.word	0x08078f18
 8008080:	08078f18 	.word	0x08078f18
 8008084:	08078f18 	.word	0x08078f18
 8008088:	08078f1c 	.word	0x08078f1c

0800808c <__retarget_lock_acquire_recursive>:
 800808c:	4770      	bx	lr

0800808e <__retarget_lock_release_recursive>:
 800808e:	4770      	bx	lr

08008090 <_free_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4605      	mov	r5, r0
 8008094:	2900      	cmp	r1, #0
 8008096:	d041      	beq.n	800811c <_free_r+0x8c>
 8008098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809c:	1f0c      	subs	r4, r1, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bfb8      	it	lt
 80080a2:	18e4      	addlt	r4, r4, r3
 80080a4:	f000 f8e0 	bl	8008268 <__malloc_lock>
 80080a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008120 <_free_r+0x90>)
 80080aa:	6813      	ldr	r3, [r2, #0]
 80080ac:	b933      	cbnz	r3, 80080bc <_free_r+0x2c>
 80080ae:	6063      	str	r3, [r4, #4]
 80080b0:	6014      	str	r4, [r2, #0]
 80080b2:	4628      	mov	r0, r5
 80080b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b8:	f000 b8dc 	b.w	8008274 <__malloc_unlock>
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d908      	bls.n	80080d2 <_free_r+0x42>
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	1821      	adds	r1, r4, r0
 80080c4:	428b      	cmp	r3, r1
 80080c6:	bf01      	itttt	eq
 80080c8:	6819      	ldreq	r1, [r3, #0]
 80080ca:	685b      	ldreq	r3, [r3, #4]
 80080cc:	1809      	addeq	r1, r1, r0
 80080ce:	6021      	streq	r1, [r4, #0]
 80080d0:	e7ed      	b.n	80080ae <_free_r+0x1e>
 80080d2:	461a      	mov	r2, r3
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	b10b      	cbz	r3, 80080dc <_free_r+0x4c>
 80080d8:	42a3      	cmp	r3, r4
 80080da:	d9fa      	bls.n	80080d2 <_free_r+0x42>
 80080dc:	6811      	ldr	r1, [r2, #0]
 80080de:	1850      	adds	r0, r2, r1
 80080e0:	42a0      	cmp	r0, r4
 80080e2:	d10b      	bne.n	80080fc <_free_r+0x6c>
 80080e4:	6820      	ldr	r0, [r4, #0]
 80080e6:	4401      	add	r1, r0
 80080e8:	1850      	adds	r0, r2, r1
 80080ea:	4283      	cmp	r3, r0
 80080ec:	6011      	str	r1, [r2, #0]
 80080ee:	d1e0      	bne.n	80080b2 <_free_r+0x22>
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	6053      	str	r3, [r2, #4]
 80080f6:	4408      	add	r0, r1
 80080f8:	6010      	str	r0, [r2, #0]
 80080fa:	e7da      	b.n	80080b2 <_free_r+0x22>
 80080fc:	d902      	bls.n	8008104 <_free_r+0x74>
 80080fe:	230c      	movs	r3, #12
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	e7d6      	b.n	80080b2 <_free_r+0x22>
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	1821      	adds	r1, r4, r0
 8008108:	428b      	cmp	r3, r1
 800810a:	bf04      	itt	eq
 800810c:	6819      	ldreq	r1, [r3, #0]
 800810e:	685b      	ldreq	r3, [r3, #4]
 8008110:	6063      	str	r3, [r4, #4]
 8008112:	bf04      	itt	eq
 8008114:	1809      	addeq	r1, r1, r0
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	6054      	str	r4, [r2, #4]
 800811a:	e7ca      	b.n	80080b2 <_free_r+0x22>
 800811c:	bd38      	pop	{r3, r4, r5, pc}
 800811e:	bf00      	nop
 8008120:	20004004 	.word	0x20004004

08008124 <sbrk_aligned>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4e0f      	ldr	r6, [pc, #60]	@ (8008164 <sbrk_aligned+0x40>)
 8008128:	460c      	mov	r4, r1
 800812a:	6831      	ldr	r1, [r6, #0]
 800812c:	4605      	mov	r5, r0
 800812e:	b911      	cbnz	r1, 8008136 <sbrk_aligned+0x12>
 8008130:	f000 fba4 	bl	800887c <_sbrk_r>
 8008134:	6030      	str	r0, [r6, #0]
 8008136:	4621      	mov	r1, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f000 fb9f 	bl	800887c <_sbrk_r>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	d103      	bne.n	800814a <sbrk_aligned+0x26>
 8008142:	f04f 34ff 	mov.w	r4, #4294967295
 8008146:	4620      	mov	r0, r4
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	1cc4      	adds	r4, r0, #3
 800814c:	f024 0403 	bic.w	r4, r4, #3
 8008150:	42a0      	cmp	r0, r4
 8008152:	d0f8      	beq.n	8008146 <sbrk_aligned+0x22>
 8008154:	1a21      	subs	r1, r4, r0
 8008156:	4628      	mov	r0, r5
 8008158:	f000 fb90 	bl	800887c <_sbrk_r>
 800815c:	3001      	adds	r0, #1
 800815e:	d1f2      	bne.n	8008146 <sbrk_aligned+0x22>
 8008160:	e7ef      	b.n	8008142 <sbrk_aligned+0x1e>
 8008162:	bf00      	nop
 8008164:	20004000 	.word	0x20004000

08008168 <_malloc_r>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	1ccd      	adds	r5, r1, #3
 800816e:	f025 0503 	bic.w	r5, r5, #3
 8008172:	3508      	adds	r5, #8
 8008174:	2d0c      	cmp	r5, #12
 8008176:	bf38      	it	cc
 8008178:	250c      	movcc	r5, #12
 800817a:	2d00      	cmp	r5, #0
 800817c:	4606      	mov	r6, r0
 800817e:	db01      	blt.n	8008184 <_malloc_r+0x1c>
 8008180:	42a9      	cmp	r1, r5
 8008182:	d904      	bls.n	800818e <_malloc_r+0x26>
 8008184:	230c      	movs	r3, #12
 8008186:	6033      	str	r3, [r6, #0]
 8008188:	2000      	movs	r0, #0
 800818a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008264 <_malloc_r+0xfc>
 8008192:	f000 f869 	bl	8008268 <__malloc_lock>
 8008196:	f8d8 3000 	ldr.w	r3, [r8]
 800819a:	461c      	mov	r4, r3
 800819c:	bb44      	cbnz	r4, 80081f0 <_malloc_r+0x88>
 800819e:	4629      	mov	r1, r5
 80081a0:	4630      	mov	r0, r6
 80081a2:	f7ff ffbf 	bl	8008124 <sbrk_aligned>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	4604      	mov	r4, r0
 80081aa:	d158      	bne.n	800825e <_malloc_r+0xf6>
 80081ac:	f8d8 4000 	ldr.w	r4, [r8]
 80081b0:	4627      	mov	r7, r4
 80081b2:	2f00      	cmp	r7, #0
 80081b4:	d143      	bne.n	800823e <_malloc_r+0xd6>
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d04b      	beq.n	8008252 <_malloc_r+0xea>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	4639      	mov	r1, r7
 80081be:	4630      	mov	r0, r6
 80081c0:	eb04 0903 	add.w	r9, r4, r3
 80081c4:	f000 fb5a 	bl	800887c <_sbrk_r>
 80081c8:	4581      	cmp	r9, r0
 80081ca:	d142      	bne.n	8008252 <_malloc_r+0xea>
 80081cc:	6821      	ldr	r1, [r4, #0]
 80081ce:	1a6d      	subs	r5, r5, r1
 80081d0:	4629      	mov	r1, r5
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7ff ffa6 	bl	8008124 <sbrk_aligned>
 80081d8:	3001      	adds	r0, #1
 80081da:	d03a      	beq.n	8008252 <_malloc_r+0xea>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	442b      	add	r3, r5
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	f8d8 3000 	ldr.w	r3, [r8]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	bb62      	cbnz	r2, 8008244 <_malloc_r+0xdc>
 80081ea:	f8c8 7000 	str.w	r7, [r8]
 80081ee:	e00f      	b.n	8008210 <_malloc_r+0xa8>
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	1b52      	subs	r2, r2, r5
 80081f4:	d420      	bmi.n	8008238 <_malloc_r+0xd0>
 80081f6:	2a0b      	cmp	r2, #11
 80081f8:	d917      	bls.n	800822a <_malloc_r+0xc2>
 80081fa:	1961      	adds	r1, r4, r5
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	6025      	str	r5, [r4, #0]
 8008200:	bf18      	it	ne
 8008202:	6059      	strne	r1, [r3, #4]
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	bf08      	it	eq
 8008208:	f8c8 1000 	streq.w	r1, [r8]
 800820c:	5162      	str	r2, [r4, r5]
 800820e:	604b      	str	r3, [r1, #4]
 8008210:	4630      	mov	r0, r6
 8008212:	f000 f82f 	bl	8008274 <__malloc_unlock>
 8008216:	f104 000b 	add.w	r0, r4, #11
 800821a:	1d23      	adds	r3, r4, #4
 800821c:	f020 0007 	bic.w	r0, r0, #7
 8008220:	1ac2      	subs	r2, r0, r3
 8008222:	bf1c      	itt	ne
 8008224:	1a1b      	subne	r3, r3, r0
 8008226:	50a3      	strne	r3, [r4, r2]
 8008228:	e7af      	b.n	800818a <_malloc_r+0x22>
 800822a:	6862      	ldr	r2, [r4, #4]
 800822c:	42a3      	cmp	r3, r4
 800822e:	bf0c      	ite	eq
 8008230:	f8c8 2000 	streq.w	r2, [r8]
 8008234:	605a      	strne	r2, [r3, #4]
 8008236:	e7eb      	b.n	8008210 <_malloc_r+0xa8>
 8008238:	4623      	mov	r3, r4
 800823a:	6864      	ldr	r4, [r4, #4]
 800823c:	e7ae      	b.n	800819c <_malloc_r+0x34>
 800823e:	463c      	mov	r4, r7
 8008240:	687f      	ldr	r7, [r7, #4]
 8008242:	e7b6      	b.n	80081b2 <_malloc_r+0x4a>
 8008244:	461a      	mov	r2, r3
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	42a3      	cmp	r3, r4
 800824a:	d1fb      	bne.n	8008244 <_malloc_r+0xdc>
 800824c:	2300      	movs	r3, #0
 800824e:	6053      	str	r3, [r2, #4]
 8008250:	e7de      	b.n	8008210 <_malloc_r+0xa8>
 8008252:	230c      	movs	r3, #12
 8008254:	6033      	str	r3, [r6, #0]
 8008256:	4630      	mov	r0, r6
 8008258:	f000 f80c 	bl	8008274 <__malloc_unlock>
 800825c:	e794      	b.n	8008188 <_malloc_r+0x20>
 800825e:	6005      	str	r5, [r0, #0]
 8008260:	e7d6      	b.n	8008210 <_malloc_r+0xa8>
 8008262:	bf00      	nop
 8008264:	20004004 	.word	0x20004004

08008268 <__malloc_lock>:
 8008268:	4801      	ldr	r0, [pc, #4]	@ (8008270 <__malloc_lock+0x8>)
 800826a:	f7ff bf0f 	b.w	800808c <__retarget_lock_acquire_recursive>
 800826e:	bf00      	nop
 8008270:	20003ffc 	.word	0x20003ffc

08008274 <__malloc_unlock>:
 8008274:	4801      	ldr	r0, [pc, #4]	@ (800827c <__malloc_unlock+0x8>)
 8008276:	f7ff bf0a 	b.w	800808e <__retarget_lock_release_recursive>
 800827a:	bf00      	nop
 800827c:	20003ffc 	.word	0x20003ffc

08008280 <__ssputs_r>:
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	688e      	ldr	r6, [r1, #8]
 8008286:	461f      	mov	r7, r3
 8008288:	42be      	cmp	r6, r7
 800828a:	680b      	ldr	r3, [r1, #0]
 800828c:	4682      	mov	sl, r0
 800828e:	460c      	mov	r4, r1
 8008290:	4690      	mov	r8, r2
 8008292:	d82d      	bhi.n	80082f0 <__ssputs_r+0x70>
 8008294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008298:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800829c:	d026      	beq.n	80082ec <__ssputs_r+0x6c>
 800829e:	6965      	ldr	r5, [r4, #20]
 80082a0:	6909      	ldr	r1, [r1, #16]
 80082a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082a6:	eba3 0901 	sub.w	r9, r3, r1
 80082aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ae:	1c7b      	adds	r3, r7, #1
 80082b0:	444b      	add	r3, r9
 80082b2:	106d      	asrs	r5, r5, #1
 80082b4:	429d      	cmp	r5, r3
 80082b6:	bf38      	it	cc
 80082b8:	461d      	movcc	r5, r3
 80082ba:	0553      	lsls	r3, r2, #21
 80082bc:	d527      	bpl.n	800830e <__ssputs_r+0x8e>
 80082be:	4629      	mov	r1, r5
 80082c0:	f7ff ff52 	bl	8008168 <_malloc_r>
 80082c4:	4606      	mov	r6, r0
 80082c6:	b360      	cbz	r0, 8008322 <__ssputs_r+0xa2>
 80082c8:	6921      	ldr	r1, [r4, #16]
 80082ca:	464a      	mov	r2, r9
 80082cc:	f000 fae6 	bl	800889c <memcpy>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	6126      	str	r6, [r4, #16]
 80082de:	6165      	str	r5, [r4, #20]
 80082e0:	444e      	add	r6, r9
 80082e2:	eba5 0509 	sub.w	r5, r5, r9
 80082e6:	6026      	str	r6, [r4, #0]
 80082e8:	60a5      	str	r5, [r4, #8]
 80082ea:	463e      	mov	r6, r7
 80082ec:	42be      	cmp	r6, r7
 80082ee:	d900      	bls.n	80082f2 <__ssputs_r+0x72>
 80082f0:	463e      	mov	r6, r7
 80082f2:	6820      	ldr	r0, [r4, #0]
 80082f4:	4632      	mov	r2, r6
 80082f6:	4641      	mov	r1, r8
 80082f8:	f000 faa6 	bl	8008848 <memmove>
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	1b9b      	subs	r3, r3, r6
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	4433      	add	r3, r6
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	2000      	movs	r0, #0
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	462a      	mov	r2, r5
 8008310:	f000 fad2 	bl	80088b8 <_realloc_r>
 8008314:	4606      	mov	r6, r0
 8008316:	2800      	cmp	r0, #0
 8008318:	d1e0      	bne.n	80082dc <__ssputs_r+0x5c>
 800831a:	6921      	ldr	r1, [r4, #16]
 800831c:	4650      	mov	r0, sl
 800831e:	f7ff feb7 	bl	8008090 <_free_r>
 8008322:	230c      	movs	r3, #12
 8008324:	f8ca 3000 	str.w	r3, [sl]
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	e7e9      	b.n	800830a <__ssputs_r+0x8a>
	...

08008338 <_svfiprintf_r>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	4698      	mov	r8, r3
 800833e:	898b      	ldrh	r3, [r1, #12]
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	b09d      	sub	sp, #116	@ 0x74
 8008344:	4607      	mov	r7, r0
 8008346:	460d      	mov	r5, r1
 8008348:	4614      	mov	r4, r2
 800834a:	d510      	bpl.n	800836e <_svfiprintf_r+0x36>
 800834c:	690b      	ldr	r3, [r1, #16]
 800834e:	b973      	cbnz	r3, 800836e <_svfiprintf_r+0x36>
 8008350:	2140      	movs	r1, #64	@ 0x40
 8008352:	f7ff ff09 	bl	8008168 <_malloc_r>
 8008356:	6028      	str	r0, [r5, #0]
 8008358:	6128      	str	r0, [r5, #16]
 800835a:	b930      	cbnz	r0, 800836a <_svfiprintf_r+0x32>
 800835c:	230c      	movs	r3, #12
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	b01d      	add	sp, #116	@ 0x74
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	2340      	movs	r3, #64	@ 0x40
 800836c:	616b      	str	r3, [r5, #20]
 800836e:	2300      	movs	r3, #0
 8008370:	9309      	str	r3, [sp, #36]	@ 0x24
 8008372:	2320      	movs	r3, #32
 8008374:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008378:	f8cd 800c 	str.w	r8, [sp, #12]
 800837c:	2330      	movs	r3, #48	@ 0x30
 800837e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800851c <_svfiprintf_r+0x1e4>
 8008382:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008386:	f04f 0901 	mov.w	r9, #1
 800838a:	4623      	mov	r3, r4
 800838c:	469a      	mov	sl, r3
 800838e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008392:	b10a      	cbz	r2, 8008398 <_svfiprintf_r+0x60>
 8008394:	2a25      	cmp	r2, #37	@ 0x25
 8008396:	d1f9      	bne.n	800838c <_svfiprintf_r+0x54>
 8008398:	ebba 0b04 	subs.w	fp, sl, r4
 800839c:	d00b      	beq.n	80083b6 <_svfiprintf_r+0x7e>
 800839e:	465b      	mov	r3, fp
 80083a0:	4622      	mov	r2, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff ff6b 	bl	8008280 <__ssputs_r>
 80083aa:	3001      	adds	r0, #1
 80083ac:	f000 80a7 	beq.w	80084fe <_svfiprintf_r+0x1c6>
 80083b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b2:	445a      	add	r2, fp
 80083b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80083b6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 809f 	beq.w	80084fe <_svfiprintf_r+0x1c6>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f04f 32ff 	mov.w	r2, #4294967295
 80083c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ca:	f10a 0a01 	add.w	sl, sl, #1
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80083d8:	4654      	mov	r4, sl
 80083da:	2205      	movs	r2, #5
 80083dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e0:	484e      	ldr	r0, [pc, #312]	@ (800851c <_svfiprintf_r+0x1e4>)
 80083e2:	f7f7 ff1d 	bl	8000220 <memchr>
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	b9d8      	cbnz	r0, 8008422 <_svfiprintf_r+0xea>
 80083ea:	06d0      	lsls	r0, r2, #27
 80083ec:	bf44      	itt	mi
 80083ee:	2320      	movmi	r3, #32
 80083f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083f4:	0711      	lsls	r1, r2, #28
 80083f6:	bf44      	itt	mi
 80083f8:	232b      	movmi	r3, #43	@ 0x2b
 80083fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008402:	2b2a      	cmp	r3, #42	@ 0x2a
 8008404:	d015      	beq.n	8008432 <_svfiprintf_r+0xfa>
 8008406:	9a07      	ldr	r2, [sp, #28]
 8008408:	4654      	mov	r4, sl
 800840a:	2000      	movs	r0, #0
 800840c:	f04f 0c0a 	mov.w	ip, #10
 8008410:	4621      	mov	r1, r4
 8008412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008416:	3b30      	subs	r3, #48	@ 0x30
 8008418:	2b09      	cmp	r3, #9
 800841a:	d94b      	bls.n	80084b4 <_svfiprintf_r+0x17c>
 800841c:	b1b0      	cbz	r0, 800844c <_svfiprintf_r+0x114>
 800841e:	9207      	str	r2, [sp, #28]
 8008420:	e014      	b.n	800844c <_svfiprintf_r+0x114>
 8008422:	eba0 0308 	sub.w	r3, r0, r8
 8008426:	fa09 f303 	lsl.w	r3, r9, r3
 800842a:	4313      	orrs	r3, r2
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	46a2      	mov	sl, r4
 8008430:	e7d2      	b.n	80083d8 <_svfiprintf_r+0xa0>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	1d19      	adds	r1, r3, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	9103      	str	r1, [sp, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	bfbb      	ittet	lt
 800843e:	425b      	neglt	r3, r3
 8008440:	f042 0202 	orrlt.w	r2, r2, #2
 8008444:	9307      	strge	r3, [sp, #28]
 8008446:	9307      	strlt	r3, [sp, #28]
 8008448:	bfb8      	it	lt
 800844a:	9204      	strlt	r2, [sp, #16]
 800844c:	7823      	ldrb	r3, [r4, #0]
 800844e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008450:	d10a      	bne.n	8008468 <_svfiprintf_r+0x130>
 8008452:	7863      	ldrb	r3, [r4, #1]
 8008454:	2b2a      	cmp	r3, #42	@ 0x2a
 8008456:	d132      	bne.n	80084be <_svfiprintf_r+0x186>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	1d1a      	adds	r2, r3, #4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	9203      	str	r2, [sp, #12]
 8008460:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008464:	3402      	adds	r4, #2
 8008466:	9305      	str	r3, [sp, #20]
 8008468:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800852c <_svfiprintf_r+0x1f4>
 800846c:	7821      	ldrb	r1, [r4, #0]
 800846e:	2203      	movs	r2, #3
 8008470:	4650      	mov	r0, sl
 8008472:	f7f7 fed5 	bl	8000220 <memchr>
 8008476:	b138      	cbz	r0, 8008488 <_svfiprintf_r+0x150>
 8008478:	9b04      	ldr	r3, [sp, #16]
 800847a:	eba0 000a 	sub.w	r0, r0, sl
 800847e:	2240      	movs	r2, #64	@ 0x40
 8008480:	4082      	lsls	r2, r0
 8008482:	4313      	orrs	r3, r2
 8008484:	3401      	adds	r4, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	4824      	ldr	r0, [pc, #144]	@ (8008520 <_svfiprintf_r+0x1e8>)
 800848e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008492:	2206      	movs	r2, #6
 8008494:	f7f7 fec4 	bl	8000220 <memchr>
 8008498:	2800      	cmp	r0, #0
 800849a:	d036      	beq.n	800850a <_svfiprintf_r+0x1d2>
 800849c:	4b21      	ldr	r3, [pc, #132]	@ (8008524 <_svfiprintf_r+0x1ec>)
 800849e:	bb1b      	cbnz	r3, 80084e8 <_svfiprintf_r+0x1b0>
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	3307      	adds	r3, #7
 80084a4:	f023 0307 	bic.w	r3, r3, #7
 80084a8:	3308      	adds	r3, #8
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ae:	4433      	add	r3, r6
 80084b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084b2:	e76a      	b.n	800838a <_svfiprintf_r+0x52>
 80084b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b8:	460c      	mov	r4, r1
 80084ba:	2001      	movs	r0, #1
 80084bc:	e7a8      	b.n	8008410 <_svfiprintf_r+0xd8>
 80084be:	2300      	movs	r3, #0
 80084c0:	3401      	adds	r4, #1
 80084c2:	9305      	str	r3, [sp, #20]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4620      	mov	r0, r4
 80084cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d0:	3a30      	subs	r2, #48	@ 0x30
 80084d2:	2a09      	cmp	r2, #9
 80084d4:	d903      	bls.n	80084de <_svfiprintf_r+0x1a6>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0c6      	beq.n	8008468 <_svfiprintf_r+0x130>
 80084da:	9105      	str	r1, [sp, #20]
 80084dc:	e7c4      	b.n	8008468 <_svfiprintf_r+0x130>
 80084de:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e2:	4604      	mov	r4, r0
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7f0      	b.n	80084ca <_svfiprintf_r+0x192>
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	462a      	mov	r2, r5
 80084ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008528 <_svfiprintf_r+0x1f0>)
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4638      	mov	r0, r7
 80084f4:	f3af 8000 	nop.w
 80084f8:	1c42      	adds	r2, r0, #1
 80084fa:	4606      	mov	r6, r0
 80084fc:	d1d6      	bne.n	80084ac <_svfiprintf_r+0x174>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	065b      	lsls	r3, r3, #25
 8008502:	f53f af2d 	bmi.w	8008360 <_svfiprintf_r+0x28>
 8008506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008508:	e72c      	b.n	8008364 <_svfiprintf_r+0x2c>
 800850a:	ab03      	add	r3, sp, #12
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	462a      	mov	r2, r5
 8008510:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <_svfiprintf_r+0x1f0>)
 8008512:	a904      	add	r1, sp, #16
 8008514:	4638      	mov	r0, r7
 8008516:	f000 f879 	bl	800860c <_printf_i>
 800851a:	e7ed      	b.n	80084f8 <_svfiprintf_r+0x1c0>
 800851c:	08078edc 	.word	0x08078edc
 8008520:	08078ee6 	.word	0x08078ee6
 8008524:	00000000 	.word	0x00000000
 8008528:	08008281 	.word	0x08008281
 800852c:	08078ee2 	.word	0x08078ee2

08008530 <_printf_common>:
 8008530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	4616      	mov	r6, r2
 8008536:	4698      	mov	r8, r3
 8008538:	688a      	ldr	r2, [r1, #8]
 800853a:	690b      	ldr	r3, [r1, #16]
 800853c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008540:	4293      	cmp	r3, r2
 8008542:	bfb8      	it	lt
 8008544:	4613      	movlt	r3, r2
 8008546:	6033      	str	r3, [r6, #0]
 8008548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800854c:	4607      	mov	r7, r0
 800854e:	460c      	mov	r4, r1
 8008550:	b10a      	cbz	r2, 8008556 <_printf_common+0x26>
 8008552:	3301      	adds	r3, #1
 8008554:	6033      	str	r3, [r6, #0]
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	0699      	lsls	r1, r3, #26
 800855a:	bf42      	ittt	mi
 800855c:	6833      	ldrmi	r3, [r6, #0]
 800855e:	3302      	addmi	r3, #2
 8008560:	6033      	strmi	r3, [r6, #0]
 8008562:	6825      	ldr	r5, [r4, #0]
 8008564:	f015 0506 	ands.w	r5, r5, #6
 8008568:	d106      	bne.n	8008578 <_printf_common+0x48>
 800856a:	f104 0a19 	add.w	sl, r4, #25
 800856e:	68e3      	ldr	r3, [r4, #12]
 8008570:	6832      	ldr	r2, [r6, #0]
 8008572:	1a9b      	subs	r3, r3, r2
 8008574:	42ab      	cmp	r3, r5
 8008576:	dc26      	bgt.n	80085c6 <_printf_common+0x96>
 8008578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	3b00      	subs	r3, #0
 8008580:	bf18      	it	ne
 8008582:	2301      	movne	r3, #1
 8008584:	0692      	lsls	r2, r2, #26
 8008586:	d42b      	bmi.n	80085e0 <_printf_common+0xb0>
 8008588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800858c:	4641      	mov	r1, r8
 800858e:	4638      	mov	r0, r7
 8008590:	47c8      	blx	r9
 8008592:	3001      	adds	r0, #1
 8008594:	d01e      	beq.n	80085d4 <_printf_common+0xa4>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	6922      	ldr	r2, [r4, #16]
 800859a:	f003 0306 	and.w	r3, r3, #6
 800859e:	2b04      	cmp	r3, #4
 80085a0:	bf02      	ittt	eq
 80085a2:	68e5      	ldreq	r5, [r4, #12]
 80085a4:	6833      	ldreq	r3, [r6, #0]
 80085a6:	1aed      	subeq	r5, r5, r3
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	bf0c      	ite	eq
 80085ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b0:	2500      	movne	r5, #0
 80085b2:	4293      	cmp	r3, r2
 80085b4:	bfc4      	itt	gt
 80085b6:	1a9b      	subgt	r3, r3, r2
 80085b8:	18ed      	addgt	r5, r5, r3
 80085ba:	2600      	movs	r6, #0
 80085bc:	341a      	adds	r4, #26
 80085be:	42b5      	cmp	r5, r6
 80085c0:	d11a      	bne.n	80085f8 <_printf_common+0xc8>
 80085c2:	2000      	movs	r0, #0
 80085c4:	e008      	b.n	80085d8 <_printf_common+0xa8>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4652      	mov	r2, sl
 80085ca:	4641      	mov	r1, r8
 80085cc:	4638      	mov	r0, r7
 80085ce:	47c8      	blx	r9
 80085d0:	3001      	adds	r0, #1
 80085d2:	d103      	bne.n	80085dc <_printf_common+0xac>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085dc:	3501      	adds	r5, #1
 80085de:	e7c6      	b.n	800856e <_printf_common+0x3e>
 80085e0:	18e1      	adds	r1, r4, r3
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	2030      	movs	r0, #48	@ 0x30
 80085e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085ea:	4422      	add	r2, r4
 80085ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085f4:	3302      	adds	r3, #2
 80085f6:	e7c7      	b.n	8008588 <_printf_common+0x58>
 80085f8:	2301      	movs	r3, #1
 80085fa:	4622      	mov	r2, r4
 80085fc:	4641      	mov	r1, r8
 80085fe:	4638      	mov	r0, r7
 8008600:	47c8      	blx	r9
 8008602:	3001      	adds	r0, #1
 8008604:	d0e6      	beq.n	80085d4 <_printf_common+0xa4>
 8008606:	3601      	adds	r6, #1
 8008608:	e7d9      	b.n	80085be <_printf_common+0x8e>
	...

0800860c <_printf_i>:
 800860c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008610:	7e0f      	ldrb	r7, [r1, #24]
 8008612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008614:	2f78      	cmp	r7, #120	@ 0x78
 8008616:	4691      	mov	r9, r2
 8008618:	4680      	mov	r8, r0
 800861a:	460c      	mov	r4, r1
 800861c:	469a      	mov	sl, r3
 800861e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008622:	d807      	bhi.n	8008634 <_printf_i+0x28>
 8008624:	2f62      	cmp	r7, #98	@ 0x62
 8008626:	d80a      	bhi.n	800863e <_printf_i+0x32>
 8008628:	2f00      	cmp	r7, #0
 800862a:	f000 80d1 	beq.w	80087d0 <_printf_i+0x1c4>
 800862e:	2f58      	cmp	r7, #88	@ 0x58
 8008630:	f000 80b8 	beq.w	80087a4 <_printf_i+0x198>
 8008634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800863c:	e03a      	b.n	80086b4 <_printf_i+0xa8>
 800863e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008642:	2b15      	cmp	r3, #21
 8008644:	d8f6      	bhi.n	8008634 <_printf_i+0x28>
 8008646:	a101      	add	r1, pc, #4	@ (adr r1, 800864c <_printf_i+0x40>)
 8008648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800864c:	080086a5 	.word	0x080086a5
 8008650:	080086b9 	.word	0x080086b9
 8008654:	08008635 	.word	0x08008635
 8008658:	08008635 	.word	0x08008635
 800865c:	08008635 	.word	0x08008635
 8008660:	08008635 	.word	0x08008635
 8008664:	080086b9 	.word	0x080086b9
 8008668:	08008635 	.word	0x08008635
 800866c:	08008635 	.word	0x08008635
 8008670:	08008635 	.word	0x08008635
 8008674:	08008635 	.word	0x08008635
 8008678:	080087b7 	.word	0x080087b7
 800867c:	080086e3 	.word	0x080086e3
 8008680:	08008771 	.word	0x08008771
 8008684:	08008635 	.word	0x08008635
 8008688:	08008635 	.word	0x08008635
 800868c:	080087d9 	.word	0x080087d9
 8008690:	08008635 	.word	0x08008635
 8008694:	080086e3 	.word	0x080086e3
 8008698:	08008635 	.word	0x08008635
 800869c:	08008635 	.word	0x08008635
 80086a0:	08008779 	.word	0x08008779
 80086a4:	6833      	ldr	r3, [r6, #0]
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6032      	str	r2, [r6, #0]
 80086ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086b4:	2301      	movs	r3, #1
 80086b6:	e09c      	b.n	80087f2 <_printf_i+0x1e6>
 80086b8:	6833      	ldr	r3, [r6, #0]
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	1d19      	adds	r1, r3, #4
 80086be:	6031      	str	r1, [r6, #0]
 80086c0:	0606      	lsls	r6, r0, #24
 80086c2:	d501      	bpl.n	80086c8 <_printf_i+0xbc>
 80086c4:	681d      	ldr	r5, [r3, #0]
 80086c6:	e003      	b.n	80086d0 <_printf_i+0xc4>
 80086c8:	0645      	lsls	r5, r0, #25
 80086ca:	d5fb      	bpl.n	80086c4 <_printf_i+0xb8>
 80086cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086d0:	2d00      	cmp	r5, #0
 80086d2:	da03      	bge.n	80086dc <_printf_i+0xd0>
 80086d4:	232d      	movs	r3, #45	@ 0x2d
 80086d6:	426d      	negs	r5, r5
 80086d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086dc:	4858      	ldr	r0, [pc, #352]	@ (8008840 <_printf_i+0x234>)
 80086de:	230a      	movs	r3, #10
 80086e0:	e011      	b.n	8008706 <_printf_i+0xfa>
 80086e2:	6821      	ldr	r1, [r4, #0]
 80086e4:	6833      	ldr	r3, [r6, #0]
 80086e6:	0608      	lsls	r0, r1, #24
 80086e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80086ec:	d402      	bmi.n	80086f4 <_printf_i+0xe8>
 80086ee:	0649      	lsls	r1, r1, #25
 80086f0:	bf48      	it	mi
 80086f2:	b2ad      	uxthmi	r5, r5
 80086f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80086f6:	4852      	ldr	r0, [pc, #328]	@ (8008840 <_printf_i+0x234>)
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	bf14      	ite	ne
 80086fc:	230a      	movne	r3, #10
 80086fe:	2308      	moveq	r3, #8
 8008700:	2100      	movs	r1, #0
 8008702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008706:	6866      	ldr	r6, [r4, #4]
 8008708:	60a6      	str	r6, [r4, #8]
 800870a:	2e00      	cmp	r6, #0
 800870c:	db05      	blt.n	800871a <_printf_i+0x10e>
 800870e:	6821      	ldr	r1, [r4, #0]
 8008710:	432e      	orrs	r6, r5
 8008712:	f021 0104 	bic.w	r1, r1, #4
 8008716:	6021      	str	r1, [r4, #0]
 8008718:	d04b      	beq.n	80087b2 <_printf_i+0x1a6>
 800871a:	4616      	mov	r6, r2
 800871c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008720:	fb03 5711 	mls	r7, r3, r1, r5
 8008724:	5dc7      	ldrb	r7, [r0, r7]
 8008726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800872a:	462f      	mov	r7, r5
 800872c:	42bb      	cmp	r3, r7
 800872e:	460d      	mov	r5, r1
 8008730:	d9f4      	bls.n	800871c <_printf_i+0x110>
 8008732:	2b08      	cmp	r3, #8
 8008734:	d10b      	bne.n	800874e <_printf_i+0x142>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	07df      	lsls	r7, r3, #31
 800873a:	d508      	bpl.n	800874e <_printf_i+0x142>
 800873c:	6923      	ldr	r3, [r4, #16]
 800873e:	6861      	ldr	r1, [r4, #4]
 8008740:	4299      	cmp	r1, r3
 8008742:	bfde      	ittt	le
 8008744:	2330      	movle	r3, #48	@ 0x30
 8008746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800874a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800874e:	1b92      	subs	r2, r2, r6
 8008750:	6122      	str	r2, [r4, #16]
 8008752:	f8cd a000 	str.w	sl, [sp]
 8008756:	464b      	mov	r3, r9
 8008758:	aa03      	add	r2, sp, #12
 800875a:	4621      	mov	r1, r4
 800875c:	4640      	mov	r0, r8
 800875e:	f7ff fee7 	bl	8008530 <_printf_common>
 8008762:	3001      	adds	r0, #1
 8008764:	d14a      	bne.n	80087fc <_printf_i+0x1f0>
 8008766:	f04f 30ff 	mov.w	r0, #4294967295
 800876a:	b004      	add	sp, #16
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	f043 0320 	orr.w	r3, r3, #32
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	4832      	ldr	r0, [pc, #200]	@ (8008844 <_printf_i+0x238>)
 800877a:	2778      	movs	r7, #120	@ 0x78
 800877c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	6831      	ldr	r1, [r6, #0]
 8008784:	061f      	lsls	r7, r3, #24
 8008786:	f851 5b04 	ldr.w	r5, [r1], #4
 800878a:	d402      	bmi.n	8008792 <_printf_i+0x186>
 800878c:	065f      	lsls	r7, r3, #25
 800878e:	bf48      	it	mi
 8008790:	b2ad      	uxthmi	r5, r5
 8008792:	6031      	str	r1, [r6, #0]
 8008794:	07d9      	lsls	r1, r3, #31
 8008796:	bf44      	itt	mi
 8008798:	f043 0320 	orrmi.w	r3, r3, #32
 800879c:	6023      	strmi	r3, [r4, #0]
 800879e:	b11d      	cbz	r5, 80087a8 <_printf_i+0x19c>
 80087a0:	2310      	movs	r3, #16
 80087a2:	e7ad      	b.n	8008700 <_printf_i+0xf4>
 80087a4:	4826      	ldr	r0, [pc, #152]	@ (8008840 <_printf_i+0x234>)
 80087a6:	e7e9      	b.n	800877c <_printf_i+0x170>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	f023 0320 	bic.w	r3, r3, #32
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	e7f6      	b.n	80087a0 <_printf_i+0x194>
 80087b2:	4616      	mov	r6, r2
 80087b4:	e7bd      	b.n	8008732 <_printf_i+0x126>
 80087b6:	6833      	ldr	r3, [r6, #0]
 80087b8:	6825      	ldr	r5, [r4, #0]
 80087ba:	6961      	ldr	r1, [r4, #20]
 80087bc:	1d18      	adds	r0, r3, #4
 80087be:	6030      	str	r0, [r6, #0]
 80087c0:	062e      	lsls	r6, r5, #24
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	d501      	bpl.n	80087ca <_printf_i+0x1be>
 80087c6:	6019      	str	r1, [r3, #0]
 80087c8:	e002      	b.n	80087d0 <_printf_i+0x1c4>
 80087ca:	0668      	lsls	r0, r5, #25
 80087cc:	d5fb      	bpl.n	80087c6 <_printf_i+0x1ba>
 80087ce:	8019      	strh	r1, [r3, #0]
 80087d0:	2300      	movs	r3, #0
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	4616      	mov	r6, r2
 80087d6:	e7bc      	b.n	8008752 <_printf_i+0x146>
 80087d8:	6833      	ldr	r3, [r6, #0]
 80087da:	1d1a      	adds	r2, r3, #4
 80087dc:	6032      	str	r2, [r6, #0]
 80087de:	681e      	ldr	r6, [r3, #0]
 80087e0:	6862      	ldr	r2, [r4, #4]
 80087e2:	2100      	movs	r1, #0
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7f7 fd1b 	bl	8000220 <memchr>
 80087ea:	b108      	cbz	r0, 80087f0 <_printf_i+0x1e4>
 80087ec:	1b80      	subs	r0, r0, r6
 80087ee:	6060      	str	r0, [r4, #4]
 80087f0:	6863      	ldr	r3, [r4, #4]
 80087f2:	6123      	str	r3, [r4, #16]
 80087f4:	2300      	movs	r3, #0
 80087f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087fa:	e7aa      	b.n	8008752 <_printf_i+0x146>
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	4632      	mov	r2, r6
 8008800:	4649      	mov	r1, r9
 8008802:	4640      	mov	r0, r8
 8008804:	47d0      	blx	sl
 8008806:	3001      	adds	r0, #1
 8008808:	d0ad      	beq.n	8008766 <_printf_i+0x15a>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	079b      	lsls	r3, r3, #30
 800880e:	d413      	bmi.n	8008838 <_printf_i+0x22c>
 8008810:	68e0      	ldr	r0, [r4, #12]
 8008812:	9b03      	ldr	r3, [sp, #12]
 8008814:	4298      	cmp	r0, r3
 8008816:	bfb8      	it	lt
 8008818:	4618      	movlt	r0, r3
 800881a:	e7a6      	b.n	800876a <_printf_i+0x15e>
 800881c:	2301      	movs	r3, #1
 800881e:	4632      	mov	r2, r6
 8008820:	4649      	mov	r1, r9
 8008822:	4640      	mov	r0, r8
 8008824:	47d0      	blx	sl
 8008826:	3001      	adds	r0, #1
 8008828:	d09d      	beq.n	8008766 <_printf_i+0x15a>
 800882a:	3501      	adds	r5, #1
 800882c:	68e3      	ldr	r3, [r4, #12]
 800882e:	9903      	ldr	r1, [sp, #12]
 8008830:	1a5b      	subs	r3, r3, r1
 8008832:	42ab      	cmp	r3, r5
 8008834:	dcf2      	bgt.n	800881c <_printf_i+0x210>
 8008836:	e7eb      	b.n	8008810 <_printf_i+0x204>
 8008838:	2500      	movs	r5, #0
 800883a:	f104 0619 	add.w	r6, r4, #25
 800883e:	e7f5      	b.n	800882c <_printf_i+0x220>
 8008840:	08078eed 	.word	0x08078eed
 8008844:	08078efe 	.word	0x08078efe

08008848 <memmove>:
 8008848:	4288      	cmp	r0, r1
 800884a:	b510      	push	{r4, lr}
 800884c:	eb01 0402 	add.w	r4, r1, r2
 8008850:	d902      	bls.n	8008858 <memmove+0x10>
 8008852:	4284      	cmp	r4, r0
 8008854:	4623      	mov	r3, r4
 8008856:	d807      	bhi.n	8008868 <memmove+0x20>
 8008858:	1e43      	subs	r3, r0, #1
 800885a:	42a1      	cmp	r1, r4
 800885c:	d008      	beq.n	8008870 <memmove+0x28>
 800885e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008862:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008866:	e7f8      	b.n	800885a <memmove+0x12>
 8008868:	4402      	add	r2, r0
 800886a:	4601      	mov	r1, r0
 800886c:	428a      	cmp	r2, r1
 800886e:	d100      	bne.n	8008872 <memmove+0x2a>
 8008870:	bd10      	pop	{r4, pc}
 8008872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800887a:	e7f7      	b.n	800886c <memmove+0x24>

0800887c <_sbrk_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d06      	ldr	r5, [pc, #24]	@ (8008898 <_sbrk_r+0x1c>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f9 faf2 	bl	8001e70 <_sbrk>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_sbrk_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_sbrk_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20003ff8 	.word	0x20003ff8

0800889c <memcpy>:
 800889c:	440a      	add	r2, r1
 800889e:	4291      	cmp	r1, r2
 80088a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088a4:	d100      	bne.n	80088a8 <memcpy+0xc>
 80088a6:	4770      	bx	lr
 80088a8:	b510      	push	{r4, lr}
 80088aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088b2:	4291      	cmp	r1, r2
 80088b4:	d1f9      	bne.n	80088aa <memcpy+0xe>
 80088b6:	bd10      	pop	{r4, pc}

080088b8 <_realloc_r>:
 80088b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	4607      	mov	r7, r0
 80088be:	4614      	mov	r4, r2
 80088c0:	460d      	mov	r5, r1
 80088c2:	b921      	cbnz	r1, 80088ce <_realloc_r+0x16>
 80088c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c8:	4611      	mov	r1, r2
 80088ca:	f7ff bc4d 	b.w	8008168 <_malloc_r>
 80088ce:	b92a      	cbnz	r2, 80088dc <_realloc_r+0x24>
 80088d0:	f7ff fbde 	bl	8008090 <_free_r>
 80088d4:	4625      	mov	r5, r4
 80088d6:	4628      	mov	r0, r5
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	f000 f81a 	bl	8008914 <_malloc_usable_size_r>
 80088e0:	4284      	cmp	r4, r0
 80088e2:	4606      	mov	r6, r0
 80088e4:	d802      	bhi.n	80088ec <_realloc_r+0x34>
 80088e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088ea:	d8f4      	bhi.n	80088d6 <_realloc_r+0x1e>
 80088ec:	4621      	mov	r1, r4
 80088ee:	4638      	mov	r0, r7
 80088f0:	f7ff fc3a 	bl	8008168 <_malloc_r>
 80088f4:	4680      	mov	r8, r0
 80088f6:	b908      	cbnz	r0, 80088fc <_realloc_r+0x44>
 80088f8:	4645      	mov	r5, r8
 80088fa:	e7ec      	b.n	80088d6 <_realloc_r+0x1e>
 80088fc:	42b4      	cmp	r4, r6
 80088fe:	4622      	mov	r2, r4
 8008900:	4629      	mov	r1, r5
 8008902:	bf28      	it	cs
 8008904:	4632      	movcs	r2, r6
 8008906:	f7ff ffc9 	bl	800889c <memcpy>
 800890a:	4629      	mov	r1, r5
 800890c:	4638      	mov	r0, r7
 800890e:	f7ff fbbf 	bl	8008090 <_free_r>
 8008912:	e7f1      	b.n	80088f8 <_realloc_r+0x40>

08008914 <_malloc_usable_size_r>:
 8008914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008918:	1f18      	subs	r0, r3, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfbc      	itt	lt
 800891e:	580b      	ldrlt	r3, [r1, r0]
 8008920:	18c0      	addlt	r0, r0, r3
 8008922:	4770      	bx	lr

08008924 <_init>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr

08008930 <_fini>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	bf00      	nop
 8008934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008936:	bc08      	pop	{r3}
 8008938:	469e      	mov	lr, r3
 800893a:	4770      	bx	lr
