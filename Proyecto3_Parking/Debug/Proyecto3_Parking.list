
Proyecto3_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005288  08005288  00006288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a0  080052a0  0000a0b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052a0  080052a0  000062a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a8  080052a8  0000a0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000062a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052ac  080052ac  000062ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000030b8  20000000  080052b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200030b8  08008368  0000a0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031dc  08008368  0000a1dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcba  00000000  00000000  0000a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbb  00000000  00000000  00017da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00019d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d7  00000000  00000000  0001a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211b9  00000000  00000000  0001b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010678  00000000  00000000  0003c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cef4a  00000000  00000000  0004cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bb32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  0011bb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0011eff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200030b8 	.word	0x200030b8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005270 	.word	0x08005270

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200030bc 	.word	0x200030bc
 8000200:	08005270 	.word	0x08005270

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2101      	movs	r1, #1
 8000538:	4878      	ldr	r0, [pc, #480]	@ (800071c <LCD_Init+0x1ec>)
 800053a:	f001 fc95 	bl	8001e68 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 800053e:	2201      	movs	r2, #1
 8000540:	2113      	movs	r1, #19
 8000542:	4877      	ldr	r0, [pc, #476]	@ (8000720 <LCD_Init+0x1f0>)
 8000544:	f001 fc90 	bl	8001e68 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2102      	movs	r1, #2
 800054c:	4875      	ldr	r0, [pc, #468]	@ (8000724 <LCD_Init+0x1f4>)
 800054e:	f001 fc8b 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000552:	2005      	movs	r0, #5
 8000554:	f001 f976 	bl	8001844 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2102      	movs	r1, #2
 800055c:	4871      	ldr	r0, [pc, #452]	@ (8000724 <LCD_Init+0x1f4>)
 800055e:	f001 fc83 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000562:	2014      	movs	r0, #20
 8000564:	f001 f96e 	bl	8001844 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2102      	movs	r1, #2
 800056c:	486d      	ldr	r0, [pc, #436]	@ (8000724 <LCD_Init+0x1f4>)
 800056e:	f001 fc7b 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000572:	2096      	movs	r0, #150	@ 0x96
 8000574:	f001 f966 	bl	8001844 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4867      	ldr	r0, [pc, #412]	@ (800071c <LCD_Init+0x1ec>)
 800057e:	f001 fc73 	bl	8001e68 <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000582:	20e9      	movs	r0, #233	@ 0xe9
 8000584:	f000 f8d0 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x20);
 8000588:	2020      	movs	r0, #32
 800058a:	f000 f973 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800058e:	2011      	movs	r0, #17
 8000590:	f000 f8ca 	bl	8000728 <LCD_CMD>
	HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	@ 0x64
 8000596:	f001 f955 	bl	8001844 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800059a:	20d1      	movs	r0, #209	@ 0xd1
 800059c:	f000 f8c4 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f967 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x71);
 80005a6:	2071      	movs	r0, #113	@ 0x71
 80005a8:	f000 f964 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x19);
 80005ac:	2019      	movs	r0, #25
 80005ae:	f000 f961 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 80005b2:	20d0      	movs	r0, #208	@ 0xd0
 80005b4:	f000 f8b8 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x07);
 80005b8:	2007      	movs	r0, #7
 80005ba:	f000 f95b 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f958 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x08);
 80005c4:	2008      	movs	r0, #8
 80005c6:	f000 f955 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 80005ca:	2036      	movs	r0, #54	@ 0x36
 80005cc:	f000 f8ac 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 80005d0:	20e8      	movs	r0, #232	@ 0xe8
 80005d2:	f000 f94f 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 80005d6:	203a      	movs	r0, #58	@ 0x3a
 80005d8:	f000 f8a6 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 80005dc:	2005      	movs	r0, #5
 80005de:	f000 f949 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 80005e2:	20c1      	movs	r0, #193	@ 0xc1
 80005e4:	f000 f8a0 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x10);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f000 f943 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x10);
 80005ee:	2010      	movs	r0, #16
 80005f0:	f000 f940 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x02);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 f93d 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x02);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 f93a 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000600:	20c0      	movs	r0, #192	@ 0xc0
 8000602:	f000 f891 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f934 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x35);
 800060c:	2035      	movs	r0, #53	@ 0x35
 800060e:	f000 f931 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f92e 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f92b 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f928 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x02);
 8000624:	2002      	movs	r0, #2
 8000626:	f000 f925 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 800062a:	20c5      	movs	r0, #197	@ 0xc5
 800062c:	f000 f87c 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8000630:	2004      	movs	r0, #4
 8000632:	f000 f91f 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 8000636:	20d2      	movs	r0, #210	@ 0xd2
 8000638:	f000 f876 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x01);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 f919 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x44);
 8000642:	2044      	movs	r0, #68	@ 0x44
 8000644:	f000 f916 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 8000648:	20c8      	movs	r0, #200	@ 0xc8
 800064a:	f000 f86d 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x04);
 800064e:	2004      	movs	r0, #4
 8000650:	f000 f910 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x67);
 8000654:	2067      	movs	r0, #103	@ 0x67
 8000656:	f000 f90d 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x35);
 800065a:	2035      	movs	r0, #53	@ 0x35
 800065c:	f000 f90a 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x04);
 8000660:	2004      	movs	r0, #4
 8000662:	f000 f907 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x08);
 8000666:	2008      	movs	r0, #8
 8000668:	f000 f904 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x06);
 800066c:	2006      	movs	r0, #6
 800066e:	f000 f901 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x24);
 8000672:	2024      	movs	r0, #36	@ 0x24
 8000674:	f000 f8fe 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 f8fb 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x37);
 800067e:	2037      	movs	r0, #55	@ 0x37
 8000680:	f000 f8f8 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x40);
 8000684:	2040      	movs	r0, #64	@ 0x40
 8000686:	f000 f8f5 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x03);
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f8f2 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x10);
 8000690:	2010      	movs	r0, #16
 8000692:	f000 f8ef 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x08);
 8000696:	2008      	movs	r0, #8
 8000698:	f000 f8ec 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x80);
 800069c:	2080      	movs	r0, #128	@ 0x80
 800069e:	f000 f8e9 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f8e6 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 80006a8:	202a      	movs	r0, #42	@ 0x2a
 80006aa:	f000 f83d 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f8e0 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 f8dd 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f8da 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x3F);
 80006c0:	203f      	movs	r0, #63	@ 0x3f
 80006c2:	f000 f8d7 	bl	8000874 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 80006c6:	202b      	movs	r0, #43	@ 0x2b
 80006c8:	f000 f82e 	bl	8000728 <LCD_CMD>
	LCD_DATA(0x00);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 f8d1 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x00);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 f8ce 	bl	8000874 <LCD_DATA>
	LCD_DATA(0x01);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 f8cb 	bl	8000874 <LCD_DATA>
	LCD_DATA(0xE0);
 80006de:	20e0      	movs	r0, #224	@ 0xe0
 80006e0:	f000 f8c8 	bl	8000874 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 80006e4:	2029      	movs	r0, #41	@ 0x29
 80006e6:	f000 f81f 	bl	8000728 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 80006ea:	202c      	movs	r0, #44	@ 0x2c
 80006ec:	f000 f81c 	bl	8000728 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 80006f0:	2020      	movs	r0, #32
 80006f2:	f000 f819 	bl	8000728 <LCD_CMD>
	HAL_Delay(120);
 80006f6:	2078      	movs	r0, #120	@ 0x78
 80006f8:	f001 f8a4 	bl	8001844 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 80006fc:	2011      	movs	r0, #17
 80006fe:	f000 f813 	bl	8000728 <LCD_CMD>
	HAL_Delay(120);
 8000702:	2078      	movs	r0, #120	@ 0x78
 8000704:	f001 f89e 	bl	8001844 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000708:	2029      	movs	r0, #41	@ 0x29
 800070a:	f000 f80d 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2101      	movs	r1, #1
 8000712:	4802      	ldr	r0, [pc, #8]	@ (800071c <LCD_Init+0x1ec>)
 8000714:	f001 fba8 	bl	8001e68 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020400 	.word	0x40020400
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800

08000728 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	484c      	ldr	r0, [pc, #304]	@ (8000868 <LCD_CMD+0x140>)
 8000738:	f001 fb96 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2102      	movs	r1, #2
 8000740:	4849      	ldr	r0, [pc, #292]	@ (8000868 <LCD_CMD+0x140>)
 8000742:	f001 fb91 	bl	8001e68 <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000756:	4844      	ldr	r0, [pc, #272]	@ (8000868 <LCD_CMD+0x140>)
 8000758:	f001 fb86 	bl	8001e68 <HAL_GPIO_WritePin>
 800075c:	e005      	b.n	800076a <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	4840      	ldr	r0, [pc, #256]	@ (8000868 <LCD_CMD+0x140>)
 8000766:	f001 fb7f 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b00      	cmp	r3, #0
 8000772:	d005      	beq.n	8000780 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	483c      	ldr	r0, [pc, #240]	@ (800086c <LCD_CMD+0x144>)
 800077a:	f001 fb75 	bl	8001e68 <HAL_GPIO_WritePin>
 800077e:	e004      	b.n	800078a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2180      	movs	r1, #128	@ 0x80
 8000784:	4839      	ldr	r0, [pc, #228]	@ (800086c <LCD_CMD+0x144>)
 8000786:	f001 fb6f 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	2b00      	cmp	r3, #0
 8000792:	d006      	beq.n	80007a2 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800079a:	4833      	ldr	r0, [pc, #204]	@ (8000868 <LCD_CMD+0x140>)
 800079c:	f001 fb64 	bl	8001e68 <HAL_GPIO_WritePin>
 80007a0:	e005      	b.n	80007ae <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a8:	482f      	ldr	r0, [pc, #188]	@ (8000868 <LCD_CMD+0x140>)
 80007aa:	f001 fb5d 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	482c      	ldr	r0, [pc, #176]	@ (8000870 <LCD_CMD+0x148>)
 80007be:	f001 fb53 	bl	8001e68 <HAL_GPIO_WritePin>
 80007c2:	e004      	b.n	80007ce <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2108      	movs	r1, #8
 80007c8:	4829      	ldr	r0, [pc, #164]	@ (8000870 <LCD_CMD+0x148>)
 80007ca:	f001 fb4d 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f003 0310 	and.w	r3, r3, #16
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d005      	beq.n	80007e4 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2120      	movs	r1, #32
 80007dc:	4824      	ldr	r0, [pc, #144]	@ (8000870 <LCD_CMD+0x148>)
 80007de:	f001 fb43 	bl	8001e68 <HAL_GPIO_WritePin>
 80007e2:	e004      	b.n	80007ee <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	4821      	ldr	r0, [pc, #132]	@ (8000870 <LCD_CMD+0x148>)
 80007ea:	f001 fb3d 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2110      	movs	r1, #16
 80007fc:	481c      	ldr	r0, [pc, #112]	@ (8000870 <LCD_CMD+0x148>)
 80007fe:	f001 fb33 	bl	8001e68 <HAL_GPIO_WritePin>
 8000802:	e004      	b.n	800080e <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	4819      	ldr	r0, [pc, #100]	@ (8000870 <LCD_CMD+0x148>)
 800080a:	f001 fb2d 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000814:	2b00      	cmp	r3, #0
 8000816:	d006      	beq.n	8000826 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800081e:	4814      	ldr	r0, [pc, #80]	@ (8000870 <LCD_CMD+0x148>)
 8000820:	f001 fb22 	bl	8001e68 <HAL_GPIO_WritePin>
 8000824:	e005      	b.n	8000832 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800082c:	4810      	ldr	r0, [pc, #64]	@ (8000870 <LCD_CMD+0x148>)
 800082e:	f001 fb1b 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da06      	bge.n	8000848 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	4809      	ldr	r0, [pc, #36]	@ (8000868 <LCD_CMD+0x140>)
 8000842:	f001 fb11 	bl	8001e68 <HAL_GPIO_WritePin>
 8000846:	e005      	b.n	8000854 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <LCD_CMD+0x140>)
 8000850:	f001 fb0a 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2102      	movs	r1, #2
 8000858:	4803      	ldr	r0, [pc, #12]	@ (8000868 <LCD_CMD+0x140>)
 800085a:	f001 fb05 	bl	8001e68 <HAL_GPIO_WritePin>

}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	40020800 	.word	0x40020800
 8000870:	40020400 	.word	0x40020400

08000874 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2110      	movs	r1, #16
 8000882:	484c      	ldr	r0, [pc, #304]	@ (80009b4 <LCD_DATA+0x140>)
 8000884:	f001 faf0 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2102      	movs	r1, #2
 800088c:	4849      	ldr	r0, [pc, #292]	@ (80009b4 <LCD_DATA+0x140>)
 800088e:	f001 faeb 	bl	8001e68 <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b00      	cmp	r3, #0
 800089a:	d006      	beq.n	80008aa <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a2:	4844      	ldr	r0, [pc, #272]	@ (80009b4 <LCD_DATA+0x140>)
 80008a4:	f001 fae0 	bl	8001e68 <HAL_GPIO_WritePin>
 80008a8:	e005      	b.n	80008b6 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b0:	4840      	ldr	r0, [pc, #256]	@ (80009b4 <LCD_DATA+0x140>)
 80008b2:	f001 fad9 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d005      	beq.n	80008cc <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2180      	movs	r1, #128	@ 0x80
 80008c4:	483c      	ldr	r0, [pc, #240]	@ (80009b8 <LCD_DATA+0x144>)
 80008c6:	f001 facf 	bl	8001e68 <HAL_GPIO_WritePin>
 80008ca:	e004      	b.n	80008d6 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	4839      	ldr	r0, [pc, #228]	@ (80009b8 <LCD_DATA+0x144>)
 80008d2:	f001 fac9 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d006      	beq.n	80008ee <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e6:	4833      	ldr	r0, [pc, #204]	@ (80009b4 <LCD_DATA+0x140>)
 80008e8:	f001 fabe 	bl	8001e68 <HAL_GPIO_WritePin>
 80008ec:	e005      	b.n	80008fa <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f4:	482f      	ldr	r0, [pc, #188]	@ (80009b4 <LCD_DATA+0x140>)
 80008f6:	f001 fab7 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d005      	beq.n	8000910 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2108      	movs	r1, #8
 8000908:	482c      	ldr	r0, [pc, #176]	@ (80009bc <LCD_DATA+0x148>)
 800090a:	f001 faad 	bl	8001e68 <HAL_GPIO_WritePin>
 800090e:	e004      	b.n	800091a <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2108      	movs	r1, #8
 8000914:	4829      	ldr	r0, [pc, #164]	@ (80009bc <LCD_DATA+0x148>)
 8000916:	f001 faa7 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d005      	beq.n	8000930 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	4824      	ldr	r0, [pc, #144]	@ (80009bc <LCD_DATA+0x148>)
 800092a:	f001 fa9d 	bl	8001e68 <HAL_GPIO_WritePin>
 800092e:	e004      	b.n	800093a <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2120      	movs	r1, #32
 8000934:	4821      	ldr	r0, [pc, #132]	@ (80009bc <LCD_DATA+0x148>)
 8000936:	f001 fa97 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	2b00      	cmp	r3, #0
 8000942:	d005      	beq.n	8000950 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	481c      	ldr	r0, [pc, #112]	@ (80009bc <LCD_DATA+0x148>)
 800094a:	f001 fa8d 	bl	8001e68 <HAL_GPIO_WritePin>
 800094e:	e004      	b.n	800095a <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2110      	movs	r1, #16
 8000954:	4819      	ldr	r0, [pc, #100]	@ (80009bc <LCD_DATA+0x148>)
 8000956:	f001 fa87 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000960:	2b00      	cmp	r3, #0
 8000962:	d006      	beq.n	8000972 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800096a:	4814      	ldr	r0, [pc, #80]	@ (80009bc <LCD_DATA+0x148>)
 800096c:	f001 fa7c 	bl	8001e68 <HAL_GPIO_WritePin>
 8000970:	e005      	b.n	800097e <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000978:	4810      	ldr	r0, [pc, #64]	@ (80009bc <LCD_DATA+0x148>)
 800097a:	f001 fa75 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	da06      	bge.n	8000994 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800098c:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <LCD_DATA+0x140>)
 800098e:	f001 fa6b 	bl	8001e68 <HAL_GPIO_WritePin>
 8000992:	e005      	b.n	80009a0 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <LCD_DATA+0x140>)
 800099c:	f001 fa64 	bl	8001e68 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2102      	movs	r1, #2
 80009a4:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <LCD_DATA+0x140>)
 80009a6:	f001 fa5f 	bl	8001e68 <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020400 	.word	0x40020400

080009c0 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 80009ce:	202a      	movs	r0, #42	@ 0x2a
 80009d0:	f7ff feaa 	bl	8000728 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff4a 	bl	8000874 <LCD_DATA>
	LCD_DATA(x1);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff45 	bl	8000874 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff3f 	bl	8000874 <LCD_DATA>
	LCD_DATA(x2);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff3a 	bl	8000874 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000a00:	202b      	movs	r0, #43	@ 0x2b
 8000a02:	f7ff fe91 	bl	8000728 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff31 	bl	8000874 <LCD_DATA>
	LCD_DATA(y1);
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff2c 	bl	8000874 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff26 	bl	8000874 <LCD_DATA>
	LCD_DATA(y2);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff21 	bl	8000874 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000a32:	202c      	movs	r0, #44	@ 0x2c
 8000a34:	f7ff fe78 	bl	8000728 <LCD_CMD>
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 8000a48:	202c      	movs	r0, #44	@ 0x2c
 8000a4a:	f7ff fe6d 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2110      	movs	r1, #16
 8000a52:	481b      	ldr	r0, [pc, #108]	@ (8000ac0 <LCD_Clear+0x80>)
 8000a54:	f001 fa08 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <LCD_Clear+0x84>)
 8000a5e:	f001 fa03 	bl	8001e68 <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 8000a62:	23ef      	movs	r3, #239	@ 0xef
 8000a64:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffa8 	bl	80009c0 <SetWindows>
	for (x = 0; x < 320; x++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e016      	b.n	8000aa4 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	e00d      	b.n	8000a98 <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fef6 	bl	8000874 <LCD_DATA>
			LCD_DATA(c);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fef1 	bl	8000874 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2bef      	cmp	r3, #239	@ 0xef
 8000a9c:	d9ee      	bls.n	8000a7c <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000aaa:	d3e4      	bcc.n	8000a76 <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <LCD_Clear+0x84>)
 8000ab2:	f001 f9d9 	bl	8001e68 <HAL_GPIO_WritePin>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000ad6:	202c      	movs	r0, #44	@ 0x2c
 8000ad8:	f7ff fe26 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2110      	movs	r1, #16
 8000ae0:	4824      	ldr	r0, [pc, #144]	@ (8000b74 <FillRect+0xac>)
 8000ae2:	f001 f9c1 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4823      	ldr	r0, [pc, #140]	@ (8000b78 <FillRect+0xb0>)
 8000aec:	f001 f9bc 	bl	8001e68 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff ff58 	bl	80009c0 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	fb02 f303 	mul.w	r3, r2, r3
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
 8000b22:	e01a      	b.n	8000b5a <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	e010      	b.n	8000b4c <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe9f 	bl	8000874 <LCD_DATA>
			LCD_DATA(c);
 8000b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fe9a 	bl	8000874 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	3b02      	subs	r3, #2
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8ea      	bhi.n	8000b2a <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	3301      	adds	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d8e0      	bhi.n	8000b24 <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2101      	movs	r1, #1
 8000b66:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <FillRect+0xb0>)
 8000b68:	f001 f97e 	bl	8001e68 <HAL_GPIO_WritePin>
}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400

08000b7c <LCD_Sprite>:
}
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	@ 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000b8a:	202c      	movs	r0, #44	@ 0x2c
 8000b8c:	f7ff fdcc 	bl	8000728 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2110      	movs	r1, #16
 8000b94:	484d      	ldr	r0, [pc, #308]	@ (8000ccc <LCD_Sprite+0x150>)
 8000b96:	f001 f967 	bl	8001e68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	484c      	ldr	r0, [pc, #304]	@ (8000cd0 <LCD_Sprite+0x154>)
 8000ba0:	f001 f962 	bl	8001e68 <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f7ff fefe 	bl	80009c0 <SetWindows>
	int k = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bcc:	fb02 f303 	mul.w	r3, r2, r3
 8000bd0:	613b      	str	r3, [r7, #16]
	if (flip) {
 8000bd2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d03a      	beq.n	8000c50 <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bde:	e032      	b.n	8000c46 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8000be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	fb03 f202 	mul.w	r2, r3, r2
 8000be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c0c:	e014      	b.n	8000c38 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8000c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c12:	4413      	add	r3, r2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe2c 	bl	8000874 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c1e:	3301      	adds	r3, #1
 8000c20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe24 	bl	8000874 <LCD_DATA>
				k = k - 2;
 8000c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2e:	3b02      	subs	r3, #2
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	3301      	adds	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbe6      	blt.n	8000c0e <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8000c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c42:	3301      	adds	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbc8      	blt.n	8000be0 <LCD_Sprite+0x64>
 8000c4e:	e034      	b.n	8000cba <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	e02d      	b.n	8000cb2 <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	fb03 f202 	mul.w	r2, r3, r2
 8000c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	fb01 f303 	mul.w	r3, r1, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000c6e:	4413      	add	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	e014      	b.n	8000ca4 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8000c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fdf6 	bl	8000874 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8000c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c8e:	4413      	add	r3, r2
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fdee 	bl	8000874 <LCD_DATA>
				k = k + 2;
 8000c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbe6      	blt.n	8000c7a <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
 8000cb2:	6a3a      	ldr	r2, [r7, #32]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbcd      	blt.n	8000c56 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <LCD_Sprite+0x154>)
 8000cc0:	f001 f8d2 	bl	8001e68 <HAL_GPIO_WritePin>
}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	@ 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 fd41 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f97b 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f000 fa75 	bl	80011d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ce6:	f000 fa49 	bl	800117c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cea:	f000 fa11 	bl	8001110 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000cee:	f000 f9e1 	bl	80010b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000cf2:	f7ff fc1d 	bl	8000530 <LCD_Init>

  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 8000cf6:	48ab      	ldr	r0, [pc, #684]	@ (8000fa4 <main+0x2d0>)
 8000cf8:	f001 fb0f 	bl	800231a <HAL_I2C_EnableListen_IT>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <main+0x32>
	  Error_Handler();
 8000d02:	f000 fb97 	bl	8001434 <Error_Handler>
  }
  //HAL_ADC_Start(&hadc1);

  //********************* Iniciliazación del fondo **********************************************
  LCD_Clear(0x00);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fe9a 	bl	8000a40 <LCD_Clear>
  FillRect(0, 0, 319, 239, 0x4a49);
 8000d0c:	f644 2349 	movw	r3, #19017	@ 0x4a49
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	23ef      	movs	r3, #239	@ 0xef
 8000d14:	f240 123f 	movw	r2, #319	@ 0x13f
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fed4 	bl	8000ac8 <FillRect>
  FillRect(80, 0,3,75,0xff20 );
 8000d20:	f64f 7320 	movw	r3, #65312	@ 0xff20
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	234b      	movs	r3, #75	@ 0x4b
 8000d28:	2203      	movs	r2, #3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2050      	movs	r0, #80	@ 0x50
 8000d2e:	f7ff fecb 	bl	8000ac8 <FillRect>
  FillRect(160, 0,3,75,0xff20 );
 8000d32:	f64f 7320 	movw	r3, #65312	@ 0xff20
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	234b      	movs	r3, #75	@ 0x4b
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	20a0      	movs	r0, #160	@ 0xa0
 8000d40:	f7ff fec2 	bl	8000ac8 <FillRect>
  FillRect(240, 0,3,75,0xff20 );
 8000d44:	f64f 7320 	movw	r3, #65312	@ 0xff20
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	234b      	movs	r3, #75	@ 0x4b
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	20f0      	movs	r0, #240	@ 0xf0
 8000d52:	f7ff feb9 	bl	8000ac8 <FillRect>
  FillRect(80, 154,3,75,0xff20 );
 8000d56:	f64f 7320 	movw	r3, #65312	@ 0xff20
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	234b      	movs	r3, #75	@ 0x4b
 8000d5e:	2203      	movs	r2, #3
 8000d60:	219a      	movs	r1, #154	@ 0x9a
 8000d62:	2050      	movs	r0, #80	@ 0x50
 8000d64:	f7ff feb0 	bl	8000ac8 <FillRect>
  FillRect(160, 154,3,75,0xff20 );
 8000d68:	f64f 7320 	movw	r3, #65312	@ 0xff20
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	234b      	movs	r3, #75	@ 0x4b
 8000d70:	2203      	movs	r2, #3
 8000d72:	219a      	movs	r1, #154	@ 0x9a
 8000d74:	20a0      	movs	r0, #160	@ 0xa0
 8000d76:	f7ff fea7 	bl	8000ac8 <FillRect>
  FillRect(240, 154,3,75,0xff20 );
 8000d7a:	f64f 7320 	movw	r3, #65312	@ 0xff20
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	234b      	movs	r3, #75	@ 0x4b
 8000d82:	2203      	movs	r2, #3
 8000d84:	219a      	movs	r1, #154	@ 0x9a
 8000d86:	20f0      	movs	r0, #240	@ 0xf0
 8000d88:	f7ff fe9e 	bl	8000ac8 <FillRect>

	      //HAL_ADC_Start(&hadc1);
	 	  //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	 	  //valorADC = HAL_ADC_GetValue(&hadc1);

	      valorLDR5 = HAL_GPIO_ReadPin(GPIOC, LDR_1_Pin);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4886      	ldr	r0, [pc, #536]	@ (8000fa8 <main+0x2d4>)
 8000d90:	f001 f852 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b84      	ldr	r3, [pc, #528]	@ (8000fac <main+0x2d8>)
 8000d9a:	701a      	strb	r2, [r3, #0]
	 	  if (valorLDR5)
 8000d9c:	4b83      	ldr	r3, [pc, #524]	@ (8000fac <main+0x2d8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d01e      	beq.n	8000de2 <main+0x10e>
	 	      {
	 	        HAL_GPIO_WritePin(GPIOC, LED5_G_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000daa:	487f      	ldr	r0, [pc, #508]	@ (8000fa8 <main+0x2d4>)
 8000dac:	f001 f85c 	bl	8001e68 <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(GPIOC, LED5_R_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	@ 0x40
 8000db4:	487c      	ldr	r0, [pc, #496]	@ (8000fa8 <main+0x2d4>)
 8000db6:	f001 f857 	bl	8001e68 <HAL_GPIO_WritePin>
	 	       LCD_Sprite(0, 0, 70, 89, Car_red_prueba, 1, 0, 1, 0);
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9304      	str	r3, [sp, #16]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	4b79      	ldr	r3, [pc, #484]	@ (8000fb0 <main+0x2dc>)
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2359      	movs	r3, #89	@ 0x59
 8000dd0:	2246      	movs	r2, #70	@ 0x46
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fed1 	bl	8000b7c <LCD_Sprite>
	 	       Park5_available = 1;
 8000dda:	4b76      	ldr	r3, [pc, #472]	@ (8000fb4 <main+0x2e0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e016      	b.n	8000e10 <main+0x13c>
	 	      }
	 	  else
	 	      {
	 	        HAL_GPIO_WritePin(GPIOC,  LED5_G_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	486f      	ldr	r0, [pc, #444]	@ (8000fa8 <main+0x2d4>)
 8000dea:	f001 f83d 	bl	8001e68 <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(GPIOC,  LED5_R_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2140      	movs	r1, #64	@ 0x40
 8000df2:	486d      	ldr	r0, [pc, #436]	@ (8000fa8 <main+0x2d4>)
 8000df4:	f001 f838 	bl	8001e68 <HAL_GPIO_WritePin>
	 	       //green_count_local++;
	 	       Park5_available = 0;
 8000df8:	4b6e      	ldr	r3, [pc, #440]	@ (8000fb4 <main+0x2e0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	 	        FillRect(0, 0, 70, 89, 0x4a49);
 8000dfe:	f644 2349 	movw	r3, #19017	@ 0x4a49
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2359      	movs	r3, #89	@ 0x59
 8000e06:	2246      	movs	r2, #70	@ 0x46
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fe5c 	bl	8000ac8 <FillRect>
	 	      }

	 	  valorLDR6 = HAL_GPIO_ReadPin(GPIOC, LDR_2_Pin);
 8000e10:	2108      	movs	r1, #8
 8000e12:	4865      	ldr	r0, [pc, #404]	@ (8000fa8 <main+0x2d4>)
 8000e14:	f001 f810 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b66      	ldr	r3, [pc, #408]	@ (8000fb8 <main+0x2e4>)
 8000e1e:	701a      	strb	r2, [r3, #0]
	 	 if (valorLDR6)
 8000e20:	4b65      	ldr	r3, [pc, #404]	@ (8000fb8 <main+0x2e4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01f      	beq.n	8000e68 <main+0x194>
	 	      {
	 	 	 	  HAL_GPIO_WritePin(GPIOA, LED6_G_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e2e:	4863      	ldr	r0, [pc, #396]	@ (8000fbc <main+0x2e8>)
 8000e30:	f001 f81a 	bl	8001e68 <HAL_GPIO_WritePin>
	 	 	 	  HAL_GPIO_WritePin(GPIOA, LED6_R_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e3a:	4860      	ldr	r0, [pc, #384]	@ (8000fbc <main+0x2e8>)
 8000e3c:	f001 f814 	bl	8001e68 <HAL_GPIO_WritePin>
	 	 	 	  LCD_Sprite(83, 0, 70, 89, Car_red_prueba, 1, 0, 1, 0);
 8000e40:	2300      	movs	r3, #0
 8000e42:	9304      	str	r3, [sp, #16]
 8000e44:	2301      	movs	r3, #1
 8000e46:	9303      	str	r3, [sp, #12]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	4b57      	ldr	r3, [pc, #348]	@ (8000fb0 <main+0x2dc>)
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2359      	movs	r3, #89	@ 0x59
 8000e56:	2246      	movs	r2, #70	@ 0x46
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2053      	movs	r0, #83	@ 0x53
 8000e5c:	f7ff fe8e 	bl	8000b7c <LCD_Sprite>
	 	 	 	  Park6_available = 1;
 8000e60:	4b57      	ldr	r3, [pc, #348]	@ (8000fc0 <main+0x2ec>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e017      	b.n	8000e98 <main+0x1c4>
	 	 	   }
	 	 	 else
	 	 	   {
	 	 	       HAL_GPIO_WritePin(GPIOA,  LED6_G_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6e:	4853      	ldr	r0, [pc, #332]	@ (8000fbc <main+0x2e8>)
 8000e70:	f000 fffa 	bl	8001e68 <HAL_GPIO_WritePin>
	 	 	 	   HAL_GPIO_WritePin(GPIOA,  LED6_R_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e7a:	4850      	ldr	r0, [pc, #320]	@ (8000fbc <main+0x2e8>)
 8000e7c:	f000 fff4 	bl	8001e68 <HAL_GPIO_WritePin>
	 	 	 	 //green_count_local++;
	 	 	 	   FillRect(83, 0, 70, 89, 0x4a49);
 8000e80:	f644 2349 	movw	r3, #19017	@ 0x4a49
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2359      	movs	r3, #89	@ 0x59
 8000e88:	2246      	movs	r2, #70	@ 0x46
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2053      	movs	r0, #83	@ 0x53
 8000e8e:	f7ff fe1b 	bl	8000ac8 <FillRect>
	 	 	 	   Park6_available = 0;
 8000e92:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc0 <main+0x2ec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	 	 	 	}


	 	valorLDR7 = HAL_GPIO_ReadPin(GPIOC, LDR_3_Pin);
 8000e98:	2110      	movs	r1, #16
 8000e9a:	4843      	ldr	r0, [pc, #268]	@ (8000fa8 <main+0x2d4>)
 8000e9c:	f000 ffcc 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <main+0x2f0>)
 8000ea6:	701a      	strb	r2, [r3, #0]
	 		 	 if (valorLDR7)
 8000ea8:	4b46      	ldr	r3, [pc, #280]	@ (8000fc4 <main+0x2f0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d01e      	beq.n	8000eee <main+0x21a>
	 		 	      {
	 		 	 	 	  HAL_GPIO_WritePin(GPIOB, LED7_G_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb6:	4844      	ldr	r0, [pc, #272]	@ (8000fc8 <main+0x2f4>)
 8000eb8:	f000 ffd6 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 	 	 	  HAL_GPIO_WritePin(GPIOB, LED7_R_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4841      	ldr	r0, [pc, #260]	@ (8000fc8 <main+0x2f4>)
 8000ec2:	f000 ffd1 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 	 	 	  LCD_Sprite(163, 0, 70, 89, Car_red_prueba, 1, 0, 1, 0);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9304      	str	r3, [sp, #16]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	4b36      	ldr	r3, [pc, #216]	@ (8000fb0 <main+0x2dc>)
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2359      	movs	r3, #89	@ 0x59
 8000edc:	2246      	movs	r2, #70	@ 0x46
 8000ede:	2100      	movs	r1, #0
 8000ee0:	20a3      	movs	r0, #163	@ 0xa3
 8000ee2:	f7ff fe4b 	bl	8000b7c <LCD_Sprite>
	 		 	 	 	Park7_available = 1;
 8000ee6:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <main+0x2f8>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e016      	b.n	8000f1c <main+0x248>
	 		 	 	   }
	 		 	 	 else
	 		 	 	   {
	 		 	 	       HAL_GPIO_WritePin(GPIOB,  LED7_G_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef4:	4834      	ldr	r0, [pc, #208]	@ (8000fc8 <main+0x2f4>)
 8000ef6:	f000 ffb7 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 	 	 	   HAL_GPIO_WritePin(GPIOB,  LED7_R_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2104      	movs	r1, #4
 8000efe:	4832      	ldr	r0, [pc, #200]	@ (8000fc8 <main+0x2f4>)
 8000f00:	f000 ffb2 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 	 	 	// green_count_local++;
	 		 	 	 	   FillRect(163, 0, 70, 89, 0x4a49);
 8000f04:	f644 2349 	movw	r3, #19017	@ 0x4a49
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2359      	movs	r3, #89	@ 0x59
 8000f0c:	2246      	movs	r2, #70	@ 0x46
 8000f0e:	2100      	movs	r1, #0
 8000f10:	20a3      	movs	r0, #163	@ 0xa3
 8000f12:	f7ff fdd9 	bl	8000ac8 <FillRect>
	 		 	 	 	Park7_available = 0;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <main+0x2f8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
	 		 	 	 	}


	 		 	valorLDR8 = HAL_GPIO_ReadPin(GPIOC, LDR_4_Pin);
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4822      	ldr	r0, [pc, #136]	@ (8000fa8 <main+0x2d4>)
 8000f20:	f000 ff8a 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <main+0x2fc>)
 8000f2a:	701a      	strb	r2, [r3, #0]
	 		 	if (valorLDR8)
 8000f2c:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <main+0x2fc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d01e      	beq.n	8000f72 <main+0x29e>
	 		 		 		 	      {
	 		 		 		 	 	 	  HAL_GPIO_WritePin(GPIOB, LED8_G_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	4823      	ldr	r0, [pc, #140]	@ (8000fc8 <main+0x2f4>)
 8000f3a:	f000 ff95 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 		 		 	 	 	  HAL_GPIO_WritePin(GPIOB, LED8_R_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f44:	4820      	ldr	r0, [pc, #128]	@ (8000fc8 <main+0x2f4>)
 8000f46:	f000 ff8f 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 		 		 	 	 	  LCD_Sprite(243, 0, 70, 89, Car_red_prueba, 1, 0, 1, 0);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9304      	str	r3, [sp, #16]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9303      	str	r3, [sp, #12]
 8000f52:	2300      	movs	r3, #0
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <main+0x2dc>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2359      	movs	r3, #89	@ 0x59
 8000f60:	2246      	movs	r2, #70	@ 0x46
 8000f62:	2100      	movs	r1, #0
 8000f64:	20f3      	movs	r0, #243	@ 0xf3
 8000f66:	f7ff fe09 	bl	8000b7c <LCD_Sprite>
	 		 		 		 	 	 Park8_available = 1;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <main+0x300>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e70c      	b.n	8000d8c <main+0xb8>
	 		 		 		 	 	   }
	 		 		 		 	 	 else
	 		 		 		 	 	   {
	 		 		 		 	 	       HAL_GPIO_WritePin(GPIOB,  LED8_G_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2102      	movs	r1, #2
 8000f76:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <main+0x2f4>)
 8000f78:	f000 ff76 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 		 		 	 	 	   HAL_GPIO_WritePin(GPIOB,  LED8_R_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f82:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <main+0x2f4>)
 8000f84:	f000 ff70 	bl	8001e68 <HAL_GPIO_WritePin>
	 		 		 		 	 	//  green_count_local++;
	 		 		 		 	 	 	   FillRect(243, 0, 70, 89, 0x4a49);
 8000f88:	f644 2349 	movw	r3, #19017	@ 0x4a49
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2359      	movs	r3, #89	@ 0x59
 8000f90:	2246      	movs	r2, #70	@ 0x46
 8000f92:	2100      	movs	r1, #0
 8000f94:	20f3      	movs	r0, #243	@ 0xf3
 8000f96:	f7ff fd97 	bl	8000ac8 <FillRect>
	 		 		 		 	 	 	Park8_available = 0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <main+0x300>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	      valorLDR5 = HAL_GPIO_ReadPin(GPIOC, LDR_1_Pin);
 8000fa0:	e6f4      	b.n	8000d8c <main+0xb8>
 8000fa2:	bf00      	nop
 8000fa4:	200030d4 	.word	0x200030d4
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	200031c8 	.word	0x200031c8
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	200031d4 	.word	0x200031d4
 8000fb8:	200031c9 	.word	0x200031c9
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	200031d5 	.word	0x200031d5
 8000fc4:	200031ca 	.word	0x200031ca
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	200031d6 	.word	0x200031d6
 8000fd0:	200031cb 	.word	0x200031cb
 8000fd4:	200031d7 	.word	0x200031d7

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	@ 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	2234      	movs	r2, #52	@ 0x34
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 f916 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b2a      	ldr	r3, [pc, #168]	@ (80010ac <SystemClock_Config+0xd4>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	4a29      	ldr	r2, [pc, #164]	@ (80010ac <SystemClock_Config+0xd4>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	@ 0x40
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <SystemClock_Config+0xd4>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <SystemClock_Config+0xd8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001024:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <SystemClock_Config+0xd8>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <SystemClock_Config+0xd8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800104c:	2310      	movs	r3, #16
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001050:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001054:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001056:	2304      	movs	r3, #4
 8001058:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4618      	mov	r0, r3
 8001068:	f003 f9a4 	bl	80043b4 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001072:	f000 f9df 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	2302      	movs	r3, #2
 800107c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fe44 	bl	8003d20 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800109e:	f000 f9c9 	bl	8001434 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	@ 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <MX_I2C1_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_I2C1_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010cc:	22aa      	movs	r2, #170	@ 0xaa
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010f2:	f000 fed3 	bl	8001e9c <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 f99a 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200030d4 	.word	0x200030d4
 8001108:	40005400 	.word	0x40005400
 800110c:	000186a0 	.word	0x000186a0

08001110 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001116:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <MX_SPI1_Init+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <MX_SPI1_Init+0x64>)
 800111c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001120:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <MX_SPI1_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_SPI1_Init+0x64>)
 800113c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001140:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001144:	2210      	movs	r2, #16
 8001146:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <MX_SPI1_Init+0x64>)
 800115c:	220a      	movs	r2, #10
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <MX_SPI1_Init+0x64>)
 8001162:	f003 fbc5 	bl	80048f0 <HAL_SPI_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800116c:	f000 f962 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20003128 	.word	0x20003128
 8001178:	40013000 	.word	0x40013000

0800117c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_USART2_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f003 fc25 	bl	8004a02 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f000 f939 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20003180 	.word	0x20003180
 80011cc:	40004400 	.word	0x40004400

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b50      	ldr	r3, [pc, #320]	@ (800132c <MX_GPIO_Init+0x15c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a4f      	ldr	r2, [pc, #316]	@ (800132c <MX_GPIO_Init+0x15c>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <MX_GPIO_Init+0x15c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b49      	ldr	r3, [pc, #292]	@ (800132c <MX_GPIO_Init+0x15c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a48      	ldr	r2, [pc, #288]	@ (800132c <MX_GPIO_Init+0x15c>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b46      	ldr	r3, [pc, #280]	@ (800132c <MX_GPIO_Init+0x15c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b42      	ldr	r3, [pc, #264]	@ (800132c <MX_GPIO_Init+0x15c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a41      	ldr	r2, [pc, #260]	@ (800132c <MX_GPIO_Init+0x15c>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <MX_GPIO_Init+0x15c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <MX_GPIO_Init+0x15c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a3a      	ldr	r2, [pc, #232]	@ (800132c <MX_GPIO_Init+0x15c>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b38      	ldr	r3, [pc, #224]	@ (800132c <MX_GPIO_Init+0x15c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LED5_R_Pin|LCD_D1_Pin|LED5_G_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 800125c:	4834      	ldr	r0, [pc, #208]	@ (8001330 <MX_GPIO_Init+0x160>)
 800125e:	f000 fe03 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001262:	2200      	movs	r2, #0
 8001264:	f641 7113 	movw	r1, #7955	@ 0x1f13
 8001268:	4832      	ldr	r0, [pc, #200]	@ (8001334 <MX_GPIO_Init+0x164>)
 800126a:	f000 fdfd 	bl	8001e68 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin|LCD_D2_Pin|LED6_R_Pin|LED6_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LED8_G_Pin|LED7_R_Pin|LCD_D6_Pin
 800126e:	2200      	movs	r2, #0
 8001270:	f24b 417f 	movw	r1, #46207	@ 0xb47f
 8001274:	4830      	ldr	r0, [pc, #192]	@ (8001338 <MX_GPIO_Init+0x168>)
 8001276:	f000 fdf7 	bl	8001e68 <HAL_GPIO_WritePin>
                          |LED7_G_Pin|LD2_Pin|LED8_R_Pin|LCD_D3_Pin
                          |LCD_D5_Pin|LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800127a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001280:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4827      	ldr	r0, [pc, #156]	@ (8001330 <MX_GPIO_Init+0x160>)
 8001292:	f000 fc3d 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LED5_R_Pin LCD_D1_Pin LED5_G_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LED5_R_Pin|LCD_D1_Pin|LED5_G_Pin;
 8001296:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4820      	ldr	r0, [pc, #128]	@ (8001330 <MX_GPIO_Init+0x160>)
 80012b0:	f000 fc2e 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDR_1_Pin LDR_2_Pin LDR_3_Pin LDR_4_Pin */
  GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin|LDR_3_Pin|LDR_4_Pin;
 80012b4:	233c      	movs	r3, #60	@ 0x3c
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	481a      	ldr	r0, [pc, #104]	@ (8001330 <MX_GPIO_Init+0x160>)
 80012c8:	f000 fc22 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin LED6_R_Pin LED6_G_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 80012cc:	f641 7313 	movw	r3, #7955	@ 0x1f13
 80012d0:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin|LED6_R_Pin|LED6_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4813      	ldr	r0, [pc, #76]	@ (8001334 <MX_GPIO_Init+0x164>)
 80012e6:	f000 fc13 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LED8_G_Pin LED7_R_Pin LCD_D6_Pin
                           LED7_G_Pin LD2_Pin LED8_R_Pin LCD_D3_Pin
                           LCD_D5_Pin LCD_D4_Pin SD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LED8_G_Pin|LED7_R_Pin|LCD_D6_Pin
 80012ea:	f24b 437f 	movw	r3, #46207	@ 0xb47f
 80012ee:	617b      	str	r3, [r7, #20]
                          |LED7_G_Pin|LD2_Pin|LED8_R_Pin|LCD_D3_Pin
                          |LCD_D5_Pin|LCD_D4_Pin|SD_SS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	@ (8001338 <MX_GPIO_Init+0x168>)
 8001304:	f000 fc04 	bl	8001b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001308:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_GPIO_Init+0x160>)
 8001320:	f000 fbf6 	bl	8001b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_I2C_ListenCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 ffe8 	bl	800231a <HAL_I2C_EnableListen_IT>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_I2C_SlaveTxCpltCallback>:


void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle) {
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	aTxBuffer[0] = Park5_available;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_I2C_SlaveTxCpltCallback+0x34>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001362:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = Park6_available;
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 800136a:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = Park7_available;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_I2C_SlaveTxCpltCallback+0x40>)
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8001372:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3] = Park8_available;
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_I2C_SlaveTxCpltCallback+0x44>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <HAL_I2C_SlaveTxCpltCallback+0x38>)
 800137a:	70da      	strb	r2, [r3, #3]

}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	200031d4 	.word	0x200031d4
 800138c:	200031cc 	.word	0x200031cc
 8001390:	200031d5 	.word	0x200031d5
 8001394:	200031d6 	.word	0x200031d6
 8001398:	200031d7 	.word	0x200031d7

0800139c <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHnadle) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, aRxBuffer, 4, 1000);
 80013a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a8:	2204      	movs	r2, #4
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80013ae:	f003 fb78 	bl	8004aa2 <HAL_UART_Transmit>
	if(aRxBuffer[0] == 'S'){
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b53      	cmp	r3, #83	@ 0x53
 80013b8:	d103      	bne.n	80013c2 <HAL_I2C_SlaveRxCpltCallback+0x26>
		//HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
		HAL_Delay(900);
 80013ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80013be:	f000 fa41 	bl	8001844 <HAL_Delay>
	}else{//HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
		}
	}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200031d0 	.word	0x200031d0
 80013d0:	20003180 	.word	0x20003180

080013d4 <HAL_I2C_AddrCallback>:


void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
 80013e0:	4613      	mov	r3, r2
 80013e2:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT){
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10b      	bne.n	8001402 <HAL_I2C_AddrCallback+0x2e>
		if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t*) aRxBuffer,
 80013ea:	2308      	movs	r3, #8
 80013ec:	2204      	movs	r2, #4
 80013ee:	490e      	ldr	r1, [pc, #56]	@ (8001428 <HAL_I2C_AddrCallback+0x54>)
 80013f0:	480e      	ldr	r0, [pc, #56]	@ (800142c <HAL_I2C_AddrCallback+0x58>)
 80013f2:	f000 ff1f 	bl	8002234 <HAL_I2C_Slave_Seq_Receive_IT>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d010      	beq.n	800141e <HAL_I2C_AddrCallback+0x4a>
				RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) !=HAL_OK) {
			Error_Handler();
 80013fc:	f000 f81a 	bl	8001434 <Error_Handler>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) aTxBuffer, 4, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
			Error_Handler();
		}
	}
}
 8001400:	e00d      	b.n	800141e <HAL_I2C_AddrCallback+0x4a>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10a      	bne.n	800141e <HAL_I2C_AddrCallback+0x4a>
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t*) aTxBuffer, 4, I2C_FIRST_AND_LAST_FRAME) != HAL_OK){
 8001408:	2308      	movs	r3, #8
 800140a:	2204      	movs	r2, #4
 800140c:	4908      	ldr	r1, [pc, #32]	@ (8001430 <HAL_I2C_AddrCallback+0x5c>)
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <HAL_I2C_AddrCallback+0x58>)
 8001410:	f000 fe9d 	bl	800214e <HAL_I2C_Slave_Seq_Transmit_IT>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_AddrCallback+0x4a>
			Error_Handler();
 800141a:	f000 f80b 	bl	8001434 <Error_Handler>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200031d0 	.word	0x200031d0
 800142c:	200030d4 	.word	0x200030d4
 8001430:	200031cc 	.word	0x200031cc

08001434 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147e:	2007      	movs	r0, #7
 8001480:	f000 fad4 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a21      	ldr	r2, [pc, #132]	@ (8001534 <HAL_I2C_MspInit+0xa4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d13c      	bne.n	800152c <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <HAL_I2C_MspInit+0xa8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001538 <HAL_I2C_MspInit+0xa8>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <HAL_I2C_MspInit+0xa8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014ce:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4814      	ldr	r0, [pc, #80]	@ (800153c <HAL_I2C_MspInit+0xac>)
 80014ec:	f000 fb10 	bl	8001b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_I2C_MspInit+0xa8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001538 <HAL_I2C_MspInit+0xa8>)
 80014fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	201f      	movs	r0, #31
 8001512:	f000 fa96 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001516:	201f      	movs	r0, #31
 8001518:	f000 faaf 	bl	8001a7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2020      	movs	r0, #32
 8001522:	f000 fa8e 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001526:	2020      	movs	r0, #32
 8001528:	f000 faa7 	bl	8001a7a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	@ 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40005400 	.word	0x40005400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_SPI_MspInit+0x84>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12b      	bne.n	80015ba <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_SPI_MspInit+0x88>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_SPI_MspInit+0x88>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_SPI_MspInit+0x88>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_SPI_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <HAL_SPI_MspInit+0x88>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_SPI_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800159a:	23e0      	movs	r3, #224	@ 0xe0
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015aa:	2305      	movs	r3, #5
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <HAL_SPI_MspInit+0x8c>)
 80015b6:	f000 faab 	bl	8001b10 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40013000 	.word	0x40013000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	@ (8001654 <HAL_UART_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12b      	bne.n	800164a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_UART_MspInit+0x88>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_UART_MspInit+0x88>)
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_UART_MspInit+0x88>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_UART_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <HAL_UART_MspInit+0x88>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_UART_MspInit+0x88>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800162a:	230c      	movs	r3, #12
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163a:	2307      	movs	r3, #7
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_UART_MspInit+0x8c>)
 8001646:	f000 fa63 	bl	8001b10 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	@ 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40004400 	.word	0x40004400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f000 f8a5 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <I2C1_EV_IRQHandler+0x10>)
 80016c6:	f000 fe5e 	bl	8002386 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200030d4 	.word	0x200030d4

080016d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <I2C1_ER_IRQHandler+0x10>)
 80016da:	f000 ffc5 	bl	8002668 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200030d4 	.word	0x200030d4

080016e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001744 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001710:	f7ff ffea 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	@ (800174c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	@ (8001758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800173a:	f003 fd75 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff fac9 	bl	8000cd4 <main>
  bx  lr    
 8001742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	200030b8 	.word	0x200030b8
  ldr r2, =_sidata
 8001750:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 8001754:	200030b8 	.word	0x200030b8
  ldr r4, =_ebss
 8001758:	200031dc 	.word	0x200031dc

0800175c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001764:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <HAL_Init+0x40>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_Init+0x40>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_Init+0x40>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	2003      	movs	r0, #3
 800178a:	f000 f94f 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f808 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff fe54 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x54>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_InitTick+0x58>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f967 	bl	8001a96 <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 f92f 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <HAL_InitTick+0x5c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200030ac 	.word	0x200030ac
 80017fc:	200030b4 	.word	0x200030b4
 8001800:	200030b0 	.word	0x200030b0

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200030b4 	.word	0x200030b4
 8001828:	200031d8 	.word	0x200031d8

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200031d8 	.word	0x200031d8

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186a:	bf00      	nop
 800186c:	f7ff ffde 	bl	800182c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
  {
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200030b4 	.word	0x200030b4

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	@ (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	@ (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	@ (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	@ 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff3e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff31 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d004      	beq.n	8001acc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2280      	movs	r2, #128	@ 0x80
 8001ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e00c      	b.n	8001ae6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2205      	movs	r2, #5
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e165      	b.n	8001df8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f040 8154 	bne.w	8001df2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d005      	beq.n	8001b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d130      	bne.n	8001bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 0201 	and.w	r2, r3, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d017      	beq.n	8001c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d123      	bne.n	8001c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	69b9      	ldr	r1, [r7, #24]
 8001c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80ae 	beq.w	8001df2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e10 <HAL_GPIO_Init+0x300>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb2:	4a58      	ldr	r2, [pc, #352]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e18 <HAL_GPIO_Init+0x308>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d025      	beq.n	8001d2a <HAL_GPIO_Init+0x21a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4e      	ldr	r2, [pc, #312]	@ (8001e1c <HAL_GPIO_Init+0x30c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01f      	beq.n	8001d26 <HAL_GPIO_Init+0x216>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e20 <HAL_GPIO_Init+0x310>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0x212>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e24 <HAL_GPIO_Init+0x314>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x20e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e28 <HAL_GPIO_Init+0x318>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x20a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4a      	ldr	r2, [pc, #296]	@ (8001e2c <HAL_GPIO_Init+0x31c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x206>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a49      	ldr	r2, [pc, #292]	@ (8001e30 <HAL_GPIO_Init+0x320>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x202>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e00c      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00a      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d16:	2305      	movs	r3, #5
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x21c>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	@ (8001e14 <HAL_GPIO_Init+0x304>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a31      	ldr	r2, [pc, #196]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a26      	ldr	r2, [pc, #152]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a11      	ldr	r2, [pc, #68]	@ (8001e34 <HAL_GPIO_Init+0x324>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f ae96 	bls.w	8001b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40021400 	.word	0x40021400
 8001e30:	40021800 	.word	0x40021800
 8001e34:	40013c00 	.word	0x40013c00

08001e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e12b      	b.n	8002106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fae4 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2224      	movs	r2, #36	@ 0x24
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f00:	f002 f800 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a81      	ldr	r2, [pc, #516]	@ (8002110 <HAL_I2C_Init+0x274>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d807      	bhi.n	8001f20 <HAL_I2C_Init+0x84>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a80      	ldr	r2, [pc, #512]	@ (8002114 <HAL_I2C_Init+0x278>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	bf94      	ite	ls
 8001f18:	2301      	movls	r3, #1
 8001f1a:	2300      	movhi	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e006      	b.n	8001f2e <HAL_I2C_Init+0x92>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a7d      	ldr	r2, [pc, #500]	@ (8002118 <HAL_I2C_Init+0x27c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bf94      	ite	ls
 8001f28:	2301      	movls	r3, #1
 8001f2a:	2300      	movhi	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e7      	b.n	8002106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a78      	ldr	r2, [pc, #480]	@ (800211c <HAL_I2C_Init+0x280>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a6a      	ldr	r2, [pc, #424]	@ (8002110 <HAL_I2C_Init+0x274>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d802      	bhi.n	8001f70 <HAL_I2C_Init+0xd4>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	e009      	b.n	8001f84 <HAL_I2C_Init+0xe8>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a69      	ldr	r2, [pc, #420]	@ (8002120 <HAL_I2C_Init+0x284>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	3301      	adds	r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	495c      	ldr	r1, [pc, #368]	@ (8002110 <HAL_I2C_Init+0x274>)
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	d819      	bhi.n	8001fd8 <HAL_I2C_Init+0x13c>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e59      	subs	r1, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fb8:	400b      	ands	r3, r1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_I2C_Init+0x138>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e59      	subs	r1, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd2:	e051      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e04f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d111      	bne.n	8002004 <HAL_I2C_Init+0x168>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e012      	b.n	800202a <HAL_I2C_Init+0x18e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Init+0x196>
 800202e:	2301      	movs	r3, #1
 8002030:	e022      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_I2C_Init+0x1bc>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e58      	subs	r0, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6859      	ldr	r1, [r3, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	440b      	add	r3, r1
 8002048:	fbb0 f3f3 	udiv	r3, r0, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002056:	e00f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	6809      	ldr	r1, [r1, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6911      	ldr	r1, [r2, #16]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	000186a0 	.word	0x000186a0
 8002114:	001e847f 	.word	0x001e847f
 8002118:	003d08ff 	.word	0x003d08ff
 800211c:	431bde83 	.word	0x431bde83
 8002120:	10624dd3 	.word	0x10624dd3

08002124 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002136:	2b80      	cmp	r3, #128	@ 0x80
 8002138:	d103      	bne.n	8002142 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800214e:	b480      	push	{r7}
 8002150:	b087      	sub	sp, #28
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800216a:	2b28      	cmp	r3, #40	@ 0x28
 800216c:	d15b      	bne.n	8002226 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e054      	b.n	8002228 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8002188:	2302      	movs	r3, #2
 800218a:	e04d      	b.n	8002228 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d007      	beq.n	80021b2 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2229      	movs	r2, #41	@ 0x29
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	88fa      	ldrh	r2, [r7, #6]
 80021e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002220:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002250:	2b28      	cmp	r3, #40	@ 0x28
 8002252:	d15b      	bne.n	800230c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e054      	b.n	800230e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800226e:	2302      	movs	r3, #2
 8002270:	e04d      	b.n	800230e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d007      	beq.n	8002298 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	222a      	movs	r2, #42	@ 0x2a
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002306:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	e000      	b.n	800230e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800230c:	2302      	movs	r3, #2
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	d124      	bne.n	8002378 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2228      	movs	r2, #40	@ 0x28
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d007      	beq.n	8002354 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002362:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002372:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	e000      	b.n	800237a <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b088      	sub	sp, #32
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ae:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d003      	beq.n	80023be <HAL_I2C_EV_IRQHandler+0x38>
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b40      	cmp	r3, #64	@ 0x40
 80023ba:	f040 80c1 	bne.w	8002540 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_I2C_EV_IRQHandler+0x6e>
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80023de:	d003      	beq.n	80023e8 <HAL_I2C_EV_IRQHandler+0x62>
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80023e6:	d101      	bne.n	80023ec <HAL_I2C_EV_IRQHandler+0x66>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_I2C_EV_IRQHandler+0x68>
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	f000 8132 	beq.w	8002658 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_I2C_EV_IRQHandler+0x92>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	0a5b      	lsrs	r3, r3, #9
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f001 fc6c 	bl	8003ce8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fd6f 	bl	8002ef4 <I2C_Master_SB>
 8002416:	e092      	b.n	800253e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HAL_I2C_EV_IRQHandler+0xb2>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	0a5b      	lsrs	r3, r3, #9
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fde5 	bl	8003000 <I2C_Master_ADD10>
 8002436:	e082      	b.n	800253e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_I2C_EV_IRQHandler+0xd2>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fdff 	bl	8003054 <I2C_Master_ADDR>
 8002456:	e072      	b.n	800253e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d03b      	beq.n	80024dc <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800246e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002472:	f000 80f3 	beq.w	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	09db      	lsrs	r3, r3, #7
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00f      	beq.n	80024a2 <HAL_I2C_EV_IRQHandler+0x11c>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	0a9b      	lsrs	r3, r3, #10
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_I2C_EV_IRQHandler+0x11c>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9c7 	bl	800282e <I2C_MasterTransmit_TXE>
 80024a0:	e04d      	b.n	800253e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80d6 	beq.w	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	0a5b      	lsrs	r3, r3, #9
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80cf 	beq.w	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024be:	7bbb      	ldrb	r3, [r7, #14]
 80024c0:	2b21      	cmp	r3, #33	@ 0x21
 80024c2:	d103      	bne.n	80024cc <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fa4e 	bl	8002966 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ca:	e0c7      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b40      	cmp	r3, #64	@ 0x40
 80024d0:	f040 80c4 	bne.w	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fabc 	bl	8002a52 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024da:	e0bf      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024ea:	f000 80b7 	beq.w	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <HAL_I2C_EV_IRQHandler+0x194>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	0a9b      	lsrs	r3, r3, #10
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_I2C_EV_IRQHandler+0x194>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fb35 	bl	8002b82 <I2C_MasterReceive_RXNE>
 8002518:	e011      	b.n	800253e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 809a 	beq.w	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	0a5b      	lsrs	r3, r3, #9
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8093 	beq.w	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fbeb 	bl	8002d12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800253c:	e08e      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
 800253e:	e08d      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	e007      	b.n	8002562 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <HAL_I2C_EV_IRQHandler+0x20e>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	0a5b      	lsrs	r3, r3, #9
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 ffb0 	bl	80034f2 <I2C_Slave_ADDR>
 8002592:	e066      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x22e>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	0a5b      	lsrs	r3, r3, #9
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 ffeb 	bl	8003588 <I2C_Slave_STOPF>
 80025b2:	e056      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025b4:	7bbb      	ldrb	r3, [r7, #14]
 80025b6:	2b21      	cmp	r3, #33	@ 0x21
 80025b8:	d002      	beq.n	80025c0 <HAL_I2C_EV_IRQHandler+0x23a>
 80025ba:	7bbb      	ldrb	r3, [r7, #14]
 80025bc:	2b29      	cmp	r3, #41	@ 0x29
 80025be:	d125      	bne.n	800260c <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	09db      	lsrs	r3, r3, #7
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00f      	beq.n	80025ec <HAL_I2C_EV_IRQHandler+0x266>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <HAL_I2C_EV_IRQHandler+0x266>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fec6 	bl	8003376 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025ea:	e039      	b.n	8002660 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d033      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0x2da>
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	0a5b      	lsrs	r3, r3, #9
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02d      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fef3 	bl	80033f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800260a:	e029      	b.n	8002660 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00f      	beq.n	8002638 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	0a9b      	lsrs	r3, r3, #10
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fefe 	bl	8003432 <I2C_SlaveReceive_RXNE>
 8002636:	e014      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00e      	beq.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	0a5b      	lsrs	r3, r3, #9
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 ff2c 	bl	80034ae <I2C_SlaveReceive_BTF>
 8002656:	e004      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002658:	bf00      	nop
 800265a:	e002      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800265c:	bf00      	nop
 800265e:	e000      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002660:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800268a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <HAL_I2C_ER_IRQHandler+0x4e>
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	0a5b      	lsrs	r3, r3, #9
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00e      	beq.n	80026e0 <HAL_I2C_ER_IRQHandler+0x78>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80026de:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03f      	beq.n	800276c <HAL_I2C_ER_IRQHandler+0x104>
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d039      	beq.n	800276c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80026f8:	7efb      	ldrb	r3, [r7, #27]
 80026fa:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002712:	7ebb      	ldrb	r3, [r7, #26]
 8002714:	2b20      	cmp	r3, #32
 8002716:	d112      	bne.n	800273e <HAL_I2C_ER_IRQHandler+0xd6>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_I2C_ER_IRQHandler+0xd6>
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b21      	cmp	r3, #33	@ 0x21
 8002722:	d008      	beq.n	8002736 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b29      	cmp	r3, #41	@ 0x29
 8002728:	d005      	beq.n	8002736 <HAL_I2C_ER_IRQHandler+0xce>
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b28      	cmp	r3, #40	@ 0x28
 800272e:	d106      	bne.n	800273e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b21      	cmp	r3, #33	@ 0x21
 8002734:	d103      	bne.n	800273e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f001 f856 	bl	80037e8 <I2C_Slave_AF>
 800273c:	e016      	b.n	800276c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002746:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002750:	7efb      	ldrb	r3, [r7, #27]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d002      	beq.n	800275c <HAL_I2C_ER_IRQHandler+0xf4>
 8002756:	7efb      	ldrb	r3, [r7, #27]
 8002758:	2b40      	cmp	r3, #64	@ 0x40
 800275a:	d107      	bne.n	800276c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	0adb      	lsrs	r3, r3, #11
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <HAL_I2C_ER_IRQHandler+0x12e>
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	f043 0308 	orr.w	r3, r3, #8
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002794:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f001 f891 	bl	80038d0 <I2C_ITError>
  }
}
 80027ae:	bf00      	nop
 80027b0:	3728      	adds	r7, #40	@ 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002844:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d150      	bne.n	80028f6 <I2C_MasterTransmit_TXE+0xc8>
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b21      	cmp	r3, #33	@ 0x21
 8002858:	d14d      	bne.n	80028f6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d01d      	beq.n	800289c <I2C_MasterTransmit_TXE+0x6e>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b20      	cmp	r3, #32
 8002864:	d01a      	beq.n	800289c <I2C_MasterTransmit_TXE+0x6e>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800286c:	d016      	beq.n	800289c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800287c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2211      	movs	r2, #17
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff8e 	bl	80027b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800289a:	e060      	b.n	800295e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028aa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	d107      	bne.n	80028e6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff7d 	bl	80027de <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028e4:	e03b      	b.n	800295e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff61 	bl	80027b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028f4:	e033      	b.n	800295e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b21      	cmp	r3, #33	@ 0x21
 80028fa:	d005      	beq.n	8002908 <I2C_MasterTransmit_TXE+0xda>
 80028fc:	7bbb      	ldrb	r3, [r7, #14]
 80028fe:	2b40      	cmp	r3, #64	@ 0x40
 8002900:	d12d      	bne.n	800295e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b22      	cmp	r3, #34	@ 0x22
 8002906:	d12a      	bne.n	800295e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002920:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002922:	e01c      	b.n	800295e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b40      	cmp	r3, #64	@ 0x40
 800292e:	d103      	bne.n	8002938 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f88e 	bl	8002a52 <I2C_MemoryTransmit_TXE_BTF>
}
 8002936:	e012      	b.n	800295e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800295c:	e7ff      	b.n	800295e <I2C_MasterTransmit_TXE+0x130>
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b21      	cmp	r3, #33	@ 0x21
 800297e:	d164      	bne.n	8002a4a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80029ae:	e04c      	b.n	8002a4a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d01d      	beq.n	80029f2 <I2C_MasterTransmit_BTF+0x8c>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d01a      	beq.n	80029f2 <I2C_MasterTransmit_BTF+0x8c>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029c2:	d016      	beq.n	80029f2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029d2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2211      	movs	r2, #17
 80029d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fee3 	bl	80027b6 <HAL_I2C_MasterTxCpltCallback>
}
 80029f0:	e02b      	b.n	8002a4a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a00:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a10:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b40      	cmp	r3, #64	@ 0x40
 8002a2a:	d107      	bne.n	8002a3c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fed2 	bl	80027de <HAL_I2C_MemTxCpltCallback>
}
 8002a3a:	e006      	b.n	8002a4a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff feb6 	bl	80027b6 <HAL_I2C_MasterTxCpltCallback>
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d10b      	bne.n	8002a8a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a82:	1c9a      	adds	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002a88:	e077      	b.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	121b      	asrs	r3, r3, #8
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002aa4:	e069      	b.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10b      	bne.n	8002ac6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ac4:	e059      	b.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d152      	bne.n	8002b74 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b22      	cmp	r3, #34	@ 0x22
 8002ad2:	d10d      	bne.n	8002af0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002aee:	e044      	b.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b21      	cmp	r3, #33	@ 0x21
 8002afe:	d112      	bne.n	8002b26 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b24:	e029      	b.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d124      	bne.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b21      	cmp	r3, #33	@ 0x21
 8002b34:	d121      	bne.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b44:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b54:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fe36 	bl	80027de <HAL_I2C_MemTxCpltCallback>
}
 8002b72:	e002      	b.n	8002b7a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fad5 	bl	8002124 <I2C_Flush_DR>
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b22      	cmp	r3, #34	@ 0x22
 8002b94:	f040 80b9 	bne.w	8002d0a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d921      	bls.n	8002bf0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	f040 8096 	bne.w	8002d0a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002bee:	e08c      	b.n	8002d0a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d07f      	beq.n	8002cf8 <I2C_MasterReceive_RXNE+0x176>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d002      	beq.n	8002c04 <I2C_MasterReceive_RXNE+0x82>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d179      	bne.n	8002cf8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f001 f83d 	bl	8003c84 <I2C_WaitOnSTOPRequestThroughIT>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d14c      	bne.n	8002caa <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c2e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d10a      	bne.n	8002c80 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fdba 	bl	80027f2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c7e:	e044      	b.n	8002d0a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d002      	beq.n	8002c94 <I2C_MasterReceive_RXNE+0x112>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d103      	bne.n	8002c9c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9a:	e002      	b.n	8002ca2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2212      	movs	r2, #18
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fd91 	bl	80027ca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ca8:	e02f      	b.n	8002d0a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cb8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fd88 	bl	8002806 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cf6:	e008      	b.n	8002d0a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d06:	605a      	str	r2, [r3, #4]
}
 8002d08:	e7ff      	b.n	8002d0a <I2C_MasterReceive_RXNE+0x188>
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d11b      	bne.n	8002d62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d60:	e0c4      	b.n	8002eec <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d129      	bne.n	8002dc0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d00a      	beq.n	8002d98 <I2C_MasterReceive_BTF+0x86>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d007      	beq.n	8002d98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002dbe:	e095      	b.n	8002eec <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d17d      	bne.n	8002ec6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d002      	beq.n	8002dd6 <I2C_MasterReceive_BTF+0xc4>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d108      	bne.n	8002de8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e016      	b.n	8002e16 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d002      	beq.n	8002df4 <I2C_MasterReceive_BTF+0xe2>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d108      	bne.n	8002e06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e007      	b.n	8002e16 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e70:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b40      	cmp	r3, #64	@ 0x40
 8002e84:	d10a      	bne.n	8002e9c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fcac 	bl	80027f2 <HAL_I2C_MemRxCpltCallback>
}
 8002e9a:	e027      	b.n	8002eec <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d002      	beq.n	8002eb0 <I2C_MasterReceive_BTF+0x19e>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d103      	bne.n	8002eb8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eb6:	e002      	b.n	8002ebe <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2212      	movs	r2, #18
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fc83 	bl	80027ca <HAL_I2C_MasterRxCpltCallback>
}
 8002ec4:	e012      	b.n	8002eec <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b40      	cmp	r3, #64	@ 0x40
 8002f06:	d117      	bne.n	8002f38 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f20:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f22:	e067      	b.n	8002ff4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]
}
 8002f36:	e05d      	b.n	8002ff4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f40:	d133      	bne.n	8002faa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b21      	cmp	r3, #33	@ 0x21
 8002f4c:	d109      	bne.n	8002f62 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f5e:	611a      	str	r2, [r3, #16]
 8002f60:	e008      	b.n	8002f74 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <I2C_Master_SB+0x92>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d108      	bne.n	8002f98 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d032      	beq.n	8002ff4 <I2C_Master_SB+0x100>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d02d      	beq.n	8002ff4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa6:	605a      	str	r2, [r3, #4]
}
 8002fa8:	e024      	b.n	8002ff4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10e      	bne.n	8002fd0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	11db      	asrs	r3, r3, #7
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f003 0306 	and.w	r3, r3, #6
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f063 030f 	orn	r3, r3, #15
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	611a      	str	r2, [r3, #16]
}
 8002fce:	e011      	b.n	8002ff4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10d      	bne.n	8002ff4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	11db      	asrs	r3, r3, #7
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 0306 	and.w	r3, r3, #6
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f063 030e 	orn	r3, r3, #14
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	b2da      	uxtb	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <I2C_Master_ADD10+0x26>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <I2C_Master_ADD10+0x48>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003046:	605a      	str	r2, [r3, #4]
  }
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003054:	b480      	push	{r7}
 8003056:	b091      	sub	sp, #68	@ 0x44
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003062:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b22      	cmp	r3, #34	@ 0x22
 800307c:	f040 8169 	bne.w	8003352 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <I2C_Master_ADDR+0x54>
 8003088:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d10b      	bne.n	80030a8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003090:	2300      	movs	r3, #0
 8003092:	633b      	str	r3, [r7, #48]	@ 0x30
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a6:	e160      	b.n	800336a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11d      	bne.n	80030ec <I2C_Master_ADDR+0x98>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030b8:	d118      	bne.n	80030ec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	2300      	movs	r3, #0
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030de:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80030ea:	e13e      	b.n	800336a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d113      	bne.n	800311e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f6:	2300      	movs	r3, #0
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e115      	b.n	800334a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 808a 	bne.w	800323e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003130:	d137      	bne.n	80031a2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003140:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003150:	d113      	bne.n	800317a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003160:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	e0e7      	b.n	800334a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	623b      	str	r3, [r7, #32]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	623b      	str	r3, [r7, #32]
 800318e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e0d3      	b.n	800334a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d02e      	beq.n	8003206 <I2C_Master_ADDR+0x1b2>
 80031a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d02b      	beq.n	8003206 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b0:	2b12      	cmp	r3, #18
 80031b2:	d102      	bne.n	80031ba <I2C_Master_ADDR+0x166>
 80031b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d125      	bne.n	8003206 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d00e      	beq.n	80031de <I2C_Master_ADDR+0x18a>
 80031c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d00b      	beq.n	80031de <I2C_Master_ADDR+0x18a>
 80031c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d008      	beq.n	80031de <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e007      	b.n	80031ee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	e0a1      	b.n	800334a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003214:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e085      	b.n	800334a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d14d      	bne.n	80032e4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324a:	2b04      	cmp	r3, #4
 800324c:	d016      	beq.n	800327c <I2C_Master_ADDR+0x228>
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	2b02      	cmp	r3, #2
 8003252:	d013      	beq.n	800327c <I2C_Master_ADDR+0x228>
 8003254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003256:	2b10      	cmp	r3, #16
 8003258:	d010      	beq.n	800327c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003268:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e007      	b.n	800328c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800328a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800329a:	d117      	bne.n	80032cc <I2C_Master_ADDR+0x278>
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032a2:	d00b      	beq.n	80032bc <I2C_Master_ADDR+0x268>
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d008      	beq.n	80032bc <I2C_Master_ADDR+0x268>
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d005      	beq.n	80032bc <I2C_Master_ADDR+0x268>
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d002      	beq.n	80032bc <I2C_Master_ADDR+0x268>
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d107      	bne.n	80032cc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	e032      	b.n	800334a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032f2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003302:	d117      	bne.n	8003334 <I2C_Master_ADDR+0x2e0>
 8003304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003306:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800330a:	d00b      	beq.n	8003324 <I2C_Master_ADDR+0x2d0>
 800330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330e:	2b01      	cmp	r3, #1
 8003310:	d008      	beq.n	8003324 <I2C_Master_ADDR+0x2d0>
 8003312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003314:	2b08      	cmp	r3, #8
 8003316:	d005      	beq.n	8003324 <I2C_Master_ADDR+0x2d0>
 8003318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331a:	2b10      	cmp	r3, #16
 800331c:	d002      	beq.n	8003324 <I2C_Master_ADDR+0x2d0>
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	2b20      	cmp	r3, #32
 8003322:	d107      	bne.n	8003334 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003332:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003350:	e00b      	b.n	800336a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	e7ff      	b.n	800336a <I2C_Master_ADDR+0x316>
 800336a:	bf00      	nop
 800336c:	3744      	adds	r7, #68	@ 0x44
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003384:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02b      	beq.n	80033e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d114      	bne.n	80033e8 <I2C_SlaveTransmit_TXE+0x72>
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b29      	cmp	r3, #41	@ 0x29
 80033c2:	d111      	bne.n	80033e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2221      	movs	r2, #33	@ 0x21
 80033d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2228      	movs	r2, #40	@ 0x28
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd ffb6 	bl	8001354 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d011      	beq.n	8003426 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	781a      	ldrb	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003440:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02c      	beq.n	80034a6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d114      	bne.n	80034a6 <I2C_SlaveReceive_RXNE+0x74>
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003480:	d111      	bne.n	80034a6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003490:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2222      	movs	r2, #34	@ 0x22
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2228      	movs	r2, #40	@ 0x28
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fd ff7b 	bl	800139c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800350c:	2b28      	cmp	r3, #40	@ 0x28
 800350e:	d127      	bne.n	8003560 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800351e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	09db      	lsrs	r3, r3, #7
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	81bb      	strh	r3, [r7, #12]
 8003542:	e002      	b.n	800354a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003552:	89ba      	ldrh	r2, [r7, #12]
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd ff3b 	bl	80013d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800355e:	e00e      	b.n	800357e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003596:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e4:	d172      	bne.n	80036cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b22      	cmp	r3, #34	@ 0x22
 80035ea:	d002      	beq.n	80035f2 <I2C_Slave_STOPF+0x6a>
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80035f0:	d135      	bne.n	800365e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003624:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fa61 	bl	8001af2 <HAL_DMA_GetState>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d049      	beq.n	80036ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	4a69      	ldr	r2, [pc, #420]	@ (80037e0 <I2C_Slave_STOPF+0x258>)
 800363c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fa33 	bl	8001aae <HAL_DMA_Abort_IT>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d03d      	beq.n	80036ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003658:	4610      	mov	r0, r2
 800365a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800365c:	e035      	b.n	80036ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003690:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe fa2b 	bl	8001af2 <HAL_DMA_GetState>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d014      	beq.n	80036cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a6:	4a4e      	ldr	r2, [pc, #312]	@ (80037e0 <I2C_Slave_STOPF+0x258>)
 80036a8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe f9fd 	bl	8001aae <HAL_DMA_Abort_IT>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036c4:	4610      	mov	r0, r2
 80036c6:	4798      	blx	r3
 80036c8:	e000      	b.n	80036cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03e      	beq.n	8003754 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d112      	bne.n	800370a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d112      	bne.n	800373e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8b7 	bl	80038d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003762:	e039      	b.n	80037d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b2a      	cmp	r3, #42	@ 0x2a
 8003768:	d109      	bne.n	800377e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2228      	movs	r2, #40	@ 0x28
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fd fe0f 	bl	800139c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b28      	cmp	r3, #40	@ 0x28
 8003788:	d111      	bne.n	80037ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a15      	ldr	r2, [pc, #84]	@ (80037e4 <I2C_Slave_STOPF+0x25c>)
 800378e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd fdc8 	bl	800133c <HAL_I2C_ListenCpltCallback>
}
 80037ac:	e014      	b.n	80037d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	2b22      	cmp	r3, #34	@ 0x22
 80037b4:	d002      	beq.n	80037bc <I2C_Slave_STOPF+0x234>
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b22      	cmp	r3, #34	@ 0x22
 80037ba:	d10d      	bne.n	80037d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd fde2 	bl	800139c <HAL_I2C_SlaveRxCpltCallback>
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	08003b35 	.word	0x08003b35
 80037e4:	ffff0000 	.word	0xffff0000

080037e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d002      	beq.n	800380a <I2C_Slave_AF+0x22>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b20      	cmp	r3, #32
 8003808:	d129      	bne.n	800385e <I2C_Slave_AF+0x76>
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b28      	cmp	r3, #40	@ 0x28
 800380e:	d126      	bne.n	800385e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a2e      	ldr	r2, [pc, #184]	@ (80038cc <I2C_Slave_AF+0xe4>)
 8003814:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003824:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800382e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fd70 	bl	800133c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800385c:	e031      	b.n	80038c2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b21      	cmp	r3, #33	@ 0x21
 8003862:	d129      	bne.n	80038b8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a19      	ldr	r2, [pc, #100]	@ (80038cc <I2C_Slave_AF+0xe4>)
 8003868:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2221      	movs	r2, #33	@ 0x21
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800388e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003898:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fe fc3a 	bl	8002124 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd fd4f 	bl	8001354 <HAL_I2C_SlaveTxCpltCallback>
}
 80038b6:	e004      	b.n	80038c2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038c0:	615a      	str	r2, [r3, #20]
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	ffff0000 	.word	0xffff0000

080038d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038e8:	7bbb      	ldrb	r3, [r7, #14]
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d002      	beq.n	80038f4 <I2C_ITError+0x24>
 80038ee:	7bbb      	ldrb	r3, [r7, #14]
 80038f0:	2b40      	cmp	r3, #64	@ 0x40
 80038f2:	d10a      	bne.n	800390a <I2C_ITError+0x3a>
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b22      	cmp	r3, #34	@ 0x22
 80038f8:	d107      	bne.n	800390a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003908:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003910:	2b28      	cmp	r3, #40	@ 0x28
 8003912:	d107      	bne.n	8003924 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2228      	movs	r2, #40	@ 0x28
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003922:	e015      	b.n	8003950 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003932:	d00a      	beq.n	800394a <I2C_ITError+0x7a>
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b60      	cmp	r3, #96	@ 0x60
 8003938:	d007      	beq.n	800394a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800395e:	d162      	bne.n	8003a26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800396e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d020      	beq.n	80039c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003982:	4a6a      	ldr	r2, [pc, #424]	@ (8003b2c <I2C_ITError+0x25c>)
 8003984:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f88f 	bl	8001aae <HAL_DMA_Abort_IT>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8089 	beq.w	8003aaa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039ba:	4610      	mov	r0, r2
 80039bc:	4798      	blx	r3
 80039be:	e074      	b.n	8003aaa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	4a59      	ldr	r2, [pc, #356]	@ (8003b2c <I2C_ITError+0x25c>)
 80039c6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe f86e 	bl	8001aae <HAL_DMA_Abort_IT>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d068      	beq.n	8003aaa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d10b      	bne.n	80039fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a20:	4610      	mov	r0, r2
 8003a22:	4798      	blx	r3
 8003a24:	e041      	b.n	8003aaa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b60      	cmp	r3, #96	@ 0x60
 8003a30:	d125      	bne.n	8003a7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4a:	2b40      	cmp	r3, #64	@ 0x40
 8003a4c:	d10b      	bne.n	8003a66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe fecf 	bl	800281a <HAL_I2C_AbortCpltCallback>
 8003a7c:	e015      	b.n	8003aaa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a88:	2b40      	cmp	r3, #64	@ 0x40
 8003a8a:	d10b      	bne.n	8003aa4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fe feae 	bl	8002806 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10e      	bne.n	8003ad8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d113      	bne.n	8003b24 <I2C_ITError+0x254>
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b28      	cmp	r3, #40	@ 0x28
 8003b00:	d110      	bne.n	8003b24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <I2C_ITError+0x260>)
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd fc0c 	bl	800133c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	08003b35 	.word	0x08003b35
 8003b30:	ffff0000 	.word	0xffff0000

08003b34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b4c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c7c <I2C_DMAAbort+0x148>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	08db      	lsrs	r3, r3, #3
 8003b54:	4a4a      	ldr	r2, [pc, #296]	@ (8003c80 <I2C_DMAAbort+0x14c>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	0a1a      	lsrs	r2, r3, #8
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00da      	lsls	r2, r3, #3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003b7a:	e00a      	b.n	8003b92 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b90:	d0ea      	beq.n	8003b68 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	2200      	movs	r2, #0
 8003bb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	2200      	movs	r2, #0
 8003be6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b60      	cmp	r3, #96	@ 0x60
 8003c02:	d10e      	bne.n	8003c22 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2200      	movs	r2, #0
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c1a:	6978      	ldr	r0, [r7, #20]
 8003c1c:	f7fe fdfd 	bl	800281a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c20:	e027      	b.n	8003c72 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c28:	2b28      	cmp	r3, #40	@ 0x28
 8003c2a:	d117      	bne.n	8003c5c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2228      	movs	r2, #40	@ 0x28
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003c5a:	e007      	b.n	8003c6c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c6c:	6978      	ldr	r0, [r7, #20]
 8003c6e:	f7fe fdca 	bl	8002806 <HAL_I2C_ErrorCallback>
}
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200030ac 	.word	0x200030ac
 8003c80:	14f8b589 	.word	0x14f8b589

08003c84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c90:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	4a13      	ldr	r2, [pc, #76]	@ (8003ce4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	0a1a      	lsrs	r2, r3, #8
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d107      	bne.n	8003cc2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e008      	b.n	8003cd4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd0:	d0e9      	beq.n	8003ca6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	200030ac 	.word	0x200030ac
 8003ce4:	14f8b589 	.word	0x14f8b589

08003ce8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003cf8:	d103      	bne.n	8003d02 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d00:	e007      	b.n	8003d12 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d0a:	d102      	bne.n	8003d12 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0cc      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b68      	ldr	r3, [pc, #416]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d90c      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b65      	ldr	r3, [pc, #404]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a58      	ldr	r2, [pc, #352]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a52      	ldr	r2, [pc, #328]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d044      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d119      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b3f      	ldr	r3, [pc, #252]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e067      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4934      	ldr	r1, [pc, #208]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fd fd0c 	bl	800182c <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fd fd08 	bl	800182c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e04f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d20c      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f855 	bl	8003f54 <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fc6c 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	08005288 	.word	0x08005288
 8003ee4:	200030ac 	.word	0x200030ac
 8003ee8:	200030b0 	.word	0x200030b0

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	200030ac 	.word	0x200030ac

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	@ (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08005298 	.word	0x08005298

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	08005298 	.word	0x08005298

08003f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b0ae      	sub	sp, #184	@ 0xb8
 8003f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f7a:	4bcb      	ldr	r3, [pc, #812]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	f200 8206 	bhi.w	8004394 <HAL_RCC_GetSysClockFreq+0x440>
 8003f88:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08004395 	.word	0x08004395
 8003f98:	08004395 	.word	0x08004395
 8003f9c:	08004395 	.word	0x08004395
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08004395 	.word	0x08004395
 8003fa8:	08004395 	.word	0x08004395
 8003fac:	08004395 	.word	0x08004395
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08004395 	.word	0x08004395
 8003fb8:	08004395 	.word	0x08004395
 8003fbc:	08004395 	.word	0x08004395
 8003fc0:	080041c5 	.word	0x080041c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x358>)
 8003fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fca:	e1e7      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fcc:	4bb8      	ldr	r3, [pc, #736]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fd2:	e1e3      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd4:	4bb4      	ldr	r3, [pc, #720]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe0:	4bb1      	ldr	r3, [pc, #708]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d071      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fec:	4bae      	ldr	r3, [pc, #696]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ff8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004004:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800400e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004012:	4622      	mov	r2, r4
 8004014:	462b      	mov	r3, r5
 8004016:	f04f 0000 	mov.w	r0, #0
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	0159      	lsls	r1, r3, #5
 8004020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004024:	0150      	lsls	r0, r2, #5
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4621      	mov	r1, r4
 800402c:	1a51      	subs	r1, r2, r1
 800402e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004030:	4629      	mov	r1, r5
 8004032:	eb63 0301 	sbc.w	r3, r3, r1
 8004036:	647b      	str	r3, [r7, #68]	@ 0x44
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004044:	4649      	mov	r1, r9
 8004046:	018b      	lsls	r3, r1, #6
 8004048:	4641      	mov	r1, r8
 800404a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800404e:	4641      	mov	r1, r8
 8004050:	018a      	lsls	r2, r1, #6
 8004052:	4641      	mov	r1, r8
 8004054:	1a51      	subs	r1, r2, r1
 8004056:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004058:	4649      	mov	r1, r9
 800405a:	eb63 0301 	sbc.w	r3, r3, r1
 800405e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800406c:	4649      	mov	r1, r9
 800406e:	00cb      	lsls	r3, r1, #3
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004076:	4641      	mov	r1, r8
 8004078:	00ca      	lsls	r2, r1, #3
 800407a:	4610      	mov	r0, r2
 800407c:	4619      	mov	r1, r3
 800407e:	4603      	mov	r3, r0
 8004080:	4622      	mov	r2, r4
 8004082:	189b      	adds	r3, r3, r2
 8004084:	633b      	str	r3, [r7, #48]	@ 0x30
 8004086:	462b      	mov	r3, r5
 8004088:	460a      	mov	r2, r1
 800408a:	eb42 0303 	adc.w	r3, r2, r3
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800409c:	4629      	mov	r1, r5
 800409e:	024b      	lsls	r3, r1, #9
 80040a0:	4621      	mov	r1, r4
 80040a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040a6:	4621      	mov	r1, r4
 80040a8:	024a      	lsls	r2, r1, #9
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80040c0:	f7fc f8a0 	bl	8000204 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040ce:	e067      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d0:	4b75      	ldr	r3, [pc, #468]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80040e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ea:	2300      	movs	r3, #0
 80040ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	f04f 0000 	mov.w	r0, #0
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	0159      	lsls	r1, r3, #5
 8004100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004104:	0150      	lsls	r0, r2, #5
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4621      	mov	r1, r4
 800410c:	1a51      	subs	r1, r2, r1
 800410e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004110:	4629      	mov	r1, r5
 8004112:	eb63 0301 	sbc.w	r3, r3, r1
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004124:	4649      	mov	r1, r9
 8004126:	018b      	lsls	r3, r1, #6
 8004128:	4641      	mov	r1, r8
 800412a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800412e:	4641      	mov	r1, r8
 8004130:	018a      	lsls	r2, r1, #6
 8004132:	4641      	mov	r1, r8
 8004134:	ebb2 0a01 	subs.w	sl, r2, r1
 8004138:	4649      	mov	r1, r9
 800413a:	eb63 0b01 	sbc.w	fp, r3, r1
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800414a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800414e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004152:	4692      	mov	sl, r2
 8004154:	469b      	mov	fp, r3
 8004156:	4623      	mov	r3, r4
 8004158:	eb1a 0303 	adds.w	r3, sl, r3
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	462b      	mov	r3, r5
 8004160:	eb4b 0303 	adc.w	r3, fp, r3
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004172:	4629      	mov	r1, r5
 8004174:	028b      	lsls	r3, r1, #10
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800417c:	4621      	mov	r1, r4
 800417e:	028a      	lsls	r2, r1, #10
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004188:	2200      	movs	r2, #0
 800418a:	673b      	str	r3, [r7, #112]	@ 0x70
 800418c:	677a      	str	r2, [r7, #116]	@ 0x74
 800418e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004192:	f7fc f837 	bl	8000204 <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4613      	mov	r3, r2
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041a0:	4b41      	ldr	r3, [pc, #260]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	3301      	adds	r3, #1
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80041b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80041be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041c2:	e0eb      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c4:	4b38      	ldr	r3, [pc, #224]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041d0:	4b35      	ldr	r3, [pc, #212]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d06b      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041dc:	4b32      	ldr	r3, [pc, #200]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	2200      	movs	r2, #0
 80041e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80041f0:	2300      	movs	r3, #0
 80041f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80041f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041f8:	4622      	mov	r2, r4
 80041fa:	462b      	mov	r3, r5
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	0159      	lsls	r1, r3, #5
 8004206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420a:	0150      	lsls	r0, r2, #5
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4621      	mov	r1, r4
 8004212:	1a51      	subs	r1, r2, r1
 8004214:	61b9      	str	r1, [r7, #24]
 8004216:	4629      	mov	r1, r5
 8004218:	eb63 0301 	sbc.w	r3, r3, r1
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800422a:	4659      	mov	r1, fp
 800422c:	018b      	lsls	r3, r1, #6
 800422e:	4651      	mov	r1, sl
 8004230:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004234:	4651      	mov	r1, sl
 8004236:	018a      	lsls	r2, r1, #6
 8004238:	4651      	mov	r1, sl
 800423a:	ebb2 0801 	subs.w	r8, r2, r1
 800423e:	4659      	mov	r1, fp
 8004240:	eb63 0901 	sbc.w	r9, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004250:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004254:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004258:	4690      	mov	r8, r2
 800425a:	4699      	mov	r9, r3
 800425c:	4623      	mov	r3, r4
 800425e:	eb18 0303 	adds.w	r3, r8, r3
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	462b      	mov	r3, r5
 8004266:	eb49 0303 	adc.w	r3, r9, r3
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004278:	4629      	mov	r1, r5
 800427a:	024b      	lsls	r3, r1, #9
 800427c:	4621      	mov	r1, r4
 800427e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004282:	4621      	mov	r1, r4
 8004284:	024a      	lsls	r2, r1, #9
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800428e:	2200      	movs	r2, #0
 8004290:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004292:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004294:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004298:	f7fb ffb4 	bl	8000204 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a6:	e065      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x420>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b4:	4b3d      	ldr	r3, [pc, #244]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x458>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	2200      	movs	r2, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	4611      	mov	r1, r2
 80042c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c6:	2300      	movs	r3, #0
 80042c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80042ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80042ce:	4642      	mov	r2, r8
 80042d0:	464b      	mov	r3, r9
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	0159      	lsls	r1, r3, #5
 80042dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e0:	0150      	lsls	r0, r2, #5
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4641      	mov	r1, r8
 80042e8:	1a51      	subs	r1, r2, r1
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	4649      	mov	r1, r9
 80042ee:	eb63 0301 	sbc.w	r3, r3, r1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004300:	4659      	mov	r1, fp
 8004302:	018b      	lsls	r3, r1, #6
 8004304:	4651      	mov	r1, sl
 8004306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800430a:	4651      	mov	r1, sl
 800430c:	018a      	lsls	r2, r1, #6
 800430e:	4651      	mov	r1, sl
 8004310:	1a54      	subs	r4, r2, r1
 8004312:	4659      	mov	r1, fp
 8004314:	eb63 0501 	sbc.w	r5, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	464b      	mov	r3, r9
 8004334:	eb45 0303 	adc.w	r3, r5, r3
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004346:	4629      	mov	r1, r5
 8004348:	028b      	lsls	r3, r1, #10
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004350:	4621      	mov	r1, r4
 8004352:	028a      	lsls	r2, r1, #10
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800435c:	2200      	movs	r2, #0
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004360:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004362:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004366:	f7fb ff4d 	bl	8000204 <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4613      	mov	r3, r2
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004374:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <HAL_RCC_GetSysClockFreq+0x458>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0f1b      	lsrs	r3, r3, #28
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004392:	e003      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800439a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	37b8      	adds	r7, #184	@ 0xb8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	00f42400 	.word	0x00f42400

080043b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e28d      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8083 	beq.w	80044da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043d4:	4b94      	ldr	r3, [pc, #592]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d019      	beq.n	8004414 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043e0:	4b91      	ldr	r3, [pc, #580]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d106      	bne.n	80043fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80043ec:	4b8e      	ldr	r3, [pc, #568]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f8:	d00c      	beq.n	8004414 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d112      	bne.n	800442c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004406:	4b88      	ldr	r3, [pc, #544]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004412:	d10b      	bne.n	800442c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004414:	4b84      	ldr	r3, [pc, #528]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d05b      	beq.n	80044d8 <HAL_RCC_OscConfig+0x124>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d157      	bne.n	80044d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e25a      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004434:	d106      	bne.n	8004444 <HAL_RCC_OscConfig+0x90>
 8004436:	4b7c      	ldr	r3, [pc, #496]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7b      	ldr	r2, [pc, #492]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e01d      	b.n	8004480 <HAL_RCC_OscConfig+0xcc>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0xb4>
 800444e:	4b76      	ldr	r3, [pc, #472]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a75      	ldr	r2, [pc, #468]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b73      	ldr	r3, [pc, #460]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a72      	ldr	r2, [pc, #456]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e00b      	b.n	8004480 <HAL_RCC_OscConfig+0xcc>
 8004468:	4b6f      	ldr	r3, [pc, #444]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6e      	ldr	r2, [pc, #440]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800446e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	4b6c      	ldr	r3, [pc, #432]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6b      	ldr	r2, [pc, #428]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800447a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800447e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd f9d0 	bl	800182c <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fd f9cc 	bl	800182c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	@ 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e21f      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b61      	ldr	r3, [pc, #388]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0xdc>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fd f9bc 	bl	800182c <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b8:	f7fd f9b8 	bl	800182c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	@ 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e20b      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	4b57      	ldr	r3, [pc, #348]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x104>
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d06f      	beq.n	80045c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044e6:	4b50      	ldr	r3, [pc, #320]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d017      	beq.n	8004522 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d105      	bne.n	800450a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80044fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450a:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d11c      	bne.n	8004550 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b44      	ldr	r3, [pc, #272]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004522:	4b41      	ldr	r3, [pc, #260]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x186>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e1d3      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b3b      	ldr	r3, [pc, #236]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4937      	ldr	r1, [pc, #220]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	e03a      	b.n	80045c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004558:	4b34      	ldr	r3, [pc, #208]	@ (800462c <HAL_RCC_OscConfig+0x278>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fd f965 	bl	800182c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004566:	f7fd f961 	bl	800182c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1b4      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	4b2b      	ldr	r3, [pc, #172]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b28      	ldr	r3, [pc, #160]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4925      	ldr	r1, [pc, #148]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	e015      	b.n	80045c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459a:	4b24      	ldr	r3, [pc, #144]	@ (800462c <HAL_RCC_OscConfig+0x278>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd f944 	bl	800182c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fd f940 	bl	800182c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e193      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d036      	beq.n	8004640 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d016      	beq.n	8004608 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <HAL_RCC_OscConfig+0x27c>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fd f924 	bl	800182c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fd f920 	bl	800182c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e173      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <HAL_RCC_OscConfig+0x274>)
 80045fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x234>
 8004606:	e01b      	b.n	8004640 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004608:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <HAL_RCC_OscConfig+0x27c>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fd f90d 	bl	800182c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	e00e      	b.n	8004634 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004616:	f7fd f909 	bl	800182c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d907      	bls.n	8004634 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e15c      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
 8004628:	40023800 	.word	0x40023800
 800462c:	42470000 	.word	0x42470000
 8004630:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	4b8a      	ldr	r3, [pc, #552]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ea      	bne.n	8004616 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8097 	beq.w	800477c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4b83      	ldr	r3, [pc, #524]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	4b7f      	ldr	r3, [pc, #508]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	4a7e      	ldr	r2, [pc, #504]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800466c:	6413      	str	r3, [r2, #64]	@ 0x40
 800466e:	4b7c      	ldr	r3, [pc, #496]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b79      	ldr	r3, [pc, #484]	@ (8004864 <HAL_RCC_OscConfig+0x4b0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d118      	bne.n	80046bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468a:	4b76      	ldr	r3, [pc, #472]	@ (8004864 <HAL_RCC_OscConfig+0x4b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a75      	ldr	r2, [pc, #468]	@ (8004864 <HAL_RCC_OscConfig+0x4b0>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004696:	f7fd f8c9 	bl	800182c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469e:	f7fd f8c5 	bl	800182c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e118      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004864 <HAL_RCC_OscConfig+0x4b0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x31e>
 80046c4:	4b66      	ldr	r3, [pc, #408]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	4a65      	ldr	r2, [pc, #404]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d0:	e01c      	b.n	800470c <HAL_RCC_OscConfig+0x358>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x340>
 80046da:	4b61      	ldr	r3, [pc, #388]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	4a60      	ldr	r2, [pc, #384]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0x358>
 80046f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	4a59      	ldr	r2, [pc, #356]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004700:	4b57      	ldr	r3, [pc, #348]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	4a56      	ldr	r2, [pc, #344]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004706:	f023 0304 	bic.w	r3, r3, #4
 800470a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd f88a 	bl	800182c <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd f886 	bl	800182c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0d7      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004732:	4b4b      	ldr	r3, [pc, #300]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ee      	beq.n	800471c <HAL_RCC_OscConfig+0x368>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fd f874 	bl	800182c <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fd f870 	bl	800182c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0c1      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475e:	4b40      	ldr	r3, [pc, #256]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1ee      	bne.n	8004748 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	4a3a      	ldr	r2, [pc, #232]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800477a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80ad 	beq.w	80048e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004786:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	d060      	beq.n	8004854 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d145      	bne.n	8004826 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b33      	ldr	r3, [pc, #204]	@ (8004868 <HAL_RCC_OscConfig+0x4b4>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd f844 	bl	800182c <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fd f840 	bl	800182c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e093      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b29      	ldr	r3, [pc, #164]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	071b      	lsls	r3, r3, #28
 80047f2:	491b      	ldr	r1, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004868 <HAL_RCC_OscConfig+0x4b4>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd f815 	bl	800182c <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004806:	f7fd f811 	bl	800182c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e064      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004818:	4b11      	ldr	r3, [pc, #68]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x452>
 8004824:	e05c      	b.n	80048e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <HAL_RCC_OscConfig+0x4b4>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fc fffe 	bl	800182c <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fc fffa 	bl	800182c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e04d      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_RCC_OscConfig+0x4ac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x480>
 8004852:	e045      	b.n	80048e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e040      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
 8004860:	40023800 	.word	0x40023800
 8004864:	40007000 	.word	0x40007000
 8004868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800486c:	4b1f      	ldr	r3, [pc, #124]	@ (80048ec <HAL_RCC_OscConfig+0x538>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d030      	beq.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d129      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d122      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d119      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	3b01      	subs	r3, #1
 80048b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d10f      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800

080048f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e07b      	b.n	80049fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004912:	d009      	beq.n	8004928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]
 800491a:	e005      	b.n	8004928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fdfc 	bl	8001540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800495e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ac:	ea42 0103 	orr.w	r1, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0104 	and.w	r1, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	f003 0210 	and.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e042      	b.n	8004a9a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d106      	bne.n	8004a2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7fc fdd1 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2224      	movs	r2, #36	@ 0x24
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f972 	bl	8004d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b08a      	sub	sp, #40	@ 0x28
 8004aa6:	af02      	add	r7, sp, #8
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d175      	bne.n	8004bae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_UART_Transmit+0x2c>
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06e      	b.n	8004bb0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2221      	movs	r2, #33	@ 0x21
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae0:	f7fc fea4 	bl	800182c <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004afa:	d108      	bne.n	8004b0e <HAL_UART_Transmit+0x6c>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e003      	b.n	8004b16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b16:	e02e      	b.n	8004b76 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2180      	movs	r1, #128	@ 0x80
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f848 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e03a      	b.n	8004bb0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3302      	adds	r3, #2
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e007      	b.n	8004b68 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1cb      	bne.n	8004b18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	2140      	movs	r1, #64	@ 0x40
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f814 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e006      	b.n	8004bb0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
  }
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3720      	adds	r7, #32
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc8:	e03b      	b.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d037      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7fc fe2b 	bl	800182c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e03a      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d023      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b80      	cmp	r3, #128	@ 0x80
 8004bfe:	d020      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b40      	cmp	r3, #64	@ 0x40
 8004c04:	d01d      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d116      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f81d 	bl	8004c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2208      	movs	r2, #8
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e00f      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	bf0c      	ite	eq
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2300      	movne	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d0b4      	beq.n	8004bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b095      	sub	sp, #84	@ 0x54
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c92:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3314      	adds	r3, #20
 8004cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3314      	adds	r3, #20
 8004cc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d119      	bne.n	8004d16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d02:	61ba      	str	r2, [r7, #24]
 8004d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d24:	bf00      	nop
 8004d26:	3754      	adds	r7, #84	@ 0x54
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d34:	b0c0      	sub	sp, #256	@ 0x100
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	68d9      	ldr	r1, [r3, #12]
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	ea40 0301 	orr.w	r3, r0, r1
 8004d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d88:	f021 010c 	bic.w	r1, r1, #12
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d96:	430b      	orrs	r3, r1
 8004d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	6999      	ldr	r1, [r3, #24]
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	ea40 0301 	orr.w	r3, r0, r1
 8004db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8004ffc <UART_SetConfig+0x2cc>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d005      	beq.n	8004dd0 <UART_SetConfig+0xa0>
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b8d      	ldr	r3, [pc, #564]	@ (8005000 <UART_SetConfig+0x2d0>)
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d104      	bne.n	8004dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dd0:	f7ff f8ac 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8004dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dd8:	e003      	b.n	8004de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dda:	f7ff f893 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8004dde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dec:	f040 810c 	bne.w	8005008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	1891      	adds	r1, r2, r2
 8004e08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e0a:	415b      	adcs	r3, r3
 8004e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e12:	4621      	mov	r1, r4
 8004e14:	eb12 0801 	adds.w	r8, r2, r1
 8004e18:	4629      	mov	r1, r5
 8004e1a:	eb43 0901 	adc.w	r9, r3, r1
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e32:	4690      	mov	r8, r2
 8004e34:	4699      	mov	r9, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	eb18 0303 	adds.w	r3, r8, r3
 8004e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e40:	462b      	mov	r3, r5
 8004e42:	eb49 0303 	adc.w	r3, r9, r3
 8004e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e5e:	460b      	mov	r3, r1
 8004e60:	18db      	adds	r3, r3, r3
 8004e62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e64:	4613      	mov	r3, r2
 8004e66:	eb42 0303 	adc.w	r3, r2, r3
 8004e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e74:	f7fb f9c6 	bl	8000204 <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4b61      	ldr	r3, [pc, #388]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	011c      	lsls	r4, r3, #4
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8004eae:	4649      	mov	r1, r9
 8004eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec8:	4692      	mov	sl, r2
 8004eca:	469b      	mov	fp, r3
 8004ecc:	4643      	mov	r3, r8
 8004ece:	eb1a 0303 	adds.w	r3, sl, r3
 8004ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8004edc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	18db      	adds	r3, r3, r3
 8004ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004efa:	4613      	mov	r3, r2
 8004efc:	eb42 0303 	adc.w	r3, r2, r3
 8004f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f0a:	f7fb f97b 	bl	8000204 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	4b3b      	ldr	r3, [pc, #236]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004f16:	fba3 2301 	umull	r2, r3, r3, r1
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	2264      	movs	r2, #100	@ 0x64
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	1acb      	subs	r3, r1, r3
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f2a:	4b36      	ldr	r3, [pc, #216]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f38:	441c      	add	r4, r3
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f54:	415b      	adcs	r3, r3
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	1851      	adds	r1, r2, r1
 8004f60:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f62:	4649      	mov	r1, r9
 8004f64:	414b      	adcs	r3, r1
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f74:	4659      	mov	r1, fp
 8004f76:	00cb      	lsls	r3, r1, #3
 8004f78:	4651      	mov	r1, sl
 8004f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7e:	4651      	mov	r1, sl
 8004f80:	00ca      	lsls	r2, r1, #3
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f90:	464b      	mov	r3, r9
 8004f92:	460a      	mov	r2, r1
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	18db      	adds	r3, r3, r3
 8004fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	eb42 0303 	adc.w	r3, r2, r3
 8004fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fc6:	f7fb f91d 	bl	8000204 <__aeabi_uldivmod>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2164      	movs	r1, #100	@ 0x64
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	3332      	adds	r3, #50	@ 0x32
 8004fe2:	4a08      	ldr	r2, [pc, #32]	@ (8005004 <UART_SetConfig+0x2d4>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 0207 	and.w	r2, r3, #7
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4422      	add	r2, r4
 8004ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff8:	e106      	b.n	8005208 <UART_SetConfig+0x4d8>
 8004ffa:	bf00      	nop
 8004ffc:	40011000 	.word	0x40011000
 8005000:	40011400 	.word	0x40011400
 8005004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800500c:	2200      	movs	r2, #0
 800500e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005012:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800501a:	4642      	mov	r2, r8
 800501c:	464b      	mov	r3, r9
 800501e:	1891      	adds	r1, r2, r2
 8005020:	6239      	str	r1, [r7, #32]
 8005022:	415b      	adcs	r3, r3
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
 8005026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800502a:	4641      	mov	r1, r8
 800502c:	1854      	adds	r4, r2, r1
 800502e:	4649      	mov	r1, r9
 8005030:	eb43 0501 	adc.w	r5, r3, r1
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	00eb      	lsls	r3, r5, #3
 800503e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005042:	00e2      	lsls	r2, r4, #3
 8005044:	4614      	mov	r4, r2
 8005046:	461d      	mov	r5, r3
 8005048:	4643      	mov	r3, r8
 800504a:	18e3      	adds	r3, r4, r3
 800504c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005050:	464b      	mov	r3, r9
 8005052:	eb45 0303 	adc.w	r3, r5, r3
 8005056:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005066:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005076:	4629      	mov	r1, r5
 8005078:	008b      	lsls	r3, r1, #2
 800507a:	4621      	mov	r1, r4
 800507c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005080:	4621      	mov	r1, r4
 8005082:	008a      	lsls	r2, r1, #2
 8005084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005088:	f7fb f8bc 	bl	8000204 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4b60      	ldr	r3, [pc, #384]	@ (8005214 <UART_SetConfig+0x4e4>)
 8005092:	fba3 2302 	umull	r2, r3, r3, r2
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	011c      	lsls	r4, r3, #4
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	61b9      	str	r1, [r7, #24]
 80050b4:	415b      	adcs	r3, r3
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050bc:	4641      	mov	r1, r8
 80050be:	1851      	adds	r1, r2, r1
 80050c0:	6139      	str	r1, [r7, #16]
 80050c2:	4649      	mov	r1, r9
 80050c4:	414b      	adcs	r3, r1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d4:	4659      	mov	r1, fp
 80050d6:	00cb      	lsls	r3, r1, #3
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050de:	4651      	mov	r1, sl
 80050e0:	00ca      	lsls	r2, r1, #3
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	4642      	mov	r2, r8
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050f0:	464b      	mov	r3, r9
 80050f2:	460a      	mov	r2, r1
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005106:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005114:	4649      	mov	r1, r9
 8005116:	008b      	lsls	r3, r1, #2
 8005118:	4641      	mov	r1, r8
 800511a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800511e:	4641      	mov	r1, r8
 8005120:	008a      	lsls	r2, r1, #2
 8005122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005126:	f7fb f86d 	bl	8000204 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4611      	mov	r1, r2
 8005130:	4b38      	ldr	r3, [pc, #224]	@ (8005214 <UART_SetConfig+0x4e4>)
 8005132:	fba3 2301 	umull	r2, r3, r3, r1
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2264      	movs	r2, #100	@ 0x64
 800513a:	fb02 f303 	mul.w	r3, r2, r3
 800513e:	1acb      	subs	r3, r1, r3
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	3332      	adds	r3, #50	@ 0x32
 8005144:	4a33      	ldr	r2, [pc, #204]	@ (8005214 <UART_SetConfig+0x4e4>)
 8005146:	fba2 2303 	umull	r2, r3, r2, r3
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005150:	441c      	add	r4, r3
 8005152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005156:	2200      	movs	r2, #0
 8005158:	673b      	str	r3, [r7, #112]	@ 0x70
 800515a:	677a      	str	r2, [r7, #116]	@ 0x74
 800515c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	415b      	adcs	r3, r3
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005170:	4641      	mov	r1, r8
 8005172:	1851      	adds	r1, r2, r1
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	4649      	mov	r1, r9
 8005178:	414b      	adcs	r3, r1
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005188:	4659      	mov	r1, fp
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005192:	4651      	mov	r1, sl
 8005194:	00ca      	lsls	r2, r1, #3
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	4603      	mov	r3, r0
 800519c:	4642      	mov	r2, r8
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051a2:	464b      	mov	r3, r9
 80051a4:	460a      	mov	r2, r1
 80051a6:	eb42 0303 	adc.w	r3, r2, r3
 80051aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80051b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051c4:	4649      	mov	r1, r9
 80051c6:	008b      	lsls	r3, r1, #2
 80051c8:	4641      	mov	r1, r8
 80051ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ce:	4641      	mov	r1, r8
 80051d0:	008a      	lsls	r2, r1, #2
 80051d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051d6:	f7fb f815 	bl	8000204 <__aeabi_uldivmod>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <UART_SetConfig+0x4e4>)
 80051e0:	fba3 1302 	umull	r1, r3, r3, r2
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	2164      	movs	r1, #100	@ 0x64
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	3332      	adds	r3, #50	@ 0x32
 80051f2:	4a08      	ldr	r2, [pc, #32]	@ (8005214 <UART_SetConfig+0x4e4>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	f003 020f 	and.w	r2, r3, #15
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4422      	add	r2, r4
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800520e:	46bd      	mov	sp, r7
 8005210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005214:	51eb851f 	.word	0x51eb851f

08005218 <memset>:
 8005218:	4402      	add	r2, r0
 800521a:	4603      	mov	r3, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4d0d      	ldr	r5, [pc, #52]	@ (8005260 <__libc_init_array+0x38>)
 800522c:	4c0d      	ldr	r4, [pc, #52]	@ (8005264 <__libc_init_array+0x3c>)
 800522e:	1b64      	subs	r4, r4, r5
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	2600      	movs	r6, #0
 8005234:	42a6      	cmp	r6, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	4d0b      	ldr	r5, [pc, #44]	@ (8005268 <__libc_init_array+0x40>)
 800523a:	4c0c      	ldr	r4, [pc, #48]	@ (800526c <__libc_init_array+0x44>)
 800523c:	f000 f818 	bl	8005270 <_init>
 8005240:	1b64      	subs	r4, r4, r5
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	2600      	movs	r6, #0
 8005246:	42a6      	cmp	r6, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005250:	4798      	blx	r3
 8005252:	3601      	adds	r6, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f855 3b04 	ldr.w	r3, [r5], #4
 800525a:	4798      	blx	r3
 800525c:	3601      	adds	r6, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	080052a8 	.word	0x080052a8
 8005264:	080052a8 	.word	0x080052a8
 8005268:	080052a8 	.word	0x080052a8
 800526c:	080052ac 	.word	0x080052ac

08005270 <_init>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr

0800527c <_fini>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr
