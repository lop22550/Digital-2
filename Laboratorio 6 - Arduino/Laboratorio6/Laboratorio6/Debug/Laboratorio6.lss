
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003b9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bfc  00000000  00000000  00000407  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000726  00000000  00000000  00001003  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000235  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002e8  000002e8  0000037c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initPorts 0000005e  00000220  00000220  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.initUART9600 00000046  0000027e  0000027e  00000312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.writeUART 0000000e  000002da  000002da  0000036e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000007e  000001a2  000001a2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_5 000000e0  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.flag_B   00000001  00800100  00800100  0000038a  2**0
                  ALLOC
 20 .bss.flag_A   00000001  00800101  00800101  0000038a  2**0
                  ALLOC
 21 .bss.flag_right 00000001  00800102  00800102  0000038a  2**0
                  ALLOC
 22 .bss.flag_left 00000001  00800103  00800103  0000038a  2**0
                  ALLOC
 23 .bss.flag_down 00000001  00800104  00800104  0000038a  2**0
                  ALLOC
 24 .bss.flag_up  00000001  00800105  00800105  0000038a  2**0
                  ALLOC
 25 .text.__dummy_fini 00000002  000002f0  000002f0  00000384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_funcs_on_exit 00000002  000002f2  000002f2  00000386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_simulator_exit 00000002  000002f4  000002f4  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.exit    00000016  000002c4  000002c4  00000358  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  000002ec  000002ec  00000380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
   8:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
   c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  10:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
  18:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  1c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  20:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  24:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  28:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  2c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  30:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  38:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  3c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  40:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  44:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  48:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  4c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  50:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  54:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  58:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  5c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  60:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
  64:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 06       	cpc	r0, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  ba:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000002e8 <__bad_interrupt>:
 2e8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initPorts:

00000220 <initPorts>:
//***************************
// Subrutinas
//***************************
void initPorts(void) {
    // Configurar botones como entradas
	DDRD &= ~(1 << DDD2);
 220:	8a b1       	in	r24, 0x0a	; 10
 222:	8b 7f       	andi	r24, 0xFB	; 251
 224:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD3);
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	87 7f       	andi	r24, 0xF7	; 247
 22a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD4);
 22c:	8a b1       	in	r24, 0x0a	; 10
 22e:	8f 7e       	andi	r24, 0xEF	; 239
 230:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD5);
 232:	8a b1       	in	r24, 0x0a	; 10
 234:	8f 7d       	andi	r24, 0xDF	; 223
 236:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD6);
 238:	8a b1       	in	r24, 0x0a	; 10
 23a:	8f 7b       	andi	r24, 0xBF	; 191
 23c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD7);
 23e:	8a b1       	in	r24, 0x0a	; 10
 240:	8f 77       	andi	r24, 0x7F	; 127
 242:	8a b9       	out	0x0a, r24	; 10
	
    // Habilitar pull-up en los botones
    PORTD |= (1 << DDD2);
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	84 60       	ori	r24, 0x04	; 4
 248:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << DDD3);
 24a:	8b b1       	in	r24, 0x0b	; 11
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << DDD4);
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	80 61       	ori	r24, 0x10	; 16
 254:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << DDD5);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << DDD6);
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << DDD7);
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	80 68       	ori	r24, 0x80	; 128
 266:	8b b9       	out	0x0b, r24	; 11
    
    // Habilitar ISR para PB4, PC4 y PD7
    PCICR |= (1 << PCIE0) | (1 << PCIE1) | (1 << PCIE2);
 268:	e8 e6       	ldi	r30, 0x68	; 104
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	87 60       	ori	r24, 0x07	; 7
 270:	80 83       	st	Z, r24
    
    // Habilitar los botones para que funcionen con la interrupción
	PCMSK2 |= ((1 << PCINT23)| (1 << PCINT22)| (1 << PCINT21)| (1 << PCINT20)| (1 << PCINT19)| (1 << PCINT18));
 272:	ed e6       	ldi	r30, 0x6D	; 109
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	8c 6f       	ori	r24, 0xFC	; 252
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

Disassembly of section .text.initUART9600:

0000027e <initUART9600>:
    
   
}

void initUART9600(void){
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
	DDRD &= ~(1<<DDD0);		//Entrada RX
 282:	8a b1       	in	r24, 0x0a	; 10
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);		//Salida TX
 288:	8a b1       	in	r24, 0x0a	; 10
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
 28e:	c0 ec       	ldi	r28, 0xC0	; 192
 290:	d0 e0       	ldi	r29, 0x00	; 0
 292:	18 82       	st	Y, r1
	UCSR0B = 0;
 294:	a1 ec       	ldi	r26, 0xC1	; 193
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	1c 92       	st	X, r1
	UCSR0C = 0;
 29a:	e2 ec       	ldi	r30, 0xC2	; 194
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	10 82       	st	Z, r1
	
	UCSR0A |= (1<<U2X0);	//Configurar A Modo Fast U2X0 = 1
 2a0:	88 81       	ld	r24, Y
 2a2:	82 60       	ori	r24, 0x02	; 2
 2a4:	88 83       	st	Y, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Configurar B > Habilitar ISR RX, Habilitarmos RX y TX
 2a6:	8c 91       	ld	r24, X
 2a8:	88 69       	ori	r24, 0x98	; 152
 2aa:	8c 93       	st	X, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);		//Configurar C > Frame: 8 bits de datos, no paridad, 1 bit de stop
 2ac:	80 81       	ld	r24, Z
 2ae:	86 60       	ori	r24, 0x06	; 6
 2b0:	80 83       	st	Z, r24
	UBRR0 = 207; //Usando un Baudrate de 9600
 2b2:	8f ec       	ldi	r24, 0xCF	; 207
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

Disassembly of section .text.writeUART:

000002da <writeUART>:

//Función de transmisión UART
void writeUART(char caracter) {
	while (!(UCSR0A & (1<<UDRE0)));
 2da:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2de:	95 ff       	sbrs	r25, 5
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <writeUART>
	UDR0 = caracter;
 2e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e6:	08 95       	ret

Disassembly of section .text.main:

000001a2 <main>:
//***************************
// Código principal
//***************************

int main(void) {
    initPorts();
 1a2:	0e 94 10 01 	call	0x220	; 0x220 <initPorts>
	initUART9600();
 1a6:	0e 94 3f 01 	call	0x27e	; 0x27e <initUART9600>
    writeUART(48);
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	0e 94 6d 01 	call	0x2da	; 0x2da <writeUART>
    // Habilitar las interrupciones globales
    sei();
 1b0:	78 94       	sei
    
    while (1) {
		if (flag_up == 1){
 1b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <flag_up>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	29 f4       	brne	.+10     	; 0x1c4 <main+0x22>
			writeUART('u');
 1ba:	85 e7       	ldi	r24, 0x75	; 117
 1bc:	0e 94 6d 01 	call	0x2da	; 0x2da <writeUART>
			flag_up = 0;
 1c0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag_up>
		}
		
		if (flag_down == 1){
 1c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag_down>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	29 f4       	brne	.+10     	; 0x1d6 <main+0x34>
			writeUART('d');
 1cc:	84 e6       	ldi	r24, 0x64	; 100
 1ce:	0e 94 6d 01 	call	0x2da	; 0x2da <writeUART>
			flag_down = 0;
 1d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag_down>
		}
		
		if (flag_left == 1){
 1d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <flag_left>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <main+0x46>
			writeUART('l');
 1de:	8c e6       	ldi	r24, 0x6C	; 108
 1e0:	0e 94 6d 01 	call	0x2da	; 0x2da <writeUART>
			flag_left = 0;
 1e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag_left>
		}
		
		if (flag_right == 1){
 1e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_right>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	29 f4       	brne	.+10     	; 0x1fa <main+0x58>
			writeUART('r');
 1f0:	82 e7       	ldi	r24, 0x72	; 114
 1f2:	0e 94 6d 01 	call	0x2da	; 0x2da <writeUART>
			flag_right = 0;
 1f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_right>
		}
		
		if (flag_A == 1){
 1fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_A>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	29 f4       	brne	.+10     	; 0x20c <main+0x6a>
			writeUART('A');
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 6d 01 	call	0x2da	; 0x2da <writeUART>
			flag_A = 0;
 208:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_A>
		}
		
		if (flag_B == 1){
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	79 f6       	brne	.-98     	; 0x1b2 <main+0x10>
			writeUART('B');
 214:	82 e4       	ldi	r24, 0x42	; 66
 216:	0e 94 6d 01 	call	0x2da	; 0x2da <writeUART>
			flag_B = 0;
 21a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 21e:	c9 cf       	rjmp	.-110    	; 0x1b2 <main+0x10>

Disassembly of section .text.__vector_5:

000000c2 <__vector_5>:
//***************************
// ISR
//***************************

// Interrupción para el botón rojo 
ISR(PCINT2_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
        if (!(PIND & (1 << PIND2))) {  // Botón del jugador rojo
  d2:	4a 99       	sbic	0x09, 2	; 9
  d4:	0e c0       	rjmp	.+28     	; 0xf2 <__vector_5+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f e7       	ldi	r18, 0x7F	; 127
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <__vector_5+0x1a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <__vector_5+0x24>
  e6:	00 00       	nop
	        _delay_ms(DEBOUNCE_TIME); // Anti-rrebote
	        if (!(PIND & (1 << PIND2))){
  e8:	4a 99       	sbic	0x09, 2	; 9
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <__vector_5+0x30>
		        flag_up = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <flag_up>
	        }
        }
		
		
		if (!(PIND & (1 << PIND3))) {  // Botón del jugador rojo
  f2:	4b 99       	sbic	0x09, 3	; 9
  f4:	0e c0       	rjmp	.+28     	; 0x112 <__vector_5+0x50>
  f6:	2f e7       	ldi	r18, 0x7F	; 127
  f8:	88 e3       	ldi	r24, 0x38	; 56
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <__vector_5+0x3a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_5+0x44>
 106:	00 00       	nop
	        _delay_ms(DEBOUNCE_TIME); // Anti-rrebote
	        if (!(PIND & (1 << PIND3))){
 108:	4b 99       	sbic	0x09, 3	; 9
 10a:	03 c0       	rjmp	.+6      	; 0x112 <__vector_5+0x50>
		        flag_down = 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag_down>
	        }
        }
		
		if (!(PIND & (1 << PIND4))) {  // Botón del jugador rojo
 112:	4c 99       	sbic	0x09, 4	; 9
 114:	0e c0       	rjmp	.+28     	; 0x132 <__vector_5+0x70>
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <__vector_5+0x5a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <__vector_5+0x64>
 126:	00 00       	nop
			_delay_ms(DEBOUNCE_TIME); // Anti-rrebote
			if (!(PIND & (1 << PIND4))){
 128:	4c 99       	sbic	0x09, 4	; 9
 12a:	03 c0       	rjmp	.+6      	; 0x132 <__vector_5+0x70>
				flag_left = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <flag_left>
			}
		}
		
		if (!(PIND & (1 << PIND5))) {  // Botón del jugador rojo
 132:	4d 99       	sbic	0x09, 5	; 9
 134:	0e c0       	rjmp	.+28     	; 0x152 <__vector_5+0x90>
 136:	2f e7       	ldi	r18, 0x7F	; 127
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <__vector_5+0x7a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__vector_5+0x84>
 146:	00 00       	nop
			_delay_ms(DEBOUNCE_TIME); // Anti-rrebote
			if (!(PIND & (1 << PIND5))){
 148:	4d 99       	sbic	0x09, 5	; 9
 14a:	03 c0       	rjmp	.+6      	; 0x152 <__vector_5+0x90>
				flag_right = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_right>
			}
		}
		
		if (!(PIND & (1 << PIND6))) {  // Botón del jugador rojo
 152:	4e 99       	sbic	0x09, 6	; 9
 154:	0e c0       	rjmp	.+28     	; 0x172 <__vector_5+0xb0>
 156:	2f e7       	ldi	r18, 0x7F	; 127
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <__vector_5+0x9a>
 164:	00 c0       	rjmp	.+0      	; 0x166 <__vector_5+0xa4>
 166:	00 00       	nop
			_delay_ms(DEBOUNCE_TIME); // Anti-rrebote
			if (!(PIND & (1 << PIND6))){
 168:	4e 99       	sbic	0x09, 6	; 9
 16a:	03 c0       	rjmp	.+6      	; 0x172 <__vector_5+0xb0>
				flag_A = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_A>
			}
		}
		
		if (!(PIND & (1 << PIND7))) {  // Botón del jugador rojo
 172:	4f 99       	sbic	0x09, 7	; 9
 174:	0e c0       	rjmp	.+28     	; 0x192 <__vector_5+0xd0>
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	88 e3       	ldi	r24, 0x38	; 56
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <__vector_5+0xba>
 184:	00 c0       	rjmp	.+0      	; 0x186 <__vector_5+0xc4>
 186:	00 00       	nop
			_delay_ms(DEBOUNCE_TIME); // Anti-rrebote
			if (!(PIND & (1 << PIND7))){
 188:	4f 99       	sbic	0x09, 7	; 9
 18a:	03 c0       	rjmp	.+6      	; 0x192 <__vector_5+0xd0>
			 flag_B = 1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		  }
		}
    
	}
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000002f0 <_fini>:
 2f0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002f2 <__funcs_on_exit>:
 2f2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002f4 <__simulator_exit>:
 2f4:	08 95       	ret

Disassembly of section .text.exit:

000002c4 <exit>:
 2c4:	ec 01       	movw	r28, r24
 2c6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__funcs_on_exit>
 2ca:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_fini>
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__simulator_exit>
 2d4:	ce 01       	movw	r24, r28
 2d6:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Exit>

Disassembly of section .text._Exit:

000002ec <_Exit>:
 2ec:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
