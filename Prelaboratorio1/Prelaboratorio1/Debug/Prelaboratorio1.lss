
Prelaboratorio1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005e2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000611  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000062d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f89  00000000  00000000  000006ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073a  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00002508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000228  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000473  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000540  00000540  000005d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initDisplay 00000016  00000502  00000502  00000596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.displayNum 000001b0  000000d6  000000d6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.displayP 00000006  0000053a  0000053a  000005ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initPorts 00000080  00000338  00000338  000003cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.conteo_salida 000000b2  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.boton1  00000054  00000424  00000424  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.boton2  0000006c  000003b8  000003b8  0000044c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000030  000004ac  000004ac  00000540  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_3 00000034  00000478  00000478  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_4 00000026  000004dc  000004dc  00000570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.salida   00000001  00800100  00800100  000005e2  2**0
                  ALLOC
 25 .bss.count2   00000001  00800101  00800101  000005e2  2**0
                  ALLOC
 26 .bss.count1   00000001  00800102  00800102  000005e2  2**0
                  ALLOC
 27 .text.libgcc  0000000c  0000052e  0000052e  000005c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  00000548  00000548  000005dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  0000054a  0000054a  000005de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  0000054c  0000054c  000005e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  00000518  00000518  000005ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000544  00000544  000005d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
   8:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
   c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_3>
  10:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_4>
  14:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  18:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  1c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  20:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  24:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  28:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  2c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  30:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  34:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  38:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  3c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  40:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  44:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  48:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  4c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  50:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  54:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  58:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  5c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  60:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  64:	0c 94 a0 02 	jmp	0x540	; 0x540 <__bad_interrupt>
  68:	75 00       	.word	0x0075	; ????
  6a:	8b 00       	.word	0x008b	; ????
  6c:	a1 00       	.word	0x00a1	; ????
  6e:	b7 00       	.word	0x00b7	; ????
  70:	cd 00       	.word	0x00cd	; ????
  72:	e3 00       	.word	0x00e3	; ????
  74:	e6 00       	.word	0x00e6	; ????
  76:	fc 00       	.word	0x00fc	; ????
  78:	12 01       	movw	r2, r4
  7a:	2b 01       	movw	r4, r22

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 03       	mulsu	r16, r17
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  ce:	0c 94 8c 02 	jmp	0x518	; 0x518 <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

00000540 <__bad_interrupt>:
 540:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initDisplay:

00000502 <initDisplay>:


//Función para inicializar pines para display
void initDisplay(void){
	//Los pines a utilizar son los pines D0-D7
	UCSR0B  &= ~(1<<RXEN0); //Deshabilitar los puertos de comunicación
 502:	e1 ec       	ldi	r30, 0xC1	; 193
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	8f 7e       	andi	r24, 0xEF	; 239
 50a:	80 83       	st	Z, r24
	UCSR0B  &= ~(1<<TXEN0);
 50c:	80 81       	ld	r24, Z
 50e:	87 7f       	andi	r24, 0xF7	; 247
 510:	80 83       	st	Z, r24
	DDRD = 0b11111111; //Los pines D como salida
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	8a b9       	out	0x0a, r24	; 10
 516:	08 95       	ret

Disassembly of section .text.displayNum:

000000d6 <displayNum>:
}

//Función para desplegar un número
void displayNum(uint8_t numero){

	switch(numero){
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	91 05       	cpc	r25, r1
  dc:	08 f0       	brcs	.+2      	; 0xe0 <displayNum+0xa>
  de:	d1 c0       	rjmp	.+418    	; 0x282 <displayNum+0x1ac>
  e0:	fc 01       	movw	r30, r24
  e2:	ec 5c       	subi	r30, 0xCC	; 204
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	0c 94 97 02 	jmp	0x52e	; 0x52e <__tablejump2__>
		case 0:
		 PORTD |= (1<<PORTD0);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD1);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD2);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD3);
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD4);
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	80 61       	ori	r24, 0x10	; 16
 106:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD5);
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	8b b9       	out	0x0b, r24	; 11
		 PORTD &= ~(1<<PORTD6);
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	8f 7b       	andi	r24, 0xBF	; 191
 112:	8b b9       	out	0x0b, r24	; 11
		 
		break;
 114:	08 95       	ret
		case 1:
		PORTD &= ~(1<<PORTD0);
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	84 60       	ori	r24, 0x04	; 4
 126:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD3);
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD6);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
		//PORTD = 0b0000110;
		
		
		break;
 140:	08 95       	ret
		case 2:
		PORTD |= (1<<PORTD0);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	81 60       	ori	r24, 0x01	; 1
 146:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD2);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8b 7f       	andi	r24, 0xFB	; 251
 152:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	88 60       	ori	r24, 0x08	; 8
 158:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD4);
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	8b b9       	out	0x0b, r24	; 11
		
		break;
 16c:	08 95       	ret
		case 3:
		PORTD |=(1<<PORTD0);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	81 60       	ori	r24, 0x01	; 1
 172:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	82 60       	ori	r24, 0x02	; 2
 178:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	88 60       	ori	r24, 0x08	; 8
 184:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	80 64       	ori	r24, 0x40	; 64
 196:	8b b9       	out	0x0b, r24	; 11
		
		break;
 198:	08 95       	ret
		case 4:
		PORTD &= ~(1<<PORTD0);
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD3);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8b b9       	out	0x0b, r24	; 11
		
		break;
 1c4:	08 95       	ret
		PORTD |=(1<<PORTD2);
		PORTD |=(1<<PORTD3);
		PORTD &= ~(1<<PORTD4);
		PORTD |=(1<<PORTD5);
		PORTD |=(1<<PORTD6);*/
		PORTD = 0b1101101;
 1c6:	8d e6       	ldi	r24, 0x6D	; 109
 1c8:	8b b9       	out	0x0b, r24	; 11
		
		break;
 1ca:	08 95       	ret
		case 6:
		PORTD |=(1<<PORTD0);
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD1);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD4);
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	8b b9       	out	0x0b, r24	; 11
		
		break;
 1f6:	08 95       	ret
		case 7:
		PORTD |=(1<<PORTD0);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	82 60       	ori	r24, 0x02	; 2
 202:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	84 60       	ori	r24, 0x04	; 4
 208:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD3);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	8f 7e       	andi	r24, 0xEF	; 239
 214:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8f 7d       	andi	r24, 0xDF	; 223
 21a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD6);
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	8f 7b       	andi	r24, 0xBF	; 191
 220:	8b b9       	out	0x0b, r24	; 11
		
		break;
 222:	08 95       	ret
		case 8:
		PORTD |=(1<<PORTD0);
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	81 60       	ori	r24, 0x01	; 1
 228:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 22a:	8b b1       	in	r24, 0x0b	; 11
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	84 60       	ori	r24, 0x04	; 4
 234:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD4);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD7);
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8b b9       	out	0x0b, r24	; 11
		break;
 254:	08 95       	ret
		case 9:
		PORTD |=(1<<PORTD0);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	84 60       	ori	r24, 0x04	; 4
 266:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	8f 7e       	andi	r24, 0xEF	; 239
 272:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	80 62       	ori	r24, 0x20	; 32
 278:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	8b b9       	out	0x0b, r24	; 11
		
		break;
 280:	08 95       	ret
		default: PORTD = 0b00000000;
 282:	1b b8       	out	0x0b, r1	; 11
 284:	08 95       	ret

Disassembly of section .text.displayP:

0000053a <displayP>:
	
}

//Función para desplegar el punto
void displayP(uint8_t punto){
	PORTD = 0b10000000;
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	8b b9       	out	0x0b, r24	; 11
 53e:	08 95       	ret

Disassembly of section .text.initPorts:

00000338 <initPorts>:
//********************************************************************************

void initPorts(void){
	
	//Definir entradas de botones
	DDRB &= ~(1 << PORTB4); 
 338:	84 b1       	in	r24, 0x04	; 4
 33a:	8f 7e       	andi	r24, 0xEF	; 239
 33c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PORTB5);
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	8f 7d       	andi	r24, 0xDF	; 223
 342:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1 << PORTC0);
 344:	87 b1       	in	r24, 0x07	; 7
 346:	8e 7f       	andi	r24, 0xFE	; 254
 348:	87 b9       	out	0x07, r24	; 7
	//Habilitar pull up de botones
	PORTB |= (1 << PORTB4);
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	80 61       	ori	r24, 0x10	; 16
 34e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB5);
 350:	85 b1       	in	r24, 0x05	; 5
 352:	80 62       	ori	r24, 0x20	; 32
 354:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PORTC0);
 356:	88 b1       	in	r24, 0x08	; 8
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	88 b9       	out	0x08, r24	; 8
	
	//Habilitamos ISR PCINT0 y PCINT1
	PCICR |= (1<<PCIE0);
 35c:	e8 e6       	ldi	r30, 0x68	; 104
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	81 60       	ori	r24, 0x01	; 1
 364:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
 366:	80 81       	ld	r24, Z
 368:	82 60       	ori	r24, 0x02	; 2
 36a:	80 83       	st	Z, r24
	//Habilitar el PB4, PB5,PC0 pra que se active PCINT0 y PCINT1
	PCMSK0 |= (1<<PCINT4);
 36c:	eb e6       	ldi	r30, 0x6B	; 107
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 61       	ori	r24, 0x10	; 16
 374:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);
 376:	80 81       	ld	r24, Z
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT8);
 37c:	ec e6       	ldi	r30, 0x6C	; 108
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	81 60       	ori	r24, 0x01	; 1
 384:	80 83       	st	Z, r24
	
	
	//Definir salidas para leds
	DDRC |= (1 << PORTC1);
 386:	87 b1       	in	r24, 0x07	; 7
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC2);
 38c:	87 b1       	in	r24, 0x07	; 7
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC3);
 392:	87 b1       	in	r24, 0x07	; 7
 394:	88 60       	ori	r24, 0x08	; 8
 396:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC4);
 398:	87 b1       	in	r24, 0x07	; 7
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	87 b9       	out	0x07, r24	; 7
	
	
	DDRB |= (1 << PORTB0);
 39e:	84 b1       	in	r24, 0x04	; 4
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PORTB1);
 3a4:	84 b1       	in	r24, 0x04	; 4
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PORTB2);
 3aa:	84 b1       	in	r24, 0x04	; 4
 3ac:	84 60       	ori	r24, 0x04	; 4
 3ae:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PORTB3);
 3b0:	84 b1       	in	r24, 0x04	; 4
 3b2:	88 60       	ori	r24, 0x08	; 8
 3b4:	84 b9       	out	0x04, r24	; 4
 3b6:	08 95       	ret

Disassembly of section .text.conteo_salida:

00000286 <conteo_salida>:
	
	
}

void conteo_salida (uint8_t salida){
	if (salida == 1)
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	09 f0       	breq	.+2      	; 0x28c <conteo_salida+0x6>
 28a:	52 c0       	rjmp	.+164    	; 0x330 <conteo_salida+0xaa>
	{
		DDRB |= (1 << PORTB4);  //Se desactivan botones
 28c:	84 b1       	in	r24, 0x04	; 4
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	84 b9       	out	0x04, r24	; 4
		DDRB |= (1 << PORTB5);
 292:	84 b1       	in	r24, 0x04	; 4
 294:	80 62       	ori	r24, 0x20	; 32
 296:	84 b9       	out	0x04, r24	; 4
		DDRC |= (1 << PORTC0);
 298:	87 b1       	in	r24, 0x07	; 7
 29a:	81 60       	ori	r24, 0x01	; 1
 29c:	87 b9       	out	0x07, r24	; 7
		salida = 0;		
		displayNum(5);
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	83 ed       	ldi	r24, 0xD3	; 211
 2a8:	90 e3       	ldi	r25, 0x30	; 48
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <conteo_salida+0x24>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <conteo_salida+0x2e>
 2b4:	00 00       	nop
		_delay_ms(1000);
		displayNum(4);
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	83 ed       	ldi	r24, 0xD3	; 211
 2c0:	90 e3       	ldi	r25, 0x30	; 48
 2c2:	21 50       	subi	r18, 0x01	; 1
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	90 40       	sbci	r25, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <conteo_salida+0x3c>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <conteo_salida+0x46>
 2cc:	00 00       	nop
		_delay_ms(1000);
		displayNum(3);
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	83 ed       	ldi	r24, 0xD3	; 211
 2d8:	90 e3       	ldi	r25, 0x30	; 48
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <conteo_salida+0x54>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <conteo_salida+0x5e>
 2e4:	00 00       	nop
		_delay_ms(1000);
		displayNum(2);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	83 ed       	ldi	r24, 0xD3	; 211
 2f0:	90 e3       	ldi	r25, 0x30	; 48
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <conteo_salida+0x6c>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <conteo_salida+0x76>
 2fc:	00 00       	nop
		_delay_ms(1000);
		displayNum(1);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	83 ed       	ldi	r24, 0xD3	; 211
 308:	90 e3       	ldi	r25, 0x30	; 48
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <conteo_salida+0x84>
 312:	00 c0       	rjmp	.+0      	; 0x314 <conteo_salida+0x8e>
 314:	00 00       	nop
		_delay_ms(1000);
		displayNum(0);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
		DDRB &= ~(1 << PORTB4);  //Se activan botones
 31c:	84 b1       	in	r24, 0x04	; 4
 31e:	8f 7e       	andi	r24, 0xEF	; 239
 320:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << PORTB5);
 322:	84 b1       	in	r24, 0x04	; 4
 324:	8f 7d       	andi	r24, 0xDF	; 223
 326:	84 b9       	out	0x04, r24	; 4
		DDRC &= ~(1 << PORTC0);
 328:	87 b1       	in	r24, 0x07	; 7
 32a:	8e 7f       	andi	r24, 0xFE	; 254
 32c:	87 b9       	out	0x07, r24	; 7
 32e:	08 95       	ret
	} else{
		displayP(1);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 9d 02 	call	0x53a	; 0x53a <displayP>
 336:	08 95       	ret

Disassembly of section .text.boton1:

00000424 <boton1>:
	}
	
}

void boton1(uint8_t count1){  //LEDs AZULES
	if (count1 >= 4)
 424:	84 30       	cpi	r24, 0x04	; 4
 426:	38 f0       	brcs	.+14     	; 0x436 <boton1+0x12>
	{
		count1 = 0;
		PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 428:	85 b1       	in	r24, 0x05	; 5
 42a:	80 7f       	andi	r24, 0xF0	; 240
 42c:	85 b9       	out	0x05, r24	; 5
		//PORTD = 0b0000110;  //Se despliega el número 1
		displayNum(1);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 434:	08 95       	ret
		
	}else{
		switch (count1){
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	99 f0       	breq	.+38     	; 0x460 <boton1+0x3c>
 43a:	28 f4       	brcc	.+10     	; 0x446 <boton1+0x22>
 43c:	88 23       	and	r24, r24
 43e:	41 f0       	breq	.+16     	; 0x450 <boton1+0x2c>
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	51 f0       	breq	.+20     	; 0x458 <boton1+0x34>
 444:	08 95       	ret
 446:	83 30       	cpi	r24, 0x03	; 3
 448:	79 f0       	breq	.+30     	; 0x468 <boton1+0x44>
 44a:	84 30       	cpi	r24, 0x04	; 4
 44c:	89 f0       	breq	.+34     	; 0x470 <boton1+0x4c>
 44e:	08 95       	ret
		case 0:
		PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 450:	85 b1       	in	r24, 0x05	; 5
 452:	80 7f       	andi	r24, 0xF0	; 240
 454:	85 b9       	out	0x05, r24	; 5
		break;	
 456:	08 95       	ret
		case 1:
		PORTB |= (1<<PORTB0);
 458:	85 b1       	in	r24, 0x05	; 5
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	85 b9       	out	0x05, r24	; 5
		break;
 45e:	08 95       	ret
		case 2:
		PORTB |= ((1<<PORTB0)|(1<<PORTB1));
 460:	85 b1       	in	r24, 0x05	; 5
 462:	83 60       	ori	r24, 0x03	; 3
 464:	85 b9       	out	0x05, r24	; 5
		break;
 466:	08 95       	ret
		case 3:
		PORTB |= ((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2));
 468:	85 b1       	in	r24, 0x05	; 5
 46a:	87 60       	ori	r24, 0x07	; 7
 46c:	85 b9       	out	0x05, r24	; 5
		break;
 46e:	08 95       	ret
		case 4:
		PORTB |= ((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 470:	85 b1       	in	r24, 0x05	; 5
 472:	8f 60       	ori	r24, 0x0F	; 15
 474:	85 b9       	out	0x05, r24	; 5
 476:	08 95       	ret

Disassembly of section .text.boton2:

000003b8 <boton2>:
		}
	}
}

void boton2(uint8_t count2){  //LEDs ROJOS
	if (count2 >= 4)
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	38 f0       	brcs	.+14     	; 0x3ca <boton2+0x12>
	{
		count2 = 0;
		PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	85 b9       	out	0x05, r24	; 5
		displayNum(2);
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 3c8:	08 95       	ret
	}else{
		switch (count2){
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	69 f0       	breq	.+26     	; 0x3e8 <boton2+0x30>
 3ce:	18 f4       	brcc	.+6      	; 0x3d6 <boton2+0x1e>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	31 f0       	breq	.+12     	; 0x3e0 <boton2+0x28>
 3d4:	08 95       	ret
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	71 f0       	breq	.+28     	; 0x3f6 <boton2+0x3e>
 3da:	84 30       	cpi	r24, 0x04	; 4
 3dc:	b1 f0       	breq	.+44     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3de:	08 95       	ret
			case 0: 
			
			break;
			case 1:
			PORTC |= (1<<PORTC1);
 3e0:	88 b1       	in	r24, 0x08	; 8
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	88 b9       	out	0x08, r24	; 8
			break;
 3e6:	08 95       	ret
			case 2:
			PORTC |= (1<<PORTC1);
 3e8:	88 b1       	in	r24, 0x08	; 8
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC2);
 3ee:	88 b1       	in	r24, 0x08	; 8
 3f0:	84 60       	ori	r24, 0x04	; 4
 3f2:	88 b9       	out	0x08, r24	; 8
			break;
 3f4:	08 95       	ret
			case 3:
			PORTC |= (1<<PORTC1);
 3f6:	88 b1       	in	r24, 0x08	; 8
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC2);
 3fc:	88 b1       	in	r24, 0x08	; 8
 3fe:	84 60       	ori	r24, 0x04	; 4
 400:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC3);
 402:	88 b1       	in	r24, 0x08	; 8
 404:	88 60       	ori	r24, 0x08	; 8
 406:	88 b9       	out	0x08, r24	; 8
			break;
 408:	08 95       	ret
			case 4:
			PORTC |= (1<<PORTC1);
 40a:	88 b1       	in	r24, 0x08	; 8
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC2);
 410:	88 b1       	in	r24, 0x08	; 8
 412:	84 60       	ori	r24, 0x04	; 4
 414:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC3);
 416:	88 b1       	in	r24, 0x08	; 8
 418:	88 60       	ori	r24, 0x08	; 8
 41a:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC4);
 41c:	88 b1       	in	r24, 0x08	; 8
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	88 b9       	out	0x08, r24	; 8
 422:	08 95       	ret

Disassembly of section .text.main:

000004ac <main>:
//Código principal 
//********************************************************************************

int main(void)
{
	initDisplay();
 4ac:	0e 94 81 02 	call	0x502	; 0x502 <initDisplay>
	initPorts();
 4b0:	0e 94 9c 01 	call	0x338	; 0x338 <initPorts>
	
	//habilitar todas las interrupciones GIE
	sei();
 4b4:	78 94       	sei
	
   while(1)
    {
       if (salida == 1)
 4b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <main+0x18>
       {conteo_salida(salida);
 4be:	0e 94 43 01 	call	0x286	; 0x286 <conteo_salida>
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <main+0x1e>
       }else {displayP(1);}
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 9d 02 	call	0x53a	; 0x53a <displayP>
       
		boton1(count1);  //LEDs AZULES
 4ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count1>
 4ce:	0e 94 12 02 	call	0x424	; 0x424 <boton1>
		boton2(count2);  //LEDs ROJOS
 4d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count2>
 4d6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <boton2>
    }
 4da:	ed cf       	rjmp	.-38     	; 0x4b6 <main+0xa>

Disassembly of section .text.__vector_3:

00000478 <__vector_3>:
}

//********************************************************************************
//ISR
//********************************************************************************
ISR(PCINT0_vect){
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	8f 93       	push	r24
	if (PINB & (1<<PORTB4))    //Es el botón que inicia cada carrera
 484:	1c 99       	sbic	0x03, 4	; 3
 486:	05 c0       	rjmp	.+10     	; 0x492 <__vector_3+0x1a>
	{
	}else{
		//Se presiono el botón
		salida = salida+1;
 488:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
	}
	
	if (PINB & (1<<PORTB5))    //Es el botón para el jugador 1 
 492:	1d 99       	sbic	0x03, 5	; 3
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_3+0x28>
	{
		}else{
		//Se presiono el botón
		count1 = count1 + 1;
 496:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count1>
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count1>
	}
}
 4a0:	8f 91       	pop	r24
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

Disassembly of section .text.__vector_4:

000004dc <__vector_4>:

ISR(PCINT1_vect){
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	8f 93       	push	r24
	if (PINC & (1<<PORTC4))     //Es el botón para el jugador 2
 4e8:	34 99       	sbic	0x06, 4	; 6
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <__vector_4+0x1a>
	{
		}else{
		//Se presiono el botón
		count2 = count2 + 1;
 4ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count2>
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count2>
	}
	
 4f6:	8f 91       	pop	r24
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

Disassembly of section .text.libgcc:

0000052e <__tablejump2__>:
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	05 90       	lpm	r0, Z+
 534:	f4 91       	lpm	r31, Z
 536:	e0 2d       	mov	r30, r0
 538:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

00000548 <_fini>:
 548:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000054a <__funcs_on_exit>:
 54a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000054c <__simulator_exit>:
 54c:	08 95       	ret

Disassembly of section .text.exit:

00000518 <exit>:
 518:	ec 01       	movw	r28, r24
 51a:	0e 94 a5 02 	call	0x54a	; 0x54a <__funcs_on_exit>
 51e:	0e 94 a4 02 	call	0x548	; 0x548 <_fini>
 522:	ce 01       	movw	r24, r28
 524:	0e 94 a6 02 	call	0x54c	; 0x54c <__simulator_exit>
 528:	ce 01       	movw	r24, r28
 52a:	0e 94 a2 02 	call	0x544	; 0x544 <_Exit>

Disassembly of section .text._Exit:

00000544 <_Exit>:
 544:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
