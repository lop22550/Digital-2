
Prelaboratorio1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005c4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  000005f3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f76  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000722  00000000  00000000  00001d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000228  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000473  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000522  00000522  000005b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initDisplay 00000016  000004e4  000004e4  00000578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.displayNum 000001b0  000000d6  000000d6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.displayP 00000006  0000051c  0000051c  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initPorts 00000080  00000328  00000328  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.conteo_salida 000000a2  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.boton1  00000054  0000040e  0000040e  000004a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.boton2  00000066  000003a8  000003a8  0000043c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000028  00000496  00000496  0000052a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_3 00000034  00000462  00000462  000004f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_4 00000026  000004be  000004be  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.salida   00000001  00800100  00800100  000005c4  2**0
                  ALLOC
 25 .bss.count2   00000001  00800101  00800101  000005c4  2**0
                  ALLOC
 26 .bss.count1   00000001  00800102  00800102  000005c4  2**0
                  ALLOC
 27 .text.libgcc  0000000c  00000510  00000510  000005a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  0000052a  0000052a  000005be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  0000052c  0000052c  000005c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  0000052e  0000052e  000005c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  000004fa  000004fa  0000058e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000526  00000526  000005ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
   8:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
   c:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_3>
  10:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_4>
  14:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  18:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  1c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  20:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  24:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  28:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  2c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  30:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  34:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  38:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  3c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  40:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  44:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  48:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  4c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  50:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  54:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  58:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  5c:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  60:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  64:	0c 94 91 02 	jmp	0x522	; 0x522 <__bad_interrupt>
  68:	75 00       	.word	0x0075	; ????
  6a:	8b 00       	.word	0x008b	; ????
  6c:	a1 00       	.word	0x00a1	; ????
  6e:	b7 00       	.word	0x00b7	; ????
  70:	cd 00       	.word	0x00cd	; ????
  72:	e3 00       	.word	0x00e3	; ????
  74:	e6 00       	.word	0x00e6	; ????
  76:	fc 00       	.word	0x00fc	; ????
  78:	12 01       	movw	r2, r4
  7a:	2b 01       	movw	r4, r22

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 03       	mulsu	r16, r17
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 4b 02 	call	0x496	; 0x496 <main>
  ce:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

00000522 <__bad_interrupt>:
 522:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.initDisplay:

000004e4 <initDisplay>:


//Función para inicializar pines para display
void initDisplay(void){
	//Los pines a utilizar son los pines D0-D7
	UCSR0B  &= ~(1<<RXEN0); //Deshabilitar los puertos de comunicación
 4e4:	e1 ec       	ldi	r30, 0xC1	; 193
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	8f 7e       	andi	r24, 0xEF	; 239
 4ec:	80 83       	st	Z, r24
	UCSR0B  &= ~(1<<TXEN0);
 4ee:	80 81       	ld	r24, Z
 4f0:	87 7f       	andi	r24, 0xF7	; 247
 4f2:	80 83       	st	Z, r24
	DDRD = 0b11111111; //Los pines D como salida
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	8a b9       	out	0x0a, r24	; 10
 4f8:	08 95       	ret

Disassembly of section .text.displayNum:

000000d6 <displayNum>:
}

//Función para desplegar un número
void displayNum(uint8_t numero){

	switch(numero){
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	91 05       	cpc	r25, r1
  dc:	08 f0       	brcs	.+2      	; 0xe0 <displayNum+0xa>
  de:	d1 c0       	rjmp	.+418    	; 0x282 <displayNum+0x1ac>
  e0:	fc 01       	movw	r30, r24
  e2:	ec 5c       	subi	r30, 0xCC	; 204
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	0c 94 88 02 	jmp	0x510	; 0x510 <__tablejump2__>
		case 0:
		 PORTD |= (1<<PORTD0);
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD1);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD2);
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD3);
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD4);
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	80 61       	ori	r24, 0x10	; 16
 106:	8b b9       	out	0x0b, r24	; 11
		 PORTD |= (1<<PORTD5);
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	8b b9       	out	0x0b, r24	; 11
		 PORTD &= ~(1<<PORTD6);
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	8f 7b       	andi	r24, 0xBF	; 191
 112:	8b b9       	out	0x0b, r24	; 11
		 
		break;
 114:	08 95       	ret
		case 1:
		PORTD &= ~(1<<PORTD0);
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	8e 7f       	andi	r24, 0xFE	; 254
 11a:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	84 60       	ori	r24, 0x04	; 4
 126:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD3);
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD6);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	8b b9       	out	0x0b, r24	; 11
		//PORTD = 0b0000110;
		
		
		break;
 140:	08 95       	ret
		case 2:
		PORTD |= (1<<PORTD0);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	81 60       	ori	r24, 0x01	; 1
 146:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD2);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8b 7f       	andi	r24, 0xFB	; 251
 152:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	88 60       	ori	r24, 0x08	; 8
 158:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD4);
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	8b b9       	out	0x0b, r24	; 11
		
		break;
 16c:	08 95       	ret
		case 3:
		PORTD |=(1<<PORTD0);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	81 60       	ori	r24, 0x01	; 1
 172:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	82 60       	ori	r24, 0x02	; 2
 178:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	88 60       	ori	r24, 0x08	; 8
 184:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	80 64       	ori	r24, 0x40	; 64
 196:	8b b9       	out	0x0b, r24	; 11
		
		break;
 198:	08 95       	ret
		case 4:
		PORTD &= ~(1<<PORTD0);
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD3);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 1b8:	8b b1       	in	r24, 0x0b	; 11
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8b b9       	out	0x0b, r24	; 11
		
		break;
 1c4:	08 95       	ret
		PORTD |=(1<<PORTD2);
		PORTD |=(1<<PORTD3);
		PORTD &= ~(1<<PORTD4);
		PORTD |=(1<<PORTD5);
		PORTD |=(1<<PORTD6);*/
		PORTD = 0b1101101;
 1c6:	8d e6       	ldi	r24, 0x6D	; 109
 1c8:	8b b9       	out	0x0b, r24	; 11
		
		break;
 1ca:	08 95       	ret
		case 6:
		PORTD |=(1<<PORTD0);
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD1);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD4);
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	8b b9       	out	0x0b, r24	; 11
		
		break;
 1f6:	08 95       	ret
		case 7:
		PORTD |=(1<<PORTD0);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	82 60       	ori	r24, 0x02	; 2
 202:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	84 60       	ori	r24, 0x04	; 4
 208:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD3);
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	8f 7e       	andi	r24, 0xEF	; 239
 214:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD5);
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8f 7d       	andi	r24, 0xDF	; 223
 21a:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD6);
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	8f 7b       	andi	r24, 0xBF	; 191
 220:	8b b9       	out	0x0b, r24	; 11
		
		break;
 222:	08 95       	ret
		case 8:
		PORTD |=(1<<PORTD0);
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	81 60       	ori	r24, 0x01	; 1
 228:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 22a:	8b b1       	in	r24, 0x0b	; 11
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	84 60       	ori	r24, 0x04	; 4
 234:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD4);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	80 61       	ori	r24, 0x10	; 16
 240:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD7);
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8b b9       	out	0x0b, r24	; 11
		break;
 254:	08 95       	ret
		case 9:
		PORTD |=(1<<PORTD0);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD1);
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD2);
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	84 60       	ori	r24, 0x04	; 4
 266:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD3);
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	88 60       	ori	r24, 0x08	; 8
 26c:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1<<PORTD4);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	8f 7e       	andi	r24, 0xEF	; 239
 272:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD5);
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	80 62       	ori	r24, 0x20	; 32
 278:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PORTD6);
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	8b b9       	out	0x0b, r24	; 11
		
		break;
 280:	08 95       	ret
		default: PORTD = 0b00000000;
 282:	1b b8       	out	0x0b, r1	; 11
 284:	08 95       	ret

Disassembly of section .text.displayP:

0000051c <displayP>:
	
}

//Función para desplegar el punto
void displayP(uint8_t punto){
	PORTD = 0b10000000;
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	8b b9       	out	0x0b, r24	; 11
 520:	08 95       	ret

Disassembly of section .text.initPorts:

00000328 <initPorts>:
//********************************************************************************

void initPorts(void){
	
	//Definir entradas de botones
	DDRB &= ~(1 << PORTB4); 
 328:	84 b1       	in	r24, 0x04	; 4
 32a:	8f 7e       	andi	r24, 0xEF	; 239
 32c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PORTB5);
 32e:	84 b1       	in	r24, 0x04	; 4
 330:	8f 7d       	andi	r24, 0xDF	; 223
 332:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1 << PORTC0);
 334:	87 b1       	in	r24, 0x07	; 7
 336:	8e 7f       	andi	r24, 0xFE	; 254
 338:	87 b9       	out	0x07, r24	; 7
	//Habilitar pull up de botones
	PORTB |= (1 << PORTB4);
 33a:	85 b1       	in	r24, 0x05	; 5
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << PORTB5);
 340:	85 b1       	in	r24, 0x05	; 5
 342:	80 62       	ori	r24, 0x20	; 32
 344:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PORTC0);
 346:	88 b1       	in	r24, 0x08	; 8
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	88 b9       	out	0x08, r24	; 8
	
	//Habilitamos ISR PCINT0 y PCINT1
	PCICR |= (1<<PCIE0);
 34c:	e8 e6       	ldi	r30, 0x68	; 104
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	81 60       	ori	r24, 0x01	; 1
 354:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
 356:	80 81       	ld	r24, Z
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	80 83       	st	Z, r24
	//Habilitar el PB4, PB5,PC0 pra que se active PCINT0 y PCINT1
	PCMSK0 |= (1<<PCINT4);
 35c:	eb e6       	ldi	r30, 0x6B	; 107
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 61       	ori	r24, 0x10	; 16
 364:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);
 366:	80 81       	ld	r24, Z
 368:	80 62       	ori	r24, 0x20	; 32
 36a:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT8);
 36c:	ec e6       	ldi	r30, 0x6C	; 108
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	81 60       	ori	r24, 0x01	; 1
 374:	80 83       	st	Z, r24
	
	
	//Definir salidas para leds
	DDRC |= (1 << PORTC1);
 376:	87 b1       	in	r24, 0x07	; 7
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC2);
 37c:	87 b1       	in	r24, 0x07	; 7
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC3);
 382:	87 b1       	in	r24, 0x07	; 7
 384:	88 60       	ori	r24, 0x08	; 8
 386:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC4);
 388:	87 b1       	in	r24, 0x07	; 7
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	87 b9       	out	0x07, r24	; 7
	
	
	DDRB |= (1 << PORTB0);
 38e:	84 b1       	in	r24, 0x04	; 4
 390:	81 60       	ori	r24, 0x01	; 1
 392:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PORTB1);
 394:	84 b1       	in	r24, 0x04	; 4
 396:	82 60       	ori	r24, 0x02	; 2
 398:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PORTB2);
 39a:	84 b1       	in	r24, 0x04	; 4
 39c:	84 60       	ori	r24, 0x04	; 4
 39e:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PORTB3);
 3a0:	84 b1       	in	r24, 0x04	; 4
 3a2:	88 60       	ori	r24, 0x08	; 8
 3a4:	84 b9       	out	0x04, r24	; 4
 3a6:	08 95       	ret

Disassembly of section .text.conteo_salida:

00000286 <conteo_salida>:
	
	
}

void conteo_salida (uint8_t salida){
	if (salida == 1)
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	09 f0       	breq	.+2      	; 0x28c <conteo_salida+0x6>
 28a:	4a c0       	rjmp	.+148    	; 0x320 <conteo_salida+0x9a>
	{
		DDRB = 0b111111;  //Se desactivan botones
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	84 b9       	out	0x04, r24	; 4
		DDRC |= (1 << PORTC0);
 290:	87 b1       	in	r24, 0x07	; 7
 292:	81 60       	ori	r24, 0x01	; 1
 294:	87 b9       	out	0x07, r24	; 7
		salida = 0;		
		displayNum(5);
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	83 ed       	ldi	r24, 0xD3	; 211
 2a0:	90 e3       	ldi	r25, 0x30	; 48
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <conteo_salida+0x1c>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <conteo_salida+0x26>
 2ac:	00 00       	nop
		_delay_ms(1000);
		displayNum(4);
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	83 ed       	ldi	r24, 0xD3	; 211
 2b8:	90 e3       	ldi	r25, 0x30	; 48
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <conteo_salida+0x34>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <conteo_salida+0x3e>
 2c4:	00 00       	nop
		_delay_ms(1000);
		displayNum(3);
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	83 ed       	ldi	r24, 0xD3	; 211
 2d0:	90 e3       	ldi	r25, 0x30	; 48
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <conteo_salida+0x4c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <conteo_salida+0x56>
 2dc:	00 00       	nop
		_delay_ms(1000);
		displayNum(2);
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	83 ed       	ldi	r24, 0xD3	; 211
 2e8:	90 e3       	ldi	r25, 0x30	; 48
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <conteo_salida+0x64>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <conteo_salida+0x6e>
 2f4:	00 00       	nop
		_delay_ms(1000);
		displayNum(1);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	83 ed       	ldi	r24, 0xD3	; 211
 300:	90 e3       	ldi	r25, 0x30	; 48
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <conteo_salida+0x7c>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <conteo_salida+0x86>
 30c:	00 00       	nop
		_delay_ms(1000);
		displayNum(0);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
		DDRB = 0b001111;  //Se activan botones
 314:	8f e0       	ldi	r24, 0x0F	; 15
 316:	84 b9       	out	0x04, r24	; 4
		DDRC &= ~(1 << PORTC0);
 318:	87 b1       	in	r24, 0x07	; 7
 31a:	8e 7f       	andi	r24, 0xFE	; 254
 31c:	87 b9       	out	0x07, r24	; 7
 31e:	08 95       	ret
		
	} else{
		displayP(1);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 8e 02 	call	0x51c	; 0x51c <displayP>
 326:	08 95       	ret

Disassembly of section .text.boton1:

0000040e <boton1>:
	}
	
}

void boton1(uint8_t count1){  //LEDs ROJOS
	if (count1 > 4)
 40e:	85 30       	cpi	r24, 0x05	; 5
 410:	38 f0       	brcs	.+14     	; 0x420 <boton1+0x12>
	{
		count1 = 0;
		PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 412:	85 b1       	in	r24, 0x05	; 5
 414:	80 7f       	andi	r24, 0xF0	; 240
 416:	85 b9       	out	0x05, r24	; 5
		//PORTD = 0b0000110;  //Se despliega el número 1
		displayNum(1);
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 41e:	08 95       	ret
		
	}else{
		switch (count1){
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	99 f0       	breq	.+38     	; 0x44a <boton1+0x3c>
 424:	28 f4       	brcc	.+10     	; 0x430 <boton1+0x22>
 426:	88 23       	and	r24, r24
 428:	41 f0       	breq	.+16     	; 0x43a <boton1+0x2c>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	51 f0       	breq	.+20     	; 0x442 <boton1+0x34>
 42e:	08 95       	ret
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	79 f0       	breq	.+30     	; 0x452 <boton1+0x44>
 434:	84 30       	cpi	r24, 0x04	; 4
 436:	89 f0       	breq	.+34     	; 0x45a <boton1+0x4c>
 438:	08 95       	ret
		case 0:
		PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 43a:	85 b1       	in	r24, 0x05	; 5
 43c:	80 7f       	andi	r24, 0xF0	; 240
 43e:	85 b9       	out	0x05, r24	; 5
		break;	
 440:	08 95       	ret
		case 1:
		PORTB |= (1<<PORTB0);
 442:	85 b1       	in	r24, 0x05	; 5
 444:	81 60       	ori	r24, 0x01	; 1
 446:	85 b9       	out	0x05, r24	; 5
		break;
 448:	08 95       	ret
		case 2:
		PORTB |= ((1<<PORTB0)|(1<<PORTB1));
 44a:	85 b1       	in	r24, 0x05	; 5
 44c:	83 60       	ori	r24, 0x03	; 3
 44e:	85 b9       	out	0x05, r24	; 5
		break;
 450:	08 95       	ret
		case 3:
		PORTB |= ((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2));
 452:	85 b1       	in	r24, 0x05	; 5
 454:	87 60       	ori	r24, 0x07	; 7
 456:	85 b9       	out	0x05, r24	; 5
		break;
 458:	08 95       	ret
		case 4:
		PORTB |= ((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 45a:	85 b1       	in	r24, 0x05	; 5
 45c:	8f 60       	ori	r24, 0x0F	; 15
 45e:	85 b9       	out	0x05, r24	; 5
 460:	08 95       	ret

Disassembly of section .text.boton2:

000003a8 <boton2>:
		}
	}
}

void boton2(uint8_t count2){  //LEDs AZULES
	if (count2 == 4)
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <boton2+0xc>
	{
		count2 = 0;
		displayNum(2);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 3b2:	08 95       	ret
	}else{
		switch (count2){
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	69 f0       	breq	.+26     	; 0x3d2 <boton2+0x2a>
 3b8:	18 f4       	brcc	.+6      	; 0x3c0 <boton2+0x18>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	31 f0       	breq	.+12     	; 0x3ca <boton2+0x22>
 3be:	08 95       	ret
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	71 f0       	breq	.+28     	; 0x3e0 <boton2+0x38>
 3c4:	84 30       	cpi	r24, 0x04	; 4
 3c6:	b1 f0       	breq	.+44     	; 0x3f4 <boton2+0x4c>
 3c8:	08 95       	ret
			case 0: 
			
			break;
			case 1:
			PORTC |= (1<<PORTC1);
 3ca:	88 b1       	in	r24, 0x08	; 8
 3cc:	82 60       	ori	r24, 0x02	; 2
 3ce:	88 b9       	out	0x08, r24	; 8
			break;
 3d0:	08 95       	ret
			case 2:
			PORTC |= (1<<PORTC1);
 3d2:	88 b1       	in	r24, 0x08	; 8
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC2);
 3d8:	88 b1       	in	r24, 0x08	; 8
 3da:	84 60       	ori	r24, 0x04	; 4
 3dc:	88 b9       	out	0x08, r24	; 8
			break;
 3de:	08 95       	ret
			case 3:
			PORTC |= (1<<PORTC1);
 3e0:	88 b1       	in	r24, 0x08	; 8
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC2);
 3e6:	88 b1       	in	r24, 0x08	; 8
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC3);
 3ec:	88 b1       	in	r24, 0x08	; 8
 3ee:	88 60       	ori	r24, 0x08	; 8
 3f0:	88 b9       	out	0x08, r24	; 8
			break;
 3f2:	08 95       	ret
			case 4:
			PORTC |= (1<<PORTC1);
 3f4:	88 b1       	in	r24, 0x08	; 8
 3f6:	82 60       	ori	r24, 0x02	; 2
 3f8:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC2);
 3fa:	88 b1       	in	r24, 0x08	; 8
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC3);
 400:	88 b1       	in	r24, 0x08	; 8
 402:	88 60       	ori	r24, 0x08	; 8
 404:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1<<PORTC4);
 406:	88 b1       	in	r24, 0x08	; 8
 408:	80 61       	ori	r24, 0x10	; 16
 40a:	88 b9       	out	0x08, r24	; 8
 40c:	08 95       	ret

Disassembly of section .text.main:

00000496 <main>:
//Código principal 
//********************************************************************************

int main(void)
{
	initDisplay();
 496:	0e 94 72 02 	call	0x4e4	; 0x4e4 <initDisplay>
	initPorts();
 49a:	0e 94 94 01 	call	0x328	; 0x328 <initPorts>
	
	//habilitar todas las interrupciones GIE
	sei();
 49e:	78 94       	sei
	
   while(1)
    {
       if (salida == 1)
 4a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	11 f4       	brne	.+4      	; 0x4ac <main+0x16>
       {conteo_salida(salida);
 4a8:	0e 94 43 01 	call	0x286	; 0x286 <conteo_salida>
       }
       
		boton1(count1);  //LEDs AZULES
 4ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count1>
 4b0:	0e 94 07 02 	call	0x40e	; 0x40e <boton1>
		boton2(count2);  //LEDs ROJOS
 4b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count2>
 4b8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <boton2>
    }
 4bc:	f1 cf       	rjmp	.-30     	; 0x4a0 <main+0xa>

Disassembly of section .text.__vector_3:

00000462 <__vector_3>:
}

//********************************************************************************
//ISR
//********************************************************************************
ISR(PCINT0_vect){
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	8f 93       	push	r24
	if (PINB & (1<<PORTB4))    //Es el botón que inicia cada carrera
 46e:	1c 99       	sbic	0x03, 4	; 3
 470:	05 c0       	rjmp	.+10     	; 0x47c <__vector_3+0x1a>
	{
	}else{
		//Se presiono el botón
		salida = salida+1;
 472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
	}
	
	if (PINB & (1<<PORTB5))    //Es el botón para el jugador 1 
 47c:	1d 99       	sbic	0x03, 5	; 3
 47e:	05 c0       	rjmp	.+10     	; 0x48a <__vector_3+0x28>
	{
		}else{
		//Se presiono el botón
		count1 = count1 + 1;
 480:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count1>
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count1>
	}
}
 48a:	8f 91       	pop	r24
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

Disassembly of section .text.__vector_4:

000004be <__vector_4>:

ISR(PCINT1_vect){
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	8f 93       	push	r24
	if (PINC & (1<<PORTC4))     //Es el botón para el jugador 2
 4ca:	34 99       	sbic	0x06, 4	; 6
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__vector_4+0x1a>
	{
		}else{
		//Se presiono el botón
		count2 = count2 + 1;
 4ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count2>
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count2>
	}
	
 4d8:	8f 91       	pop	r24
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

Disassembly of section .text.libgcc:

00000510 <__tablejump2__>:
 510:	ee 0f       	add	r30, r30
 512:	ff 1f       	adc	r31, r31
 514:	05 90       	lpm	r0, Z+
 516:	f4 91       	lpm	r31, Z
 518:	e0 2d       	mov	r30, r0
 51a:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

0000052a <_fini>:
 52a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000052c <__funcs_on_exit>:
 52c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000052e <__simulator_exit>:
 52e:	08 95       	ret

Disassembly of section .text.exit:

000004fa <exit>:
 4fa:	ec 01       	movw	r28, r24
 4fc:	0e 94 96 02 	call	0x52c	; 0x52c <__funcs_on_exit>
 500:	0e 94 95 02 	call	0x52a	; 0x52a <_fini>
 504:	ce 01       	movw	r24, r28
 506:	0e 94 97 02 	call	0x52e	; 0x52e <__simulator_exit>
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 93 02 	call	0x526	; 0x526 <_Exit>

Disassembly of section .text._Exit:

00000526 <_Exit>:
 526:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
