
Sonido.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005b68  08005b68  00006b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e20  08005e20  000073e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e20  08005e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e28  08005e28  000073e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e28  08005e28  00006e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003e4  20000000  08005e30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200003e4  08006214  000073e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  08006214  00007874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000073e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb1d  00000000  00000000  00007414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228a  00000000  00000000  00015f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000181c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1f  00000000  00000000  00018ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022391  00000000  00000000  00019b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109c1  00000000  00000000  0003bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d26ef  00000000  00000000  0004c869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ef58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff0  00000000  00000000  0011ef9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00122f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200003e4 	.word	0x200003e4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005b50 	.word	0x08005b50

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200003e8 	.word	0x200003e8
 8000204:	08005b50 	.word	0x08005b50

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b988 	b.w	8000e7c <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	468e      	mov	lr, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	4688      	mov	r8, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14a      	bne.n	8000c2a <__udivmoddi4+0xa6>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4617      	mov	r7, r2
 8000b98:	d962      	bls.n	8000c60 <__udivmoddi4+0xdc>
 8000b9a:	fab2 f682 	clz	r6, r2
 8000b9e:	b14e      	cbz	r6, 8000bb4 <__udivmoddi4+0x30>
 8000ba0:	f1c6 0320 	rsb	r3, r6, #32
 8000ba4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	40b7      	lsls	r7, r6
 8000bae:	ea43 0808 	orr.w	r8, r3, r8
 8000bb2:	40b4      	lsls	r4, r6
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	fa1f fc87 	uxth.w	ip, r7
 8000bbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc0:	0c23      	lsrs	r3, r4, #16
 8000bc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fb01 f20c 	mul.w	r2, r1, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d909      	bls.n	8000be6 <__udivmoddi4+0x62>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bd8:	f080 80ea 	bcs.w	8000db0 <__udivmoddi4+0x22c>
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f240 80e7 	bls.w	8000db0 <__udivmoddi4+0x22c>
 8000be2:	3902      	subs	r1, #2
 8000be4:	443b      	add	r3, r7
 8000be6:	1a9a      	subs	r2, r3, r2
 8000be8:	b2a3      	uxth	r3, r4
 8000bea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfa:	459c      	cmp	ip, r3
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0x8e>
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c04:	f080 80d6 	bcs.w	8000db4 <__udivmoddi4+0x230>
 8000c08:	459c      	cmp	ip, r3
 8000c0a:	f240 80d3 	bls.w	8000db4 <__udivmoddi4+0x230>
 8000c0e:	443b      	add	r3, r7
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c16:	eba3 030c 	sub.w	r3, r3, ip
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa2>
 8000c1e:	40f3      	lsrs	r3, r6
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xb6>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb0>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x14c>
 8000c42:	4573      	cmp	r3, lr
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xc8>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 8105 	bhi.w	8000e56 <__udivmoddi4+0x2d2>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	4690      	mov	r8, r2
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e5      	beq.n	8000c26 <__udivmoddi4+0xa2>
 8000c5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c5e:	e7e2      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f000 8090 	beq.w	8000d86 <__udivmoddi4+0x202>
 8000c66:	fab2 f682 	clz	r6, r2
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f040 80a4 	bne.w	8000db8 <__udivmoddi4+0x234>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	0c03      	lsrs	r3, r0, #16
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	b280      	uxth	r0, r0
 8000c7a:	b2bc      	uxth	r4, r7
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x11e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x11c>
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	f200 80e0 	bhi.w	8000e60 <__udivmoddi4+0x2dc>
 8000ca0:	46c4      	mov	ip, r8
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ca8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb0:	fb02 f404 	mul.w	r4, r2, r4
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x144>
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x142>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f200 80ca 	bhi.w	8000e5a <__udivmoddi4+0x2d6>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	1b1b      	subs	r3, r3, r4
 8000cca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x98>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ce8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	fa1f fc87 	uxth.w	ip, r7
 8000cf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x1a0>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d16:	f080 809c 	bcs.w	8000e52 <__udivmoddi4+0x2ce>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8099 	bls.w	8000e52 <__udivmoddi4+0x2ce>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	eba4 040e 	sub.w	r4, r4, lr
 8000d28:	fa1f fe83 	uxth.w	lr, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1ce>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d46:	f080 8082 	bcs.w	8000e4e <__udivmoddi4+0x2ca>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d97f      	bls.n	8000e4e <__udivmoddi4+0x2ca>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d5e:	4564      	cmp	r4, ip
 8000d60:	4673      	mov	r3, lr
 8000d62:	46e1      	mov	r9, ip
 8000d64:	d362      	bcc.n	8000e2c <__udivmoddi4+0x2a8>
 8000d66:	d05f      	beq.n	8000e28 <__udivmoddi4+0x2a4>
 8000d68:	b15d      	cbz	r5, 8000d82 <__udivmoddi4+0x1fe>
 8000d6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7a:	431e      	orrs	r6, r3
 8000d7c:	40cc      	lsrs	r4, r1
 8000d7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d82:	2100      	movs	r1, #0
 8000d84:	e74f      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000d86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8a:	0c01      	lsrs	r1, r0, #16
 8000d8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d90:	b280      	uxth	r0, r0
 8000d92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d96:	463b      	mov	r3, r7
 8000d98:	4638      	mov	r0, r7
 8000d9a:	463c      	mov	r4, r7
 8000d9c:	46b8      	mov	r8, r7
 8000d9e:	46be      	mov	lr, r7
 8000da0:	2620      	movs	r6, #32
 8000da2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000da6:	eba2 0208 	sub.w	r2, r2, r8
 8000daa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dae:	e766      	b.n	8000c7e <__udivmoddi4+0xfa>
 8000db0:	4601      	mov	r1, r0
 8000db2:	e718      	b.n	8000be6 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e72c      	b.n	8000c12 <__udivmoddi4+0x8e>
 8000db8:	f1c6 0220 	rsb	r2, r6, #32
 8000dbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc0:	40b7      	lsls	r7, r6
 8000dc2:	40b1      	lsls	r1, r6
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd2:	b2bc      	uxth	r4, r7
 8000dd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb08 f904 	mul.w	r9, r8, r4
 8000de2:	40b0      	lsls	r0, r6
 8000de4:	4589      	cmp	r9, r1
 8000de6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dea:	b280      	uxth	r0, r0
 8000dec:	d93e      	bls.n	8000e6c <__udivmoddi4+0x2e8>
 8000dee:	1879      	adds	r1, r7, r1
 8000df0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df4:	d201      	bcs.n	8000dfa <__udivmoddi4+0x276>
 8000df6:	4589      	cmp	r9, r1
 8000df8:	d81f      	bhi.n	8000e3a <__udivmoddi4+0x2b6>
 8000dfa:	eba1 0109 	sub.w	r1, r1, r9
 8000dfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e02:	fb09 f804 	mul.w	r8, r9, r4
 8000e06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	4542      	cmp	r2, r8
 8000e12:	d229      	bcs.n	8000e68 <__udivmoddi4+0x2e4>
 8000e14:	18ba      	adds	r2, r7, r2
 8000e16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1a:	d2c4      	bcs.n	8000da6 <__udivmoddi4+0x222>
 8000e1c:	4542      	cmp	r2, r8
 8000e1e:	d2c2      	bcs.n	8000da6 <__udivmoddi4+0x222>
 8000e20:	f1a9 0102 	sub.w	r1, r9, #2
 8000e24:	443a      	add	r2, r7
 8000e26:	e7be      	b.n	8000da6 <__udivmoddi4+0x222>
 8000e28:	45f0      	cmp	r8, lr
 8000e2a:	d29d      	bcs.n	8000d68 <__udivmoddi4+0x1e4>
 8000e2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e34:	3801      	subs	r0, #1
 8000e36:	46e1      	mov	r9, ip
 8000e38:	e796      	b.n	8000d68 <__udivmoddi4+0x1e4>
 8000e3a:	eba7 0909 	sub.w	r9, r7, r9
 8000e3e:	4449      	add	r1, r9
 8000e40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e48:	fb09 f804 	mul.w	r8, r9, r4
 8000e4c:	e7db      	b.n	8000e06 <__udivmoddi4+0x282>
 8000e4e:	4673      	mov	r3, lr
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1ce>
 8000e52:	4650      	mov	r0, sl
 8000e54:	e766      	b.n	8000d24 <__udivmoddi4+0x1a0>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e6fd      	b.n	8000c56 <__udivmoddi4+0xd2>
 8000e5a:	443b      	add	r3, r7
 8000e5c:	3a02      	subs	r2, #2
 8000e5e:	e733      	b.n	8000cc8 <__udivmoddi4+0x144>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	443b      	add	r3, r7
 8000e66:	e71c      	b.n	8000ca2 <__udivmoddi4+0x11e>
 8000e68:	4649      	mov	r1, r9
 8000e6a:	e79c      	b.n	8000da6 <__udivmoddi4+0x222>
 8000e6c:	eba1 0109 	sub.w	r1, r1, r9
 8000e70:	46c4      	mov	ip, r8
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	e7c4      	b.n	8000e06 <__udivmoddi4+0x282>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <transmit_uart>:
int calcularARR(int freq);
void playTone(int *tone, int *duration, int *pause, int Nsize);
void noTone (void);


void transmit_uart(char *string){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff f9bd 	bl	8000208 <strlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string , len, 200);
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	23c8      	movs	r3, #200	@ 0xc8
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <transmit_uart+0x28>)
 8000e9c:	f003 f846 	bl	8003f2c <HAL_UART_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000054c 	.word	0x2000054c
 8000eac:	00000000 	.word	0x00000000

08000eb0 <generarSin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void generarSin(void){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	for (int x = 0; x < size; x++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e03a      	b.n	8000f32 <generarSin+0x82>
		Ysine[x] = ((sin(x*2*PI/size)+1)*(4096/2));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fafb 	bl	80004bc <__aeabi_i2d>
 8000ec6:	a324      	add	r3, pc, #144	@ (adr r3, 8000f58 <generarSin+0xa8>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fb60 	bl	8000590 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <generarSin+0x98>)
 8000ede:	f7ff fc81 	bl	80007e4 <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	ec43 2b17 	vmov	d7, r2, r3
 8000eea:	eeb0 0a47 	vmov.f32	s0, s14
 8000eee:	eef0 0a67 	vmov.f32	s1, s15
 8000ef2:	f003 fe09 	bl	8004b08 <sin>
 8000ef6:	ec51 0b10 	vmov	r0, r1, d0
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <generarSin+0x9c>)
 8000f00:	f7ff f990 	bl	8000224 <__adddf3>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <generarSin+0xa0>)
 8000f12:	f7ff fb3d 	bl	8000590 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fdf9 	bl	8000b14 <__aeabi_d2uiz>
 8000f22:	4602      	mov	r2, r0
 8000f24:	490b      	ldr	r1, [pc, #44]	@ (8000f54 <generarSin+0xa4>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int x = 0; x < size; x++) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f36:	ddc1      	ble.n	8000ebc <generarSin+0xc>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	f3af 8000 	nop.w
 8000f48:	40600000 	.word	0x40600000
 8000f4c:	3ff00000 	.word	0x3ff00000
 8000f50:	40a00000 	.word	0x40a00000
 8000f54:	20000654 	.word	0x20000654
 8000f58:	4d12d84a 	.word	0x4d12d84a
 8000f5c:	400921fb 	.word	0x400921fb

08000f60 <calcularARR>:

int calcularARR(int freq){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if (freq == 0){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <calcularARR+0x12>
		return 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e008      	b.n	8000f84 <calcularARR+0x24>
	}

	int TF = size*freq;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]
	return ((TIM_FREQ /((PSC + 1)*TF)) - 1);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <calcularARR+0x30>)
 8000f7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f82:	3b01      	subs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	0501bd00 	.word	0x0501bd00

08000f94 <playTone>:

void playTone(int *tone, int *duration, int *pause, int Nsize){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
	for (int i = 0;  i < Nsize;  i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e02f      	b.n	8001008 <playTone+0x74>
		int valorARR = calcularARR(tone[i]); //calcular el valor de ARR
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffd4 	bl	8000f60 <calcularARR>
 8000fb8:	6178      	str	r0, [r7, #20]
		int dur = duration[i]; //obtener la duracion
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
		int pauseBetweenTones = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
		if (pause != NULL) pauseBetweenTones = pause[i] - duration [i];
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00b      	beq.n	8000fe8 <playTone+0x54>
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	440b      	add	r3, r1
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	61bb      	str	r3, [r7, #24]


		TIM6->ARR = valorARR;
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <playTone+0x88>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	62d3      	str	r3, [r2, #44]	@ 0x2c
		HAL_Delay(dur); //duración nota
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fde7 	bl	8001bc4 <HAL_Delay>
		noTone(); //pausa
 8000ff6:	f000 f813 	bl	8001020 <noTone>
		HAL_Delay(pauseBetweenTones); //duración sin tono
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fde1 	bl	8001bc4 <HAL_Delay>
	for (int i = 0;  i < Nsize;  i++) {
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbcb      	blt.n	8000fa8 <playTone+0x14>
	}
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40001000 	.word	0x40001000

08001020 <noTone>:

void noTone (void){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	TIM6->ARR = 0;
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <noTone+0x14>)
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40001000 	.word	0x40001000

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fd4f 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f861 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 fa01 	bl	800144c <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f000 f9cf 	bl	80013ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 800104e:	f000 f9a3 	bl	8001398 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001052:	f000 f8c7 	bl	80011e4 <MX_DAC_Init>
  MX_TIM1_Init();
 8001056:	f000 f8ef 	bl	8001238 <MX_TIM1_Init>
  MX_TIM6_Init();
 800105a:	f000 f93d 	bl	80012d8 <MX_TIM6_Init>
  MX_UART5_Init();
 800105e:	f000 f971 	bl	8001344 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  generarSin();
 8001062:	f7ff ff25 	bl	8000eb0 <generarSin>

  HAL_DAC_Init(&hdac);
 8001066:	481b      	ldr	r0, [pc, #108]	@ (80010d4 <main+0x9c>)
 8001068:	f000 fee1 	bl	8001e2e <HAL_DAC_Init>

  HAL_TIM_Base_Start(&htim6);
 800106c:	481a      	ldr	r0, [pc, #104]	@ (80010d8 <main+0xa0>)
 800106e:	f002 fc1b 	bl	80038a8 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, Ysine, size, DAC_ALIGN_12B_R);
 8001072:	2300      	movs	r3, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <main+0xa4>)
 800107a:	2100      	movs	r1, #0
 800107c:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <main+0x9c>)
 800107e:	f000 fef9 	bl	8001e74 <HAL_DAC_Start_DMA>


  HAL_UART_Receive_DMA(&huart5, temp, 1);
 8001082:	2201      	movs	r2, #1
 8001084:	4916      	ldr	r1, [pc, #88]	@ (80010e0 <main+0xa8>)
 8001086:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <main+0xac>)
 8001088:	f002 ffdb 	bl	8004042 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (flag_melodia) {
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <main+0xb0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d002      	beq.n	800109a <main+0x62>
 8001094:	2b02      	cmp	r3, #2
 8001096:	d00a      	beq.n	80010ae <main+0x76>
 8001098:	e013      	b.n	80010c2 <main+0x8a>
		case 1:
			  playTone(MelodiaIntro, MelodiaIntroDuraciones, NULL, (sizeof(MelodiaIntro)/sizeof(MelodiaIntro[0])) );
 800109a:	233b      	movs	r3, #59	@ 0x3b
 800109c:	2200      	movs	r2, #0
 800109e:	4913      	ldr	r1, [pc, #76]	@ (80010ec <main+0xb4>)
 80010a0:	4813      	ldr	r0, [pc, #76]	@ (80010f0 <main+0xb8>)
 80010a2:	f7ff ff77 	bl	8000f94 <playTone>
			  //flag_melodia = 0;
			  transmit_uart("Aqui estamos en melodia de intro \n");
 80010a6:	4813      	ldr	r0, [pc, #76]	@ (80010f4 <main+0xbc>)
 80010a8:	f7ff feea 	bl	8000e80 <transmit_uart>

			break;
 80010ac:	e00d      	b.n	80010ca <main+0x92>
		case 2:
              playTone(Metroidmelody, Metroiddurations, NULL, (sizeof(Metroidmelody)/sizeof(Metroidmelody[0])) );
 80010ae:	2340      	movs	r3, #64	@ 0x40
 80010b0:	2200      	movs	r2, #0
 80010b2:	4911      	ldr	r1, [pc, #68]	@ (80010f8 <main+0xc0>)
 80010b4:	4811      	ldr	r0, [pc, #68]	@ (80010fc <main+0xc4>)
 80010b6:	f7ff ff6d 	bl	8000f94 <playTone>
              //flag_melodia = 0;
              transmit_uart("Aqui estamos en melodia del juego \n");
 80010ba:	4811      	ldr	r0, [pc, #68]	@ (8001100 <main+0xc8>)
 80010bc:	f7ff fee0 	bl	8000e80 <transmit_uart>
			break;
 80010c0:	e003      	b.n	80010ca <main+0x92>
		default:
			transmit_uart("Aqui no está pasando nada, no recibe nada \n");
 80010c2:	4810      	ldr	r0, [pc, #64]	@ (8001104 <main+0xcc>)
 80010c4:	f7ff fedc 	bl	8000e80 <transmit_uart>
			break;
 80010c8:	bf00      	nop
	}

	  HAL_Delay(500);
 80010ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ce:	f000 fd79 	bl	8001bc4 <HAL_Delay>
	  switch (flag_melodia) {
 80010d2:	e7db      	b.n	800108c <main+0x54>
 80010d4:	20000400 	.word	0x20000400
 80010d8:	200004bc 	.word	0x200004bc
 80010dc:	20000654 	.word	0x20000654
 80010e0:	20000868 	.word	0x20000868
 80010e4:	20000504 	.word	0x20000504
 80010e8:	2000086c 	.word	0x2000086c
 80010ec:	200000ec 	.word	0x200000ec
 80010f0:	20000000 	.word	0x20000000
 80010f4:	08005b68 	.word	0x08005b68
 80010f8:	200002d8 	.word	0x200002d8
 80010fc:	200001d8 	.word	0x200001d8
 8001100:	08005b8c 	.word	0x08005b8c
 8001104:	08005bb0 	.word	0x08005bb0

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	@ 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2234      	movs	r2, #52	@ 0x34
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fcca 	bl	8004ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <SystemClock_Config+0xd4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	4a29      	ldr	r2, [pc, #164]	@ (80011dc <SystemClock_Config+0xd4>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	@ 0x40
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <SystemClock_Config+0xd4>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <SystemClock_Config+0xd8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001154:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <SystemClock_Config+0xd8>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <SystemClock_Config+0xd8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800117c:	2310      	movs	r3, #16
 800117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001180:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001184:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001186:	2304      	movs	r3, #4
 8001188:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118e:	2302      	movs	r3, #2
 8001190:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4618      	mov	r0, r3
 8001198:	f002 f898 	bl	80032cc <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011a2:	f000 fa31 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2302      	movs	r3, #2
 80011ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2102      	movs	r1, #2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fd38 	bl	8002c38 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ce:	f000 fa1b 	bl	8001608 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3750      	adds	r7, #80	@ 0x50
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_DAC_Init+0x4c>)
 80011f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <MX_DAC_Init+0x50>)
 80011f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_DAC_Init+0x4c>)
 80011fa:	f000 fe18 	bl	8001e2e <HAL_DAC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001204:	f000 fa00 	bl	8001608 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001208:	2304      	movs	r3, #4
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_DAC_Init+0x4c>)
 8001218:	f000 ff0c 	bl	8002034 <HAL_DAC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001222:	f000 f9f1 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000400 	.word	0x20000400
 8001234:	40007400 	.word	0x40007400

08001238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_TIM1_Init+0x98>)
 8001256:	4a1f      	ldr	r2, [pc, #124]	@ (80012d4 <MX_TIM1_Init+0x9c>)
 8001258:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM1_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_TIM1_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM1_Init+0x98>)
 8001268:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800126c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM1_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_TIM1_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_TIM1_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001280:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_TIM1_Init+0x98>)
 8001282:	f002 fac1 	bl	8003808 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800128c:	f000 f9bc 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM1_Init+0x98>)
 800129e:	f002 fb6b 	bl	8003978 <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012a8:	f000 f9ae 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM1_Init+0x98>)
 80012ba:	f002 fd6b 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012c4:	f000 f9a0 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000474 	.word	0x20000474
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_TIM6_Init+0x64>)
 80012e8:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <MX_TIM6_Init+0x68>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <MX_TIM6_Init+0x64>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_TIM6_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80012f8:	4b10      	ldr	r3, [pc, #64]	@ (800133c <MX_TIM6_Init+0x64>)
 80012fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_TIM6_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001306:	480d      	ldr	r0, [pc, #52]	@ (800133c <MX_TIM6_Init+0x64>)
 8001308:	f002 fa7e 	bl	8003808 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001312:	f000 f979 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001316:	2320      	movs	r3, #32
 8001318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <MX_TIM6_Init+0x64>)
 8001324:	f002 fd36 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800132e:	f000 f96b 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200004bc 	.word	0x200004bc
 8001340:	40001000 	.word	0x40001000

08001344 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <MX_UART5_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <MX_UART5_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_UART5_Init+0x4c>)
 8001350:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001354:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <MX_UART5_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_UART5_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <MX_UART5_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_UART5_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <MX_UART5_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <MX_UART5_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_UART5_Init+0x4c>)
 800137c:	f002 fd86 	bl	8003e8c <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f93f 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000504 	.word	0x20000504
 8001394:	40005000 	.word	0x40005000

08001398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <MX_USART2_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013d0:	f002 fd5c 	bl	8003e8c <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f000 f915 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000054c 	.word	0x2000054c
 80013e8:	40004400 	.word	0x40004400

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <MX_DMA_Init+0x5c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a13      	ldr	r2, [pc, #76]	@ (8001448 <MX_DMA_Init+0x5c>)
 80013fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_DMA_Init+0x5c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	200b      	movs	r0, #11
 8001414:	f000 fcd5 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001418:	200b      	movs	r0, #11
 800141a:	f000 fcee 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2010      	movs	r0, #16
 8001424:	f000 fccd 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001428:	2010      	movs	r0, #16
 800142a:	f000 fce6 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	202f      	movs	r0, #47	@ 0x2f
 8001434:	f000 fcc5 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001438:	202f      	movs	r0, #47	@ 0x2f
 800143a:	f000 fcde 	bl	8001dfa <HAL_NVIC_EnableIRQ>

}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <MX_GPIO_Init+0xec>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a33      	ldr	r2, [pc, #204]	@ (8001538 <MX_GPIO_Init+0xec>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <MX_GPIO_Init+0xec>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <MX_GPIO_Init+0xec>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a2c      	ldr	r2, [pc, #176]	@ (8001538 <MX_GPIO_Init+0xec>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <MX_GPIO_Init+0xec>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a25      	ldr	r2, [pc, #148]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a1e      	ldr	r2, [pc, #120]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <MX_GPIO_Init+0xec>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2120      	movs	r1, #32
 80014f2:	4812      	ldr	r0, [pc, #72]	@ (800153c <MX_GPIO_Init+0xf0>)
 80014f4:	f001 fb86 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	480c      	ldr	r0, [pc, #48]	@ (8001540 <MX_GPIO_Init+0xf4>)
 8001510:	f001 f9e4 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001514:	2320      	movs	r3, #32
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_GPIO_Init+0xf0>)
 800152c:	f001 f9d6 	bl	80028dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020800 	.word	0x40020800

08001544 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

	    memcpy (buffer + indx, temp, 1);
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <HAL_UART_RxCpltCallback+0xa4>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4a26      	ldr	r2, [pc, #152]	@ (80015ec <HAL_UART_RxCpltCallback+0xa8>)
 8001554:	4413      	add	r3, r2
 8001556:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <HAL_UART_RxCpltCallback+0xac>)
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	701a      	strb	r2, [r3, #0]
		indx++;
 800155c:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <HAL_UART_RxCpltCallback+0xa4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_UART_RxCpltCallback+0xa4>)
 8001566:	801a      	strh	r2, [r3, #0]
		if(indx >= 10){
 8001568:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <HAL_UART_RxCpltCallback+0xa4>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	2b09      	cmp	r3, #9
 800156e:	d902      	bls.n	8001576 <HAL_UART_RxCpltCallback+0x32>
			indx = 0;
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <HAL_UART_RxCpltCallback+0xa4>)
 8001572:	2200      	movs	r2, #0
 8001574:	801a      	strh	r2, [r3, #0]
		}


	    HAL_UART_Receive_DMA(&huart5, temp, 1);
 8001576:	2201      	movs	r2, #1
 8001578:	491d      	ldr	r1, [pc, #116]	@ (80015f0 <HAL_UART_RxCpltCallback+0xac>)
 800157a:	481e      	ldr	r0, [pc, #120]	@ (80015f4 <HAL_UART_RxCpltCallback+0xb0>)
 800157c:	f002 fd61 	bl	8004042 <HAL_UART_Receive_DMA>

	    transmit_uart("ENTRO \n");
 8001580:	481d      	ldr	r0, [pc, #116]	@ (80015f8 <HAL_UART_RxCpltCallback+0xb4>)
 8001582:	f7ff fc7d 	bl	8000e80 <transmit_uart>
	   // HAL_Delay(500);



	    for(int i = 0; i < 10; i++) {
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e024      	b.n	80015d6 <HAL_UART_RxCpltCallback+0x92>
	    			if (buffer[i] == 1){
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_UART_RxCpltCallback+0xa8>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d10a      	bne.n	80015ae <HAL_UART_RxCpltCallback+0x6a>
	    				flag_melodia = 1;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_UART_RxCpltCallback+0xb8>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
	    				transmit_uart("melodia 1 en la interrupcion");
 800159e:	4818      	ldr	r0, [pc, #96]	@ (8001600 <HAL_UART_RxCpltCallback+0xbc>)
 80015a0:	f7ff fc6e 	bl	8000e80 <transmit_uart>
	    				buffer[i] = 0;
 80015a4:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <HAL_UART_RxCpltCallback+0xa8>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2100      	movs	r1, #0
 80015aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			}
	    			if (buffer[i] == 2){
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <HAL_UART_RxCpltCallback+0xa8>)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d10a      	bne.n	80015d0 <HAL_UART_RxCpltCallback+0x8c>
	    				 flag_melodia = 2;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_UART_RxCpltCallback+0xb8>)
 80015bc:	2202      	movs	r2, #2
 80015be:	701a      	strb	r2, [r3, #0]
	    				 transmit_uart("melodia 2 en la interrupcion");
 80015c0:	4810      	ldr	r0, [pc, #64]	@ (8001604 <HAL_UART_RxCpltCallback+0xc0>)
 80015c2:	f7ff fc5d 	bl	8000e80 <transmit_uart>
	       	    	     buffer[i] = 0;
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_UART_RxCpltCallback+0xa8>)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2100      	movs	r1, #0
 80015cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    for(int i = 0; i < 10; i++) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b09      	cmp	r3, #9
 80015da:	ddd7      	ble.n	800158c <HAL_UART_RxCpltCallback+0x48>
	    			}
	    }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000086a 	.word	0x2000086a
 80015ec:	20000854 	.word	0x20000854
 80015f0:	20000868 	.word	0x20000868
 80015f4:	20000504 	.word	0x20000504
 80015f8:	08005be0 	.word	0x08005be0
 80015fc:	2000086c 	.word	0x2000086c
 8001600:	08005be8 	.word	0x08005be8
 8001604:	08005c08 	.word	0x08005c08

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001652:	2007      	movs	r0, #7
 8001654:	f000 fbaa 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2f      	ldr	r2, [pc, #188]	@ (8001740 <HAL_DAC_MspInit+0xdc>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d158      	bne.n	8001738 <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <HAL_DAC_MspInit+0xe0>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	4a2d      	ldr	r2, [pc, #180]	@ (8001744 <HAL_DAC_MspInit+0xe0>)
 8001690:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001694:	6413      	str	r3, [r2, #64]	@ 0x40
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_DAC_MspInit+0xe0>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <HAL_DAC_MspInit+0xe0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a26      	ldr	r2, [pc, #152]	@ (8001744 <HAL_DAC_MspInit+0xe0>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_DAC_MspInit+0xe0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016be:	2310      	movs	r3, #16
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	481d      	ldr	r0, [pc, #116]	@ (8001748 <HAL_DAC_MspInit+0xe4>)
 80016d2:	f001 f903 	bl	80028dc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 80016d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <HAL_DAC_MspInit+0xec>)
 80016da:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 80016de:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 80016e6:	2240      	movs	r2, #64	@ 0x40
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 80016f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 80016fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016fe:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 8001702:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001706:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 800170a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800171c:	480b      	ldr	r0, [pc, #44]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 800171e:	f000 fd6d 	bl	80021fc <HAL_DMA_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001728:	f7ff ff6e 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_DAC_MspInit+0xe8>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	@ 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40007400 	.word	0x40007400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	20000414 	.word	0x20000414
 8001750:	40026088 	.word	0x40026088

08001754 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <HAL_TIM_Base_MspInit+0x64>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10e      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <HAL_TIM_Base_MspInit+0x68>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a13      	ldr	r2, [pc, #76]	@ (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001782:	e012      	b.n	80017aa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <HAL_TIM_Base_MspInit+0x6c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10d      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a09      	ldr	r2, [pc, #36]	@ (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <HAL_TIM_Base_MspInit+0x68>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40001000 	.word	0x40001000

080017c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	@ 0x30
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a70      	ldr	r2, [pc, #448]	@ (80019a4 <HAL_UART_MspInit+0x1e0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	f040 80a8 	bne.w	8001938 <HAL_UART_MspInit+0x174>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	4b6e      	ldr	r3, [pc, #440]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	4a6d      	ldr	r2, [pc, #436]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 80017f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80017f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f8:	4b6b      	ldr	r3, [pc, #428]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	4b67      	ldr	r3, [pc, #412]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a66      	ldr	r2, [pc, #408]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b64      	ldr	r3, [pc, #400]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	4b60      	ldr	r3, [pc, #384]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	4a5f      	ldr	r2, [pc, #380]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001830:	4b5d      	ldr	r3, [pc, #372]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800183c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800184e:	2308      	movs	r3, #8
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4854      	ldr	r0, [pc, #336]	@ (80019ac <HAL_UART_MspInit+0x1e8>)
 800185a:	f001 f83f 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800185e:	2304      	movs	r3, #4
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800186e:	2308      	movs	r3, #8
 8001870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4619      	mov	r1, r3
 8001878:	484d      	ldr	r0, [pc, #308]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 800187a:	f001 f82f 	bl	80028dc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800187e:	4b4d      	ldr	r3, [pc, #308]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 8001880:	4a4d      	ldr	r2, [pc, #308]	@ (80019b8 <HAL_UART_MspInit+0x1f4>)
 8001882:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001884:	4b4b      	ldr	r3, [pc, #300]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 8001886:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800188a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188c:	4b49      	ldr	r3, [pc, #292]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001892:	4b48      	ldr	r3, [pc, #288]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001898:	4b46      	ldr	r3, [pc, #280]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 800189a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800189e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a0:	4b44      	ldr	r3, [pc, #272]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a6:	4b43      	ldr	r3, [pc, #268]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80018ac:	4b41      	ldr	r3, [pc, #260]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b2:	4b40      	ldr	r3, [pc, #256]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b8:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80018be:	483d      	ldr	r0, [pc, #244]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018c0:	f000 fc9c 	bl	80021fc <HAL_DMA_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80018ca:	f7ff fe9d 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a38      	ldr	r2, [pc, #224]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018d4:	4a37      	ldr	r2, [pc, #220]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 80018dc:	4a38      	ldr	r2, [pc, #224]	@ (80019c0 <HAL_UART_MspInit+0x1fc>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80018e0:	4b36      	ldr	r3, [pc, #216]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 80018e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018e6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e8:	4b34      	ldr	r3, [pc, #208]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 80018ea:	2240      	movs	r2, #64	@ 0x40
 80018ec:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ee:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 80018f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fa:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018fc:	4b2f      	ldr	r3, [pc, #188]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001908:	4b2c      	ldr	r3, [pc, #176]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800190e:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001914:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800191a:	4828      	ldr	r0, [pc, #160]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 800191c:	f000 fc6e 	bl	80021fc <HAL_DMA_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001926:	f7ff fe6f 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a23      	ldr	r2, [pc, #140]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 800192e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001930:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001936:	e030      	b.n	800199a <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a21      	ldr	r2, [pc, #132]	@ (80019c4 <HAL_UART_MspInit+0x200>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_UART_MspInit+0x1e4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <HAL_UART_MspInit+0x204>)
 8001996:	f000 ffa1 	bl	80028dc <HAL_GPIO_Init>
}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	@ 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40005000 	.word	0x40005000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	20000594 	.word	0x20000594
 80019b8:	40026010 	.word	0x40026010
 80019bc:	200005f4 	.word	0x200005f4
 80019c0:	400260b8 	.word	0x400260b8
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40020000 	.word	0x40020000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <NMI_Handler+0x4>

080019d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <MemManage_Handler+0x4>

080019e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a22:	f000 f8af 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <DMA1_Stream0_IRQHandler+0x10>)
 8001a32:	f000 fce9 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000594 	.word	0x20000594

08001a40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <DMA1_Stream5_IRQHandler+0x10>)
 8001a46:	f000 fcdf 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000414 	.word	0x20000414

08001a54 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <DMA1_Stream7_IRQHandler+0x10>)
 8001a5a:	f000 fcd5 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200005f4 	.word	0x200005f4

08001a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <SystemInit+0x20>)
 8001a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <SystemInit+0x20>)
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a90:	f7ff ffea 	bl	8001a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	@ (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f003 f801 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff fabb 	bl	8001038 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	200003e4 	.word	0x200003e4
  ldr r2, =_sidata
 8001ad0:	08005e30 	.word	0x08005e30
  ldr r2, =_sbss
 8001ad4:	200003e4 	.word	0x200003e4
  ldr r4, =_ebss
 8001ad8:	20000874 	.word	0x20000874

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f94f 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fd7e 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f967 	bl	8001e16 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f92f 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	@ (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200003d8 	.word	0x200003d8
 8001b7c:	200003e0 	.word	0x200003e0
 8001b80:	200003dc 	.word	0x200003dc

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200003e0 	.word	0x200003e0
 8001ba8:	20000870 	.word	0x20000870

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000870 	.word	0x20000870

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200003e0 	.word	0x200003e0

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	@ (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	@ (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff29 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff3e 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff31 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e014      	b.n	8001e6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fc07 	bl	8001664 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0a2      	b.n	8001fd6 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	795b      	ldrb	r3, [r3, #5]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_DAC_Start_DMA+0x28>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e09c      	b.n	8001fd6 <HAL_DAC_Start_DMA+0x162>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d129      	bne.n	8001f02 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8001fe0 <HAL_DAC_Start_DMA+0x16c>)
 8001eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe4 <HAL_DAC_Start_DMA+0x170>)
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4a49      	ldr	r2, [pc, #292]	@ (8001fe8 <HAL_DAC_Start_DMA+0x174>)
 8001ec4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_DAC_Start_DMA+0x70>
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d005      	beq.n	8001eee <HAL_DAC_Start_DMA+0x7a>
 8001ee2:	e009      	b.n	8001ef8 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3308      	adds	r3, #8
 8001eea:	613b      	str	r3, [r7, #16]
        break;
 8001eec:	e033      	b.n	8001f56 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	613b      	str	r3, [r7, #16]
        break;
 8001ef6:	e02e      	b.n	8001f56 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3310      	adds	r3, #16
 8001efe:	613b      	str	r3, [r7, #16]
        break;
 8001f00:	e029      	b.n	8001f56 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4a39      	ldr	r2, [pc, #228]	@ (8001fec <HAL_DAC_Start_DMA+0x178>)
 8001f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	4a38      	ldr	r2, [pc, #224]	@ (8001ff0 <HAL_DAC_Start_DMA+0x17c>)
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a37      	ldr	r2, [pc, #220]	@ (8001ff4 <HAL_DAC_Start_DMA+0x180>)
 8001f18:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f28:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_DAC_Start_DMA+0xc4>
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d005      	beq.n	8001f42 <HAL_DAC_Start_DMA+0xce>
 8001f36:	e009      	b.n	8001f4c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3314      	adds	r3, #20
 8001f3e:	613b      	str	r3, [r7, #16]
        break;
 8001f40:	e009      	b.n	8001f56 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3318      	adds	r3, #24
 8001f48:	613b      	str	r3, [r7, #16]
        break;
 8001f4a:	e004      	b.n	8001f56 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	331c      	adds	r3, #28
 8001f52:	613b      	str	r3, [r7, #16]
        break;
 8001f54:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d111      	bne.n	8001f80 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6898      	ldr	r0, [r3, #8]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	f000 f9ef 	bl	8002358 <HAL_DMA_Start_IT>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	75fb      	strb	r3, [r7, #23]
 8001f7e:	e010      	b.n	8001fa2 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	68d8      	ldr	r0, [r3, #12]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	f000 f9dd 	bl	8002358 <HAL_DMA_Start_IT>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2201      	movs	r2, #1
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e005      	b.n	8001fd4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	080020e7 	.word	0x080020e7
 8001fe4:	08002109 	.word	0x08002109
 8001fe8:	08002125 	.word	0x08002125
 8001fec:	0800218f 	.word	0x0800218f
 8001ff0:	080021b1 	.word	0x080021b1
 8001ff4:	080021cd 	.word	0x080021cd

08001ff8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	@ 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_DAC_ConfigChannel+0x1c>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e042      	b.n	80020da <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	795b      	ldrb	r3, [r3, #5]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_DAC_ConfigChannel+0x2c>
 800205c:	2302      	movs	r3, #2
 800205e:	e03c      	b.n	80020da <HAL_DAC_ConfigChannel+0xa6>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2202      	movs	r2, #2
 800206a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	22c0      	movs	r2, #192	@ 0xc0
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	400a      	ands	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80020d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff ff7f 	bl	8001ff8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	711a      	strb	r2, [r3, #4]
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002114:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff ff78 	bl	800200c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002130:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f043 0204 	orr.w	r2, r3, #4
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff ff6e 	bl	8002020 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	711a      	strb	r2, [r3, #4]
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff ffd8 	bl	8002152 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	711a      	strb	r2, [r3, #4]
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021bc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff ffd1 	bl	8002166 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f043 0204 	orr.w	r2, r3, #4
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff ffc7 	bl	800217a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	711a      	strb	r2, [r3, #4]
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff fcd0 	bl	8001bac <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e099      	b.n	800234c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002238:	e00f      	b.n	800225a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223a:	f7ff fcb7 	bl	8001bac <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b05      	cmp	r3, #5
 8002246:	d908      	bls.n	800225a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e078      	b.n	800234c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e8      	bne.n	800223a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4b38      	ldr	r3, [pc, #224]	@ (8002354 <HAL_DMA_Init+0x158>)
 8002274:	4013      	ands	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002286:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	4313      	orrs	r3, r2
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f023 0307 	bic.w	r3, r3, #7
 80022da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d117      	bne.n	800231e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fa6f 	bl	80027e4 <DMA_CheckFifoParam>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2240      	movs	r2, #64	@ 0x40
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800231a:	2301      	movs	r3, #1
 800231c:	e016      	b.n	800234c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fa26 	bl	8002778 <DMA_CalcBaseAndBitshift>
 800232c:	4603      	mov	r3, r0
 800232e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002334:	223f      	movs	r2, #63	@ 0x3f
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	f010803f 	.word	0xf010803f

08002358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_DMA_Start_IT+0x26>
 800237a:	2302      	movs	r3, #2
 800237c:	e040      	b.n	8002400 <HAL_DMA_Start_IT+0xa8>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d12f      	bne.n	80023f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2202      	movs	r2, #2
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f9b8 	bl	800271c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	223f      	movs	r2, #63	@ 0x3f
 80023b2:	409a      	lsls	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0216 	orr.w	r2, r2, #22
 80023c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0208 	orr.w	r2, r2, #8
 80023de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e005      	b.n	80023fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002414:	4b8e      	ldr	r3, [pc, #568]	@ (8002650 <HAL_DMA_IRQHandler+0x248>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a8e      	ldr	r2, [pc, #568]	@ (8002654 <HAL_DMA_IRQHandler+0x24c>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	2208      	movs	r2, #8
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01a      	beq.n	8002474 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0204 	bic.w	r2, r2, #4
 800245a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002460:	2208      	movs	r2, #8
 8002462:	409a      	lsls	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002478:	2201      	movs	r2, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	2204      	movs	r2, #4
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	2204      	movs	r2, #4
 80024ce:	409a      	lsls	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e4:	2210      	movs	r2, #16
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d043      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d03c      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	2210      	movs	r2, #16
 8002504:	409a      	lsls	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d018      	beq.n	800254a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d024      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
 8002536:	e01f      	b.n	8002578 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
 8002548:	e016      	b.n	8002578 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0208 	bic.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	2220      	movs	r2, #32
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 808f 	beq.w	80026a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8087 	beq.w	80026a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	2220      	movs	r2, #32
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d136      	bne.n	8002620 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0216 	bic.w	r2, r2, #22
 80025c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <HAL_DMA_IRQHandler+0x1da>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0208 	bic.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f6:	223f      	movs	r2, #63	@ 0x3f
 80025f8:	409a      	lsls	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07e      	beq.n	8002714 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
        }
        return;
 800261e:	e079      	b.n	8002714 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01d      	beq.n	800266a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002640:	2b00      	cmp	r3, #0
 8002642:	d031      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
 800264c:	e02c      	b.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
 800264e:	bf00      	nop
 8002650:	200003d8 	.word	0x200003d8
 8002654:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d023      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e01e      	b.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10f      	bne.n	8002698 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0210 	bic.w	r2, r2, #16
 8002686:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d032      	beq.n	8002716 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d022      	beq.n	8002702 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2205      	movs	r2, #5
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d307      	bcc.n	80026f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f2      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x2cc>
 80026ee:	e000      	b.n	80026f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
 8002712:	e000      	b.n	8002716 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002714:	bf00      	nop
    }
  }
}
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002738:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b40      	cmp	r3, #64	@ 0x40
 8002748:	d108      	bne.n	800275c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800275a:	e007      	b.n	800276c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	3b10      	subs	r3, #16
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <DMA_CalcBaseAndBitshift+0x64>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002792:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d909      	bls.n	80027ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027ae:	f023 0303 	bic.w	r3, r3, #3
 80027b2:	1d1a      	adds	r2, r3, #4
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80027b8:	e007      	b.n	80027ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027c2:	f023 0303 	bic.w	r3, r3, #3
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	aaaaaaab 	.word	0xaaaaaaab
 80027e0:	08005c40 	.word	0x08005c40

080027e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d11f      	bne.n	800283e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d856      	bhi.n	80028b2 <DMA_CheckFifoParam+0xce>
 8002804:	a201      	add	r2, pc, #4	@ (adr r2, 800280c <DMA_CheckFifoParam+0x28>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	0800281d 	.word	0x0800281d
 8002810:	0800282f 	.word	0x0800282f
 8002814:	0800281d 	.word	0x0800281d
 8002818:	080028b3 	.word	0x080028b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d046      	beq.n	80028b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e043      	b.n	80028b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002832:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002836:	d140      	bne.n	80028ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283c:	e03d      	b.n	80028ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002846:	d121      	bne.n	800288c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d837      	bhi.n	80028be <DMA_CheckFifoParam+0xda>
 800284e:	a201      	add	r2, pc, #4	@ (adr r2, 8002854 <DMA_CheckFifoParam+0x70>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	08002865 	.word	0x08002865
 8002858:	0800286b 	.word	0x0800286b
 800285c:	08002865 	.word	0x08002865
 8002860:	0800287d 	.word	0x0800287d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      break;
 8002868:	e030      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d025      	beq.n	80028c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287a:	e022      	b.n	80028c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002884:	d11f      	bne.n	80028c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800288a:	e01c      	b.n	80028c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d903      	bls.n	800289a <DMA_CheckFifoParam+0xb6>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d003      	beq.n	80028a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002898:	e018      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      break;
 800289e:	e015      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00e      	beq.n	80028ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
      break;
 80028b0:	e00b      	b.n	80028ca <DMA_CheckFifoParam+0xe6>
      break;
 80028b2:	bf00      	nop
 80028b4:	e00a      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      break;
 80028b6:	bf00      	nop
 80028b8:	e008      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      break;
 80028ba:	bf00      	nop
 80028bc:	e006      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      break;
 80028be:	bf00      	nop
 80028c0:	e004      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      break;
 80028c2:	bf00      	nop
 80028c4:	e002      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      break;   
 80028c6:	bf00      	nop
 80028c8:	e000      	b.n	80028cc <DMA_CheckFifoParam+0xe8>
      break;
 80028ca:	bf00      	nop
    }
  } 
  
  return status; 
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e165      	b.n	8002bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	f040 8154 	bne.w	8002bbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d005      	beq.n	800292e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292a:	2b02      	cmp	r3, #2
 800292c:	d130      	bne.n	8002990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 0201 	and.w	r2, r3, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d017      	beq.n	80029cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d123      	bne.n	8002a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	08da      	lsrs	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3208      	adds	r2, #8
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3208      	adds	r2, #8
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80ae 	beq.w	8002bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b5d      	ldr	r3, [pc, #372]	@ (8002bdc <HAL_GPIO_Init+0x300>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bdc <HAL_GPIO_Init+0x300>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a72:	4b5a      	ldr	r3, [pc, #360]	@ (8002bdc <HAL_GPIO_Init+0x300>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7e:	4a58      	ldr	r2, [pc, #352]	@ (8002be0 <HAL_GPIO_Init+0x304>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4f      	ldr	r2, [pc, #316]	@ (8002be4 <HAL_GPIO_Init+0x308>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d025      	beq.n	8002af6 <HAL_GPIO_Init+0x21a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4e      	ldr	r2, [pc, #312]	@ (8002be8 <HAL_GPIO_Init+0x30c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01f      	beq.n	8002af2 <HAL_GPIO_Init+0x216>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8002bec <HAL_GPIO_Init+0x310>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d019      	beq.n	8002aee <HAL_GPIO_Init+0x212>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf0 <HAL_GPIO_Init+0x314>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_GPIO_Init+0x20e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8002bf4 <HAL_GPIO_Init+0x318>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_GPIO_Init+0x20a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf8 <HAL_GPIO_Init+0x31c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_GPIO_Init+0x206>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a49      	ldr	r2, [pc, #292]	@ (8002bfc <HAL_GPIO_Init+0x320>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_GPIO_Init+0x202>
 8002ada:	2306      	movs	r3, #6
 8002adc:	e00c      	b.n	8002af8 <HAL_GPIO_Init+0x21c>
 8002ade:	2307      	movs	r3, #7
 8002ae0:	e00a      	b.n	8002af8 <HAL_GPIO_Init+0x21c>
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	e008      	b.n	8002af8 <HAL_GPIO_Init+0x21c>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x21c>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e004      	b.n	8002af8 <HAL_GPIO_Init+0x21c>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_Init+0x21c>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x21c>
 8002af6:	2300      	movs	r3, #0
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4093      	lsls	r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b08:	4935      	ldr	r1, [pc, #212]	@ (8002be0 <HAL_GPIO_Init+0x304>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b3a      	ldr	r3, [pc, #232]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a31      	ldr	r2, [pc, #196]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b2f      	ldr	r3, [pc, #188]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6a:	4b25      	ldr	r3, [pc, #148]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b94:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb8:	4a11      	ldr	r2, [pc, #68]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f ae96 	bls.w	80028f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40021400 	.word	0x40021400
 8002bfc:	40021800 	.word	0x40021800
 8002c00:	40013c00 	.word	0x40013c00

08002c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c14:	787b      	ldrb	r3, [r7, #1]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c20:	e003      	b.n	8002c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	041a      	lsls	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0cc      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b68      	ldr	r3, [pc, #416]	@ (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d90c      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b65      	ldr	r3, [pc, #404]	@ (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b63      	ldr	r3, [pc, #396]	@ (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0b8      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c8c:	4b59      	ldr	r3, [pc, #356]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a58      	ldr	r2, [pc, #352]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca4:	4b53      	ldr	r3, [pc, #332]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a52      	ldr	r2, [pc, #328]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb0:	4b50      	ldr	r3, [pc, #320]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	494d      	ldr	r1, [pc, #308]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d044      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d119      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e07f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e067      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b37      	ldr	r3, [pc, #220]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4934      	ldr	r1, [pc, #208]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d28:	f7fe ff40 	bl	8001bac <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7fe ff3c 	bl	8001bac <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e04f      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d58:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d20c      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e032      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4916      	ldr	r1, [pc, #88]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002daa:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	490e      	ldr	r1, [pc, #56]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dbe:	f000 f855 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	490a      	ldr	r1, [pc, #40]	@ (8002df8 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	5ccb      	ldrb	r3, [r1, r3]
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fea0 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00
 8002df4:	40023800 	.word	0x40023800
 8002df8:	08005c28 	.word	0x08005c28
 8002dfc:	200003d8 	.word	0x200003d8
 8002e00:	200003dc 	.word	0x200003dc

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	@ (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200003d8 	.word	0x200003d8

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4903      	ldr	r1, [pc, #12]	@ (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	08005c38 	.word	0x08005c38

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e48:	f7ff ffdc 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0b5b      	lsrs	r3, r3, #13
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4903      	ldr	r1, [pc, #12]	@ (8002e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	08005c38 	.word	0x08005c38

08002e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e70:	b0ae      	sub	sp, #184	@ 0xb8
 8002e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e92:	4bcb      	ldr	r3, [pc, #812]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	f200 8206 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x440>
 8002ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002edd 	.word	0x08002edd
 8002eac:	080032ad 	.word	0x080032ad
 8002eb0:	080032ad 	.word	0x080032ad
 8002eb4:	080032ad 	.word	0x080032ad
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	080032ad 	.word	0x080032ad
 8002ec0:	080032ad 	.word	0x080032ad
 8002ec4:	080032ad 	.word	0x080032ad
 8002ec8:	08002eed 	.word	0x08002eed
 8002ecc:	080032ad 	.word	0x080032ad
 8002ed0:	080032ad 	.word	0x080032ad
 8002ed4:	080032ad 	.word	0x080032ad
 8002ed8:	080030dd 	.word	0x080030dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4bb9      	ldr	r3, [pc, #740]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ee2:	e1e7      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee4:	4bb8      	ldr	r3, [pc, #736]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eea:	e1e3      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4bb4      	ldr	r3, [pc, #720]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef8:	4bb1      	ldr	r3, [pc, #708]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d071      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4bae      	ldr	r3, [pc, #696]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f10:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	0159      	lsls	r1, r3, #5
 8002f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3c:	0150      	lsls	r0, r2, #5
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4621      	mov	r1, r4
 8002f44:	1a51      	subs	r1, r2, r1
 8002f46:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	4641      	mov	r1, r8
 8002f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f66:	4641      	mov	r1, r8
 8002f68:	018a      	lsls	r2, r1, #6
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	1a51      	subs	r1, r2, r1
 8002f6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f70:	4649      	mov	r1, r9
 8002f72:	eb63 0301 	sbc.w	r3, r3, r1
 8002f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002f84:	4649      	mov	r1, r9
 8002f86:	00cb      	lsls	r3, r1, #3
 8002f88:	4641      	mov	r1, r8
 8002f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8e:	4641      	mov	r1, r8
 8002f90:	00ca      	lsls	r2, r1, #3
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	4622      	mov	r2, r4
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	460a      	mov	r2, r1
 8002fa2:	eb42 0303 	adc.w	r3, r2, r3
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	024b      	lsls	r3, r1, #9
 8002fb8:	4621      	mov	r1, r4
 8002fba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	024a      	lsls	r2, r1, #9
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002fd8:	f7fd fdbc 	bl	8000b54 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fe6:	e067      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe8:	4b75      	ldr	r3, [pc, #468]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ff4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003002:	2300      	movs	r3, #0
 8003004:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003006:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800300a:	4622      	mov	r2, r4
 800300c:	462b      	mov	r3, r5
 800300e:	f04f 0000 	mov.w	r0, #0
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	0159      	lsls	r1, r3, #5
 8003018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301c:	0150      	lsls	r0, r2, #5
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4621      	mov	r1, r4
 8003024:	1a51      	subs	r1, r2, r1
 8003026:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003028:	4629      	mov	r1, r5
 800302a:	eb63 0301 	sbc.w	r3, r3, r1
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800303c:	4649      	mov	r1, r9
 800303e:	018b      	lsls	r3, r1, #6
 8003040:	4641      	mov	r1, r8
 8003042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003046:	4641      	mov	r1, r8
 8003048:	018a      	lsls	r2, r1, #6
 800304a:	4641      	mov	r1, r8
 800304c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003050:	4649      	mov	r1, r9
 8003052:	eb63 0b01 	sbc.w	fp, r3, r1
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003062:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306a:	4692      	mov	sl, r2
 800306c:	469b      	mov	fp, r3
 800306e:	4623      	mov	r3, r4
 8003070:	eb1a 0303 	adds.w	r3, sl, r3
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	462b      	mov	r3, r5
 8003078:	eb4b 0303 	adc.w	r3, fp, r3
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800308a:	4629      	mov	r1, r5
 800308c:	028b      	lsls	r3, r1, #10
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003094:	4621      	mov	r1, r4
 8003096:	028a      	lsls	r2, r1, #10
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030a0:	2200      	movs	r2, #0
 80030a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80030a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80030a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80030aa:	f7fd fd53 	bl	8000b54 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4613      	mov	r3, r2
 80030b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030b8:	4b41      	ldr	r3, [pc, #260]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80030ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030da:	e0eb      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030dc:	4b38      	ldr	r3, [pc, #224]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e8:	4b35      	ldr	r3, [pc, #212]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d06b      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f4:	4b32      	ldr	r3, [pc, #200]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	2200      	movs	r2, #0
 80030fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003106:	663b      	str	r3, [r7, #96]	@ 0x60
 8003108:	2300      	movs	r3, #0
 800310a:	667b      	str	r3, [r7, #100]	@ 0x64
 800310c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003110:	4622      	mov	r2, r4
 8003112:	462b      	mov	r3, r5
 8003114:	f04f 0000 	mov.w	r0, #0
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	0159      	lsls	r1, r3, #5
 800311e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003122:	0150      	lsls	r0, r2, #5
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4621      	mov	r1, r4
 800312a:	1a51      	subs	r1, r2, r1
 800312c:	61b9      	str	r1, [r7, #24]
 800312e:	4629      	mov	r1, r5
 8003130:	eb63 0301 	sbc.w	r3, r3, r1
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003142:	4659      	mov	r1, fp
 8003144:	018b      	lsls	r3, r1, #6
 8003146:	4651      	mov	r1, sl
 8003148:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800314c:	4651      	mov	r1, sl
 800314e:	018a      	lsls	r2, r1, #6
 8003150:	4651      	mov	r1, sl
 8003152:	ebb2 0801 	subs.w	r8, r2, r1
 8003156:	4659      	mov	r1, fp
 8003158:	eb63 0901 	sbc.w	r9, r3, r1
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003168:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800316c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003170:	4690      	mov	r8, r2
 8003172:	4699      	mov	r9, r3
 8003174:	4623      	mov	r3, r4
 8003176:	eb18 0303 	adds.w	r3, r8, r3
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	462b      	mov	r3, r5
 800317e:	eb49 0303 	adc.w	r3, r9, r3
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003190:	4629      	mov	r1, r5
 8003192:	024b      	lsls	r3, r1, #9
 8003194:	4621      	mov	r1, r4
 8003196:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800319a:	4621      	mov	r1, r4
 800319c:	024a      	lsls	r2, r1, #9
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031a6:	2200      	movs	r2, #0
 80031a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031b0:	f7fd fcd0 	bl	8000b54 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031be:	e065      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x420>
 80031c0:	40023800 	.word	0x40023800
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4b3d      	ldr	r3, [pc, #244]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	2200      	movs	r2, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	4611      	mov	r1, r2
 80031d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80031de:	2300      	movs	r3, #0
 80031e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80031e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80031e6:	4642      	mov	r2, r8
 80031e8:	464b      	mov	r3, r9
 80031ea:	f04f 0000 	mov.w	r0, #0
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	0159      	lsls	r1, r3, #5
 80031f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f8:	0150      	lsls	r0, r2, #5
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4641      	mov	r1, r8
 8003200:	1a51      	subs	r1, r2, r1
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	4649      	mov	r1, r9
 8003206:	eb63 0301 	sbc.w	r3, r3, r1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003218:	4659      	mov	r1, fp
 800321a:	018b      	lsls	r3, r1, #6
 800321c:	4651      	mov	r1, sl
 800321e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003222:	4651      	mov	r1, sl
 8003224:	018a      	lsls	r2, r1, #6
 8003226:	4651      	mov	r1, sl
 8003228:	1a54      	subs	r4, r2, r1
 800322a:	4659      	mov	r1, fp
 800322c:	eb63 0501 	sbc.w	r5, r3, r1
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	00eb      	lsls	r3, r5, #3
 800323a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800323e:	00e2      	lsls	r2, r4, #3
 8003240:	4614      	mov	r4, r2
 8003242:	461d      	mov	r5, r3
 8003244:	4643      	mov	r3, r8
 8003246:	18e3      	adds	r3, r4, r3
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	464b      	mov	r3, r9
 800324c:	eb45 0303 	adc.w	r3, r5, r3
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003274:	2200      	movs	r2, #0
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003278:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800327a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800327e:	f7fd fc69 	bl	8000b54 <__aeabi_uldivmod>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4613      	mov	r3, r2
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800328c:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0f1b      	lsrs	r3, r3, #28
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800329a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800329e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032aa:	e003      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	37b8      	adds	r7, #184	@ 0xb8
 80032bc:	46bd      	mov	sp, r7
 80032be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	00f42400 	.word	0x00f42400

080032cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e28d      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8083 	beq.w	80033f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032ec:	4b94      	ldr	r3, [pc, #592]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d019      	beq.n	800332c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032f8:	4b91      	ldr	r3, [pc, #580]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
        || \
 8003300:	2b08      	cmp	r3, #8
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003304:	4b8e      	ldr	r3, [pc, #568]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003310:	d00c      	beq.n	800332c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4b8b      	ldr	r3, [pc, #556]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b88      	ldr	r3, [pc, #544]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	4b84      	ldr	r3, [pc, #528]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x124>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d157      	bne.n	80033f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e25a      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x90>
 800334e:	4b7c      	ldr	r3, [pc, #496]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7b      	ldr	r2, [pc, #492]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xcc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0xb4>
 8003366:	4b76      	ldr	r3, [pc, #472]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a75      	ldr	r2, [pc, #468]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b73      	ldr	r3, [pc, #460]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a72      	ldr	r2, [pc, #456]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xcc>
 8003380:	4b6f      	ldr	r3, [pc, #444]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6e      	ldr	r2, [pc, #440]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b6c      	ldr	r3, [pc, #432]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6b      	ldr	r2, [pc, #428]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fc04 	bl	8001bac <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fc00 	bl	8001bac <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	@ 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e21f      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b61      	ldr	r3, [pc, #388]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xdc>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fbf0 	bl	8001bac <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe fbec 	bl	8001bac <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	@ 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e20b      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b57      	ldr	r3, [pc, #348]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x104>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d06f      	beq.n	80034de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033fe:	4b50      	ldr	r3, [pc, #320]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800340a:	4b4d      	ldr	r3, [pc, #308]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003412:	2b08      	cmp	r3, #8
 8003414:	d105      	bne.n	8003422 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003416:	4b4a      	ldr	r3, [pc, #296]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003422:	4b47      	ldr	r3, [pc, #284]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b44      	ldr	r3, [pc, #272]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d116      	bne.n	8003468 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x186>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e1d3      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4937      	ldr	r1, [pc, #220]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	e03a      	b.n	80034de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003470:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <HAL_RCC_OscConfig+0x278>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe fb99 	bl	8001bac <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe fb95 	bl	8001bac <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1b4      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4925      	ldr	r1, [pc, #148]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e015      	b.n	80034de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b2:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <HAL_RCC_OscConfig+0x278>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fb78 	bl	8001bac <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe fb74 	bl	8001bac <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e193      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d036      	beq.n	8003558 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe fb58 	bl	8001bac <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fe fb54 	bl	8001bac <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e173      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_OscConfig+0x274>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x234>
 800351e:	e01b      	b.n	8003558 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003520:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_RCC_OscConfig+0x27c>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe fb41 	bl	8001bac <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	e00e      	b.n	800354c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352e:	f7fe fb3d 	bl	8001bac <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d907      	bls.n	800354c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e15c      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
 8003540:	40023800 	.word	0x40023800
 8003544:	42470000 	.word	0x42470000
 8003548:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b8a      	ldr	r3, [pc, #552]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ea      	bne.n	800352e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8097 	beq.w	8003694 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b83      	ldr	r3, [pc, #524]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	4b7f      	ldr	r3, [pc, #508]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	4a7e      	ldr	r2, [pc, #504]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	@ 0x40
 8003586:	4b7c      	ldr	r3, [pc, #496]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b79      	ldr	r3, [pc, #484]	@ (800377c <HAL_RCC_OscConfig+0x4b0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b76      	ldr	r3, [pc, #472]	@ (800377c <HAL_RCC_OscConfig+0x4b0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a75      	ldr	r2, [pc, #468]	@ (800377c <HAL_RCC_OscConfig+0x4b0>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe fafd 	bl	8001bac <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe faf9 	bl	8001bac <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e118      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b6c      	ldr	r3, [pc, #432]	@ (800377c <HAL_RCC_OscConfig+0x4b0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x31e>
 80035dc:	4b66      	ldr	r3, [pc, #408]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	4a65      	ldr	r2, [pc, #404]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x358>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x340>
 80035f2:	4b61      	ldr	r3, [pc, #388]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	4a60      	ldr	r2, [pc, #384]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	4a5d      	ldr	r2, [pc, #372]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	@ 0x70
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0x358>
 800360c:	4b5a      	ldr	r3, [pc, #360]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	4a59      	ldr	r2, [pc, #356]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	@ 0x70
 8003618:	4b57      	ldr	r3, [pc, #348]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361c:	4a56      	ldr	r2, [pc, #344]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	f023 0304 	bic.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe fabe 	bl	8001bac <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe faba 	bl	8001bac <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0d7      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	4b4b      	ldr	r3, [pc, #300]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ee      	beq.n	8003634 <HAL_RCC_OscConfig+0x368>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe faa8 	bl	8001bac <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe faa4 	bl	8001bac <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0c1      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003676:	4b40      	ldr	r3, [pc, #256]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ee      	bne.n	8003660 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d105      	bne.n	8003694 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003688:	4b3b      	ldr	r3, [pc, #236]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	4a3a      	ldr	r2, [pc, #232]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003692:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80ad 	beq.w	80037f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369e:	4b36      	ldr	r3, [pc, #216]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d060      	beq.n	800376c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d145      	bne.n	800373e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	4b33      	ldr	r3, [pc, #204]	@ (8003780 <HAL_RCC_OscConfig+0x4b4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe fa78 	bl	8001bac <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe fa74 	bl	8001bac <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e093      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	4b29      	ldr	r3, [pc, #164]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	071b      	lsls	r3, r3, #28
 800370a:	491b      	ldr	r1, [pc, #108]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_RCC_OscConfig+0x4b4>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe fa49 	bl	8001bac <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe fa45 	bl	8001bac <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e064      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x452>
 800373c:	e05c      	b.n	80037f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	@ (8003780 <HAL_RCC_OscConfig+0x4b4>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fa32 	bl	8001bac <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fa2e 	bl	8001bac <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e04d      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x480>
 800376a:	e045      	b.n	80037f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e040      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1f      	ldr	r3, [pc, #124]	@ (8003804 <HAL_RCC_OscConfig+0x538>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d030      	beq.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d129      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d122      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d119      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10f      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e041      	b.n	800389e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd ff90 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 f95e 	bl	8003b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d001      	beq.n	80038c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e046      	b.n	800394e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a23      	ldr	r2, [pc, #140]	@ (800395c <HAL_TIM_Base_Start+0xb4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d022      	beq.n	8003918 <HAL_TIM_Base_Start+0x70>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038da:	d01d      	beq.n	8003918 <HAL_TIM_Base_Start+0x70>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003960 <HAL_TIM_Base_Start+0xb8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <HAL_TIM_Base_Start+0x70>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <HAL_TIM_Base_Start+0xbc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_TIM_Base_Start+0x70>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_TIM_Base_Start+0xc0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_TIM_Base_Start+0x70>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <HAL_TIM_Base_Start+0xc4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_TIM_Base_Start+0x70>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a19      	ldr	r2, [pc, #100]	@ (8003970 <HAL_TIM_Base_Start+0xc8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_Base_Start+0x70>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a18      	ldr	r2, [pc, #96]	@ (8003974 <HAL_TIM_Base_Start+0xcc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d111      	bne.n	800393c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d010      	beq.n	800394c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393a:	e007      	b.n	800394c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40010400 	.word	0x40010400
 8003970:	40014000 	.word	0x40014000
 8003974:	40001800 	.word	0x40001800

08003978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIM_ConfigClockSource+0x1c>
 8003990:	2302      	movs	r3, #2
 8003992:	e0b4      	b.n	8003afe <HAL_TIM_ConfigClockSource+0x186>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039cc:	d03e      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0xd4>
 80039ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d2:	f200 8087 	bhi.w	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039da:	f000 8086 	beq.w	8003aea <HAL_TIM_ConfigClockSource+0x172>
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e2:	d87f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b70      	cmp	r3, #112	@ 0x70
 80039e6:	d01a      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0xa6>
 80039e8:	2b70      	cmp	r3, #112	@ 0x70
 80039ea:	d87b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b60      	cmp	r3, #96	@ 0x60
 80039ee:	d050      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x11a>
 80039f0:	2b60      	cmp	r3, #96	@ 0x60
 80039f2:	d877      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b50      	cmp	r3, #80	@ 0x50
 80039f6:	d03c      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xfa>
 80039f8:	2b50      	cmp	r3, #80	@ 0x50
 80039fa:	d873      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b40      	cmp	r3, #64	@ 0x40
 80039fe:	d058      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	d86f      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b30      	cmp	r3, #48	@ 0x30
 8003a06:	d064      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a08:	2b30      	cmp	r3, #48	@ 0x30
 8003a0a:	d86b      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d060      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d867      	bhi.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05c      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d05a      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a1c:	e062      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a2e:	f000 f991 	bl	8003d54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	609a      	str	r2, [r3, #8]
      break;
 8003a4a:	e04f      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	f000 f97a 	bl	8003d54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a6e:	609a      	str	r2, [r3, #8]
      break;
 8003a70:	e03c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 f8ee 	bl	8003c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2150      	movs	r1, #80	@ 0x50
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f947 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003a90:	e02c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f000 f90d 	bl	8003cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2160      	movs	r1, #96	@ 0x60
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f937 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e01c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 f8ce 	bl	8003c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2140      	movs	r1, #64	@ 0x40
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f927 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e00c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f000 f91e 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003ae2:	e003      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e000      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a46      	ldr	r2, [pc, #280]	@ (8003c34 <TIM_Base_SetConfig+0x12c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b26:	d00f      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a43      	ldr	r2, [pc, #268]	@ (8003c38 <TIM_Base_SetConfig+0x130>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a42      	ldr	r2, [pc, #264]	@ (8003c3c <TIM_Base_SetConfig+0x134>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a41      	ldr	r2, [pc, #260]	@ (8003c40 <TIM_Base_SetConfig+0x138>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a40      	ldr	r2, [pc, #256]	@ (8003c44 <TIM_Base_SetConfig+0x13c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d108      	bne.n	8003b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a35      	ldr	r2, [pc, #212]	@ (8003c34 <TIM_Base_SetConfig+0x12c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02b      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b68:	d027      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a32      	ldr	r2, [pc, #200]	@ (8003c38 <TIM_Base_SetConfig+0x130>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d023      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a31      	ldr	r2, [pc, #196]	@ (8003c3c <TIM_Base_SetConfig+0x134>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01f      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	@ (8003c40 <TIM_Base_SetConfig+0x138>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01b      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2f      	ldr	r2, [pc, #188]	@ (8003c44 <TIM_Base_SetConfig+0x13c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d017      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c48 <TIM_Base_SetConfig+0x140>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	@ (8003c4c <TIM_Base_SetConfig+0x144>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00f      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003c50 <TIM_Base_SetConfig+0x148>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <TIM_Base_SetConfig+0x14c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <TIM_Base_SetConfig+0x150>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a29      	ldr	r2, [pc, #164]	@ (8003c5c <TIM_Base_SetConfig+0x154>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a10      	ldr	r2, [pc, #64]	@ (8003c34 <TIM_Base_SetConfig+0x12c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_Base_SetConfig+0xf8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a12      	ldr	r2, [pc, #72]	@ (8003c44 <TIM_Base_SetConfig+0x13c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]
  }
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40010400 	.word	0x40010400
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800
 8003c54:	40001800 	.word	0x40001800
 8003c58:	40001c00 	.word	0x40001c00
 8003c5c:	40002000 	.word	0x40002000

08003c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 030a 	bic.w	r3, r3, #10
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 0210 	bic.w	r2, r3, #16
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f043 0307 	orr.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e05a      	b.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a21      	ldr	r2, [pc, #132]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d022      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df8:	d01d      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1b      	ldr	r2, [pc, #108]	@ (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1a      	ldr	r2, [pc, #104]	@ (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a18      	ldr	r2, [pc, #96]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a17      	ldr	r2, [pc, #92]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a15      	ldr	r2, [pc, #84]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10c      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40010400 	.word	0x40010400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40001800 	.word	0x40001800

08003e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e042      	b.n	8003f24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd fc86 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	@ 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fb79 	bl	80045c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	@ 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d175      	bne.n	8004038 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Transmit+0x2c>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e06e      	b.n	800403a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2221      	movs	r2, #33	@ 0x21
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6a:	f7fd fe1f 	bl	8001bac <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f84:	d108      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e003      	b.n	8003fa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fa0:	e02e      	b.n	8004000 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2180      	movs	r1, #128	@ 0x80
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f98b 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e03a      	b.n	800403a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	3302      	adds	r3, #2
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	e007      	b.n	8003ff2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1cb      	bne.n	8003fa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	2140      	movs	r1, #64	@ 0x40
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f957 	bl	80042c8 <UART_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e006      	b.n	800403a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	4613      	mov	r3, r2
 800404e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	d112      	bne.n	8004082 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Receive_DMA+0x26>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e00b      	b.n	8004084 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	461a      	mov	r2, r3
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f97f 	bl	800437c <UART_Start_Receive_DMA>
 800407e:	4603      	mov	r3, r0
 8004080:	e000      	b.n	8004084 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004082:	2302      	movs	r3, #2
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b09c      	sub	sp, #112	@ 0x70
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d172      	bne.n	80041ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ea:	2200      	movs	r2, #0
 80040ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800410e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004110:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004114:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800411c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	667b      	str	r3, [r7, #100]	@ 0x64
 800413a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3314      	adds	r3, #20
 8004140:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004142:	647a      	str	r2, [r7, #68]	@ 0x44
 8004144:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e5      	bne.n	8004122 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3314      	adds	r3, #20
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	623b      	str	r3, [r7, #32]
   return(result);
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416c:	663b      	str	r3, [r7, #96]	@ 0x60
 800416e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004176:	633a      	str	r2, [r7, #48]	@ 0x30
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800417c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800418a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	2b01      	cmp	r3, #1
 8004198:	d119      	bne.n	80041ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80041ba:	61fa      	str	r2, [r7, #28]
 80041bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	69b9      	ldr	r1, [r7, #24]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	617b      	str	r3, [r7, #20]
   return(result);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d0:	2200      	movs	r2, #0
 80041d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041e0:	4619      	mov	r1, r3
 80041e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041e4:	f7ff ff66 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041e8:	e002      	b.n	80041f0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80041ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041ec:	f7fd f9aa 	bl	8001544 <HAL_UART_RxCpltCallback>
}
 80041f0:	bf00      	nop
 80041f2:	3770      	adds	r7, #112	@ 0x70
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	2b01      	cmp	r3, #1
 8004212:	d108      	bne.n	8004226 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	b29b      	uxth	r3, r3
 800421c:	4619      	mov	r1, r3
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ff48 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004224:	e002      	b.n	800422c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f7ff ff30 	bl	800408c <HAL_UART_RxHalfCpltCallback>
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004250:	2b80      	cmp	r3, #128	@ 0x80
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b21      	cmp	r3, #33	@ 0x21
 8004266:	d108      	bne.n	800427a <UART_DMAError+0x46>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004274:	68b8      	ldr	r0, [r7, #8]
 8004276:	f000 f91b 	bl	80044b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004284:	2b40      	cmp	r3, #64	@ 0x40
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b22      	cmp	r3, #34	@ 0x22
 800429a:	d108      	bne.n	80042ae <UART_DMAError+0x7a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2200      	movs	r2, #0
 80042a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80042a8:	68b8      	ldr	r0, [r7, #8]
 80042aa:	f000 f929 	bl	8004500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	f043 0210 	orr.w	r2, r3, #16
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ba:	68b8      	ldr	r0, [r7, #8]
 80042bc:	f7ff fef0 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d8:	e03b      	b.n	8004352 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d037      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e2:	f7fd fc63 	bl	8001bac <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d302      	bcc.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e03a      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d023      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x8a>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b80      	cmp	r3, #128	@ 0x80
 800430e:	d020      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b40      	cmp	r3, #64	@ 0x40
 8004314:	d01d      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b08      	cmp	r3, #8
 8004322:	d116      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8e0 	bl	8004500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2208      	movs	r2, #8
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e00f      	b.n	8004372 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	429a      	cmp	r2, r3
 800436e:	d0b4      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b098      	sub	sp, #96	@ 0x60
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2222      	movs	r2, #34	@ 0x22
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a8:	4a3e      	ldr	r2, [pc, #248]	@ (80044a4 <UART_Start_Receive_DMA+0x128>)
 80043aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	4a3d      	ldr	r2, [pc, #244]	@ (80044a8 <UART_Start_Receive_DMA+0x12c>)
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	4a3c      	ldr	r2, [pc, #240]	@ (80044ac <UART_Start_Receive_DMA+0x130>)
 80043ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c0:	2200      	movs	r2, #0
 80043c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	f7fd ffbc 	bl	8002358 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d019      	beq.n	8004432 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800440e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004414:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800441e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004420:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004424:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800442c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	657b      	str	r3, [r7, #84]	@ 0x54
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004452:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	617b      	str	r3, [r7, #20]
   return(result);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800447c:	653b      	str	r3, [r7, #80]	@ 0x50
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004486:	627a      	str	r2, [r7, #36]	@ 0x24
 8004488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6a39      	ldr	r1, [r7, #32]
 800448c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	61fb      	str	r3, [r7, #28]
   return(result);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3760      	adds	r7, #96	@ 0x60
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	080040cd 	.word	0x080040cd
 80044a8:	080041f9 	.word	0x080041f9
 80044ac:	08004235 	.word	0x08004235

080044b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	@ 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	61ba      	str	r2, [r7, #24]
 80044da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	613b      	str	r3, [r7, #16]
   return(result);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80044f4:	bf00      	nop
 80044f6:	3724      	adds	r7, #36	@ 0x24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b095      	sub	sp, #84	@ 0x54
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800451e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004528:	643a      	str	r2, [r7, #64]	@ 0x40
 800452a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800452e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	61fb      	str	r3, [r7, #28]
   return(result);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800455c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800455e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e5      	bne.n	800453c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60bb      	str	r3, [r7, #8]
   return(result);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0310 	bic.w	r3, r3, #16
 800458e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004598:	61ba      	str	r2, [r7, #24]
 800459a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6979      	ldr	r1, [r7, #20]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	613b      	str	r3, [r7, #16]
   return(result);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045ba:	bf00      	nop
 80045bc:	3754      	adds	r7, #84	@ 0x54
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045cc:	b0c0      	sub	sp, #256	@ 0x100
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	68d9      	ldr	r1, [r3, #12]
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	ea40 0301 	orr.w	r3, r0, r1
 80045f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	431a      	orrs	r2, r3
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	431a      	orrs	r2, r3
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004620:	f021 010c 	bic.w	r1, r1, #12
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800462e:	430b      	orrs	r3, r1
 8004630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004642:	6999      	ldr	r1, [r3, #24]
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	ea40 0301 	orr.w	r3, r0, r1
 800464e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b8f      	ldr	r3, [pc, #572]	@ (8004894 <UART_SetConfig+0x2cc>)
 8004658:	429a      	cmp	r2, r3
 800465a:	d005      	beq.n	8004668 <UART_SetConfig+0xa0>
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b8d      	ldr	r3, [pc, #564]	@ (8004898 <UART_SetConfig+0x2d0>)
 8004664:	429a      	cmp	r2, r3
 8004666:	d104      	bne.n	8004672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004668:	f7fe fbec 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 800466c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004670:	e003      	b.n	800467a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004672:	f7fe fbd3 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8004676:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004684:	f040 810c 	bne.w	80048a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468c:	2200      	movs	r2, #0
 800468e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004692:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800469a:	4622      	mov	r2, r4
 800469c:	462b      	mov	r3, r5
 800469e:	1891      	adds	r1, r2, r2
 80046a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046a2:	415b      	adcs	r3, r3
 80046a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046aa:	4621      	mov	r1, r4
 80046ac:	eb12 0801 	adds.w	r8, r2, r1
 80046b0:	4629      	mov	r1, r5
 80046b2:	eb43 0901 	adc.w	r9, r3, r1
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ca:	4690      	mov	r8, r2
 80046cc:	4699      	mov	r9, r3
 80046ce:	4623      	mov	r3, r4
 80046d0:	eb18 0303 	adds.w	r3, r8, r3
 80046d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046d8:	462b      	mov	r3, r5
 80046da:	eb49 0303 	adc.w	r3, r9, r3
 80046de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046f6:	460b      	mov	r3, r1
 80046f8:	18db      	adds	r3, r3, r3
 80046fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80046fc:	4613      	mov	r3, r2
 80046fe:	eb42 0303 	adc.w	r3, r2, r3
 8004702:	657b      	str	r3, [r7, #84]	@ 0x54
 8004704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800470c:	f7fc fa22 	bl	8000b54 <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4b61      	ldr	r3, [pc, #388]	@ (800489c <UART_SetConfig+0x2d4>)
 8004716:	fba3 2302 	umull	r2, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	011c      	lsls	r4, r3, #4
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004728:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800472c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004738:	415b      	adcs	r3, r3
 800473a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800473c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004740:	4641      	mov	r1, r8
 8004742:	eb12 0a01 	adds.w	sl, r2, r1
 8004746:	4649      	mov	r1, r9
 8004748:	eb43 0b01 	adc.w	fp, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800475c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004760:	4692      	mov	sl, r2
 8004762:	469b      	mov	fp, r3
 8004764:	4643      	mov	r3, r8
 8004766:	eb1a 0303 	adds.w	r3, sl, r3
 800476a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800476e:	464b      	mov	r3, r9
 8004770:	eb4b 0303 	adc.w	r3, fp, r3
 8004774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004784:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800478c:	460b      	mov	r3, r1
 800478e:	18db      	adds	r3, r3, r3
 8004790:	643b      	str	r3, [r7, #64]	@ 0x40
 8004792:	4613      	mov	r3, r2
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	647b      	str	r3, [r7, #68]	@ 0x44
 800479a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800479e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047a2:	f7fc f9d7 	bl	8000b54 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	4b3b      	ldr	r3, [pc, #236]	@ (800489c <UART_SetConfig+0x2d4>)
 80047ae:	fba3 2301 	umull	r2, r3, r3, r1
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2264      	movs	r2, #100	@ 0x64
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	1acb      	subs	r3, r1, r3
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047c2:	4b36      	ldr	r3, [pc, #216]	@ (800489c <UART_SetConfig+0x2d4>)
 80047c4:	fba3 2302 	umull	r2, r3, r3, r2
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047d0:	441c      	add	r4, r3
 80047d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047ec:	415b      	adcs	r3, r3
 80047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047f4:	4641      	mov	r1, r8
 80047f6:	1851      	adds	r1, r2, r1
 80047f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80047fa:	4649      	mov	r1, r9
 80047fc:	414b      	adcs	r3, r1
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800480c:	4659      	mov	r1, fp
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4651      	mov	r1, sl
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4642      	mov	r2, r8
 8004822:	189b      	adds	r3, r3, r2
 8004824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004828:	464b      	mov	r3, r9
 800482a:	460a      	mov	r2, r1
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004840:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004848:	460b      	mov	r3, r1
 800484a:	18db      	adds	r3, r3, r3
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484e:	4613      	mov	r3, r2
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800485a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800485e:	f7fc f979 	bl	8000b54 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <UART_SetConfig+0x2d4>)
 8004868:	fba3 1302 	umull	r1, r3, r3, r2
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	2164      	movs	r1, #100	@ 0x64
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	3332      	adds	r3, #50	@ 0x32
 800487a:	4a08      	ldr	r2, [pc, #32]	@ (800489c <UART_SetConfig+0x2d4>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	f003 0207 	and.w	r2, r3, #7
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4422      	add	r2, r4
 800488e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004890:	e106      	b.n	8004aa0 <UART_SetConfig+0x4d8>
 8004892:	bf00      	nop
 8004894:	40011000 	.word	0x40011000
 8004898:	40011400 	.word	0x40011400
 800489c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80048b2:	4642      	mov	r2, r8
 80048b4:	464b      	mov	r3, r9
 80048b6:	1891      	adds	r1, r2, r2
 80048b8:	6239      	str	r1, [r7, #32]
 80048ba:	415b      	adcs	r3, r3
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048c2:	4641      	mov	r1, r8
 80048c4:	1854      	adds	r4, r2, r1
 80048c6:	4649      	mov	r1, r9
 80048c8:	eb43 0501 	adc.w	r5, r3, r1
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	00eb      	lsls	r3, r5, #3
 80048d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048da:	00e2      	lsls	r2, r4, #3
 80048dc:	4614      	mov	r4, r2
 80048de:	461d      	mov	r5, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	18e3      	adds	r3, r4, r3
 80048e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048e8:	464b      	mov	r3, r9
 80048ea:	eb45 0303 	adc.w	r3, r5, r3
 80048ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800490e:	4629      	mov	r1, r5
 8004910:	008b      	lsls	r3, r1, #2
 8004912:	4621      	mov	r1, r4
 8004914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004918:	4621      	mov	r1, r4
 800491a:	008a      	lsls	r2, r1, #2
 800491c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004920:	f7fc f918 	bl	8000b54 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4b60      	ldr	r3, [pc, #384]	@ (8004aac <UART_SetConfig+0x4e4>)
 800492a:	fba3 2302 	umull	r2, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	011c      	lsls	r4, r3, #4
 8004932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004936:	2200      	movs	r2, #0
 8004938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800493c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	1891      	adds	r1, r2, r2
 800494a:	61b9      	str	r1, [r7, #24]
 800494c:	415b      	adcs	r3, r3
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004954:	4641      	mov	r1, r8
 8004956:	1851      	adds	r1, r2, r1
 8004958:	6139      	str	r1, [r7, #16]
 800495a:	4649      	mov	r1, r9
 800495c:	414b      	adcs	r3, r1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800496c:	4659      	mov	r1, fp
 800496e:	00cb      	lsls	r3, r1, #3
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004976:	4651      	mov	r1, sl
 8004978:	00ca      	lsls	r2, r1, #3
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	4603      	mov	r3, r0
 8004980:	4642      	mov	r2, r8
 8004982:	189b      	adds	r3, r3, r2
 8004984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004988:	464b      	mov	r3, r9
 800498a:	460a      	mov	r2, r1
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800499e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049ac:	4649      	mov	r1, r9
 80049ae:	008b      	lsls	r3, r1, #2
 80049b0:	4641      	mov	r1, r8
 80049b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b6:	4641      	mov	r1, r8
 80049b8:	008a      	lsls	r2, r1, #2
 80049ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049be:	f7fc f8c9 	bl	8000b54 <__aeabi_uldivmod>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	4b38      	ldr	r3, [pc, #224]	@ (8004aac <UART_SetConfig+0x4e4>)
 80049ca:	fba3 2301 	umull	r2, r3, r3, r1
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2264      	movs	r2, #100	@ 0x64
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	1acb      	subs	r3, r1, r3
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	3332      	adds	r3, #50	@ 0x32
 80049dc:	4a33      	ldr	r2, [pc, #204]	@ (8004aac <UART_SetConfig+0x4e4>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049e8:	441c      	add	r4, r3
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80049f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80049f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049f8:	4642      	mov	r2, r8
 80049fa:	464b      	mov	r3, r9
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	415b      	adcs	r3, r3
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a08:	4641      	mov	r1, r8
 8004a0a:	1851      	adds	r1, r2, r1
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	4649      	mov	r1, r9
 8004a10:	414b      	adcs	r3, r1
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a20:	4659      	mov	r1, fp
 8004a22:	00cb      	lsls	r3, r1, #3
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	00ca      	lsls	r2, r1, #3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	4642      	mov	r2, r8
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	eb42 0303 	adc.w	r3, r2, r3
 8004a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	008b      	lsls	r3, r1, #2
 8004a60:	4641      	mov	r1, r8
 8004a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a66:	4641      	mov	r1, r8
 8004a68:	008a      	lsls	r2, r1, #2
 8004a6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a6e:	f7fc f871 	bl	8000b54 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <UART_SetConfig+0x4e4>)
 8004a78:	fba3 1302 	umull	r1, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	2164      	movs	r1, #100	@ 0x64
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	3332      	adds	r3, #50	@ 0x32
 8004a8a:	4a08      	ldr	r2, [pc, #32]	@ (8004aac <UART_SetConfig+0x4e4>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4422      	add	r2, r4
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aac:	51eb851f 	.word	0x51eb851f

08004ab0 <memset>:
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	f803 1b01 	strb.w	r1, [r3], #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8004af8 <__libc_init_array+0x38>)
 8004ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8004afc <__libc_init_array+0x3c>)
 8004ac6:	1b64      	subs	r4, r4, r5
 8004ac8:	10a4      	asrs	r4, r4, #2
 8004aca:	2600      	movs	r6, #0
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8004b00 <__libc_init_array+0x40>)
 8004ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8004b04 <__libc_init_array+0x44>)
 8004ad4:	f001 f83c 	bl	8005b50 <_init>
 8004ad8:	1b64      	subs	r4, r4, r5
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	2600      	movs	r6, #0
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08005e28 	.word	0x08005e28
 8004afc:	08005e28 	.word	0x08005e28
 8004b00:	08005e28 	.word	0x08005e28
 8004b04:	08005e2c 	.word	0x08005e2c

08004b08 <sin>:
 8004b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b0a:	ec53 2b10 	vmov	r2, r3, d0
 8004b0e:	4826      	ldr	r0, [pc, #152]	@ (8004ba8 <sin+0xa0>)
 8004b10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b14:	4281      	cmp	r1, r0
 8004b16:	d807      	bhi.n	8004b28 <sin+0x20>
 8004b18:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004ba0 <sin+0x98>
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	b005      	add	sp, #20
 8004b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b24:	f000 b90c 	b.w	8004d40 <__kernel_sin>
 8004b28:	4820      	ldr	r0, [pc, #128]	@ (8004bac <sin+0xa4>)
 8004b2a:	4281      	cmp	r1, r0
 8004b2c:	d908      	bls.n	8004b40 <sin+0x38>
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	f7fb fb75 	bl	8000220 <__aeabi_dsub>
 8004b36:	ec41 0b10 	vmov	d0, r0, r1
 8004b3a:	b005      	add	sp, #20
 8004b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b40:	4668      	mov	r0, sp
 8004b42:	f000 f9b9 	bl	8004eb8 <__ieee754_rem_pio2>
 8004b46:	f000 0003 	and.w	r0, r0, #3
 8004b4a:	2801      	cmp	r0, #1
 8004b4c:	d00c      	beq.n	8004b68 <sin+0x60>
 8004b4e:	2802      	cmp	r0, #2
 8004b50:	d011      	beq.n	8004b76 <sin+0x6e>
 8004b52:	b9e8      	cbnz	r0, 8004b90 <sin+0x88>
 8004b54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b58:	ed9d 0b00 	vldr	d0, [sp]
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f000 f8ef 	bl	8004d40 <__kernel_sin>
 8004b62:	ec51 0b10 	vmov	r0, r1, d0
 8004b66:	e7e6      	b.n	8004b36 <sin+0x2e>
 8004b68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b6c:	ed9d 0b00 	vldr	d0, [sp]
 8004b70:	f000 f81e 	bl	8004bb0 <__kernel_cos>
 8004b74:	e7f5      	b.n	8004b62 <sin+0x5a>
 8004b76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b7a:	ed9d 0b00 	vldr	d0, [sp]
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f000 f8de 	bl	8004d40 <__kernel_sin>
 8004b84:	ec53 2b10 	vmov	r2, r3, d0
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004b8e:	e7d2      	b.n	8004b36 <sin+0x2e>
 8004b90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b94:	ed9d 0b00 	vldr	d0, [sp]
 8004b98:	f000 f80a 	bl	8004bb0 <__kernel_cos>
 8004b9c:	e7f2      	b.n	8004b84 <sin+0x7c>
 8004b9e:	bf00      	nop
	...
 8004ba8:	3fe921fb 	.word	0x3fe921fb
 8004bac:	7fefffff 	.word	0x7fefffff

08004bb0 <__kernel_cos>:
 8004bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	ec57 6b10 	vmov	r6, r7, d0
 8004bb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004bbc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004bc0:	ed8d 1b00 	vstr	d1, [sp]
 8004bc4:	d206      	bcs.n	8004bd4 <__kernel_cos+0x24>
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	4639      	mov	r1, r7
 8004bca:	f7fb ff7b 	bl	8000ac4 <__aeabi_d2iz>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	f000 8088 	beq.w	8004ce4 <__kernel_cos+0x134>
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	4630      	mov	r0, r6
 8004bda:	4639      	mov	r1, r7
 8004bdc:	f7fb fcd8 	bl	8000590 <__aeabi_dmul>
 8004be0:	4b51      	ldr	r3, [pc, #324]	@ (8004d28 <__kernel_cos+0x178>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	4604      	mov	r4, r0
 8004be6:	460d      	mov	r5, r1
 8004be8:	f7fb fcd2 	bl	8000590 <__aeabi_dmul>
 8004bec:	a340      	add	r3, pc, #256	@ (adr r3, 8004cf0 <__kernel_cos+0x140>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	4682      	mov	sl, r0
 8004bf4:	468b      	mov	fp, r1
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7fb fcc9 	bl	8000590 <__aeabi_dmul>
 8004bfe:	a33e      	add	r3, pc, #248	@ (adr r3, 8004cf8 <__kernel_cos+0x148>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fb0e 	bl	8000224 <__adddf3>
 8004c08:	4622      	mov	r2, r4
 8004c0a:	462b      	mov	r3, r5
 8004c0c:	f7fb fcc0 	bl	8000590 <__aeabi_dmul>
 8004c10:	a33b      	add	r3, pc, #236	@ (adr r3, 8004d00 <__kernel_cos+0x150>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fb03 	bl	8000220 <__aeabi_dsub>
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	f7fb fcb7 	bl	8000590 <__aeabi_dmul>
 8004c22:	a339      	add	r3, pc, #228	@ (adr r3, 8004d08 <__kernel_cos+0x158>)
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f7fb fafc 	bl	8000224 <__adddf3>
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	462b      	mov	r3, r5
 8004c30:	f7fb fcae 	bl	8000590 <__aeabi_dmul>
 8004c34:	a336      	add	r3, pc, #216	@ (adr r3, 8004d10 <__kernel_cos+0x160>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb faf1 	bl	8000220 <__aeabi_dsub>
 8004c3e:	4622      	mov	r2, r4
 8004c40:	462b      	mov	r3, r5
 8004c42:	f7fb fca5 	bl	8000590 <__aeabi_dmul>
 8004c46:	a334      	add	r3, pc, #208	@ (adr r3, 8004d18 <__kernel_cos+0x168>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f7fb faea 	bl	8000224 <__adddf3>
 8004c50:	4622      	mov	r2, r4
 8004c52:	462b      	mov	r3, r5
 8004c54:	f7fb fc9c 	bl	8000590 <__aeabi_dmul>
 8004c58:	4622      	mov	r2, r4
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	f7fb fc98 	bl	8000590 <__aeabi_dmul>
 8004c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c64:	4604      	mov	r4, r0
 8004c66:	460d      	mov	r5, r1
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fc90 	bl	8000590 <__aeabi_dmul>
 8004c70:	460b      	mov	r3, r1
 8004c72:	4602      	mov	r2, r0
 8004c74:	4629      	mov	r1, r5
 8004c76:	4620      	mov	r0, r4
 8004c78:	f7fb fad2 	bl	8000220 <__aeabi_dsub>
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d2c <__kernel_cos+0x17c>)
 8004c7e:	4598      	cmp	r8, r3
 8004c80:	4606      	mov	r6, r0
 8004c82:	460f      	mov	r7, r1
 8004c84:	d810      	bhi.n	8004ca8 <__kernel_cos+0xf8>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	f7fb fac7 	bl	8000220 <__aeabi_dsub>
 8004c92:	460b      	mov	r3, r1
 8004c94:	4926      	ldr	r1, [pc, #152]	@ (8004d30 <__kernel_cos+0x180>)
 8004c96:	4602      	mov	r2, r0
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7fb fac1 	bl	8000220 <__aeabi_dsub>
 8004c9e:	ec41 0b10 	vmov	d0, r0, r1
 8004ca2:	b003      	add	sp, #12
 8004ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca8:	4b22      	ldr	r3, [pc, #136]	@ (8004d34 <__kernel_cos+0x184>)
 8004caa:	4921      	ldr	r1, [pc, #132]	@ (8004d30 <__kernel_cos+0x180>)
 8004cac:	4598      	cmp	r8, r3
 8004cae:	bf8c      	ite	hi
 8004cb0:	4d21      	ldrhi	r5, [pc, #132]	@ (8004d38 <__kernel_cos+0x188>)
 8004cb2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004cb6:	2400      	movs	r4, #0
 8004cb8:	4622      	mov	r2, r4
 8004cba:	462b      	mov	r3, r5
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7fb faaf 	bl	8000220 <__aeabi_dsub>
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	462b      	mov	r3, r5
 8004cca:	4650      	mov	r0, sl
 8004ccc:	4659      	mov	r1, fp
 8004cce:	f7fb faa7 	bl	8000220 <__aeabi_dsub>
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	f7fb faa3 	bl	8000220 <__aeabi_dsub>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4640      	mov	r0, r8
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	e7da      	b.n	8004c9a <__kernel_cos+0xea>
 8004ce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004d20 <__kernel_cos+0x170>
 8004ce8:	e7db      	b.n	8004ca2 <__kernel_cos+0xf2>
 8004cea:	bf00      	nop
 8004cec:	f3af 8000 	nop.w
 8004cf0:	be8838d4 	.word	0xbe8838d4
 8004cf4:	bda8fae9 	.word	0xbda8fae9
 8004cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8004cfc:	3e21ee9e 	.word	0x3e21ee9e
 8004d00:	809c52ad 	.word	0x809c52ad
 8004d04:	3e927e4f 	.word	0x3e927e4f
 8004d08:	19cb1590 	.word	0x19cb1590
 8004d0c:	3efa01a0 	.word	0x3efa01a0
 8004d10:	16c15177 	.word	0x16c15177
 8004d14:	3f56c16c 	.word	0x3f56c16c
 8004d18:	5555554c 	.word	0x5555554c
 8004d1c:	3fa55555 	.word	0x3fa55555
 8004d20:	00000000 	.word	0x00000000
 8004d24:	3ff00000 	.word	0x3ff00000
 8004d28:	3fe00000 	.word	0x3fe00000
 8004d2c:	3fd33332 	.word	0x3fd33332
 8004d30:	3ff00000 	.word	0x3ff00000
 8004d34:	3fe90000 	.word	0x3fe90000
 8004d38:	3fd20000 	.word	0x3fd20000
 8004d3c:	00000000 	.word	0x00000000

08004d40 <__kernel_sin>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	ec55 4b10 	vmov	r4, r5, d0
 8004d48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004d52:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004d56:	4680      	mov	r8, r0
 8004d58:	d205      	bcs.n	8004d66 <__kernel_sin+0x26>
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	f7fb feb1 	bl	8000ac4 <__aeabi_d2iz>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d052      	beq.n	8004e0c <__kernel_sin+0xcc>
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7fb fc0f 	bl	8000590 <__aeabi_dmul>
 8004d72:	4682      	mov	sl, r0
 8004d74:	468b      	mov	fp, r1
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f7fb fc07 	bl	8000590 <__aeabi_dmul>
 8004d82:	a342      	add	r3, pc, #264	@ (adr r3, 8004e8c <__kernel_sin+0x14c>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	e9cd 0100 	strd	r0, r1, [sp]
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	4659      	mov	r1, fp
 8004d90:	f7fb fbfe 	bl	8000590 <__aeabi_dmul>
 8004d94:	a33f      	add	r3, pc, #252	@ (adr r3, 8004e94 <__kernel_sin+0x154>)
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f7fb fa41 	bl	8000220 <__aeabi_dsub>
 8004d9e:	4652      	mov	r2, sl
 8004da0:	465b      	mov	r3, fp
 8004da2:	f7fb fbf5 	bl	8000590 <__aeabi_dmul>
 8004da6:	a33d      	add	r3, pc, #244	@ (adr r3, 8004e9c <__kernel_sin+0x15c>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fa3a 	bl	8000224 <__adddf3>
 8004db0:	4652      	mov	r2, sl
 8004db2:	465b      	mov	r3, fp
 8004db4:	f7fb fbec 	bl	8000590 <__aeabi_dmul>
 8004db8:	a33a      	add	r3, pc, #232	@ (adr r3, 8004ea4 <__kernel_sin+0x164>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fa2f 	bl	8000220 <__aeabi_dsub>
 8004dc2:	4652      	mov	r2, sl
 8004dc4:	465b      	mov	r3, fp
 8004dc6:	f7fb fbe3 	bl	8000590 <__aeabi_dmul>
 8004dca:	a338      	add	r3, pc, #224	@ (adr r3, 8004eac <__kernel_sin+0x16c>)
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f7fb fa28 	bl	8000224 <__adddf3>
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460f      	mov	r7, r1
 8004dd8:	f1b8 0f00 	cmp.w	r8, #0
 8004ddc:	d11b      	bne.n	8004e16 <__kernel_sin+0xd6>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4650      	mov	r0, sl
 8004de4:	4659      	mov	r1, fp
 8004de6:	f7fb fbd3 	bl	8000590 <__aeabi_dmul>
 8004dea:	a325      	add	r3, pc, #148	@ (adr r3, 8004e80 <__kernel_sin+0x140>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f7fb fa16 	bl	8000220 <__aeabi_dsub>
 8004df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004df8:	f7fb fbca 	bl	8000590 <__aeabi_dmul>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4620      	mov	r0, r4
 8004e02:	4629      	mov	r1, r5
 8004e04:	f7fb fa0e 	bl	8000224 <__adddf3>
 8004e08:	4604      	mov	r4, r0
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	ec45 4b10 	vmov	d0, r4, r5
 8004e10:	b005      	add	sp, #20
 8004e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <__kernel_sin+0x148>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f7fb fbb7 	bl	8000590 <__aeabi_dmul>
 8004e22:	4632      	mov	r2, r6
 8004e24:	4680      	mov	r8, r0
 8004e26:	4689      	mov	r9, r1
 8004e28:	463b      	mov	r3, r7
 8004e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e2e:	f7fb fbaf 	bl	8000590 <__aeabi_dmul>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4640      	mov	r0, r8
 8004e38:	4649      	mov	r1, r9
 8004e3a:	f7fb f9f1 	bl	8000220 <__aeabi_dsub>
 8004e3e:	4652      	mov	r2, sl
 8004e40:	465b      	mov	r3, fp
 8004e42:	f7fb fba5 	bl	8000590 <__aeabi_dmul>
 8004e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e4a:	f7fb f9e9 	bl	8000220 <__aeabi_dsub>
 8004e4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8004e80 <__kernel_sin+0x140>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	4606      	mov	r6, r0
 8004e56:	460f      	mov	r7, r1
 8004e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e5c:	f7fb fb98 	bl	8000590 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4630      	mov	r0, r6
 8004e66:	4639      	mov	r1, r7
 8004e68:	f7fb f9dc 	bl	8000224 <__adddf3>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4620      	mov	r0, r4
 8004e72:	4629      	mov	r1, r5
 8004e74:	f7fb f9d4 	bl	8000220 <__aeabi_dsub>
 8004e78:	e7c6      	b.n	8004e08 <__kernel_sin+0xc8>
 8004e7a:	bf00      	nop
 8004e7c:	f3af 8000 	nop.w
 8004e80:	55555549 	.word	0x55555549
 8004e84:	3fc55555 	.word	0x3fc55555
 8004e88:	3fe00000 	.word	0x3fe00000
 8004e8c:	5acfd57c 	.word	0x5acfd57c
 8004e90:	3de5d93a 	.word	0x3de5d93a
 8004e94:	8a2b9ceb 	.word	0x8a2b9ceb
 8004e98:	3e5ae5e6 	.word	0x3e5ae5e6
 8004e9c:	57b1fe7d 	.word	0x57b1fe7d
 8004ea0:	3ec71de3 	.word	0x3ec71de3
 8004ea4:	19c161d5 	.word	0x19c161d5
 8004ea8:	3f2a01a0 	.word	0x3f2a01a0
 8004eac:	1110f8a6 	.word	0x1110f8a6
 8004eb0:	3f811111 	.word	0x3f811111
 8004eb4:	00000000 	.word	0x00000000

08004eb8 <__ieee754_rem_pio2>:
 8004eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebc:	ec57 6b10 	vmov	r6, r7, d0
 8004ec0:	4bc5      	ldr	r3, [pc, #788]	@ (80051d8 <__ieee754_rem_pio2+0x320>)
 8004ec2:	b08d      	sub	sp, #52	@ 0x34
 8004ec4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004ec8:	4598      	cmp	r8, r3
 8004eca:	4604      	mov	r4, r0
 8004ecc:	9704      	str	r7, [sp, #16]
 8004ece:	d807      	bhi.n	8004ee0 <__ieee754_rem_pio2+0x28>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	ed80 0b00 	vstr	d0, [r0]
 8004ed8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004edc:	2500      	movs	r5, #0
 8004ede:	e028      	b.n	8004f32 <__ieee754_rem_pio2+0x7a>
 8004ee0:	4bbe      	ldr	r3, [pc, #760]	@ (80051dc <__ieee754_rem_pio2+0x324>)
 8004ee2:	4598      	cmp	r8, r3
 8004ee4:	d878      	bhi.n	8004fd8 <__ieee754_rem_pio2+0x120>
 8004ee6:	9b04      	ldr	r3, [sp, #16]
 8004ee8:	4dbd      	ldr	r5, [pc, #756]	@ (80051e0 <__ieee754_rem_pio2+0x328>)
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	4630      	mov	r0, r6
 8004eee:	a3ac      	add	r3, pc, #688	@ (adr r3, 80051a0 <__ieee754_rem_pio2+0x2e8>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	dd38      	ble.n	8004f6a <__ieee754_rem_pio2+0xb2>
 8004ef8:	f7fb f992 	bl	8000220 <__aeabi_dsub>
 8004efc:	45a8      	cmp	r8, r5
 8004efe:	4606      	mov	r6, r0
 8004f00:	460f      	mov	r7, r1
 8004f02:	d01a      	beq.n	8004f3a <__ieee754_rem_pio2+0x82>
 8004f04:	a3a8      	add	r3, pc, #672	@ (adr r3, 80051a8 <__ieee754_rem_pio2+0x2f0>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f7fb f989 	bl	8000220 <__aeabi_dsub>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4680      	mov	r8, r0
 8004f14:	4689      	mov	r9, r1
 8004f16:	4630      	mov	r0, r6
 8004f18:	4639      	mov	r1, r7
 8004f1a:	f7fb f981 	bl	8000220 <__aeabi_dsub>
 8004f1e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80051a8 <__ieee754_rem_pio2+0x2f0>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb f97c 	bl	8000220 <__aeabi_dsub>
 8004f28:	e9c4 8900 	strd	r8, r9, [r4]
 8004f2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f30:	2501      	movs	r5, #1
 8004f32:	4628      	mov	r0, r5
 8004f34:	b00d      	add	sp, #52	@ 0x34
 8004f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3a:	a39d      	add	r3, pc, #628	@ (adr r3, 80051b0 <__ieee754_rem_pio2+0x2f8>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb f96e 	bl	8000220 <__aeabi_dsub>
 8004f44:	a39c      	add	r3, pc, #624	@ (adr r3, 80051b8 <__ieee754_rem_pio2+0x300>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	f7fb f967 	bl	8000220 <__aeabi_dsub>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4680      	mov	r8, r0
 8004f58:	4689      	mov	r9, r1
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	4639      	mov	r1, r7
 8004f5e:	f7fb f95f 	bl	8000220 <__aeabi_dsub>
 8004f62:	a395      	add	r3, pc, #596	@ (adr r3, 80051b8 <__ieee754_rem_pio2+0x300>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	e7dc      	b.n	8004f24 <__ieee754_rem_pio2+0x6c>
 8004f6a:	f7fb f95b 	bl	8000224 <__adddf3>
 8004f6e:	45a8      	cmp	r8, r5
 8004f70:	4606      	mov	r6, r0
 8004f72:	460f      	mov	r7, r1
 8004f74:	d018      	beq.n	8004fa8 <__ieee754_rem_pio2+0xf0>
 8004f76:	a38c      	add	r3, pc, #560	@ (adr r3, 80051a8 <__ieee754_rem_pio2+0x2f0>)
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f7fb f952 	bl	8000224 <__adddf3>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4680      	mov	r8, r0
 8004f86:	4689      	mov	r9, r1
 8004f88:	4630      	mov	r0, r6
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	f7fb f948 	bl	8000220 <__aeabi_dsub>
 8004f90:	a385      	add	r3, pc, #532	@ (adr r3, 80051a8 <__ieee754_rem_pio2+0x2f0>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f7fb f945 	bl	8000224 <__adddf3>
 8004f9a:	f04f 35ff 	mov.w	r5, #4294967295
 8004f9e:	e9c4 8900 	strd	r8, r9, [r4]
 8004fa2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004fa6:	e7c4      	b.n	8004f32 <__ieee754_rem_pio2+0x7a>
 8004fa8:	a381      	add	r3, pc, #516	@ (adr r3, 80051b0 <__ieee754_rem_pio2+0x2f8>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb f939 	bl	8000224 <__adddf3>
 8004fb2:	a381      	add	r3, pc, #516	@ (adr r3, 80051b8 <__ieee754_rem_pio2+0x300>)
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	4606      	mov	r6, r0
 8004fba:	460f      	mov	r7, r1
 8004fbc:	f7fb f932 	bl	8000224 <__adddf3>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4639      	mov	r1, r7
 8004fcc:	f7fb f928 	bl	8000220 <__aeabi_dsub>
 8004fd0:	a379      	add	r3, pc, #484	@ (adr r3, 80051b8 <__ieee754_rem_pio2+0x300>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	e7de      	b.n	8004f96 <__ieee754_rem_pio2+0xde>
 8004fd8:	4b82      	ldr	r3, [pc, #520]	@ (80051e4 <__ieee754_rem_pio2+0x32c>)
 8004fda:	4598      	cmp	r8, r3
 8004fdc:	f200 80d1 	bhi.w	8005182 <__ieee754_rem_pio2+0x2ca>
 8004fe0:	f000 f966 	bl	80052b0 <fabs>
 8004fe4:	ec57 6b10 	vmov	r6, r7, d0
 8004fe8:	a375      	add	r3, pc, #468	@ (adr r3, 80051c0 <__ieee754_rem_pio2+0x308>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	4630      	mov	r0, r6
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	f7fb facd 	bl	8000590 <__aeabi_dmul>
 8004ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80051e8 <__ieee754_rem_pio2+0x330>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f7fb f913 	bl	8000224 <__adddf3>
 8004ffe:	f7fb fd61 	bl	8000ac4 <__aeabi_d2iz>
 8005002:	4605      	mov	r5, r0
 8005004:	f7fb fa5a 	bl	80004bc <__aeabi_i2d>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005010:	a363      	add	r3, pc, #396	@ (adr r3, 80051a0 <__ieee754_rem_pio2+0x2e8>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb fabb 	bl	8000590 <__aeabi_dmul>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4630      	mov	r0, r6
 8005020:	4639      	mov	r1, r7
 8005022:	f7fb f8fd 	bl	8000220 <__aeabi_dsub>
 8005026:	a360      	add	r3, pc, #384	@ (adr r3, 80051a8 <__ieee754_rem_pio2+0x2f0>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	4682      	mov	sl, r0
 800502e:	468b      	mov	fp, r1
 8005030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005034:	f7fb faac 	bl	8000590 <__aeabi_dmul>
 8005038:	2d1f      	cmp	r5, #31
 800503a:	4606      	mov	r6, r0
 800503c:	460f      	mov	r7, r1
 800503e:	dc0c      	bgt.n	800505a <__ieee754_rem_pio2+0x1a2>
 8005040:	4b6a      	ldr	r3, [pc, #424]	@ (80051ec <__ieee754_rem_pio2+0x334>)
 8005042:	1e6a      	subs	r2, r5, #1
 8005044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005048:	4543      	cmp	r3, r8
 800504a:	d006      	beq.n	800505a <__ieee754_rem_pio2+0x1a2>
 800504c:	4632      	mov	r2, r6
 800504e:	463b      	mov	r3, r7
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb f8e4 	bl	8000220 <__aeabi_dsub>
 8005058:	e00e      	b.n	8005078 <__ieee754_rem_pio2+0x1c0>
 800505a:	463b      	mov	r3, r7
 800505c:	4632      	mov	r2, r6
 800505e:	4650      	mov	r0, sl
 8005060:	4659      	mov	r1, fp
 8005062:	f7fb f8dd 	bl	8000220 <__aeabi_dsub>
 8005066:	ea4f 5328 	mov.w	r3, r8, asr #20
 800506a:	9305      	str	r3, [sp, #20]
 800506c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005070:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005074:	2b10      	cmp	r3, #16
 8005076:	dc02      	bgt.n	800507e <__ieee754_rem_pio2+0x1c6>
 8005078:	e9c4 0100 	strd	r0, r1, [r4]
 800507c:	e039      	b.n	80050f2 <__ieee754_rem_pio2+0x23a>
 800507e:	a34c      	add	r3, pc, #304	@ (adr r3, 80051b0 <__ieee754_rem_pio2+0x2f8>)
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005088:	f7fb fa82 	bl	8000590 <__aeabi_dmul>
 800508c:	4606      	mov	r6, r0
 800508e:	460f      	mov	r7, r1
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4650      	mov	r0, sl
 8005096:	4659      	mov	r1, fp
 8005098:	f7fb f8c2 	bl	8000220 <__aeabi_dsub>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4680      	mov	r8, r0
 80050a2:	4689      	mov	r9, r1
 80050a4:	4650      	mov	r0, sl
 80050a6:	4659      	mov	r1, fp
 80050a8:	f7fb f8ba 	bl	8000220 <__aeabi_dsub>
 80050ac:	4632      	mov	r2, r6
 80050ae:	463b      	mov	r3, r7
 80050b0:	f7fb f8b6 	bl	8000220 <__aeabi_dsub>
 80050b4:	a340      	add	r3, pc, #256	@ (adr r3, 80051b8 <__ieee754_rem_pio2+0x300>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	4606      	mov	r6, r0
 80050bc:	460f      	mov	r7, r1
 80050be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c2:	f7fb fa65 	bl	8000590 <__aeabi_dmul>
 80050c6:	4632      	mov	r2, r6
 80050c8:	463b      	mov	r3, r7
 80050ca:	f7fb f8a9 	bl	8000220 <__aeabi_dsub>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4606      	mov	r6, r0
 80050d4:	460f      	mov	r7, r1
 80050d6:	4640      	mov	r0, r8
 80050d8:	4649      	mov	r1, r9
 80050da:	f7fb f8a1 	bl	8000220 <__aeabi_dsub>
 80050de:	9a05      	ldr	r2, [sp, #20]
 80050e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b31      	cmp	r3, #49	@ 0x31
 80050e8:	dc20      	bgt.n	800512c <__ieee754_rem_pio2+0x274>
 80050ea:	e9c4 0100 	strd	r0, r1, [r4]
 80050ee:	46c2      	mov	sl, r8
 80050f0:	46cb      	mov	fp, r9
 80050f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80050f6:	4650      	mov	r0, sl
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	4659      	mov	r1, fp
 80050fe:	f7fb f88f 	bl	8000220 <__aeabi_dsub>
 8005102:	463b      	mov	r3, r7
 8005104:	4632      	mov	r2, r6
 8005106:	f7fb f88b 	bl	8000220 <__aeabi_dsub>
 800510a:	9b04      	ldr	r3, [sp, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005112:	f6bf af0e 	bge.w	8004f32 <__ieee754_rem_pio2+0x7a>
 8005116:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005120:	f8c4 8000 	str.w	r8, [r4]
 8005124:	60a0      	str	r0, [r4, #8]
 8005126:	60e3      	str	r3, [r4, #12]
 8005128:	426d      	negs	r5, r5
 800512a:	e702      	b.n	8004f32 <__ieee754_rem_pio2+0x7a>
 800512c:	a326      	add	r3, pc, #152	@ (adr r3, 80051c8 <__ieee754_rem_pio2+0x310>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005136:	f7fb fa2b 	bl	8000590 <__aeabi_dmul>
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f7fb f86b 	bl	8000220 <__aeabi_dsub>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4682      	mov	sl, r0
 8005150:	468b      	mov	fp, r1
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	f7fb f863 	bl	8000220 <__aeabi_dsub>
 800515a:	4632      	mov	r2, r6
 800515c:	463b      	mov	r3, r7
 800515e:	f7fb f85f 	bl	8000220 <__aeabi_dsub>
 8005162:	a31b      	add	r3, pc, #108	@ (adr r3, 80051d0 <__ieee754_rem_pio2+0x318>)
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	4606      	mov	r6, r0
 800516a:	460f      	mov	r7, r1
 800516c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005170:	f7fb fa0e 	bl	8000590 <__aeabi_dmul>
 8005174:	4632      	mov	r2, r6
 8005176:	463b      	mov	r3, r7
 8005178:	f7fb f852 	bl	8000220 <__aeabi_dsub>
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	e764      	b.n	800504c <__ieee754_rem_pio2+0x194>
 8005182:	4b1b      	ldr	r3, [pc, #108]	@ (80051f0 <__ieee754_rem_pio2+0x338>)
 8005184:	4598      	cmp	r8, r3
 8005186:	d935      	bls.n	80051f4 <__ieee754_rem_pio2+0x33c>
 8005188:	4632      	mov	r2, r6
 800518a:	463b      	mov	r3, r7
 800518c:	4630      	mov	r0, r6
 800518e:	4639      	mov	r1, r7
 8005190:	f7fb f846 	bl	8000220 <__aeabi_dsub>
 8005194:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005198:	e9c4 0100 	strd	r0, r1, [r4]
 800519c:	e69e      	b.n	8004edc <__ieee754_rem_pio2+0x24>
 800519e:	bf00      	nop
 80051a0:	54400000 	.word	0x54400000
 80051a4:	3ff921fb 	.word	0x3ff921fb
 80051a8:	1a626331 	.word	0x1a626331
 80051ac:	3dd0b461 	.word	0x3dd0b461
 80051b0:	1a600000 	.word	0x1a600000
 80051b4:	3dd0b461 	.word	0x3dd0b461
 80051b8:	2e037073 	.word	0x2e037073
 80051bc:	3ba3198a 	.word	0x3ba3198a
 80051c0:	6dc9c883 	.word	0x6dc9c883
 80051c4:	3fe45f30 	.word	0x3fe45f30
 80051c8:	2e000000 	.word	0x2e000000
 80051cc:	3ba3198a 	.word	0x3ba3198a
 80051d0:	252049c1 	.word	0x252049c1
 80051d4:	397b839a 	.word	0x397b839a
 80051d8:	3fe921fb 	.word	0x3fe921fb
 80051dc:	4002d97b 	.word	0x4002d97b
 80051e0:	3ff921fb 	.word	0x3ff921fb
 80051e4:	413921fb 	.word	0x413921fb
 80051e8:	3fe00000 	.word	0x3fe00000
 80051ec:	08005c48 	.word	0x08005c48
 80051f0:	7fefffff 	.word	0x7fefffff
 80051f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80051f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80051fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005200:	4630      	mov	r0, r6
 8005202:	460f      	mov	r7, r1
 8005204:	f7fb fc5e 	bl	8000ac4 <__aeabi_d2iz>
 8005208:	f7fb f958 	bl	80004bc <__aeabi_i2d>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4630      	mov	r0, r6
 8005212:	4639      	mov	r1, r7
 8005214:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005218:	f7fb f802 	bl	8000220 <__aeabi_dsub>
 800521c:	4b22      	ldr	r3, [pc, #136]	@ (80052a8 <__ieee754_rem_pio2+0x3f0>)
 800521e:	2200      	movs	r2, #0
 8005220:	f7fb f9b6 	bl	8000590 <__aeabi_dmul>
 8005224:	460f      	mov	r7, r1
 8005226:	4606      	mov	r6, r0
 8005228:	f7fb fc4c 	bl	8000ac4 <__aeabi_d2iz>
 800522c:	f7fb f946 	bl	80004bc <__aeabi_i2d>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4630      	mov	r0, r6
 8005236:	4639      	mov	r1, r7
 8005238:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800523c:	f7fa fff0 	bl	8000220 <__aeabi_dsub>
 8005240:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <__ieee754_rem_pio2+0x3f0>)
 8005242:	2200      	movs	r2, #0
 8005244:	f7fb f9a4 	bl	8000590 <__aeabi_dmul>
 8005248:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800524c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005250:	f04f 0803 	mov.w	r8, #3
 8005254:	2600      	movs	r6, #0
 8005256:	2700      	movs	r7, #0
 8005258:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800525c:	4632      	mov	r2, r6
 800525e:	463b      	mov	r3, r7
 8005260:	46c2      	mov	sl, r8
 8005262:	f108 38ff 	add.w	r8, r8, #4294967295
 8005266:	f7fb fbfb 	bl	8000a60 <__aeabi_dcmpeq>
 800526a:	2800      	cmp	r0, #0
 800526c:	d1f4      	bne.n	8005258 <__ieee754_rem_pio2+0x3a0>
 800526e:	4b0f      	ldr	r3, [pc, #60]	@ (80052ac <__ieee754_rem_pio2+0x3f4>)
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	2302      	movs	r3, #2
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	462a      	mov	r2, r5
 8005278:	4653      	mov	r3, sl
 800527a:	4621      	mov	r1, r4
 800527c:	a806      	add	r0, sp, #24
 800527e:	f000 f81f 	bl	80052c0 <__kernel_rem_pio2>
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	4605      	mov	r5, r0
 8005288:	f6bf ae53 	bge.w	8004f32 <__ieee754_rem_pio2+0x7a>
 800528c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005290:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005294:	e9c4 2300 	strd	r2, r3, [r4]
 8005298:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800529c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80052a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80052a4:	e740      	b.n	8005128 <__ieee754_rem_pio2+0x270>
 80052a6:	bf00      	nop
 80052a8:	41700000 	.word	0x41700000
 80052ac:	08005cc8 	.word	0x08005cc8

080052b0 <fabs>:
 80052b0:	ec51 0b10 	vmov	r0, r1, d0
 80052b4:	4602      	mov	r2, r0
 80052b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80052ba:	ec43 2b10 	vmov	d0, r2, r3
 80052be:	4770      	bx	lr

080052c0 <__kernel_rem_pio2>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	ed2d 8b02 	vpush	{d8}
 80052c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80052cc:	f112 0f14 	cmn.w	r2, #20
 80052d0:	9306      	str	r3, [sp, #24]
 80052d2:	9104      	str	r1, [sp, #16]
 80052d4:	4bc2      	ldr	r3, [pc, #776]	@ (80055e0 <__kernel_rem_pio2+0x320>)
 80052d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80052d8:	9008      	str	r0, [sp, #32]
 80052da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	9b06      	ldr	r3, [sp, #24]
 80052e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80052e6:	bfa8      	it	ge
 80052e8:	1ed4      	subge	r4, r2, #3
 80052ea:	9305      	str	r3, [sp, #20]
 80052ec:	bfb2      	itee	lt
 80052ee:	2400      	movlt	r4, #0
 80052f0:	2318      	movge	r3, #24
 80052f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80052f6:	f06f 0317 	mvn.w	r3, #23
 80052fa:	fb04 3303 	mla	r3, r4, r3, r3
 80052fe:	eb03 0b02 	add.w	fp, r3, r2
 8005302:	9b00      	ldr	r3, [sp, #0]
 8005304:	9a05      	ldr	r2, [sp, #20]
 8005306:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80055d0 <__kernel_rem_pio2+0x310>
 800530a:	eb03 0802 	add.w	r8, r3, r2
 800530e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005310:	1aa7      	subs	r7, r4, r2
 8005312:	ae20      	add	r6, sp, #128	@ 0x80
 8005314:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005318:	2500      	movs	r5, #0
 800531a:	4545      	cmp	r5, r8
 800531c:	dd12      	ble.n	8005344 <__kernel_rem_pio2+0x84>
 800531e:	9b06      	ldr	r3, [sp, #24]
 8005320:	aa20      	add	r2, sp, #128	@ 0x80
 8005322:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005326:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800532a:	2700      	movs	r7, #0
 800532c:	9b00      	ldr	r3, [sp, #0]
 800532e:	429f      	cmp	r7, r3
 8005330:	dc2e      	bgt.n	8005390 <__kernel_rem_pio2+0xd0>
 8005332:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80055d0 <__kernel_rem_pio2+0x310>
 8005336:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800533a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800533e:	46a8      	mov	r8, r5
 8005340:	2600      	movs	r6, #0
 8005342:	e01b      	b.n	800537c <__kernel_rem_pio2+0xbc>
 8005344:	42ef      	cmn	r7, r5
 8005346:	d407      	bmi.n	8005358 <__kernel_rem_pio2+0x98>
 8005348:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800534c:	f7fb f8b6 	bl	80004bc <__aeabi_i2d>
 8005350:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005354:	3501      	adds	r5, #1
 8005356:	e7e0      	b.n	800531a <__kernel_rem_pio2+0x5a>
 8005358:	ec51 0b18 	vmov	r0, r1, d8
 800535c:	e7f8      	b.n	8005350 <__kernel_rem_pio2+0x90>
 800535e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8005362:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005366:	f7fb f913 	bl	8000590 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005372:	f7fa ff57 	bl	8000224 <__adddf3>
 8005376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800537a:	3601      	adds	r6, #1
 800537c:	9b05      	ldr	r3, [sp, #20]
 800537e:	429e      	cmp	r6, r3
 8005380:	dded      	ble.n	800535e <__kernel_rem_pio2+0x9e>
 8005382:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005386:	3701      	adds	r7, #1
 8005388:	ecaa 7b02 	vstmia	sl!, {d7}
 800538c:	3508      	adds	r5, #8
 800538e:	e7cd      	b.n	800532c <__kernel_rem_pio2+0x6c>
 8005390:	9b00      	ldr	r3, [sp, #0]
 8005392:	f8dd 8000 	ldr.w	r8, [sp]
 8005396:	aa0c      	add	r2, sp, #48	@ 0x30
 8005398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800539c:	930a      	str	r3, [sp, #40]	@ 0x28
 800539e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80053a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80053a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80053aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053ac:	ab98      	add	r3, sp, #608	@ 0x260
 80053ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80053b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80053b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053ba:	ac0c      	add	r4, sp, #48	@ 0x30
 80053bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80053be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80053c2:	46a1      	mov	r9, r4
 80053c4:	46c2      	mov	sl, r8
 80053c6:	f1ba 0f00 	cmp.w	sl, #0
 80053ca:	dc77      	bgt.n	80054bc <__kernel_rem_pio2+0x1fc>
 80053cc:	4658      	mov	r0, fp
 80053ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 80053d2:	f000 fac5 	bl	8005960 <scalbn>
 80053d6:	ec57 6b10 	vmov	r6, r7, d0
 80053da:	2200      	movs	r2, #0
 80053dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80053e0:	4630      	mov	r0, r6
 80053e2:	4639      	mov	r1, r7
 80053e4:	f7fb f8d4 	bl	8000590 <__aeabi_dmul>
 80053e8:	ec41 0b10 	vmov	d0, r0, r1
 80053ec:	f000 fb34 	bl	8005a58 <floor>
 80053f0:	4b7c      	ldr	r3, [pc, #496]	@ (80055e4 <__kernel_rem_pio2+0x324>)
 80053f2:	ec51 0b10 	vmov	r0, r1, d0
 80053f6:	2200      	movs	r2, #0
 80053f8:	f7fb f8ca 	bl	8000590 <__aeabi_dmul>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	f7fa ff0c 	bl	8000220 <__aeabi_dsub>
 8005408:	460f      	mov	r7, r1
 800540a:	4606      	mov	r6, r0
 800540c:	f7fb fb5a 	bl	8000ac4 <__aeabi_d2iz>
 8005410:	9002      	str	r0, [sp, #8]
 8005412:	f7fb f853 	bl	80004bc <__aeabi_i2d>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4630      	mov	r0, r6
 800541c:	4639      	mov	r1, r7
 800541e:	f7fa feff 	bl	8000220 <__aeabi_dsub>
 8005422:	f1bb 0f00 	cmp.w	fp, #0
 8005426:	4606      	mov	r6, r0
 8005428:	460f      	mov	r7, r1
 800542a:	dd6c      	ble.n	8005506 <__kernel_rem_pio2+0x246>
 800542c:	f108 31ff 	add.w	r1, r8, #4294967295
 8005430:	ab0c      	add	r3, sp, #48	@ 0x30
 8005432:	9d02      	ldr	r5, [sp, #8]
 8005434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005438:	f1cb 0018 	rsb	r0, fp, #24
 800543c:	fa43 f200 	asr.w	r2, r3, r0
 8005440:	4415      	add	r5, r2
 8005442:	4082      	lsls	r2, r0
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	aa0c      	add	r2, sp, #48	@ 0x30
 8005448:	9502      	str	r5, [sp, #8]
 800544a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800544e:	f1cb 0217 	rsb	r2, fp, #23
 8005452:	fa43 f902 	asr.w	r9, r3, r2
 8005456:	f1b9 0f00 	cmp.w	r9, #0
 800545a:	dd64      	ble.n	8005526 <__kernel_rem_pio2+0x266>
 800545c:	9b02      	ldr	r3, [sp, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	3301      	adds	r3, #1
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	4615      	mov	r5, r2
 8005466:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800546a:	4590      	cmp	r8, r2
 800546c:	f300 80a1 	bgt.w	80055b2 <__kernel_rem_pio2+0x2f2>
 8005470:	f1bb 0f00 	cmp.w	fp, #0
 8005474:	dd07      	ble.n	8005486 <__kernel_rem_pio2+0x1c6>
 8005476:	f1bb 0f01 	cmp.w	fp, #1
 800547a:	f000 80c1 	beq.w	8005600 <__kernel_rem_pio2+0x340>
 800547e:	f1bb 0f02 	cmp.w	fp, #2
 8005482:	f000 80c8 	beq.w	8005616 <__kernel_rem_pio2+0x356>
 8005486:	f1b9 0f02 	cmp.w	r9, #2
 800548a:	d14c      	bne.n	8005526 <__kernel_rem_pio2+0x266>
 800548c:	4632      	mov	r2, r6
 800548e:	463b      	mov	r3, r7
 8005490:	4955      	ldr	r1, [pc, #340]	@ (80055e8 <__kernel_rem_pio2+0x328>)
 8005492:	2000      	movs	r0, #0
 8005494:	f7fa fec4 	bl	8000220 <__aeabi_dsub>
 8005498:	4606      	mov	r6, r0
 800549a:	460f      	mov	r7, r1
 800549c:	2d00      	cmp	r5, #0
 800549e:	d042      	beq.n	8005526 <__kernel_rem_pio2+0x266>
 80054a0:	4658      	mov	r0, fp
 80054a2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80055d8 <__kernel_rem_pio2+0x318>
 80054a6:	f000 fa5b 	bl	8005960 <scalbn>
 80054aa:	4630      	mov	r0, r6
 80054ac:	4639      	mov	r1, r7
 80054ae:	ec53 2b10 	vmov	r2, r3, d0
 80054b2:	f7fa feb5 	bl	8000220 <__aeabi_dsub>
 80054b6:	4606      	mov	r6, r0
 80054b8:	460f      	mov	r7, r1
 80054ba:	e034      	b.n	8005526 <__kernel_rem_pio2+0x266>
 80054bc:	4b4b      	ldr	r3, [pc, #300]	@ (80055ec <__kernel_rem_pio2+0x32c>)
 80054be:	2200      	movs	r2, #0
 80054c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c4:	f7fb f864 	bl	8000590 <__aeabi_dmul>
 80054c8:	f7fb fafc 	bl	8000ac4 <__aeabi_d2iz>
 80054cc:	f7fa fff6 	bl	80004bc <__aeabi_i2d>
 80054d0:	4b47      	ldr	r3, [pc, #284]	@ (80055f0 <__kernel_rem_pio2+0x330>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	4606      	mov	r6, r0
 80054d6:	460f      	mov	r7, r1
 80054d8:	f7fb f85a 	bl	8000590 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e4:	f7fa fe9c 	bl	8000220 <__aeabi_dsub>
 80054e8:	f7fb faec 	bl	8000ac4 <__aeabi_d2iz>
 80054ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80054f0:	f849 0b04 	str.w	r0, [r9], #4
 80054f4:	4639      	mov	r1, r7
 80054f6:	4630      	mov	r0, r6
 80054f8:	f7fa fe94 	bl	8000224 <__adddf3>
 80054fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005504:	e75f      	b.n	80053c6 <__kernel_rem_pio2+0x106>
 8005506:	d107      	bne.n	8005518 <__kernel_rem_pio2+0x258>
 8005508:	f108 33ff 	add.w	r3, r8, #4294967295
 800550c:	aa0c      	add	r2, sp, #48	@ 0x30
 800550e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005512:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005516:	e79e      	b.n	8005456 <__kernel_rem_pio2+0x196>
 8005518:	4b36      	ldr	r3, [pc, #216]	@ (80055f4 <__kernel_rem_pio2+0x334>)
 800551a:	2200      	movs	r2, #0
 800551c:	f7fb fabe 	bl	8000a9c <__aeabi_dcmpge>
 8005520:	2800      	cmp	r0, #0
 8005522:	d143      	bne.n	80055ac <__kernel_rem_pio2+0x2ec>
 8005524:	4681      	mov	r9, r0
 8005526:	2200      	movs	r2, #0
 8005528:	2300      	movs	r3, #0
 800552a:	4630      	mov	r0, r6
 800552c:	4639      	mov	r1, r7
 800552e:	f7fb fa97 	bl	8000a60 <__aeabi_dcmpeq>
 8005532:	2800      	cmp	r0, #0
 8005534:	f000 80c1 	beq.w	80056ba <__kernel_rem_pio2+0x3fa>
 8005538:	f108 33ff 	add.w	r3, r8, #4294967295
 800553c:	2200      	movs	r2, #0
 800553e:	9900      	ldr	r1, [sp, #0]
 8005540:	428b      	cmp	r3, r1
 8005542:	da70      	bge.n	8005626 <__kernel_rem_pio2+0x366>
 8005544:	2a00      	cmp	r2, #0
 8005546:	f000 808b 	beq.w	8005660 <__kernel_rem_pio2+0x3a0>
 800554a:	f108 38ff 	add.w	r8, r8, #4294967295
 800554e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005550:	f1ab 0b18 	sub.w	fp, fp, #24
 8005554:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f6      	beq.n	800554a <__kernel_rem_pio2+0x28a>
 800555c:	4658      	mov	r0, fp
 800555e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80055d8 <__kernel_rem_pio2+0x318>
 8005562:	f000 f9fd 	bl	8005960 <scalbn>
 8005566:	f108 0301 	add.w	r3, r8, #1
 800556a:	00da      	lsls	r2, r3, #3
 800556c:	9205      	str	r2, [sp, #20]
 800556e:	ec55 4b10 	vmov	r4, r5, d0
 8005572:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005574:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80055ec <__kernel_rem_pio2+0x32c>
 8005578:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800557c:	4646      	mov	r6, r8
 800557e:	f04f 0a00 	mov.w	sl, #0
 8005582:	2e00      	cmp	r6, #0
 8005584:	f280 80d1 	bge.w	800572a <__kernel_rem_pio2+0x46a>
 8005588:	4644      	mov	r4, r8
 800558a:	2c00      	cmp	r4, #0
 800558c:	f2c0 80ff 	blt.w	800578e <__kernel_rem_pio2+0x4ce>
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <__kernel_rem_pio2+0x338>)
 8005592:	461f      	mov	r7, r3
 8005594:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005596:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800559a:	9306      	str	r3, [sp, #24]
 800559c:	f04f 0a00 	mov.w	sl, #0
 80055a0:	f04f 0b00 	mov.w	fp, #0
 80055a4:	2600      	movs	r6, #0
 80055a6:	eba8 0504 	sub.w	r5, r8, r4
 80055aa:	e0e4      	b.n	8005776 <__kernel_rem_pio2+0x4b6>
 80055ac:	f04f 0902 	mov.w	r9, #2
 80055b0:	e754      	b.n	800545c <__kernel_rem_pio2+0x19c>
 80055b2:	f854 3b04 	ldr.w	r3, [r4], #4
 80055b6:	bb0d      	cbnz	r5, 80055fc <__kernel_rem_pio2+0x33c>
 80055b8:	b123      	cbz	r3, 80055c4 <__kernel_rem_pio2+0x304>
 80055ba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80055be:	f844 3c04 	str.w	r3, [r4, #-4]
 80055c2:	2301      	movs	r3, #1
 80055c4:	3201      	adds	r2, #1
 80055c6:	461d      	mov	r5, r3
 80055c8:	e74f      	b.n	800546a <__kernel_rem_pio2+0x1aa>
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
	...
 80055dc:	3ff00000 	.word	0x3ff00000
 80055e0:	08005e10 	.word	0x08005e10
 80055e4:	40200000 	.word	0x40200000
 80055e8:	3ff00000 	.word	0x3ff00000
 80055ec:	3e700000 	.word	0x3e700000
 80055f0:	41700000 	.word	0x41700000
 80055f4:	3fe00000 	.word	0x3fe00000
 80055f8:	08005dd0 	.word	0x08005dd0
 80055fc:	1acb      	subs	r3, r1, r3
 80055fe:	e7de      	b.n	80055be <__kernel_rem_pio2+0x2fe>
 8005600:	f108 32ff 	add.w	r2, r8, #4294967295
 8005604:	ab0c      	add	r3, sp, #48	@ 0x30
 8005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800560e:	a90c      	add	r1, sp, #48	@ 0x30
 8005610:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005614:	e737      	b.n	8005486 <__kernel_rem_pio2+0x1c6>
 8005616:	f108 32ff 	add.w	r2, r8, #4294967295
 800561a:	ab0c      	add	r3, sp, #48	@ 0x30
 800561c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005620:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005624:	e7f3      	b.n	800560e <__kernel_rem_pio2+0x34e>
 8005626:	a90c      	add	r1, sp, #48	@ 0x30
 8005628:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800562c:	3b01      	subs	r3, #1
 800562e:	430a      	orrs	r2, r1
 8005630:	e785      	b.n	800553e <__kernel_rem_pio2+0x27e>
 8005632:	3401      	adds	r4, #1
 8005634:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005638:	2a00      	cmp	r2, #0
 800563a:	d0fa      	beq.n	8005632 <__kernel_rem_pio2+0x372>
 800563c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800563e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005642:	eb0d 0503 	add.w	r5, sp, r3
 8005646:	9b06      	ldr	r3, [sp, #24]
 8005648:	aa20      	add	r2, sp, #128	@ 0x80
 800564a:	4443      	add	r3, r8
 800564c:	f108 0701 	add.w	r7, r8, #1
 8005650:	3d98      	subs	r5, #152	@ 0x98
 8005652:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005656:	4444      	add	r4, r8
 8005658:	42bc      	cmp	r4, r7
 800565a:	da04      	bge.n	8005666 <__kernel_rem_pio2+0x3a6>
 800565c:	46a0      	mov	r8, r4
 800565e:	e6a2      	b.n	80053a6 <__kernel_rem_pio2+0xe6>
 8005660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005662:	2401      	movs	r4, #1
 8005664:	e7e6      	b.n	8005634 <__kernel_rem_pio2+0x374>
 8005666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005668:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800566c:	f7fa ff26 	bl	80004bc <__aeabi_i2d>
 8005670:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8005930 <__kernel_rem_pio2+0x670>
 8005674:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800567c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005680:	46b2      	mov	sl, r6
 8005682:	f04f 0800 	mov.w	r8, #0
 8005686:	9b05      	ldr	r3, [sp, #20]
 8005688:	4598      	cmp	r8, r3
 800568a:	dd05      	ble.n	8005698 <__kernel_rem_pio2+0x3d8>
 800568c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005690:	3701      	adds	r7, #1
 8005692:	eca5 7b02 	vstmia	r5!, {d7}
 8005696:	e7df      	b.n	8005658 <__kernel_rem_pio2+0x398>
 8005698:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800569c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80056a0:	f7fa ff76 	bl	8000590 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ac:	f7fa fdba 	bl	8000224 <__adddf3>
 80056b0:	f108 0801 	add.w	r8, r8, #1
 80056b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b8:	e7e5      	b.n	8005686 <__kernel_rem_pio2+0x3c6>
 80056ba:	f1cb 0000 	rsb	r0, fp, #0
 80056be:	ec47 6b10 	vmov	d0, r6, r7
 80056c2:	f000 f94d 	bl	8005960 <scalbn>
 80056c6:	ec55 4b10 	vmov	r4, r5, d0
 80056ca:	4b9b      	ldr	r3, [pc, #620]	@ (8005938 <__kernel_rem_pio2+0x678>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	4620      	mov	r0, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	f7fb f9e3 	bl	8000a9c <__aeabi_dcmpge>
 80056d6:	b300      	cbz	r0, 800571a <__kernel_rem_pio2+0x45a>
 80056d8:	4b98      	ldr	r3, [pc, #608]	@ (800593c <__kernel_rem_pio2+0x67c>)
 80056da:	2200      	movs	r2, #0
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa ff56 	bl	8000590 <__aeabi_dmul>
 80056e4:	f7fb f9ee 	bl	8000ac4 <__aeabi_d2iz>
 80056e8:	4606      	mov	r6, r0
 80056ea:	f7fa fee7 	bl	80004bc <__aeabi_i2d>
 80056ee:	4b92      	ldr	r3, [pc, #584]	@ (8005938 <__kernel_rem_pio2+0x678>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	f7fa ff4d 	bl	8000590 <__aeabi_dmul>
 80056f6:	460b      	mov	r3, r1
 80056f8:	4602      	mov	r2, r0
 80056fa:	4629      	mov	r1, r5
 80056fc:	4620      	mov	r0, r4
 80056fe:	f7fa fd8f 	bl	8000220 <__aeabi_dsub>
 8005702:	f7fb f9df 	bl	8000ac4 <__aeabi_d2iz>
 8005706:	ab0c      	add	r3, sp, #48	@ 0x30
 8005708:	f10b 0b18 	add.w	fp, fp, #24
 800570c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005710:	f108 0801 	add.w	r8, r8, #1
 8005714:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005718:	e720      	b.n	800555c <__kernel_rem_pio2+0x29c>
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fb f9d1 	bl	8000ac4 <__aeabi_d2iz>
 8005722:	ab0c      	add	r3, sp, #48	@ 0x30
 8005724:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005728:	e718      	b.n	800555c <__kernel_rem_pio2+0x29c>
 800572a:	ab0c      	add	r3, sp, #48	@ 0x30
 800572c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005730:	f7fa fec4 	bl	80004bc <__aeabi_i2d>
 8005734:	4622      	mov	r2, r4
 8005736:	462b      	mov	r3, r5
 8005738:	f7fa ff2a 	bl	8000590 <__aeabi_dmul>
 800573c:	4652      	mov	r2, sl
 800573e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005742:	465b      	mov	r3, fp
 8005744:	4620      	mov	r0, r4
 8005746:	4629      	mov	r1, r5
 8005748:	f7fa ff22 	bl	8000590 <__aeabi_dmul>
 800574c:	3e01      	subs	r6, #1
 800574e:	4604      	mov	r4, r0
 8005750:	460d      	mov	r5, r1
 8005752:	e716      	b.n	8005582 <__kernel_rem_pio2+0x2c2>
 8005754:	9906      	ldr	r1, [sp, #24]
 8005756:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800575a:	9106      	str	r1, [sp, #24]
 800575c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005760:	f7fa ff16 	bl	8000590 <__aeabi_dmul>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4650      	mov	r0, sl
 800576a:	4659      	mov	r1, fp
 800576c:	f7fa fd5a 	bl	8000224 <__adddf3>
 8005770:	3601      	adds	r6, #1
 8005772:	4682      	mov	sl, r0
 8005774:	468b      	mov	fp, r1
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	429e      	cmp	r6, r3
 800577a:	dc01      	bgt.n	8005780 <__kernel_rem_pio2+0x4c0>
 800577c:	42ae      	cmp	r6, r5
 800577e:	dde9      	ble.n	8005754 <__kernel_rem_pio2+0x494>
 8005780:	ab48      	add	r3, sp, #288	@ 0x120
 8005782:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005786:	e9c5 ab00 	strd	sl, fp, [r5]
 800578a:	3c01      	subs	r4, #1
 800578c:	e6fd      	b.n	800558a <__kernel_rem_pio2+0x2ca>
 800578e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005790:	2b02      	cmp	r3, #2
 8005792:	dc0b      	bgt.n	80057ac <__kernel_rem_pio2+0x4ec>
 8005794:	2b00      	cmp	r3, #0
 8005796:	dc35      	bgt.n	8005804 <__kernel_rem_pio2+0x544>
 8005798:	d059      	beq.n	800584e <__kernel_rem_pio2+0x58e>
 800579a:	9b02      	ldr	r3, [sp, #8]
 800579c:	f003 0007 	and.w	r0, r3, #7
 80057a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80057a4:	ecbd 8b02 	vpop	{d8}
 80057a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d1f3      	bne.n	800579a <__kernel_rem_pio2+0x4da>
 80057b2:	9b05      	ldr	r3, [sp, #20]
 80057b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80057b8:	eb0d 0403 	add.w	r4, sp, r3
 80057bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80057c0:	4625      	mov	r5, r4
 80057c2:	46c2      	mov	sl, r8
 80057c4:	f1ba 0f00 	cmp.w	sl, #0
 80057c8:	dc69      	bgt.n	800589e <__kernel_rem_pio2+0x5de>
 80057ca:	4645      	mov	r5, r8
 80057cc:	2d01      	cmp	r5, #1
 80057ce:	f300 8087 	bgt.w	80058e0 <__kernel_rem_pio2+0x620>
 80057d2:	9c05      	ldr	r4, [sp, #20]
 80057d4:	ab48      	add	r3, sp, #288	@ 0x120
 80057d6:	441c      	add	r4, r3
 80057d8:	2000      	movs	r0, #0
 80057da:	2100      	movs	r1, #0
 80057dc:	f1b8 0f01 	cmp.w	r8, #1
 80057e0:	f300 809c 	bgt.w	800591c <__kernel_rem_pio2+0x65c>
 80057e4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80057e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80057ec:	f1b9 0f00 	cmp.w	r9, #0
 80057f0:	f040 80a6 	bne.w	8005940 <__kernel_rem_pio2+0x680>
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	e9c3 5600 	strd	r5, r6, [r3]
 80057fa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80057fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005802:	e7ca      	b.n	800579a <__kernel_rem_pio2+0x4da>
 8005804:	9d05      	ldr	r5, [sp, #20]
 8005806:	ab48      	add	r3, sp, #288	@ 0x120
 8005808:	441d      	add	r5, r3
 800580a:	4644      	mov	r4, r8
 800580c:	2000      	movs	r0, #0
 800580e:	2100      	movs	r1, #0
 8005810:	2c00      	cmp	r4, #0
 8005812:	da35      	bge.n	8005880 <__kernel_rem_pio2+0x5c0>
 8005814:	f1b9 0f00 	cmp.w	r9, #0
 8005818:	d038      	beq.n	800588c <__kernel_rem_pio2+0x5cc>
 800581a:	4602      	mov	r2, r0
 800581c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005820:	9c04      	ldr	r4, [sp, #16]
 8005822:	e9c4 2300 	strd	r2, r3, [r4]
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800582e:	f7fa fcf7 	bl	8000220 <__aeabi_dsub>
 8005832:	ad4a      	add	r5, sp, #296	@ 0x128
 8005834:	2401      	movs	r4, #1
 8005836:	45a0      	cmp	r8, r4
 8005838:	da2b      	bge.n	8005892 <__kernel_rem_pio2+0x5d2>
 800583a:	f1b9 0f00 	cmp.w	r9, #0
 800583e:	d002      	beq.n	8005846 <__kernel_rem_pio2+0x586>
 8005840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005844:	4619      	mov	r1, r3
 8005846:	9b04      	ldr	r3, [sp, #16]
 8005848:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800584c:	e7a5      	b.n	800579a <__kernel_rem_pio2+0x4da>
 800584e:	9c05      	ldr	r4, [sp, #20]
 8005850:	ab48      	add	r3, sp, #288	@ 0x120
 8005852:	441c      	add	r4, r3
 8005854:	2000      	movs	r0, #0
 8005856:	2100      	movs	r1, #0
 8005858:	f1b8 0f00 	cmp.w	r8, #0
 800585c:	da09      	bge.n	8005872 <__kernel_rem_pio2+0x5b2>
 800585e:	f1b9 0f00 	cmp.w	r9, #0
 8005862:	d002      	beq.n	800586a <__kernel_rem_pio2+0x5aa>
 8005864:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005868:	4619      	mov	r1, r3
 800586a:	9b04      	ldr	r3, [sp, #16]
 800586c:	e9c3 0100 	strd	r0, r1, [r3]
 8005870:	e793      	b.n	800579a <__kernel_rem_pio2+0x4da>
 8005872:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005876:	f7fa fcd5 	bl	8000224 <__adddf3>
 800587a:	f108 38ff 	add.w	r8, r8, #4294967295
 800587e:	e7eb      	b.n	8005858 <__kernel_rem_pio2+0x598>
 8005880:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005884:	f7fa fcce 	bl	8000224 <__adddf3>
 8005888:	3c01      	subs	r4, #1
 800588a:	e7c1      	b.n	8005810 <__kernel_rem_pio2+0x550>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	e7c6      	b.n	8005820 <__kernel_rem_pio2+0x560>
 8005892:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005896:	f7fa fcc5 	bl	8000224 <__adddf3>
 800589a:	3401      	adds	r4, #1
 800589c:	e7cb      	b.n	8005836 <__kernel_rem_pio2+0x576>
 800589e:	ed35 7b02 	vldmdb	r5!, {d7}
 80058a2:	ed8d 7b00 	vstr	d7, [sp]
 80058a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80058aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ae:	ec53 2b17 	vmov	r2, r3, d7
 80058b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80058b6:	f7fa fcb5 	bl	8000224 <__adddf3>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4606      	mov	r6, r0
 80058c0:	460f      	mov	r7, r1
 80058c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058c6:	f7fa fcab 	bl	8000220 <__aeabi_dsub>
 80058ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058ce:	f7fa fca9 	bl	8000224 <__adddf3>
 80058d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80058da:	e9c5 6700 	strd	r6, r7, [r5]
 80058de:	e771      	b.n	80057c4 <__kernel_rem_pio2+0x504>
 80058e0:	ed34 7b02 	vldmdb	r4!, {d7}
 80058e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80058e8:	ec51 0b17 	vmov	r0, r1, d7
 80058ec:	4652      	mov	r2, sl
 80058ee:	465b      	mov	r3, fp
 80058f0:	ed8d 7b00 	vstr	d7, [sp]
 80058f4:	f7fa fc96 	bl	8000224 <__adddf3>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4606      	mov	r6, r0
 80058fe:	460f      	mov	r7, r1
 8005900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005904:	f7fa fc8c 	bl	8000220 <__aeabi_dsub>
 8005908:	4652      	mov	r2, sl
 800590a:	465b      	mov	r3, fp
 800590c:	f7fa fc8a 	bl	8000224 <__adddf3>
 8005910:	3d01      	subs	r5, #1
 8005912:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005916:	e9c4 6700 	strd	r6, r7, [r4]
 800591a:	e757      	b.n	80057cc <__kernel_rem_pio2+0x50c>
 800591c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005920:	f7fa fc80 	bl	8000224 <__adddf3>
 8005924:	f108 38ff 	add.w	r8, r8, #4294967295
 8005928:	e758      	b.n	80057dc <__kernel_rem_pio2+0x51c>
 800592a:	bf00      	nop
 800592c:	f3af 8000 	nop.w
	...
 8005938:	41700000 	.word	0x41700000
 800593c:	3e700000 	.word	0x3e700000
 8005940:	9b04      	ldr	r3, [sp, #16]
 8005942:	9a04      	ldr	r2, [sp, #16]
 8005944:	601d      	str	r5, [r3, #0]
 8005946:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800594a:	605c      	str	r4, [r3, #4]
 800594c:	609f      	str	r7, [r3, #8]
 800594e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8005952:	60d3      	str	r3, [r2, #12]
 8005954:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005958:	6110      	str	r0, [r2, #16]
 800595a:	6153      	str	r3, [r2, #20]
 800595c:	e71d      	b.n	800579a <__kernel_rem_pio2+0x4da>
 800595e:	bf00      	nop

08005960 <scalbn>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	ec55 4b10 	vmov	r4, r5, d0
 8005966:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800596a:	4606      	mov	r6, r0
 800596c:	462b      	mov	r3, r5
 800596e:	b991      	cbnz	r1, 8005996 <scalbn+0x36>
 8005970:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005974:	4323      	orrs	r3, r4
 8005976:	d03b      	beq.n	80059f0 <scalbn+0x90>
 8005978:	4b33      	ldr	r3, [pc, #204]	@ (8005a48 <scalbn+0xe8>)
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	2200      	movs	r2, #0
 8005980:	f7fa fe06 	bl	8000590 <__aeabi_dmul>
 8005984:	4b31      	ldr	r3, [pc, #196]	@ (8005a4c <scalbn+0xec>)
 8005986:	429e      	cmp	r6, r3
 8005988:	4604      	mov	r4, r0
 800598a:	460d      	mov	r5, r1
 800598c:	da0f      	bge.n	80059ae <scalbn+0x4e>
 800598e:	a326      	add	r3, pc, #152	@ (adr r3, 8005a28 <scalbn+0xc8>)
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	e01e      	b.n	80059d4 <scalbn+0x74>
 8005996:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800599a:	4291      	cmp	r1, r2
 800599c:	d10b      	bne.n	80059b6 <scalbn+0x56>
 800599e:	4622      	mov	r2, r4
 80059a0:	4620      	mov	r0, r4
 80059a2:	4629      	mov	r1, r5
 80059a4:	f7fa fc3e 	bl	8000224 <__adddf3>
 80059a8:	4604      	mov	r4, r0
 80059aa:	460d      	mov	r5, r1
 80059ac:	e020      	b.n	80059f0 <scalbn+0x90>
 80059ae:	460b      	mov	r3, r1
 80059b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80059b4:	3936      	subs	r1, #54	@ 0x36
 80059b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80059ba:	4296      	cmp	r6, r2
 80059bc:	dd0d      	ble.n	80059da <scalbn+0x7a>
 80059be:	2d00      	cmp	r5, #0
 80059c0:	a11b      	add	r1, pc, #108	@ (adr r1, 8005a30 <scalbn+0xd0>)
 80059c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059c6:	da02      	bge.n	80059ce <scalbn+0x6e>
 80059c8:	a11b      	add	r1, pc, #108	@ (adr r1, 8005a38 <scalbn+0xd8>)
 80059ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ce:	a318      	add	r3, pc, #96	@ (adr r3, 8005a30 <scalbn+0xd0>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fa fddc 	bl	8000590 <__aeabi_dmul>
 80059d8:	e7e6      	b.n	80059a8 <scalbn+0x48>
 80059da:	1872      	adds	r2, r6, r1
 80059dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80059e0:	428a      	cmp	r2, r1
 80059e2:	dcec      	bgt.n	80059be <scalbn+0x5e>
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	dd06      	ble.n	80059f6 <scalbn+0x96>
 80059e8:	f36f 531e 	bfc	r3, #20, #11
 80059ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80059f0:	ec45 4b10 	vmov	d0, r4, r5
 80059f4:	bd70      	pop	{r4, r5, r6, pc}
 80059f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80059fa:	da08      	bge.n	8005a0e <scalbn+0xae>
 80059fc:	2d00      	cmp	r5, #0
 80059fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8005a28 <scalbn+0xc8>)
 8005a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a04:	dac3      	bge.n	800598e <scalbn+0x2e>
 8005a06:	a10e      	add	r1, pc, #56	@ (adr r1, 8005a40 <scalbn+0xe0>)
 8005a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a0c:	e7bf      	b.n	800598e <scalbn+0x2e>
 8005a0e:	3236      	adds	r2, #54	@ 0x36
 8005a10:	f36f 531e 	bfc	r3, #20, #11
 8005a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a18:	4620      	mov	r0, r4
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a50 <scalbn+0xf0>)
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	2200      	movs	r2, #0
 8005a20:	e7d8      	b.n	80059d4 <scalbn+0x74>
 8005a22:	bf00      	nop
 8005a24:	f3af 8000 	nop.w
 8005a28:	c2f8f359 	.word	0xc2f8f359
 8005a2c:	01a56e1f 	.word	0x01a56e1f
 8005a30:	8800759c 	.word	0x8800759c
 8005a34:	7e37e43c 	.word	0x7e37e43c
 8005a38:	8800759c 	.word	0x8800759c
 8005a3c:	fe37e43c 	.word	0xfe37e43c
 8005a40:	c2f8f359 	.word	0xc2f8f359
 8005a44:	81a56e1f 	.word	0x81a56e1f
 8005a48:	43500000 	.word	0x43500000
 8005a4c:	ffff3cb0 	.word	0xffff3cb0
 8005a50:	3c900000 	.word	0x3c900000
 8005a54:	00000000 	.word	0x00000000

08005a58 <floor>:
 8005a58:	ec51 0b10 	vmov	r0, r1, d0
 8005a5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005a68:	2e13      	cmp	r6, #19
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	4680      	mov	r8, r0
 8005a70:	dc34      	bgt.n	8005adc <floor+0x84>
 8005a72:	2e00      	cmp	r6, #0
 8005a74:	da17      	bge.n	8005aa6 <floor+0x4e>
 8005a76:	a332      	add	r3, pc, #200	@ (adr r3, 8005b40 <floor+0xe8>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fbd2 	bl	8000224 <__adddf3>
 8005a80:	2200      	movs	r2, #0
 8005a82:	2300      	movs	r3, #0
 8005a84:	f7fb f814 	bl	8000ab0 <__aeabi_dcmpgt>
 8005a88:	b150      	cbz	r0, 8005aa0 <floor+0x48>
 8005a8a:	2c00      	cmp	r4, #0
 8005a8c:	da55      	bge.n	8005b3a <floor+0xe2>
 8005a8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005a92:	432c      	orrs	r4, r5
 8005a94:	2500      	movs	r5, #0
 8005a96:	42ac      	cmp	r4, r5
 8005a98:	4c2b      	ldr	r4, [pc, #172]	@ (8005b48 <floor+0xf0>)
 8005a9a:	bf08      	it	eq
 8005a9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	e023      	b.n	8005aee <floor+0x96>
 8005aa6:	4f29      	ldr	r7, [pc, #164]	@ (8005b4c <floor+0xf4>)
 8005aa8:	4137      	asrs	r7, r6
 8005aaa:	ea01 0307 	and.w	r3, r1, r7
 8005aae:	4303      	orrs	r3, r0
 8005ab0:	d01d      	beq.n	8005aee <floor+0x96>
 8005ab2:	a323      	add	r3, pc, #140	@ (adr r3, 8005b40 <floor+0xe8>)
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f7fa fbb4 	bl	8000224 <__adddf3>
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f7fa fff6 	bl	8000ab0 <__aeabi_dcmpgt>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d0eb      	beq.n	8005aa0 <floor+0x48>
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	bfbe      	ittt	lt
 8005acc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005ad0:	4133      	asrlt	r3, r6
 8005ad2:	18e4      	addlt	r4, r4, r3
 8005ad4:	ea24 0407 	bic.w	r4, r4, r7
 8005ad8:	2500      	movs	r5, #0
 8005ada:	e7e1      	b.n	8005aa0 <floor+0x48>
 8005adc:	2e33      	cmp	r6, #51	@ 0x33
 8005ade:	dd0a      	ble.n	8005af6 <floor+0x9e>
 8005ae0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005ae4:	d103      	bne.n	8005aee <floor+0x96>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	f7fa fb9b 	bl	8000224 <__adddf3>
 8005aee:	ec41 0b10 	vmov	d0, r0, r1
 8005af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005afa:	f04f 37ff 	mov.w	r7, #4294967295
 8005afe:	40df      	lsrs	r7, r3
 8005b00:	4207      	tst	r7, r0
 8005b02:	d0f4      	beq.n	8005aee <floor+0x96>
 8005b04:	a30e      	add	r3, pc, #56	@ (adr r3, 8005b40 <floor+0xe8>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f7fa fb8b 	bl	8000224 <__adddf3>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2300      	movs	r3, #0
 8005b12:	f7fa ffcd 	bl	8000ab0 <__aeabi_dcmpgt>
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d0c2      	beq.n	8005aa0 <floor+0x48>
 8005b1a:	2c00      	cmp	r4, #0
 8005b1c:	da0a      	bge.n	8005b34 <floor+0xdc>
 8005b1e:	2e14      	cmp	r6, #20
 8005b20:	d101      	bne.n	8005b26 <floor+0xce>
 8005b22:	3401      	adds	r4, #1
 8005b24:	e006      	b.n	8005b34 <floor+0xdc>
 8005b26:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	40b3      	lsls	r3, r6
 8005b2e:	441d      	add	r5, r3
 8005b30:	4545      	cmp	r5, r8
 8005b32:	d3f6      	bcc.n	8005b22 <floor+0xca>
 8005b34:	ea25 0507 	bic.w	r5, r5, r7
 8005b38:	e7b2      	b.n	8005aa0 <floor+0x48>
 8005b3a:	2500      	movs	r5, #0
 8005b3c:	462c      	mov	r4, r5
 8005b3e:	e7af      	b.n	8005aa0 <floor+0x48>
 8005b40:	8800759c 	.word	0x8800759c
 8005b44:	7e37e43c 	.word	0x7e37e43c
 8005b48:	bff00000 	.word	0xbff00000
 8005b4c:	000fffff 	.word	0x000fffff

08005b50 <_init>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr

08005b5c <_fini>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	bf00      	nop
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr
