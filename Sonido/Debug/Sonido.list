
Sonido.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f70  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005138  08005138  00006138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005330  08005330  00007124  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005330  08005330  00006330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005338  08005338  00007124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800533c  0800533c  0000633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  08005340  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000124  08005464  00007124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08005464  00007490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8aa  00000000  00000000  00007154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221e  00000000  00000000  000159fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00017c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afe  00000000  00000000  00018a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221f9  00000000  00000000  0001952e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107c6  00000000  00000000  0003b727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d26a0  00000000  00000000  0004beed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e58d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  0011e5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00122524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000124 	.word	0x20000124
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005120 	.word	0x08005120

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000128 	.word	0x20000128
 8000204:	08005120 	.word	0x08005120

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b988 	b.w	8000e6c <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	4688      	mov	r8, r1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d14a      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d962      	bls.n	8000c50 <__udivmoddi4+0xdc>
 8000b8a:	fab2 f682 	clz	r6, r2
 8000b8e:	b14e      	cbz	r6, 8000ba4 <__udivmoddi4+0x30>
 8000b90:	f1c6 0320 	rsb	r3, r6, #32
 8000b94:	fa01 f806 	lsl.w	r8, r1, r6
 8000b98:	fa20 f303 	lsr.w	r3, r0, r3
 8000b9c:	40b7      	lsls	r7, r6
 8000b9e:	ea43 0808 	orr.w	r8, r3, r8
 8000ba2:	40b4      	lsls	r4, r6
 8000ba4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba8:	fa1f fc87 	uxth.w	ip, r7
 8000bac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bb0:	0c23      	lsrs	r3, r4, #16
 8000bb2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bba:	fb01 f20c 	mul.w	r2, r1, ip
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0x62>
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc8:	f080 80ea 	bcs.w	8000da0 <__udivmoddi4+0x22c>
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	f240 80e7 	bls.w	8000da0 <__udivmoddi4+0x22c>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	443b      	add	r3, r7
 8000bd6:	1a9a      	subs	r2, r3, r2
 8000bd8:	b2a3      	uxth	r3, r4
 8000bda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bea:	459c      	cmp	ip, r3
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0x8e>
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf4:	f080 80d6 	bcs.w	8000da4 <__udivmoddi4+0x230>
 8000bf8:	459c      	cmp	ip, r3
 8000bfa:	f240 80d3 	bls.w	8000da4 <__udivmoddi4+0x230>
 8000bfe:	443b      	add	r3, r7
 8000c00:	3802      	subs	r0, #2
 8000c02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c06:	eba3 030c 	sub.w	r3, r3, ip
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa2>
 8000c0e:	40f3      	lsrs	r3, r6
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xb6>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb0>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x14c>
 8000c32:	4573      	cmp	r3, lr
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xc8>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 8105 	bhi.w	8000e46 <__udivmoddi4+0x2d2>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4690      	mov	r8, r2
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	d0e5      	beq.n	8000c16 <__udivmoddi4+0xa2>
 8000c4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c4e:	e7e2      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	f000 8090 	beq.w	8000d76 <__udivmoddi4+0x202>
 8000c56:	fab2 f682 	clz	r6, r2
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	f040 80a4 	bne.w	8000da8 <__udivmoddi4+0x234>
 8000c60:	1a8a      	subs	r2, r1, r2
 8000c62:	0c03      	lsrs	r3, r0, #16
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	b280      	uxth	r0, r0
 8000c6a:	b2bc      	uxth	r4, r7
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x11e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x11c>
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	f200 80e0 	bhi.w	8000e50 <__udivmoddi4+0x2dc>
 8000c90:	46c4      	mov	ip, r8
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ca0:	fb02 f404 	mul.w	r4, r2, r4
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x144>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x142>
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	f200 80ca 	bhi.w	8000e4a <__udivmoddi4+0x2d6>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	1b1b      	subs	r3, r3, r4
 8000cba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x98>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa0e f401 	lsl.w	r4, lr, r1
 8000cd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	fa00 f801 	lsl.w	r8, r0, r1
 8000ce2:	fa1f fc87 	uxth.w	ip, r7
 8000ce6:	fbbe f0f9 	udiv	r0, lr, r9
 8000cea:	0c1c      	lsrs	r4, r3, #16
 8000cec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x1a0>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d06:	f080 809c 	bcs.w	8000e42 <__udivmoddi4+0x2ce>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8099 	bls.w	8000e42 <__udivmoddi4+0x2ce>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	eba4 040e 	sub.w	r4, r4, lr
 8000d18:	fa1f fe83 	uxth.w	lr, r3
 8000d1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d20:	fb09 4413 	mls	r4, r9, r3, r4
 8000d24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x1ce>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d36:	f080 8082 	bcs.w	8000e3e <__udivmoddi4+0x2ca>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d97f      	bls.n	8000e3e <__udivmoddi4+0x2ca>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d46:	eba4 040c 	sub.w	r4, r4, ip
 8000d4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d4e:	4564      	cmp	r4, ip
 8000d50:	4673      	mov	r3, lr
 8000d52:	46e1      	mov	r9, ip
 8000d54:	d362      	bcc.n	8000e1c <__udivmoddi4+0x2a8>
 8000d56:	d05f      	beq.n	8000e18 <__udivmoddi4+0x2a4>
 8000d58:	b15d      	cbz	r5, 8000d72 <__udivmoddi4+0x1fe>
 8000d5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	fa22 f301 	lsr.w	r3, r2, r1
 8000d6a:	431e      	orrs	r6, r3
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d72:	2100      	movs	r1, #0
 8000d74:	e74f      	b.n	8000c16 <__udivmoddi4+0xa2>
 8000d76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d7a:	0c01      	lsrs	r1, r0, #16
 8000d7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d80:	b280      	uxth	r0, r0
 8000d82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d86:	463b      	mov	r3, r7
 8000d88:	4638      	mov	r0, r7
 8000d8a:	463c      	mov	r4, r7
 8000d8c:	46b8      	mov	r8, r7
 8000d8e:	46be      	mov	lr, r7
 8000d90:	2620      	movs	r6, #32
 8000d92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d96:	eba2 0208 	sub.w	r2, r2, r8
 8000d9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d9e:	e766      	b.n	8000c6e <__udivmoddi4+0xfa>
 8000da0:	4601      	mov	r1, r0
 8000da2:	e718      	b.n	8000bd6 <__udivmoddi4+0x62>
 8000da4:	4610      	mov	r0, r2
 8000da6:	e72c      	b.n	8000c02 <__udivmoddi4+0x8e>
 8000da8:	f1c6 0220 	rsb	r2, r6, #32
 8000dac:	fa2e f302 	lsr.w	r3, lr, r2
 8000db0:	40b7      	lsls	r7, r6
 8000db2:	40b1      	lsls	r1, r6
 8000db4:	fa20 f202 	lsr.w	r2, r0, r2
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dc2:	b2bc      	uxth	r4, r7
 8000dc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb08 f904 	mul.w	r9, r8, r4
 8000dd2:	40b0      	lsls	r0, r6
 8000dd4:	4589      	cmp	r9, r1
 8000dd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dda:	b280      	uxth	r0, r0
 8000ddc:	d93e      	bls.n	8000e5c <__udivmoddi4+0x2e8>
 8000dde:	1879      	adds	r1, r7, r1
 8000de0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000de4:	d201      	bcs.n	8000dea <__udivmoddi4+0x276>
 8000de6:	4589      	cmp	r9, r1
 8000de8:	d81f      	bhi.n	8000e2a <__udivmoddi4+0x2b6>
 8000dea:	eba1 0109 	sub.w	r1, r1, r9
 8000dee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df2:	fb09 f804 	mul.w	r8, r9, r4
 8000df6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dfa:	b292      	uxth	r2, r2
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	4542      	cmp	r2, r8
 8000e02:	d229      	bcs.n	8000e58 <__udivmoddi4+0x2e4>
 8000e04:	18ba      	adds	r2, r7, r2
 8000e06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e0a:	d2c4      	bcs.n	8000d96 <__udivmoddi4+0x222>
 8000e0c:	4542      	cmp	r2, r8
 8000e0e:	d2c2      	bcs.n	8000d96 <__udivmoddi4+0x222>
 8000e10:	f1a9 0102 	sub.w	r1, r9, #2
 8000e14:	443a      	add	r2, r7
 8000e16:	e7be      	b.n	8000d96 <__udivmoddi4+0x222>
 8000e18:	45f0      	cmp	r8, lr
 8000e1a:	d29d      	bcs.n	8000d58 <__udivmoddi4+0x1e4>
 8000e1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	46e1      	mov	r9, ip
 8000e28:	e796      	b.n	8000d58 <__udivmoddi4+0x1e4>
 8000e2a:	eba7 0909 	sub.w	r9, r7, r9
 8000e2e:	4449      	add	r1, r9
 8000e30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e38:	fb09 f804 	mul.w	r8, r9, r4
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x282>
 8000e3e:	4673      	mov	r3, lr
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1ce>
 8000e42:	4650      	mov	r0, sl
 8000e44:	e766      	b.n	8000d14 <__udivmoddi4+0x1a0>
 8000e46:	4608      	mov	r0, r1
 8000e48:	e6fd      	b.n	8000c46 <__udivmoddi4+0xd2>
 8000e4a:	443b      	add	r3, r7
 8000e4c:	3a02      	subs	r2, #2
 8000e4e:	e733      	b.n	8000cb8 <__udivmoddi4+0x144>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	e71c      	b.n	8000c92 <__udivmoddi4+0x11e>
 8000e58:	4649      	mov	r1, r9
 8000e5a:	e79c      	b.n	8000d96 <__udivmoddi4+0x222>
 8000e5c:	eba1 0109 	sub.w	r1, r1, r9
 8000e60:	46c4      	mov	ip, r8
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	e7c4      	b.n	8000df6 <__udivmoddi4+0x282>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <generarSin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void generarSin(void){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	for (int x = 0; x < size; x++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e03a      	b.n	8000ef2 <generarSin+0x82>
		Ysine[x] = ((sin(x*2*PI/size)+1)*(4096/2));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb13 	bl	80004ac <__aeabi_i2d>
 8000e86:	a324      	add	r3, pc, #144	@ (adr r3, 8000f18 <generarSin+0xa8>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fb78 	bl	8000580 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <generarSin+0x98>)
 8000e9e:	f7ff fc99 	bl	80007d4 <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	ec43 2b17 	vmov	d7, r2, r3
 8000eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8000eae:	eef0 0a67 	vmov.f32	s1, s15
 8000eb2:	f003 f911 	bl	80040d8 <sin>
 8000eb6:	ec51 0b10 	vmov	r0, r1, d0
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <generarSin+0x9c>)
 8000ec0:	f7ff f9a8 	bl	8000214 <__adddf3>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <generarSin+0xa0>)
 8000ed2:	f7ff fb55 	bl	8000580 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe11 	bl	8000b04 <__aeabi_d2uiz>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	490b      	ldr	r1, [pc, #44]	@ (8000f14 <generarSin+0xa4>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int x = 0; x < size; x++) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef6:	ddc1      	ble.n	8000e7c <generarSin+0xc>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	40600000 	.word	0x40600000
 8000f0c:	3ff00000 	.word	0x3ff00000
 8000f10:	40a00000 	.word	0x40a00000
 8000f14:	2000028c 	.word	0x2000028c
 8000f18:	4d12d84a 	.word	0x4d12d84a
 8000f1c:	400921fb 	.word	0x400921fb

08000f20 <calcularARR>:

int calcularARR(int freq){
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if (freq == 0){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <calcularARR+0x12>
		return 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e008      	b.n	8000f44 <calcularARR+0x24>
	}

	int TF = size*freq;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]
	return ((TIM_FREQ /((PSC + 1)*TF)) - 1);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <calcularARR+0x30>)
 8000f3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f42:	3b01      	subs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	0501bd00 	.word	0x0501bd00

08000f54 <playTone>:

void playTone(int *tone, int *duration, int *pause, int Nsize){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
	for (int i = 0;  i < Nsize;  i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	e02f      	b.n	8000fc8 <playTone+0x74>
		int valorARR = calcularARR(tone[i]); //calcular el valor de ARR
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffd4 	bl	8000f20 <calcularARR>
 8000f78:	6178      	str	r0, [r7, #20]
		int dur = duration[i]; //obtener la duracion
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	4413      	add	r3, r2
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	613b      	str	r3, [r7, #16]
		int pauseBetweenTones = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
		if (pause != NULL) pauseBetweenTones = pause[i] - duration [i];
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00b      	beq.n	8000fa8 <playTone+0x54>
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	61bb      	str	r3, [r7, #24]


		TIM6->ARR = valorARR;
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <playTone+0x88>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	62d3      	str	r3, [r2, #44]	@ 0x2c
		HAL_Delay(dur); //duración nota
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 fc3b 	bl	800182c <HAL_Delay>
		noTone(); //pausa
 8000fb6:	f000 f813 	bl	8000fe0 <noTone>
		HAL_Delay(pauseBetweenTones); //duración sin tono
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fc35 	bl	800182c <HAL_Delay>
	for (int i = 0;  i < Nsize;  i++) {
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbcb      	blt.n	8000f68 <playTone+0x14>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40001000 	.word	0x40001000

08000fe0 <noTone>:

void noTone (void){
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	TIM6->ARR = 0;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <noTone+0x14>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40001000 	.word	0x40001000

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fba3 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f82f 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 f995 	bl	8001334 <MX_GPIO_Init>
  MX_DMA_Init();
 800100a:	f000 f973 	bl	80012f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800100e:	f000 f947 	bl	80012a0 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001012:	f000 f895 	bl	8001140 <MX_DAC_Init>
  MX_TIM1_Init();
 8001016:	f000 f8bd 	bl	8001194 <MX_TIM1_Init>
  MX_TIM6_Init();
 800101a:	f000 f90b 	bl	8001234 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  generarSin();
 800101e:	f7ff ff27 	bl	8000e70 <generarSin>

  HAL_DAC_Init(&hdac);
 8001022:	480b      	ldr	r0, [pc, #44]	@ (8001050 <main+0x58>)
 8001024:	f000 fd37 	bl	8001a96 <HAL_DAC_Init>

  HAL_TIM_Base_Start(&htim6);
 8001028:	480a      	ldr	r0, [pc, #40]	@ (8001054 <main+0x5c>)
 800102a:	f002 fa71 	bl	8003510 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, Ysine, size, DAC_ALIGN_12B_R);
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <main+0x60>)
 8001036:	2100      	movs	r1, #0
 8001038:	4805      	ldr	r0, [pc, #20]	@ (8001050 <main+0x58>)
 800103a:	f000 fd4f 	bl	8001adc <HAL_DAC_Start_DMA>

  playTone(Metroidmelody, Metroiddurations, NULL, (sizeof(Metroidmelody)/sizeof(Metroidmelody[0])) );
 800103e:	2323      	movs	r3, #35	@ 0x23
 8001040:	2200      	movs	r2, #0
 8001042:	4906      	ldr	r1, [pc, #24]	@ (800105c <main+0x64>)
 8001044:	4806      	ldr	r0, [pc, #24]	@ (8001060 <main+0x68>)
 8001046:	f7ff ff85 	bl	8000f54 <playTone>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104a:	bf00      	nop
 800104c:	e7fd      	b.n	800104a <main+0x52>
 800104e:	bf00      	nop
 8001050:	20000140 	.word	0x20000140
 8001054:	200001fc 	.word	0x200001fc
 8001058:	2000028c 	.word	0x2000028c
 800105c:	2000008c 	.word	0x2000008c
 8001060:	20000000 	.word	0x20000000

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	@ 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2234      	movs	r2, #52	@ 0x34
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f802 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <SystemClock_Config+0xd4>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <SystemClock_Config+0xd4>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	@ 0x40
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <SystemClock_Config+0xd4>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <SystemClock_Config+0xd8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010b0:	4a22      	ldr	r2, [pc, #136]	@ (800113c <SystemClock_Config+0xd8>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <SystemClock_Config+0xd8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d8:	2310      	movs	r3, #16
 80010da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 ff1e 	bl	8002f34 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010fe:	f000 f987 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fbbe 	bl	80028a0 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800112a:	f000 f971 	bl	8001410 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	@ 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_DAC_Init+0x4c>)
 8001150:	4a0f      	ldr	r2, [pc, #60]	@ (8001190 <MX_DAC_Init+0x50>)
 8001152:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_DAC_Init+0x4c>)
 8001156:	f000 fc9e 	bl	8001a96 <HAL_DAC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001160:	f000 f956 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001164:	2304      	movs	r3, #4
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <MX_DAC_Init+0x4c>)
 8001174:	f000 fd92 	bl	8001c9c <HAL_DAC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800117e:	f000 f947 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000140 	.word	0x20000140
 8001190:	40007400 	.word	0x40007400

08001194 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <MX_TIM1_Init+0x98>)
 80011b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001230 <MX_TIM1_Init+0x9c>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	@ (800122c <MX_TIM1_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_TIM1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_TIM1_Init+0x98>)
 80011c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_TIM1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <MX_TIM1_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_TIM1_Init+0x98>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011dc:	4813      	ldr	r0, [pc, #76]	@ (800122c <MX_TIM1_Init+0x98>)
 80011de:	f002 f947 	bl	8003470 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011e8:	f000 f912 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <MX_TIM1_Init+0x98>)
 80011fa:	f002 f9f1 	bl	80035e0 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001204:	f000 f904 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_TIM1_Init+0x98>)
 8001216:	f002 fbf1 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001220:	f000 f8f6 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001b4 	.word	0x200001b4
 8001230:	40010000 	.word	0x40010000

08001234 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <MX_TIM6_Init+0x64>)
 8001244:	4a15      	ldr	r2, [pc, #84]	@ (800129c <MX_TIM6_Init+0x68>)
 8001246:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MX_TIM6_Init+0x64>)
 800124a:	2201      	movs	r2, #1
 800124c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_TIM6_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_TIM6_Init+0x64>)
 8001256:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800125a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_TIM6_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001262:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_TIM6_Init+0x64>)
 8001264:	f002 f904 	bl	8003470 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800126e:	f000 f8cf 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001272:	2320      	movs	r3, #32
 8001274:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	@ (8001298 <MX_TIM6_Init+0x64>)
 8001280:	f002 fbbc 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800128a:	f000 f8c1 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001fc 	.word	0x200001fc
 800129c:	40001000 	.word	0x40001000

080012a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <MX_USART2_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d8:	f002 fc0c 	bl	8003af4 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 f895 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000244 	.word	0x20000244
 80012f0:	40004400 	.word	0x40004400

080012f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <MX_DMA_Init+0x3c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <MX_DMA_Init+0x3c>)
 8001304:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_DMA_Init+0x3c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2010      	movs	r0, #16
 800131c:	f000 fb85 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001320:	2010      	movs	r0, #16
 8001322:	f000 fb9e 	bl	8001a62 <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b2d      	ldr	r3, [pc, #180]	@ (8001404 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a2c      	ldr	r2, [pc, #176]	@ (8001404 <MX_GPIO_Init+0xd0>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a25      	ldr	r2, [pc, #148]	@ (8001404 <MX_GPIO_Init+0xd0>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <MX_GPIO_Init+0xd0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <MX_GPIO_Init+0xd0>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <MX_GPIO_Init+0xd0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <MX_GPIO_Init+0xd0>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <MX_GPIO_Init+0xd0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2120      	movs	r1, #32
 80013be:	4812      	ldr	r0, [pc, #72]	@ (8001408 <MX_GPIO_Init+0xd4>)
 80013c0:	f001 fa54 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <MX_GPIO_Init+0xd8>)
 80013dc:	f001 f8b2 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013e0:	2320      	movs	r3, #32
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_GPIO_Init+0xd4>)
 80013f8:	f001 f8a4 	bl	8002544 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020800 	.word	0x40020800

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_MspInit+0x4c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001430:	6453      	str	r3, [r2, #68]	@ 0x44
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	@ (8001468 <HAL_MspInit+0x4c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	@ 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145a:	2007      	movs	r0, #7
 800145c:	f000 fada 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2f      	ldr	r2, [pc, #188]	@ (8001548 <HAL_DAC_MspInit+0xdc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d158      	bne.n	8001540 <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <HAL_DAC_MspInit+0xe0>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	4a2d      	ldr	r2, [pc, #180]	@ (800154c <HAL_DAC_MspInit+0xe0>)
 8001498:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800149c:	6413      	str	r3, [r2, #64]	@ 0x40
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <HAL_DAC_MspInit+0xe0>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <HAL_DAC_MspInit+0xe0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a26      	ldr	r2, [pc, #152]	@ (800154c <HAL_DAC_MspInit+0xe0>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_DAC_MspInit+0xe0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c6:	2310      	movs	r3, #16
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ca:	2303      	movs	r3, #3
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	481d      	ldr	r0, [pc, #116]	@ (8001550 <HAL_DAC_MspInit+0xe4>)
 80014da:	f001 f833 	bl	8002544 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80014de:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 80014e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <HAL_DAC_MspInit+0xec>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 80014e6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 80014ee:	2240      	movs	r2, #64	@ 0x40
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 8001502:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001506:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 800150a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800150e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001510:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 8001512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001516:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001518:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001524:	480b      	ldr	r0, [pc, #44]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 8001526:	f000 fc9d 	bl	8001e64 <HAL_DMA_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001530:	f7ff ff6e 	bl	8001410 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <HAL_DAC_MspInit+0xe8>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	@ 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40007400 	.word	0x40007400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000
 8001554:	20000154 	.word	0x20000154
 8001558:	40026088 	.word	0x40026088

0800155c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <HAL_TIM_Base_MspInit+0x64>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10e      	bne.n	800158c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a13      	ldr	r2, [pc, #76]	@ (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800158a:	e012      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_TIM_Base_MspInit+0x6c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10d      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40001000 	.word	0x40001000

080015cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	@ (8001650 <HAL_UART_MspInit+0x84>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12b      	bne.n	8001646 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_UART_MspInit+0x88>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a17      	ldr	r2, [pc, #92]	@ (8001654 <HAL_UART_MspInit+0x88>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_UART_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <HAL_UART_MspInit+0x88>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001626:	230c      	movs	r3, #12
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001636:	2307      	movs	r3, #7
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <HAL_UART_MspInit+0x8c>)
 8001642:	f000 ff7f 	bl	8002544 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	@ 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40004400 	.word	0x40004400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b2:	f000 f89b 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <DMA1_Stream5_IRQHandler+0x10>)
 80016c2:	f000 fcd5 	bl	8002070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000154 	.word	0x20000154

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800172c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016f8:	f7ff ffea 	bl	80016d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	@ (8001734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	@ (8001740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001722:	f002 fcb3 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff fc67 	bl	8000ff8 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001738:	08005340 	.word	0x08005340
  ldr r2, =_sbss
 800173c:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001740:	20000490 	.word	0x20000490

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	@ (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f94f 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fe4e 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f967 	bl	8001a7e <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f92f 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000118 	.word	0x20000118
 80017e4:	20000120 	.word	0x20000120
 80017e8:	2000011c 	.word	0x2000011c

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000120 	.word	0x20000120
 8001810:	2000048c 	.word	0x2000048c

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2000048c 	.word	0x2000048c

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000120 	.word	0x20000120

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	@ (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	@ (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	@ (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e014      	b.n	8001ad2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fcd7 	bl	800146c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0a2      	b.n	8001c3e <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	795b      	ldrb	r3, [r3, #5]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_DAC_Start_DMA+0x28>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e09c      	b.n	8001c3e <HAL_DAC_Start_DMA+0x162>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d129      	bne.n	8001b6a <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c48 <HAL_DAC_Start_DMA+0x16c>)
 8001b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4a4a      	ldr	r2, [pc, #296]	@ (8001c4c <HAL_DAC_Start_DMA+0x170>)
 8001b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4a49      	ldr	r2, [pc, #292]	@ (8001c50 <HAL_DAC_Start_DMA+0x174>)
 8001b2c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_DAC_Start_DMA+0x70>
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d005      	beq.n	8001b56 <HAL_DAC_Start_DMA+0x7a>
 8001b4a:	e009      	b.n	8001b60 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3308      	adds	r3, #8
 8001b52:	613b      	str	r3, [r7, #16]
        break;
 8001b54:	e033      	b.n	8001bbe <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	330c      	adds	r3, #12
 8001b5c:	613b      	str	r3, [r7, #16]
        break;
 8001b5e:	e02e      	b.n	8001bbe <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3310      	adds	r3, #16
 8001b66:	613b      	str	r3, [r7, #16]
        break;
 8001b68:	e029      	b.n	8001bbe <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4a39      	ldr	r2, [pc, #228]	@ (8001c54 <HAL_DAC_Start_DMA+0x178>)
 8001b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a38      	ldr	r2, [pc, #224]	@ (8001c58 <HAL_DAC_Start_DMA+0x17c>)
 8001b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4a37      	ldr	r2, [pc, #220]	@ (8001c5c <HAL_DAC_Start_DMA+0x180>)
 8001b80:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b90:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DAC_Start_DMA+0xc4>
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d005      	beq.n	8001baa <HAL_DAC_Start_DMA+0xce>
 8001b9e:	e009      	b.n	8001bb4 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3314      	adds	r3, #20
 8001ba6:	613b      	str	r3, [r7, #16]
        break;
 8001ba8:	e009      	b.n	8001bbe <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3318      	adds	r3, #24
 8001bb0:	613b      	str	r3, [r7, #16]
        break;
 8001bb2:	e004      	b.n	8001bbe <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	331c      	adds	r3, #28
 8001bba:	613b      	str	r3, [r7, #16]
        break;
 8001bbc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6898      	ldr	r0, [r3, #8]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	f000 f9ef 	bl	8001fc0 <HAL_DMA_Start_IT>
 8001be2:	4603      	mov	r3, r0
 8001be4:	75fb      	strb	r3, [r7, #23]
 8001be6:	e010      	b.n	8001c0a <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68d8      	ldr	r0, [r3, #12]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	f000 f9dd 	bl	8001fc0 <HAL_DMA_Start_IT>
 8001c06:	4603      	mov	r3, r0
 8001c08:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2201      	movs	r2, #1
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e005      	b.n	8001c3c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	08001d4f 	.word	0x08001d4f
 8001c4c:	08001d71 	.word	0x08001d71
 8001c50:	08001d8d 	.word	0x08001d8d
 8001c54:	08001df7 	.word	0x08001df7
 8001c58:	08001e19 	.word	0x08001e19
 8001c5c:	08001e35 	.word	0x08001e35

08001c60 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_DAC_ConfigChannel+0x1c>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e042      	b.n	8001d42 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	795b      	ldrb	r3, [r3, #5]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_DAC_ConfigChannel+0x2c>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e03c      	b.n	8001d42 <HAL_DAC_ConfigChannel+0xa6>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	22c0      	movs	r2, #192	@ 0xc0
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff ff7f 	bl	8001c60 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	711a      	strb	r2, [r3, #4]
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff ff78 	bl	8001c74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f043 0204 	orr.w	r2, r3, #4
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff ff6e 	bl	8001c88 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	711a      	strb	r2, [r3, #4]
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e02:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff ffd8 	bl	8001dba <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	711a      	strb	r2, [r3, #4]
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e24:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff ffd1 	bl	8001dce <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f043 0204 	orr.w	r2, r3, #4
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff ffc7 	bl	8001de2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	711a      	strb	r2, [r3, #4]
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fcd0 	bl	8001814 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e099      	b.n	8001fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea0:	e00f      	b.n	8001ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea2:	f7ff fcb7 	bl	8001814 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d908      	bls.n	8001ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e078      	b.n	8001fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e8      	bne.n	8001ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <HAL_DMA_Init+0x158>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	4313      	orrs	r3, r2
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0307 	bic.w	r3, r3, #7
 8001f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d117      	bne.n	8001f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fa6f 	bl	800244c <DMA_CheckFifoParam>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f82:	2301      	movs	r3, #1
 8001f84:	e016      	b.n	8001fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa26 	bl	80023e0 <DMA_CalcBaseAndBitshift>
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	223f      	movs	r2, #63	@ 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f010803f 	.word	0xf010803f

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_Start_IT+0x26>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e040      	b.n	8002068 <HAL_DMA_Start_IT+0xa8>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d12f      	bne.n	800205a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9b8 	bl	8002384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	223f      	movs	r2, #63	@ 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0216 	orr.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e005      	b.n	8002066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800207c:	4b8e      	ldr	r3, [pc, #568]	@ (80022b8 <HAL_DMA_IRQHandler+0x248>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a8e      	ldr	r2, [pc, #568]	@ (80022bc <HAL_DMA_IRQHandler+0x24c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a9b      	lsrs	r3, r3, #10
 8002088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	2208      	movs	r2, #8
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0204 	bic.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	2208      	movs	r2, #8
 80020ca:	409a      	lsls	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	2201      	movs	r2, #1
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002116:	2204      	movs	r2, #4
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	2204      	movs	r2, #4
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214c:	2210      	movs	r2, #16
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d043      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03c      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	2210      	movs	r2, #16
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e01f      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	2220      	movs	r2, #32
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 808f 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8087 	beq.w	8002310 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	2220      	movs	r2, #32
 8002208:	409a      	lsls	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b05      	cmp	r3, #5
 8002218:	d136      	bne.n	8002288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0216 	bic.w	r2, r2, #22
 8002228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HAL_DMA_IRQHandler+0x1da>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0208 	bic.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	223f      	movs	r2, #63	@ 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d07e      	beq.n	800237c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
        }
        return;
 8002286:	e079      	b.n	800237c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01d      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d031      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e02c      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
 80022b6:	bf00      	nop
 80022b8:	20000118 	.word	0x20000118
 80022bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e01e      	b.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0210 	bic.w	r2, r2, #16
 80022ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002314:	2b00      	cmp	r3, #0
 8002316:	d032      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d022      	beq.n	800236a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2205      	movs	r2, #5
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	3301      	adds	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d307      	bcc.n	8002358 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_DMA_IRQHandler+0x2cc>
 8002356:	e000      	b.n	800235a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002358:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e000      	b.n	800237e <HAL_DMA_IRQHandler+0x30e>
        return;
 800237c:	bf00      	nop
    }
  }
}
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b40      	cmp	r3, #64	@ 0x40
 80023b0:	d108      	bne.n	80023c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023c2:	e007      	b.n	80023d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b10      	subs	r3, #16
 80023f0:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <DMA_CalcBaseAndBitshift+0x64>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023fa:	4a13      	ldr	r2, [pc, #76]	@ (8002448 <DMA_CalcBaseAndBitshift+0x68>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d909      	bls.n	8002422 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	1d1a      	adds	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002420:	e007      	b.n	8002432 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	aaaaaaab 	.word	0xaaaaaaab
 8002448:	08005150 	.word	0x08005150

0800244c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11f      	bne.n	80024a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d856      	bhi.n	800251a <DMA_CheckFifoParam+0xce>
 800246c:	a201      	add	r2, pc, #4	@ (adr r2, 8002474 <DMA_CheckFifoParam+0x28>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002485 	.word	0x08002485
 8002478:	08002497 	.word	0x08002497
 800247c:	08002485 	.word	0x08002485
 8002480:	0800251b 	.word	0x0800251b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d046      	beq.n	800251e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e043      	b.n	800251e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800249e:	d140      	bne.n	8002522 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e03d      	b.n	8002522 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ae:	d121      	bne.n	80024f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d837      	bhi.n	8002526 <DMA_CheckFifoParam+0xda>
 80024b6:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <DMA_CheckFifoParam+0x70>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	080024d3 	.word	0x080024d3
 80024c4:	080024cd 	.word	0x080024cd
 80024c8:	080024e5 	.word	0x080024e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e030      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d025      	beq.n	800252a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e2:	e022      	b.n	800252a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ec:	d11f      	bne.n	800252e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024f2:	e01c      	b.n	800252e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d903      	bls.n	8002502 <DMA_CheckFifoParam+0xb6>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002500:	e018      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      break;
 8002506:	e015      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00e      	beq.n	8002532 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      break;
 8002518:	e00b      	b.n	8002532 <DMA_CheckFifoParam+0xe6>
      break;
 800251a:	bf00      	nop
 800251c:	e00a      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
 8002520:	e008      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
 8002524:	e006      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
 8002528:	e004      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;   
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
    }
  } 
  
  return status; 
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e165      	b.n	800282c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 8154 	bne.w	8002826 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	2b02      	cmp	r3, #2
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80ae 	beq.w	8002826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002844 <HAL_GPIO_Init+0x300>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002844 <HAL_GPIO_Init+0x300>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b5a      	ldr	r3, [pc, #360]	@ (8002844 <HAL_GPIO_Init+0x300>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a58      	ldr	r2, [pc, #352]	@ (8002848 <HAL_GPIO_Init+0x304>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4f      	ldr	r2, [pc, #316]	@ (800284c <HAL_GPIO_Init+0x308>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d025      	beq.n	800275e <HAL_GPIO_Init+0x21a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4e      	ldr	r2, [pc, #312]	@ (8002850 <HAL_GPIO_Init+0x30c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <HAL_GPIO_Init+0x216>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4d      	ldr	r2, [pc, #308]	@ (8002854 <HAL_GPIO_Init+0x310>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x212>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4c      	ldr	r2, [pc, #304]	@ (8002858 <HAL_GPIO_Init+0x314>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x20e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4b      	ldr	r2, [pc, #300]	@ (800285c <HAL_GPIO_Init+0x318>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x20a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4a      	ldr	r2, [pc, #296]	@ (8002860 <HAL_GPIO_Init+0x31c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x206>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a49      	ldr	r2, [pc, #292]	@ (8002864 <HAL_GPIO_Init+0x320>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x202>
 8002742:	2306      	movs	r3, #6
 8002744:	e00c      	b.n	8002760 <HAL_GPIO_Init+0x21c>
 8002746:	2307      	movs	r3, #7
 8002748:	e00a      	b.n	8002760 <HAL_GPIO_Init+0x21c>
 800274a:	2305      	movs	r3, #5
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x21c>
 800274e:	2304      	movs	r3, #4
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x21c>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x21c>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x21c>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x21c>
 800275e:	2300      	movs	r3, #0
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002770:	4935      	ldr	r1, [pc, #212]	@ (8002848 <HAL_GPIO_Init+0x304>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277e:	4b3a      	ldr	r3, [pc, #232]	@ (8002868 <HAL_GPIO_Init+0x324>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a2:	4a31      	ldr	r2, [pc, #196]	@ (8002868 <HAL_GPIO_Init+0x324>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002868 <HAL_GPIO_Init+0x324>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027cc:	4a26      	ldr	r2, [pc, #152]	@ (8002868 <HAL_GPIO_Init+0x324>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d2:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <HAL_GPIO_Init+0x324>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <HAL_GPIO_Init+0x324>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <HAL_GPIO_Init+0x324>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002820:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <HAL_GPIO_Init+0x324>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	f67f ae96 	bls.w	8002560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40021400 	.word	0x40021400
 8002864:	40021800 	.word	0x40021800
 8002868:	40013c00 	.word	0x40013c00

0800286c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
 8002878:	4613      	mov	r3, r2
 800287a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002888:	e003      	b.n	8002892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	041a      	lsls	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	619a      	str	r2, [r3, #24]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0cc      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b68      	ldr	r3, [pc, #416]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90c      	bls.n	80028dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b63      	ldr	r3, [pc, #396]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0b8      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f4:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a58      	ldr	r2, [pc, #352]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800290c:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a52      	ldr	r2, [pc, #328]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b50      	ldr	r3, [pc, #320]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	494d      	ldr	r1, [pc, #308]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d044      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b47      	ldr	r3, [pc, #284]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d119      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e067      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b37      	ldr	r3, [pc, #220]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4934      	ldr	r1, [pc, #208]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fe ff40 	bl	8001814 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe ff3c 	bl	8001814 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e04f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20c      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e032      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4916      	ldr	r1, [pc, #88]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490e      	ldr	r1, [pc, #56]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a26:	f000 f855 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	490a      	ldr	r1, [pc, #40]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	5ccb      	ldrb	r3, [r1, r3]
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fea0 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	08005138 	.word	0x08005138
 8002a64:	20000118 	.word	0x20000118
 8002a68:	2000011c 	.word	0x2000011c

08002a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b03      	ldr	r3, [pc, #12]	@ (8002a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000118 	.word	0x20000118

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a88:	f7ff fff0 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	0a9b      	lsrs	r3, r3, #10
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4903      	ldr	r1, [pc, #12]	@ (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08005148 	.word	0x08005148

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab0:	f7ff ffdc 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0b5b      	lsrs	r3, r3, #13
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	@ (8002ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08005148 	.word	0x08005148

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b0ae      	sub	sp, #184	@ 0xb8
 8002ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002afa:	4bcb      	ldr	r3, [pc, #812]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	f200 8206 	bhi.w	8002f14 <HAL_RCC_GetSysClockFreq+0x440>
 8002b08:	a201      	add	r2, pc, #4	@ (adr r2, 8002b10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002f15 	.word	0x08002f15
 8002b18:	08002f15 	.word	0x08002f15
 8002b1c:	08002f15 	.word	0x08002f15
 8002b20:	08002b4d 	.word	0x08002b4d
 8002b24:	08002f15 	.word	0x08002f15
 8002b28:	08002f15 	.word	0x08002f15
 8002b2c:	08002f15 	.word	0x08002f15
 8002b30:	08002b55 	.word	0x08002b55
 8002b34:	08002f15 	.word	0x08002f15
 8002b38:	08002f15 	.word	0x08002f15
 8002b3c:	08002f15 	.word	0x08002f15
 8002b40:	08002d45 	.word	0x08002d45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4bb9      	ldr	r3, [pc, #740]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b4a:	e1e7      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4c:	4bb8      	ldr	r3, [pc, #736]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b52:	e1e3      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b54:	4bb4      	ldr	r3, [pc, #720]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b60:	4bb1      	ldr	r3, [pc, #708]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d071      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6c:	4bae      	ldr	r3, [pc, #696]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	f04f 0000 	mov.w	r0, #0
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	0159      	lsls	r1, r3, #5
 8002ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba4:	0150      	lsls	r0, r2, #5
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4621      	mov	r1, r4
 8002bac:	1a51      	subs	r1, r2, r1
 8002bae:	6439      	str	r1, [r7, #64]	@ 0x40
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	018b      	lsls	r3, r1, #6
 8002bc8:	4641      	mov	r1, r8
 8002bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bce:	4641      	mov	r1, r8
 8002bd0:	018a      	lsls	r2, r1, #6
 8002bd2:	4641      	mov	r1, r8
 8002bd4:	1a51      	subs	r1, r2, r1
 8002bd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bd8:	4649      	mov	r1, r9
 8002bda:	eb63 0301 	sbc.w	r3, r3, r1
 8002bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002bec:	4649      	mov	r1, r9
 8002bee:	00cb      	lsls	r3, r1, #3
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	00ca      	lsls	r2, r1, #3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4622      	mov	r2, r4
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c06:	462b      	mov	r3, r5
 8002c08:	460a      	mov	r2, r1
 8002c0a:	eb42 0303 	adc.w	r3, r2, r3
 8002c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	024b      	lsls	r3, r1, #9
 8002c20:	4621      	mov	r1, r4
 8002c22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c26:	4621      	mov	r1, r4
 8002c28:	024a      	lsls	r2, r1, #9
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002c40:	f7fd ff80 	bl	8000b44 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c4e:	e067      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c50:	4b75      	ldr	r3, [pc, #468]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c72:	4622      	mov	r2, r4
 8002c74:	462b      	mov	r3, r5
 8002c76:	f04f 0000 	mov.w	r0, #0
 8002c7a:	f04f 0100 	mov.w	r1, #0
 8002c7e:	0159      	lsls	r1, r3, #5
 8002c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c84:	0150      	lsls	r0, r2, #5
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	1a51      	subs	r1, r2, r1
 8002c8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c90:	4629      	mov	r1, r5
 8002c92:	eb63 0301 	sbc.w	r3, r3, r1
 8002c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	018b      	lsls	r3, r1, #6
 8002ca8:	4641      	mov	r1, r8
 8002caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cae:	4641      	mov	r1, r8
 8002cb0:	018a      	lsls	r2, r1, #6
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cb8:	4649      	mov	r1, r9
 8002cba:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd2:	4692      	mov	sl, r2
 8002cd4:	469b      	mov	fp, r3
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	eb1a 0303 	adds.w	r3, sl, r3
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	462b      	mov	r3, r5
 8002ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	028b      	lsls	r3, r1, #10
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	028a      	lsls	r2, r1, #10
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d08:	2200      	movs	r2, #0
 8002d0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d12:	f7fd ff17 	bl	8000b44 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d20:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d42:	e0eb      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d44:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d50:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d06b      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5c:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	2200      	movs	r2, #0
 8002d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d70:	2300      	movs	r3, #0
 8002d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d78:	4622      	mov	r2, r4
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	0159      	lsls	r1, r3, #5
 8002d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d8a:	0150      	lsls	r0, r2, #5
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4621      	mov	r1, r4
 8002d92:	1a51      	subs	r1, r2, r1
 8002d94:	61b9      	str	r1, [r7, #24]
 8002d96:	4629      	mov	r1, r5
 8002d98:	eb63 0301 	sbc.w	r3, r3, r1
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002daa:	4659      	mov	r1, fp
 8002dac:	018b      	lsls	r3, r1, #6
 8002dae:	4651      	mov	r1, sl
 8002db0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002db4:	4651      	mov	r1, sl
 8002db6:	018a      	lsls	r2, r1, #6
 8002db8:	4651      	mov	r1, sl
 8002dba:	ebb2 0801 	subs.w	r8, r2, r1
 8002dbe:	4659      	mov	r1, fp
 8002dc0:	eb63 0901 	sbc.w	r9, r3, r1
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dd8:	4690      	mov	r8, r2
 8002dda:	4699      	mov	r9, r3
 8002ddc:	4623      	mov	r3, r4
 8002dde:	eb18 0303 	adds.w	r3, r8, r3
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	462b      	mov	r3, r5
 8002de6:	eb49 0303 	adc.w	r3, r9, r3
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002df8:	4629      	mov	r1, r5
 8002dfa:	024b      	lsls	r3, r1, #9
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e02:	4621      	mov	r1, r4
 8002e04:	024a      	lsls	r2, r1, #9
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e0e:	2200      	movs	r2, #0
 8002e10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e18:	f7fd fe94 	bl	8000b44 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e26:	e065      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x420>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e34:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	099b      	lsrs	r3, r3, #6
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	4611      	mov	r1, r2
 8002e40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e46:	2300      	movs	r3, #0
 8002e48:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002e4e:	4642      	mov	r2, r8
 8002e50:	464b      	mov	r3, r9
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e60:	0150      	lsls	r0, r2, #5
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4641      	mov	r1, r8
 8002e68:	1a51      	subs	r1, r2, r1
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e80:	4659      	mov	r1, fp
 8002e82:	018b      	lsls	r3, r1, #6
 8002e84:	4651      	mov	r1, sl
 8002e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	018a      	lsls	r2, r1, #6
 8002e8e:	4651      	mov	r1, sl
 8002e90:	1a54      	subs	r4, r2, r1
 8002e92:	4659      	mov	r1, fp
 8002e94:	eb63 0501 	sbc.w	r5, r3, r1
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	00eb      	lsls	r3, r5, #3
 8002ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea6:	00e2      	lsls	r2, r4, #3
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	461d      	mov	r5, r3
 8002eac:	4643      	mov	r3, r8
 8002eae:	18e3      	adds	r3, r4, r3
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	eb45 0303 	adc.w	r3, r5, r3
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	028b      	lsls	r3, r1, #10
 8002eca:	4621      	mov	r1, r4
 8002ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	028a      	lsls	r2, r1, #10
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002edc:	2200      	movs	r2, #0
 8002ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ee0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ee2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ee6:	f7fd fe2d 	bl	8000b44 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4613      	mov	r3, r2
 8002ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	0f1b      	lsrs	r3, r3, #28
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f12:	e003      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	37b8      	adds	r7, #184	@ 0xb8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	00f42400 	.word	0x00f42400

08002f34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e28d      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8083 	beq.w	800305a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f54:	4b94      	ldr	r3, [pc, #592]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d019      	beq.n	8002f94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f60:	4b91      	ldr	r3, [pc, #580]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f78:	d00c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d112      	bne.n	8002fac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f86:	4b88      	ldr	r3, [pc, #544]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4b84      	ldr	r3, [pc, #528]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05b      	beq.n	8003058 <HAL_RCC_OscConfig+0x124>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d157      	bne.n	8003058 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e25a      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x90>
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7b      	ldr	r2, [pc, #492]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xcc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xb4>
 8002fce:	4b76      	ldr	r3, [pc, #472]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b73      	ldr	r3, [pc, #460]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a72      	ldr	r2, [pc, #456]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xcc>
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6e      	ldr	r2, [pc, #440]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6b      	ldr	r2, [pc, #428]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fc04 	bl	8001814 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fc00 	bl	8001814 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e21f      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b61      	ldr	r3, [pc, #388]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xdc>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fbf0 	bl	8001814 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fbec 	bl	8001814 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	@ 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e20b      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b57      	ldr	r3, [pc, #348]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x104>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d06f      	beq.n	8003146 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003066:	4b50      	ldr	r3, [pc, #320]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d017      	beq.n	80030a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003072:	4b4d      	ldr	r3, [pc, #308]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
        || \
 800307a:	2b08      	cmp	r3, #8
 800307c:	d105      	bne.n	800308a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800307e:	4b4a      	ldr	r3, [pc, #296]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308a:	4b47      	ldr	r3, [pc, #284]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d11c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b44      	ldr	r3, [pc, #272]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d116      	bne.n	80030d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	4b41      	ldr	r3, [pc, #260]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x186>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e1d3      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b3b      	ldr	r3, [pc, #236]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4937      	ldr	r1, [pc, #220]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	e03a      	b.n	8003146 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d8:	4b34      	ldr	r3, [pc, #208]	@ (80031ac <HAL_RCC_OscConfig+0x278>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe fb99 	bl	8001814 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe fb95 	bl	8001814 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e1b4      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b28      	ldr	r3, [pc, #160]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4925      	ldr	r1, [pc, #148]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	e015      	b.n	8003146 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b24      	ldr	r3, [pc, #144]	@ (80031ac <HAL_RCC_OscConfig+0x278>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fb78 	bl	8001814 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7fe fb74 	bl	8001814 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e193      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d036      	beq.n	80031c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <HAL_RCC_OscConfig+0x27c>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fb58 	bl	8001814 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe fb54 	bl	8001814 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e173      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_RCC_OscConfig+0x274>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x234>
 8003186:	e01b      	b.n	80031c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RCC_OscConfig+0x27c>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe fb41 	bl	8001814 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	e00e      	b.n	80031b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe fb3d 	bl	8001814 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d907      	bls.n	80031b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e15c      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	42470000 	.word	0x42470000
 80031b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	4b8a      	ldr	r3, [pc, #552]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80031b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ea      	bne.n	8003196 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8097 	beq.w	80032fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d2:	4b83      	ldr	r3, [pc, #524]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	4b7f      	ldr	r3, [pc, #508]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	4a7e      	ldr	r2, [pc, #504]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ee:	4b7c      	ldr	r3, [pc, #496]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b79      	ldr	r3, [pc, #484]	@ (80033e4 <HAL_RCC_OscConfig+0x4b0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b76      	ldr	r3, [pc, #472]	@ (80033e4 <HAL_RCC_OscConfig+0x4b0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a75      	ldr	r2, [pc, #468]	@ (80033e4 <HAL_RCC_OscConfig+0x4b0>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fe fafd 	bl	8001814 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe faf9 	bl	8001814 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e118      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b6c      	ldr	r3, [pc, #432]	@ (80033e4 <HAL_RCC_OscConfig+0x4b0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x31e>
 8003244:	4b66      	ldr	r3, [pc, #408]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003248:	4a65      	ldr	r2, [pc, #404]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003250:	e01c      	b.n	800328c <HAL_RCC_OscConfig+0x358>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b05      	cmp	r3, #5
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x340>
 800325a:	4b61      	ldr	r3, [pc, #388]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	4a60      	ldr	r2, [pc, #384]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	@ 0x70
 8003266:	4b5e      	ldr	r3, [pc, #376]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326a:	4a5d      	ldr	r2, [pc, #372]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6713      	str	r3, [r2, #112]	@ 0x70
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0x358>
 8003274:	4b5a      	ldr	r3, [pc, #360]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	4a59      	ldr	r2, [pc, #356]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003280:	4b57      	ldr	r3, [pc, #348]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003284:	4a56      	ldr	r2, [pc, #344]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003286:	f023 0304 	bic.w	r3, r3, #4
 800328a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe fabe 	bl	8001814 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe faba 	bl	8001814 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0d7      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b2:	4b4b      	ldr	r3, [pc, #300]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ee      	beq.n	800329c <HAL_RCC_OscConfig+0x368>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe faa8 	bl	8001814 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe faa4 	bl	8001814 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0c1      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032de:	4b40      	ldr	r3, [pc, #256]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ee      	bne.n	80032c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f0:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	4a3a      	ldr	r2, [pc, #232]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80032f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80ad 	beq.w	8003460 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003306:	4b36      	ldr	r3, [pc, #216]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b08      	cmp	r3, #8
 8003310:	d060      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d145      	bne.n	80033a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b33      	ldr	r3, [pc, #204]	@ (80033e8 <HAL_RCC_OscConfig+0x4b4>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe fa78 	bl	8001814 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe fa74 	bl	8001814 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e093      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b29      	ldr	r3, [pc, #164]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	019b      	lsls	r3, r3, #6
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	3b01      	subs	r3, #1
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	071b      	lsls	r3, r3, #28
 8003372:	491b      	ldr	r1, [pc, #108]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003378:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <HAL_RCC_OscConfig+0x4b4>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe fa49 	bl	8001814 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003386:	f7fe fa45 	bl	8001814 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e064      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003398:	4b11      	ldr	r3, [pc, #68]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x452>
 80033a4:	e05c      	b.n	8003460 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b10      	ldr	r3, [pc, #64]	@ (80033e8 <HAL_RCC_OscConfig+0x4b4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fa32 	bl	8001814 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fa2e 	bl	8001814 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e04d      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x480>
 80033d2:	e045      	b.n	8003460 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d107      	bne.n	80033ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e040      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40007000 	.word	0x40007000
 80033e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ec:	4b1f      	ldr	r3, [pc, #124]	@ (800346c <HAL_RCC_OscConfig+0x538>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d030      	beq.n	800345c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d129      	bne.n	800345c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d122      	bne.n	800345c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800341c:	4013      	ands	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003424:	4293      	cmp	r3, r2
 8003426:	d119      	bne.n	800345c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	3b01      	subs	r3, #1
 8003436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d10f      	bne.n	800345c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800

08003470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fe f860 	bl	800155c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f000 f95e 	bl	8003770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e046      	b.n	80035b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a23      	ldr	r2, [pc, #140]	@ (80035c4 <HAL_TIM_Base_Start+0xb4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d022      	beq.n	8003580 <HAL_TIM_Base_Start+0x70>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003542:	d01d      	beq.n	8003580 <HAL_TIM_Base_Start+0x70>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1f      	ldr	r2, [pc, #124]	@ (80035c8 <HAL_TIM_Base_Start+0xb8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d018      	beq.n	8003580 <HAL_TIM_Base_Start+0x70>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_TIM_Base_Start+0xbc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_TIM_Base_Start+0x70>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_TIM_Base_Start+0xc0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_TIM_Base_Start+0x70>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	@ (80035d4 <HAL_TIM_Base_Start+0xc4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_TIM_Base_Start+0x70>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_TIM_Base_Start+0xc8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_Base_Start+0x70>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <HAL_TIM_Base_Start+0xcc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d111      	bne.n	80035a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d010      	beq.n	80035b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a2:	e007      	b.n	80035b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40001800 	.word	0x40001800

080035e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_ConfigClockSource+0x1c>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0b4      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x186>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800361a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003634:	d03e      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800363a:	f200 8087 	bhi.w	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003642:	f000 8086 	beq.w	8003752 <HAL_TIM_ConfigClockSource+0x172>
 8003646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364a:	d87f      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800364c:	2b70      	cmp	r3, #112	@ 0x70
 800364e:	d01a      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0xa6>
 8003650:	2b70      	cmp	r3, #112	@ 0x70
 8003652:	d87b      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003654:	2b60      	cmp	r3, #96	@ 0x60
 8003656:	d050      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x11a>
 8003658:	2b60      	cmp	r3, #96	@ 0x60
 800365a:	d877      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b50      	cmp	r3, #80	@ 0x50
 800365e:	d03c      	beq.n	80036da <HAL_TIM_ConfigClockSource+0xfa>
 8003660:	2b50      	cmp	r3, #80	@ 0x50
 8003662:	d873      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b40      	cmp	r3, #64	@ 0x40
 8003666:	d058      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x13a>
 8003668:	2b40      	cmp	r3, #64	@ 0x40
 800366a:	d86f      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b30      	cmp	r3, #48	@ 0x30
 800366e:	d064      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003670:	2b30      	cmp	r3, #48	@ 0x30
 8003672:	d86b      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b20      	cmp	r3, #32
 8003676:	d060      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003678:	2b20      	cmp	r3, #32
 800367a:	d867      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05c      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003680:	2b10      	cmp	r3, #16
 8003682:	d05a      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003684:	e062      	b.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003696:	f000 f991 	bl	80039bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	609a      	str	r2, [r3, #8]
      break;
 80036b2:	e04f      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	f000 f97a 	bl	80039bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036d6:	609a      	str	r2, [r3, #8]
      break;
 80036d8:	e03c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 f8ee 	bl	80038c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2150      	movs	r1, #80	@ 0x50
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f947 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80036f8:	e02c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003706:	461a      	mov	r2, r3
 8003708:	f000 f90d 	bl	8003926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2160      	movs	r1, #96	@ 0x60
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f937 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003718:	e01c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	461a      	mov	r2, r3
 8003728:	f000 f8ce 	bl	80038c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2140      	movs	r1, #64	@ 0x40
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f927 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 8003738:	e00c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f000 f91e 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 800374a:	e003      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e000      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a46      	ldr	r2, [pc, #280]	@ (800389c <TIM_Base_SetConfig+0x12c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378e:	d00f      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a43      	ldr	r2, [pc, #268]	@ (80038a0 <TIM_Base_SetConfig+0x130>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00b      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a42      	ldr	r2, [pc, #264]	@ (80038a4 <TIM_Base_SetConfig+0x134>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a41      	ldr	r2, [pc, #260]	@ (80038a8 <TIM_Base_SetConfig+0x138>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a40      	ldr	r2, [pc, #256]	@ (80038ac <TIM_Base_SetConfig+0x13c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a35      	ldr	r2, [pc, #212]	@ (800389c <TIM_Base_SetConfig+0x12c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d027      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <TIM_Base_SetConfig+0x130>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d023      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a31      	ldr	r2, [pc, #196]	@ (80038a4 <TIM_Base_SetConfig+0x134>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01f      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a30      	ldr	r2, [pc, #192]	@ (80038a8 <TIM_Base_SetConfig+0x138>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2f      	ldr	r2, [pc, #188]	@ (80038ac <TIM_Base_SetConfig+0x13c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d017      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2e      	ldr	r2, [pc, #184]	@ (80038b0 <TIM_Base_SetConfig+0x140>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <TIM_Base_SetConfig+0x144>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00f      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <TIM_Base_SetConfig+0x148>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a2b      	ldr	r2, [pc, #172]	@ (80038bc <TIM_Base_SetConfig+0x14c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a2a      	ldr	r2, [pc, #168]	@ (80038c0 <TIM_Base_SetConfig+0x150>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a29      	ldr	r2, [pc, #164]	@ (80038c4 <TIM_Base_SetConfig+0x154>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d108      	bne.n	8003834 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a10      	ldr	r2, [pc, #64]	@ (800389c <TIM_Base_SetConfig+0x12c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_Base_SetConfig+0xf8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a12      	ldr	r2, [pc, #72]	@ (80038ac <TIM_Base_SetConfig+0x13c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d103      	bne.n	8003870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]
  }
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40010000 	.word	0x40010000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	40010400 	.word	0x40010400
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800
 80038bc:	40001800 	.word	0x40001800
 80038c0:	40001c00 	.word	0x40001c00
 80038c4:	40002000 	.word	0x40002000

080038c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0201 	bic.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 030a 	bic.w	r3, r3, #10
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 0210 	bic.w	r2, r3, #16
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	031b      	lsls	r3, r3, #12
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003962:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f043 0307 	orr.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	021a      	lsls	r2, r3, #8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	431a      	orrs	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	609a      	str	r2, [r3, #8]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e05a      	b.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	@ (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a60:	d01d      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a17      	ldr	r2, [pc, #92]	@ (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40010400 	.word	0x40010400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40001800 	.word	0x40001800

08003af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e042      	b.n	8003b8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fd56 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	@ 0x24
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f82b 	bl	8003b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b98:	b0c0      	sub	sp, #256	@ 0x100
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	68d9      	ldr	r1, [r3, #12]
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	ea40 0301 	orr.w	r3, r0, r1
 8003bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bec:	f021 010c 	bic.w	r1, r1, #12
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	6999      	ldr	r1, [r3, #24]
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	ea40 0301 	orr.w	r3, r0, r1
 8003c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b8f      	ldr	r3, [pc, #572]	@ (8003e60 <UART_SetConfig+0x2cc>)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d005      	beq.n	8003c34 <UART_SetConfig+0xa0>
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003e64 <UART_SetConfig+0x2d0>)
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d104      	bne.n	8003c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe ff3a 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003c38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c3c:	e003      	b.n	8003c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7fe ff21 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8003c42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c50:	f040 810c 	bne.w	8003e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c66:	4622      	mov	r2, r4
 8003c68:	462b      	mov	r3, r5
 8003c6a:	1891      	adds	r1, r2, r2
 8003c6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c6e:	415b      	adcs	r3, r3
 8003c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c76:	4621      	mov	r1, r4
 8003c78:	eb12 0801 	adds.w	r8, r2, r1
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	eb43 0901 	adc.w	r9, r3, r1
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c96:	4690      	mov	r8, r2
 8003c98:	4699      	mov	r9, r3
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	eb49 0303 	adc.w	r3, r9, r3
 8003caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	18db      	adds	r3, r3, r3
 8003cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cc8:	4613      	mov	r3, r2
 8003cca:	eb42 0303 	adc.w	r3, r2, r3
 8003cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003cd8:	f7fc ff34 	bl	8000b44 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <UART_SetConfig+0x2d4>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011c      	lsls	r4, r3, #4
 8003cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d04:	415b      	adcs	r3, r3
 8003d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d12:	4649      	mov	r1, r9
 8003d14:	eb43 0b01 	adc.w	fp, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d2c:	4692      	mov	sl, r2
 8003d2e:	469b      	mov	fp, r3
 8003d30:	4643      	mov	r3, r8
 8003d32:	eb1a 0303 	adds.w	r3, sl, r3
 8003d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	18db      	adds	r3, r3, r3
 8003d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d5e:	4613      	mov	r3, r2
 8003d60:	eb42 0303 	adc.w	r3, r2, r3
 8003d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d6e:	f7fc fee9 	bl	8000b44 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	4b3b      	ldr	r3, [pc, #236]	@ (8003e68 <UART_SetConfig+0x2d4>)
 8003d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2264      	movs	r2, #100	@ 0x64
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	1acb      	subs	r3, r1, r3
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d8e:	4b36      	ldr	r3, [pc, #216]	@ (8003e68 <UART_SetConfig+0x2d4>)
 8003d90:	fba3 2302 	umull	r2, r3, r3, r2
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d9c:	441c      	add	r4, r3
 8003d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003da8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003db8:	415b      	adcs	r3, r3
 8003dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	1851      	adds	r1, r2, r1
 8003dc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	414b      	adcs	r3, r1
 8003dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003dd8:	4659      	mov	r1, fp
 8003dda:	00cb      	lsls	r3, r1, #3
 8003ddc:	4651      	mov	r1, sl
 8003dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de2:	4651      	mov	r1, sl
 8003de4:	00ca      	lsls	r2, r1, #3
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	4642      	mov	r2, r8
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003df4:	464b      	mov	r3, r9
 8003df6:	460a      	mov	r2, r1
 8003df8:	eb42 0303 	adc.w	r3, r2, r3
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e14:	460b      	mov	r3, r1
 8003e16:	18db      	adds	r3, r3, r3
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e2a:	f7fc fe8b 	bl	8000b44 <__aeabi_uldivmod>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <UART_SetConfig+0x2d4>)
 8003e34:	fba3 1302 	umull	r1, r3, r3, r2
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	2164      	movs	r1, #100	@ 0x64
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	3332      	adds	r3, #50	@ 0x32
 8003e46:	4a08      	ldr	r2, [pc, #32]	@ (8003e68 <UART_SetConfig+0x2d4>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	f003 0207 	and.w	r2, r3, #7
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4422      	add	r2, r4
 8003e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e5c:	e106      	b.n	800406c <UART_SetConfig+0x4d8>
 8003e5e:	bf00      	nop
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40011400 	.word	0x40011400
 8003e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e7e:	4642      	mov	r2, r8
 8003e80:	464b      	mov	r3, r9
 8003e82:	1891      	adds	r1, r2, r2
 8003e84:	6239      	str	r1, [r7, #32]
 8003e86:	415b      	adcs	r3, r3
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e8e:	4641      	mov	r1, r8
 8003e90:	1854      	adds	r4, r2, r1
 8003e92:	4649      	mov	r1, r9
 8003e94:	eb43 0501 	adc.w	r5, r3, r1
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	00eb      	lsls	r3, r5, #3
 8003ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	18e3      	adds	r3, r4, r3
 8003eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	eb45 0303 	adc.w	r3, r5, r3
 8003eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003eca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eda:	4629      	mov	r1, r5
 8003edc:	008b      	lsls	r3, r1, #2
 8003ede:	4621      	mov	r1, r4
 8003ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	008a      	lsls	r2, r1, #2
 8003ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003eec:	f7fc fe2a 	bl	8000b44 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4b60      	ldr	r3, [pc, #384]	@ (8004078 <UART_SetConfig+0x4e4>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	011c      	lsls	r4, r3, #4
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f10:	4642      	mov	r2, r8
 8003f12:	464b      	mov	r3, r9
 8003f14:	1891      	adds	r1, r2, r2
 8003f16:	61b9      	str	r1, [r7, #24]
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f20:	4641      	mov	r1, r8
 8003f22:	1851      	adds	r1, r2, r1
 8003f24:	6139      	str	r1, [r7, #16]
 8003f26:	4649      	mov	r1, r9
 8003f28:	414b      	adcs	r3, r1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f38:	4659      	mov	r1, fp
 8003f3a:	00cb      	lsls	r3, r1, #3
 8003f3c:	4651      	mov	r1, sl
 8003f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f42:	4651      	mov	r1, sl
 8003f44:	00ca      	lsls	r2, r1, #3
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f54:	464b      	mov	r3, r9
 8003f56:	460a      	mov	r2, r1
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f78:	4649      	mov	r1, r9
 8003f7a:	008b      	lsls	r3, r1, #2
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f82:	4641      	mov	r1, r8
 8003f84:	008a      	lsls	r2, r1, #2
 8003f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f8a:	f7fc fddb 	bl	8000b44 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	4b38      	ldr	r3, [pc, #224]	@ (8004078 <UART_SetConfig+0x4e4>)
 8003f96:	fba3 2301 	umull	r2, r3, r3, r1
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2264      	movs	r2, #100	@ 0x64
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	1acb      	subs	r3, r1, r3
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	3332      	adds	r3, #50	@ 0x32
 8003fa8:	4a33      	ldr	r2, [pc, #204]	@ (8004078 <UART_SetConfig+0x4e4>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb4:	441c      	add	r4, r3
 8003fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fba:	2200      	movs	r2, #0
 8003fbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003fc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	1851      	adds	r1, r2, r1
 8003fd8:	6039      	str	r1, [r7, #0]
 8003fda:	4649      	mov	r1, r9
 8003fdc:	414b      	adcs	r3, r1
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fec:	4659      	mov	r1, fp
 8003fee:	00cb      	lsls	r3, r1, #3
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	00ca      	lsls	r2, r1, #3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	4642      	mov	r2, r8
 8004002:	189b      	adds	r3, r3, r2
 8004004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004006:	464b      	mov	r3, r9
 8004008:	460a      	mov	r2, r1
 800400a:	eb42 0303 	adc.w	r3, r2, r3
 800400e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	663b      	str	r3, [r7, #96]	@ 0x60
 800401a:	667a      	str	r2, [r7, #100]	@ 0x64
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004028:	4649      	mov	r1, r9
 800402a:	008b      	lsls	r3, r1, #2
 800402c:	4641      	mov	r1, r8
 800402e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004032:	4641      	mov	r1, r8
 8004034:	008a      	lsls	r2, r1, #2
 8004036:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800403a:	f7fc fd83 	bl	8000b44 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <UART_SetConfig+0x4e4>)
 8004044:	fba3 1302 	umull	r1, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	2164      	movs	r1, #100	@ 0x64
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	3332      	adds	r3, #50	@ 0x32
 8004056:	4a08      	ldr	r2, [pc, #32]	@ (8004078 <UART_SetConfig+0x4e4>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4422      	add	r2, r4
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004072:	46bd      	mov	sp, r7
 8004074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004078:	51eb851f 	.word	0x51eb851f

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	4d0d      	ldr	r5, [pc, #52]	@ (80040c4 <__libc_init_array+0x38>)
 8004090:	4c0d      	ldr	r4, [pc, #52]	@ (80040c8 <__libc_init_array+0x3c>)
 8004092:	1b64      	subs	r4, r4, r5
 8004094:	10a4      	asrs	r4, r4, #2
 8004096:	2600      	movs	r6, #0
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	4d0b      	ldr	r5, [pc, #44]	@ (80040cc <__libc_init_array+0x40>)
 800409e:	4c0c      	ldr	r4, [pc, #48]	@ (80040d0 <__libc_init_array+0x44>)
 80040a0:	f001 f83e 	bl	8005120 <_init>
 80040a4:	1b64      	subs	r4, r4, r5
 80040a6:	10a4      	asrs	r4, r4, #2
 80040a8:	2600      	movs	r6, #0
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	08005338 	.word	0x08005338
 80040c8:	08005338 	.word	0x08005338
 80040cc:	08005338 	.word	0x08005338
 80040d0:	0800533c 	.word	0x0800533c
 80040d4:	00000000 	.word	0x00000000

080040d8 <sin>:
 80040d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040da:	ec53 2b10 	vmov	r2, r3, d0
 80040de:	4826      	ldr	r0, [pc, #152]	@ (8004178 <sin+0xa0>)
 80040e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80040e4:	4281      	cmp	r1, r0
 80040e6:	d807      	bhi.n	80040f8 <sin+0x20>
 80040e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004170 <sin+0x98>
 80040ec:	2000      	movs	r0, #0
 80040ee:	b005      	add	sp, #20
 80040f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040f4:	f000 b90c 	b.w	8004310 <__kernel_sin>
 80040f8:	4820      	ldr	r0, [pc, #128]	@ (800417c <sin+0xa4>)
 80040fa:	4281      	cmp	r1, r0
 80040fc:	d908      	bls.n	8004110 <sin+0x38>
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f7fc f885 	bl	8000210 <__aeabi_dsub>
 8004106:	ec41 0b10 	vmov	d0, r0, r1
 800410a:	b005      	add	sp, #20
 800410c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004110:	4668      	mov	r0, sp
 8004112:	f000 f9b9 	bl	8004488 <__ieee754_rem_pio2>
 8004116:	f000 0003 	and.w	r0, r0, #3
 800411a:	2801      	cmp	r0, #1
 800411c:	d00c      	beq.n	8004138 <sin+0x60>
 800411e:	2802      	cmp	r0, #2
 8004120:	d011      	beq.n	8004146 <sin+0x6e>
 8004122:	b9e8      	cbnz	r0, 8004160 <sin+0x88>
 8004124:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004128:	ed9d 0b00 	vldr	d0, [sp]
 800412c:	2001      	movs	r0, #1
 800412e:	f000 f8ef 	bl	8004310 <__kernel_sin>
 8004132:	ec51 0b10 	vmov	r0, r1, d0
 8004136:	e7e6      	b.n	8004106 <sin+0x2e>
 8004138:	ed9d 1b02 	vldr	d1, [sp, #8]
 800413c:	ed9d 0b00 	vldr	d0, [sp]
 8004140:	f000 f81e 	bl	8004180 <__kernel_cos>
 8004144:	e7f5      	b.n	8004132 <sin+0x5a>
 8004146:	ed9d 1b02 	vldr	d1, [sp, #8]
 800414a:	ed9d 0b00 	vldr	d0, [sp]
 800414e:	2001      	movs	r0, #1
 8004150:	f000 f8de 	bl	8004310 <__kernel_sin>
 8004154:	ec53 2b10 	vmov	r2, r3, d0
 8004158:	4610      	mov	r0, r2
 800415a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800415e:	e7d2      	b.n	8004106 <sin+0x2e>
 8004160:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004164:	ed9d 0b00 	vldr	d0, [sp]
 8004168:	f000 f80a 	bl	8004180 <__kernel_cos>
 800416c:	e7f2      	b.n	8004154 <sin+0x7c>
 800416e:	bf00      	nop
	...
 8004178:	3fe921fb 	.word	0x3fe921fb
 800417c:	7fefffff 	.word	0x7fefffff

08004180 <__kernel_cos>:
 8004180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	ec57 6b10 	vmov	r6, r7, d0
 8004188:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800418c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004190:	ed8d 1b00 	vstr	d1, [sp]
 8004194:	d206      	bcs.n	80041a4 <__kernel_cos+0x24>
 8004196:	4630      	mov	r0, r6
 8004198:	4639      	mov	r1, r7
 800419a:	f7fc fc8b 	bl	8000ab4 <__aeabi_d2iz>
 800419e:	2800      	cmp	r0, #0
 80041a0:	f000 8088 	beq.w	80042b4 <__kernel_cos+0x134>
 80041a4:	4632      	mov	r2, r6
 80041a6:	463b      	mov	r3, r7
 80041a8:	4630      	mov	r0, r6
 80041aa:	4639      	mov	r1, r7
 80041ac:	f7fc f9e8 	bl	8000580 <__aeabi_dmul>
 80041b0:	4b51      	ldr	r3, [pc, #324]	@ (80042f8 <__kernel_cos+0x178>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	4604      	mov	r4, r0
 80041b6:	460d      	mov	r5, r1
 80041b8:	f7fc f9e2 	bl	8000580 <__aeabi_dmul>
 80041bc:	a340      	add	r3, pc, #256	@ (adr r3, 80042c0 <__kernel_cos+0x140>)
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	4682      	mov	sl, r0
 80041c4:	468b      	mov	fp, r1
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	f7fc f9d9 	bl	8000580 <__aeabi_dmul>
 80041ce:	a33e      	add	r3, pc, #248	@ (adr r3, 80042c8 <__kernel_cos+0x148>)
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f7fc f81e 	bl	8000214 <__adddf3>
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	f7fc f9d0 	bl	8000580 <__aeabi_dmul>
 80041e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80042d0 <__kernel_cos+0x150>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	f7fc f813 	bl	8000210 <__aeabi_dsub>
 80041ea:	4622      	mov	r2, r4
 80041ec:	462b      	mov	r3, r5
 80041ee:	f7fc f9c7 	bl	8000580 <__aeabi_dmul>
 80041f2:	a339      	add	r3, pc, #228	@ (adr r3, 80042d8 <__kernel_cos+0x158>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc f80c 	bl	8000214 <__adddf3>
 80041fc:	4622      	mov	r2, r4
 80041fe:	462b      	mov	r3, r5
 8004200:	f7fc f9be 	bl	8000580 <__aeabi_dmul>
 8004204:	a336      	add	r3, pc, #216	@ (adr r3, 80042e0 <__kernel_cos+0x160>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc f801 	bl	8000210 <__aeabi_dsub>
 800420e:	4622      	mov	r2, r4
 8004210:	462b      	mov	r3, r5
 8004212:	f7fc f9b5 	bl	8000580 <__aeabi_dmul>
 8004216:	a334      	add	r3, pc, #208	@ (adr r3, 80042e8 <__kernel_cos+0x168>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fb fffa 	bl	8000214 <__adddf3>
 8004220:	4622      	mov	r2, r4
 8004222:	462b      	mov	r3, r5
 8004224:	f7fc f9ac 	bl	8000580 <__aeabi_dmul>
 8004228:	4622      	mov	r2, r4
 800422a:	462b      	mov	r3, r5
 800422c:	f7fc f9a8 	bl	8000580 <__aeabi_dmul>
 8004230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
 8004238:	4630      	mov	r0, r6
 800423a:	4639      	mov	r1, r7
 800423c:	f7fc f9a0 	bl	8000580 <__aeabi_dmul>
 8004240:	460b      	mov	r3, r1
 8004242:	4602      	mov	r2, r0
 8004244:	4629      	mov	r1, r5
 8004246:	4620      	mov	r0, r4
 8004248:	f7fb ffe2 	bl	8000210 <__aeabi_dsub>
 800424c:	4b2b      	ldr	r3, [pc, #172]	@ (80042fc <__kernel_cos+0x17c>)
 800424e:	4598      	cmp	r8, r3
 8004250:	4606      	mov	r6, r0
 8004252:	460f      	mov	r7, r1
 8004254:	d810      	bhi.n	8004278 <__kernel_cos+0xf8>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4650      	mov	r0, sl
 800425c:	4659      	mov	r1, fp
 800425e:	f7fb ffd7 	bl	8000210 <__aeabi_dsub>
 8004262:	460b      	mov	r3, r1
 8004264:	4926      	ldr	r1, [pc, #152]	@ (8004300 <__kernel_cos+0x180>)
 8004266:	4602      	mov	r2, r0
 8004268:	2000      	movs	r0, #0
 800426a:	f7fb ffd1 	bl	8000210 <__aeabi_dsub>
 800426e:	ec41 0b10 	vmov	d0, r0, r1
 8004272:	b003      	add	sp, #12
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004278:	4b22      	ldr	r3, [pc, #136]	@ (8004304 <__kernel_cos+0x184>)
 800427a:	4921      	ldr	r1, [pc, #132]	@ (8004300 <__kernel_cos+0x180>)
 800427c:	4598      	cmp	r8, r3
 800427e:	bf8c      	ite	hi
 8004280:	4d21      	ldrhi	r5, [pc, #132]	@ (8004308 <__kernel_cos+0x188>)
 8004282:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004286:	2400      	movs	r4, #0
 8004288:	4622      	mov	r2, r4
 800428a:	462b      	mov	r3, r5
 800428c:	2000      	movs	r0, #0
 800428e:	f7fb ffbf 	bl	8000210 <__aeabi_dsub>
 8004292:	4622      	mov	r2, r4
 8004294:	4680      	mov	r8, r0
 8004296:	4689      	mov	r9, r1
 8004298:	462b      	mov	r3, r5
 800429a:	4650      	mov	r0, sl
 800429c:	4659      	mov	r1, fp
 800429e:	f7fb ffb7 	bl	8000210 <__aeabi_dsub>
 80042a2:	4632      	mov	r2, r6
 80042a4:	463b      	mov	r3, r7
 80042a6:	f7fb ffb3 	bl	8000210 <__aeabi_dsub>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	e7da      	b.n	800426a <__kernel_cos+0xea>
 80042b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80042f0 <__kernel_cos+0x170>
 80042b8:	e7db      	b.n	8004272 <__kernel_cos+0xf2>
 80042ba:	bf00      	nop
 80042bc:	f3af 8000 	nop.w
 80042c0:	be8838d4 	.word	0xbe8838d4
 80042c4:	bda8fae9 	.word	0xbda8fae9
 80042c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80042cc:	3e21ee9e 	.word	0x3e21ee9e
 80042d0:	809c52ad 	.word	0x809c52ad
 80042d4:	3e927e4f 	.word	0x3e927e4f
 80042d8:	19cb1590 	.word	0x19cb1590
 80042dc:	3efa01a0 	.word	0x3efa01a0
 80042e0:	16c15177 	.word	0x16c15177
 80042e4:	3f56c16c 	.word	0x3f56c16c
 80042e8:	5555554c 	.word	0x5555554c
 80042ec:	3fa55555 	.word	0x3fa55555
 80042f0:	00000000 	.word	0x00000000
 80042f4:	3ff00000 	.word	0x3ff00000
 80042f8:	3fe00000 	.word	0x3fe00000
 80042fc:	3fd33332 	.word	0x3fd33332
 8004300:	3ff00000 	.word	0x3ff00000
 8004304:	3fe90000 	.word	0x3fe90000
 8004308:	3fd20000 	.word	0x3fd20000
 800430c:	00000000 	.word	0x00000000

08004310 <__kernel_sin>:
 8004310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004314:	ec55 4b10 	vmov	r4, r5, d0
 8004318:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800431c:	b085      	sub	sp, #20
 800431e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004322:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004326:	4680      	mov	r8, r0
 8004328:	d205      	bcs.n	8004336 <__kernel_sin+0x26>
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f7fc fbc1 	bl	8000ab4 <__aeabi_d2iz>
 8004332:	2800      	cmp	r0, #0
 8004334:	d052      	beq.n	80043dc <__kernel_sin+0xcc>
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	4620      	mov	r0, r4
 800433c:	4629      	mov	r1, r5
 800433e:	f7fc f91f 	bl	8000580 <__aeabi_dmul>
 8004342:	4682      	mov	sl, r0
 8004344:	468b      	mov	fp, r1
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4620      	mov	r0, r4
 800434c:	4629      	mov	r1, r5
 800434e:	f7fc f917 	bl	8000580 <__aeabi_dmul>
 8004352:	a342      	add	r3, pc, #264	@ (adr r3, 800445c <__kernel_sin+0x14c>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	e9cd 0100 	strd	r0, r1, [sp]
 800435c:	4650      	mov	r0, sl
 800435e:	4659      	mov	r1, fp
 8004360:	f7fc f90e 	bl	8000580 <__aeabi_dmul>
 8004364:	a33f      	add	r3, pc, #252	@ (adr r3, 8004464 <__kernel_sin+0x154>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fb ff51 	bl	8000210 <__aeabi_dsub>
 800436e:	4652      	mov	r2, sl
 8004370:	465b      	mov	r3, fp
 8004372:	f7fc f905 	bl	8000580 <__aeabi_dmul>
 8004376:	a33d      	add	r3, pc, #244	@ (adr r3, 800446c <__kernel_sin+0x15c>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fb ff4a 	bl	8000214 <__adddf3>
 8004380:	4652      	mov	r2, sl
 8004382:	465b      	mov	r3, fp
 8004384:	f7fc f8fc 	bl	8000580 <__aeabi_dmul>
 8004388:	a33a      	add	r3, pc, #232	@ (adr r3, 8004474 <__kernel_sin+0x164>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fb ff3f 	bl	8000210 <__aeabi_dsub>
 8004392:	4652      	mov	r2, sl
 8004394:	465b      	mov	r3, fp
 8004396:	f7fc f8f3 	bl	8000580 <__aeabi_dmul>
 800439a:	a338      	add	r3, pc, #224	@ (adr r3, 800447c <__kernel_sin+0x16c>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff38 	bl	8000214 <__adddf3>
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	f1b8 0f00 	cmp.w	r8, #0
 80043ac:	d11b      	bne.n	80043e6 <__kernel_sin+0xd6>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4650      	mov	r0, sl
 80043b4:	4659      	mov	r1, fp
 80043b6:	f7fc f8e3 	bl	8000580 <__aeabi_dmul>
 80043ba:	a325      	add	r3, pc, #148	@ (adr r3, 8004450 <__kernel_sin+0x140>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fb ff26 	bl	8000210 <__aeabi_dsub>
 80043c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043c8:	f7fc f8da 	bl	8000580 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fb ff1e 	bl	8000214 <__adddf3>
 80043d8:	4604      	mov	r4, r0
 80043da:	460d      	mov	r5, r1
 80043dc:	ec45 4b10 	vmov	d0, r4, r5
 80043e0:	b005      	add	sp, #20
 80043e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004458 <__kernel_sin+0x148>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	f7fc f8c7 	bl	8000580 <__aeabi_dmul>
 80043f2:	4632      	mov	r2, r6
 80043f4:	4680      	mov	r8, r0
 80043f6:	4689      	mov	r9, r1
 80043f8:	463b      	mov	r3, r7
 80043fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043fe:	f7fc f8bf 	bl	8000580 <__aeabi_dmul>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4640      	mov	r0, r8
 8004408:	4649      	mov	r1, r9
 800440a:	f7fb ff01 	bl	8000210 <__aeabi_dsub>
 800440e:	4652      	mov	r2, sl
 8004410:	465b      	mov	r3, fp
 8004412:	f7fc f8b5 	bl	8000580 <__aeabi_dmul>
 8004416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800441a:	f7fb fef9 	bl	8000210 <__aeabi_dsub>
 800441e:	a30c      	add	r3, pc, #48	@ (adr r3, 8004450 <__kernel_sin+0x140>)
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	4606      	mov	r6, r0
 8004426:	460f      	mov	r7, r1
 8004428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800442c:	f7fc f8a8 	bl	8000580 <__aeabi_dmul>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4630      	mov	r0, r6
 8004436:	4639      	mov	r1, r7
 8004438:	f7fb feec 	bl	8000214 <__adddf3>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4620      	mov	r0, r4
 8004442:	4629      	mov	r1, r5
 8004444:	f7fb fee4 	bl	8000210 <__aeabi_dsub>
 8004448:	e7c6      	b.n	80043d8 <__kernel_sin+0xc8>
 800444a:	bf00      	nop
 800444c:	f3af 8000 	nop.w
 8004450:	55555549 	.word	0x55555549
 8004454:	3fc55555 	.word	0x3fc55555
 8004458:	3fe00000 	.word	0x3fe00000
 800445c:	5acfd57c 	.word	0x5acfd57c
 8004460:	3de5d93a 	.word	0x3de5d93a
 8004464:	8a2b9ceb 	.word	0x8a2b9ceb
 8004468:	3e5ae5e6 	.word	0x3e5ae5e6
 800446c:	57b1fe7d 	.word	0x57b1fe7d
 8004470:	3ec71de3 	.word	0x3ec71de3
 8004474:	19c161d5 	.word	0x19c161d5
 8004478:	3f2a01a0 	.word	0x3f2a01a0
 800447c:	1110f8a6 	.word	0x1110f8a6
 8004480:	3f811111 	.word	0x3f811111
 8004484:	00000000 	.word	0x00000000

08004488 <__ieee754_rem_pio2>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	ec57 6b10 	vmov	r6, r7, d0
 8004490:	4bc5      	ldr	r3, [pc, #788]	@ (80047a8 <__ieee754_rem_pio2+0x320>)
 8004492:	b08d      	sub	sp, #52	@ 0x34
 8004494:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004498:	4598      	cmp	r8, r3
 800449a:	4604      	mov	r4, r0
 800449c:	9704      	str	r7, [sp, #16]
 800449e:	d807      	bhi.n	80044b0 <__ieee754_rem_pio2+0x28>
 80044a0:	2200      	movs	r2, #0
 80044a2:	2300      	movs	r3, #0
 80044a4:	ed80 0b00 	vstr	d0, [r0]
 80044a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80044ac:	2500      	movs	r5, #0
 80044ae:	e028      	b.n	8004502 <__ieee754_rem_pio2+0x7a>
 80044b0:	4bbe      	ldr	r3, [pc, #760]	@ (80047ac <__ieee754_rem_pio2+0x324>)
 80044b2:	4598      	cmp	r8, r3
 80044b4:	d878      	bhi.n	80045a8 <__ieee754_rem_pio2+0x120>
 80044b6:	9b04      	ldr	r3, [sp, #16]
 80044b8:	4dbd      	ldr	r5, [pc, #756]	@ (80047b0 <__ieee754_rem_pio2+0x328>)
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	4630      	mov	r0, r6
 80044be:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004770 <__ieee754_rem_pio2+0x2e8>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	4639      	mov	r1, r7
 80044c6:	dd38      	ble.n	800453a <__ieee754_rem_pio2+0xb2>
 80044c8:	f7fb fea2 	bl	8000210 <__aeabi_dsub>
 80044cc:	45a8      	cmp	r8, r5
 80044ce:	4606      	mov	r6, r0
 80044d0:	460f      	mov	r7, r1
 80044d2:	d01a      	beq.n	800450a <__ieee754_rem_pio2+0x82>
 80044d4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004778 <__ieee754_rem_pio2+0x2f0>)
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f7fb fe99 	bl	8000210 <__aeabi_dsub>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4680      	mov	r8, r0
 80044e4:	4689      	mov	r9, r1
 80044e6:	4630      	mov	r0, r6
 80044e8:	4639      	mov	r1, r7
 80044ea:	f7fb fe91 	bl	8000210 <__aeabi_dsub>
 80044ee:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004778 <__ieee754_rem_pio2+0x2f0>)
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f7fb fe8c 	bl	8000210 <__aeabi_dsub>
 80044f8:	e9c4 8900 	strd	r8, r9, [r4]
 80044fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004500:	2501      	movs	r5, #1
 8004502:	4628      	mov	r0, r5
 8004504:	b00d      	add	sp, #52	@ 0x34
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450a:	a39d      	add	r3, pc, #628	@ (adr r3, 8004780 <__ieee754_rem_pio2+0x2f8>)
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f7fb fe7e 	bl	8000210 <__aeabi_dsub>
 8004514:	a39c      	add	r3, pc, #624	@ (adr r3, 8004788 <__ieee754_rem_pio2+0x300>)
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	4606      	mov	r6, r0
 800451c:	460f      	mov	r7, r1
 800451e:	f7fb fe77 	bl	8000210 <__aeabi_dsub>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4680      	mov	r8, r0
 8004528:	4689      	mov	r9, r1
 800452a:	4630      	mov	r0, r6
 800452c:	4639      	mov	r1, r7
 800452e:	f7fb fe6f 	bl	8000210 <__aeabi_dsub>
 8004532:	a395      	add	r3, pc, #596	@ (adr r3, 8004788 <__ieee754_rem_pio2+0x300>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	e7dc      	b.n	80044f4 <__ieee754_rem_pio2+0x6c>
 800453a:	f7fb fe6b 	bl	8000214 <__adddf3>
 800453e:	45a8      	cmp	r8, r5
 8004540:	4606      	mov	r6, r0
 8004542:	460f      	mov	r7, r1
 8004544:	d018      	beq.n	8004578 <__ieee754_rem_pio2+0xf0>
 8004546:	a38c      	add	r3, pc, #560	@ (adr r3, 8004778 <__ieee754_rem_pio2+0x2f0>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f7fb fe62 	bl	8000214 <__adddf3>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4680      	mov	r8, r0
 8004556:	4689      	mov	r9, r1
 8004558:	4630      	mov	r0, r6
 800455a:	4639      	mov	r1, r7
 800455c:	f7fb fe58 	bl	8000210 <__aeabi_dsub>
 8004560:	a385      	add	r3, pc, #532	@ (adr r3, 8004778 <__ieee754_rem_pio2+0x2f0>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fb fe55 	bl	8000214 <__adddf3>
 800456a:	f04f 35ff 	mov.w	r5, #4294967295
 800456e:	e9c4 8900 	strd	r8, r9, [r4]
 8004572:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004576:	e7c4      	b.n	8004502 <__ieee754_rem_pio2+0x7a>
 8004578:	a381      	add	r3, pc, #516	@ (adr r3, 8004780 <__ieee754_rem_pio2+0x2f8>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fb fe49 	bl	8000214 <__adddf3>
 8004582:	a381      	add	r3, pc, #516	@ (adr r3, 8004788 <__ieee754_rem_pio2+0x300>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	4606      	mov	r6, r0
 800458a:	460f      	mov	r7, r1
 800458c:	f7fb fe42 	bl	8000214 <__adddf3>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4680      	mov	r8, r0
 8004596:	4689      	mov	r9, r1
 8004598:	4630      	mov	r0, r6
 800459a:	4639      	mov	r1, r7
 800459c:	f7fb fe38 	bl	8000210 <__aeabi_dsub>
 80045a0:	a379      	add	r3, pc, #484	@ (adr r3, 8004788 <__ieee754_rem_pio2+0x300>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	e7de      	b.n	8004566 <__ieee754_rem_pio2+0xde>
 80045a8:	4b82      	ldr	r3, [pc, #520]	@ (80047b4 <__ieee754_rem_pio2+0x32c>)
 80045aa:	4598      	cmp	r8, r3
 80045ac:	f200 80d1 	bhi.w	8004752 <__ieee754_rem_pio2+0x2ca>
 80045b0:	f000 f966 	bl	8004880 <fabs>
 80045b4:	ec57 6b10 	vmov	r6, r7, d0
 80045b8:	a375      	add	r3, pc, #468	@ (adr r3, 8004790 <__ieee754_rem_pio2+0x308>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	4630      	mov	r0, r6
 80045c0:	4639      	mov	r1, r7
 80045c2:	f7fb ffdd 	bl	8000580 <__aeabi_dmul>
 80045c6:	4b7c      	ldr	r3, [pc, #496]	@ (80047b8 <__ieee754_rem_pio2+0x330>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	f7fb fe23 	bl	8000214 <__adddf3>
 80045ce:	f7fc fa71 	bl	8000ab4 <__aeabi_d2iz>
 80045d2:	4605      	mov	r5, r0
 80045d4:	f7fb ff6a 	bl	80004ac <__aeabi_i2d>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045e0:	a363      	add	r3, pc, #396	@ (adr r3, 8004770 <__ieee754_rem_pio2+0x2e8>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb ffcb 	bl	8000580 <__aeabi_dmul>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4630      	mov	r0, r6
 80045f0:	4639      	mov	r1, r7
 80045f2:	f7fb fe0d 	bl	8000210 <__aeabi_dsub>
 80045f6:	a360      	add	r3, pc, #384	@ (adr r3, 8004778 <__ieee754_rem_pio2+0x2f0>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	4682      	mov	sl, r0
 80045fe:	468b      	mov	fp, r1
 8004600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004604:	f7fb ffbc 	bl	8000580 <__aeabi_dmul>
 8004608:	2d1f      	cmp	r5, #31
 800460a:	4606      	mov	r6, r0
 800460c:	460f      	mov	r7, r1
 800460e:	dc0c      	bgt.n	800462a <__ieee754_rem_pio2+0x1a2>
 8004610:	4b6a      	ldr	r3, [pc, #424]	@ (80047bc <__ieee754_rem_pio2+0x334>)
 8004612:	1e6a      	subs	r2, r5, #1
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	4543      	cmp	r3, r8
 800461a:	d006      	beq.n	800462a <__ieee754_rem_pio2+0x1a2>
 800461c:	4632      	mov	r2, r6
 800461e:	463b      	mov	r3, r7
 8004620:	4650      	mov	r0, sl
 8004622:	4659      	mov	r1, fp
 8004624:	f7fb fdf4 	bl	8000210 <__aeabi_dsub>
 8004628:	e00e      	b.n	8004648 <__ieee754_rem_pio2+0x1c0>
 800462a:	463b      	mov	r3, r7
 800462c:	4632      	mov	r2, r6
 800462e:	4650      	mov	r0, sl
 8004630:	4659      	mov	r1, fp
 8004632:	f7fb fded 	bl	8000210 <__aeabi_dsub>
 8004636:	ea4f 5328 	mov.w	r3, r8, asr #20
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004640:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004644:	2b10      	cmp	r3, #16
 8004646:	dc02      	bgt.n	800464e <__ieee754_rem_pio2+0x1c6>
 8004648:	e9c4 0100 	strd	r0, r1, [r4]
 800464c:	e039      	b.n	80046c2 <__ieee754_rem_pio2+0x23a>
 800464e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004780 <__ieee754_rem_pio2+0x2f8>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004658:	f7fb ff92 	bl	8000580 <__aeabi_dmul>
 800465c:	4606      	mov	r6, r0
 800465e:	460f      	mov	r7, r1
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4650      	mov	r0, sl
 8004666:	4659      	mov	r1, fp
 8004668:	f7fb fdd2 	bl	8000210 <__aeabi_dsub>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4680      	mov	r8, r0
 8004672:	4689      	mov	r9, r1
 8004674:	4650      	mov	r0, sl
 8004676:	4659      	mov	r1, fp
 8004678:	f7fb fdca 	bl	8000210 <__aeabi_dsub>
 800467c:	4632      	mov	r2, r6
 800467e:	463b      	mov	r3, r7
 8004680:	f7fb fdc6 	bl	8000210 <__aeabi_dsub>
 8004684:	a340      	add	r3, pc, #256	@ (adr r3, 8004788 <__ieee754_rem_pio2+0x300>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	4606      	mov	r6, r0
 800468c:	460f      	mov	r7, r1
 800468e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004692:	f7fb ff75 	bl	8000580 <__aeabi_dmul>
 8004696:	4632      	mov	r2, r6
 8004698:	463b      	mov	r3, r7
 800469a:	f7fb fdb9 	bl	8000210 <__aeabi_dsub>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4606      	mov	r6, r0
 80046a4:	460f      	mov	r7, r1
 80046a6:	4640      	mov	r0, r8
 80046a8:	4649      	mov	r1, r9
 80046aa:	f7fb fdb1 	bl	8000210 <__aeabi_dsub>
 80046ae:	9a05      	ldr	r2, [sp, #20]
 80046b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b31      	cmp	r3, #49	@ 0x31
 80046b8:	dc20      	bgt.n	80046fc <__ieee754_rem_pio2+0x274>
 80046ba:	e9c4 0100 	strd	r0, r1, [r4]
 80046be:	46c2      	mov	sl, r8
 80046c0:	46cb      	mov	fp, r9
 80046c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80046c6:	4650      	mov	r0, sl
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	4659      	mov	r1, fp
 80046ce:	f7fb fd9f 	bl	8000210 <__aeabi_dsub>
 80046d2:	463b      	mov	r3, r7
 80046d4:	4632      	mov	r2, r6
 80046d6:	f7fb fd9b 	bl	8000210 <__aeabi_dsub>
 80046da:	9b04      	ldr	r3, [sp, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046e2:	f6bf af0e 	bge.w	8004502 <__ieee754_rem_pio2+0x7a>
 80046e6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80046ea:	6063      	str	r3, [r4, #4]
 80046ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046f0:	f8c4 8000 	str.w	r8, [r4]
 80046f4:	60a0      	str	r0, [r4, #8]
 80046f6:	60e3      	str	r3, [r4, #12]
 80046f8:	426d      	negs	r5, r5
 80046fa:	e702      	b.n	8004502 <__ieee754_rem_pio2+0x7a>
 80046fc:	a326      	add	r3, pc, #152	@ (adr r3, 8004798 <__ieee754_rem_pio2+0x310>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004706:	f7fb ff3b 	bl	8000580 <__aeabi_dmul>
 800470a:	4606      	mov	r6, r0
 800470c:	460f      	mov	r7, r1
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4640      	mov	r0, r8
 8004714:	4649      	mov	r1, r9
 8004716:	f7fb fd7b 	bl	8000210 <__aeabi_dsub>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4682      	mov	sl, r0
 8004720:	468b      	mov	fp, r1
 8004722:	4640      	mov	r0, r8
 8004724:	4649      	mov	r1, r9
 8004726:	f7fb fd73 	bl	8000210 <__aeabi_dsub>
 800472a:	4632      	mov	r2, r6
 800472c:	463b      	mov	r3, r7
 800472e:	f7fb fd6f 	bl	8000210 <__aeabi_dsub>
 8004732:	a31b      	add	r3, pc, #108	@ (adr r3, 80047a0 <__ieee754_rem_pio2+0x318>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	4606      	mov	r6, r0
 800473a:	460f      	mov	r7, r1
 800473c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004740:	f7fb ff1e 	bl	8000580 <__aeabi_dmul>
 8004744:	4632      	mov	r2, r6
 8004746:	463b      	mov	r3, r7
 8004748:	f7fb fd62 	bl	8000210 <__aeabi_dsub>
 800474c:	4606      	mov	r6, r0
 800474e:	460f      	mov	r7, r1
 8004750:	e764      	b.n	800461c <__ieee754_rem_pio2+0x194>
 8004752:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <__ieee754_rem_pio2+0x338>)
 8004754:	4598      	cmp	r8, r3
 8004756:	d935      	bls.n	80047c4 <__ieee754_rem_pio2+0x33c>
 8004758:	4632      	mov	r2, r6
 800475a:	463b      	mov	r3, r7
 800475c:	4630      	mov	r0, r6
 800475e:	4639      	mov	r1, r7
 8004760:	f7fb fd56 	bl	8000210 <__aeabi_dsub>
 8004764:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004768:	e9c4 0100 	strd	r0, r1, [r4]
 800476c:	e69e      	b.n	80044ac <__ieee754_rem_pio2+0x24>
 800476e:	bf00      	nop
 8004770:	54400000 	.word	0x54400000
 8004774:	3ff921fb 	.word	0x3ff921fb
 8004778:	1a626331 	.word	0x1a626331
 800477c:	3dd0b461 	.word	0x3dd0b461
 8004780:	1a600000 	.word	0x1a600000
 8004784:	3dd0b461 	.word	0x3dd0b461
 8004788:	2e037073 	.word	0x2e037073
 800478c:	3ba3198a 	.word	0x3ba3198a
 8004790:	6dc9c883 	.word	0x6dc9c883
 8004794:	3fe45f30 	.word	0x3fe45f30
 8004798:	2e000000 	.word	0x2e000000
 800479c:	3ba3198a 	.word	0x3ba3198a
 80047a0:	252049c1 	.word	0x252049c1
 80047a4:	397b839a 	.word	0x397b839a
 80047a8:	3fe921fb 	.word	0x3fe921fb
 80047ac:	4002d97b 	.word	0x4002d97b
 80047b0:	3ff921fb 	.word	0x3ff921fb
 80047b4:	413921fb 	.word	0x413921fb
 80047b8:	3fe00000 	.word	0x3fe00000
 80047bc:	08005158 	.word	0x08005158
 80047c0:	7fefffff 	.word	0x7fefffff
 80047c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80047c8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80047cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80047d0:	4630      	mov	r0, r6
 80047d2:	460f      	mov	r7, r1
 80047d4:	f7fc f96e 	bl	8000ab4 <__aeabi_d2iz>
 80047d8:	f7fb fe68 	bl	80004ac <__aeabi_i2d>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4630      	mov	r0, r6
 80047e2:	4639      	mov	r1, r7
 80047e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047e8:	f7fb fd12 	bl	8000210 <__aeabi_dsub>
 80047ec:	4b22      	ldr	r3, [pc, #136]	@ (8004878 <__ieee754_rem_pio2+0x3f0>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	f7fb fec6 	bl	8000580 <__aeabi_dmul>
 80047f4:	460f      	mov	r7, r1
 80047f6:	4606      	mov	r6, r0
 80047f8:	f7fc f95c 	bl	8000ab4 <__aeabi_d2iz>
 80047fc:	f7fb fe56 	bl	80004ac <__aeabi_i2d>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4630      	mov	r0, r6
 8004806:	4639      	mov	r1, r7
 8004808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800480c:	f7fb fd00 	bl	8000210 <__aeabi_dsub>
 8004810:	4b19      	ldr	r3, [pc, #100]	@ (8004878 <__ieee754_rem_pio2+0x3f0>)
 8004812:	2200      	movs	r2, #0
 8004814:	f7fb feb4 	bl	8000580 <__aeabi_dmul>
 8004818:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800481c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004820:	f04f 0803 	mov.w	r8, #3
 8004824:	2600      	movs	r6, #0
 8004826:	2700      	movs	r7, #0
 8004828:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800482c:	4632      	mov	r2, r6
 800482e:	463b      	mov	r3, r7
 8004830:	46c2      	mov	sl, r8
 8004832:	f108 38ff 	add.w	r8, r8, #4294967295
 8004836:	f7fc f90b 	bl	8000a50 <__aeabi_dcmpeq>
 800483a:	2800      	cmp	r0, #0
 800483c:	d1f4      	bne.n	8004828 <__ieee754_rem_pio2+0x3a0>
 800483e:	4b0f      	ldr	r3, [pc, #60]	@ (800487c <__ieee754_rem_pio2+0x3f4>)
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	2302      	movs	r3, #2
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	462a      	mov	r2, r5
 8004848:	4653      	mov	r3, sl
 800484a:	4621      	mov	r1, r4
 800484c:	a806      	add	r0, sp, #24
 800484e:	f000 f81f 	bl	8004890 <__kernel_rem_pio2>
 8004852:	9b04      	ldr	r3, [sp, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	4605      	mov	r5, r0
 8004858:	f6bf ae53 	bge.w	8004502 <__ieee754_rem_pio2+0x7a>
 800485c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004860:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004864:	e9c4 2300 	strd	r2, r3, [r4]
 8004868:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800486c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004870:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004874:	e740      	b.n	80046f8 <__ieee754_rem_pio2+0x270>
 8004876:	bf00      	nop
 8004878:	41700000 	.word	0x41700000
 800487c:	080051d8 	.word	0x080051d8

08004880 <fabs>:
 8004880:	ec51 0b10 	vmov	r0, r1, d0
 8004884:	4602      	mov	r2, r0
 8004886:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800488a:	ec43 2b10 	vmov	d0, r2, r3
 800488e:	4770      	bx	lr

08004890 <__kernel_rem_pio2>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	ed2d 8b02 	vpush	{d8}
 8004898:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800489c:	f112 0f14 	cmn.w	r2, #20
 80048a0:	9306      	str	r3, [sp, #24]
 80048a2:	9104      	str	r1, [sp, #16]
 80048a4:	4bc2      	ldr	r3, [pc, #776]	@ (8004bb0 <__kernel_rem_pio2+0x320>)
 80048a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80048a8:	9008      	str	r0, [sp, #32]
 80048aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	9b06      	ldr	r3, [sp, #24]
 80048b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80048b6:	bfa8      	it	ge
 80048b8:	1ed4      	subge	r4, r2, #3
 80048ba:	9305      	str	r3, [sp, #20]
 80048bc:	bfb2      	itee	lt
 80048be:	2400      	movlt	r4, #0
 80048c0:	2318      	movge	r3, #24
 80048c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80048c6:	f06f 0317 	mvn.w	r3, #23
 80048ca:	fb04 3303 	mla	r3, r4, r3, r3
 80048ce:	eb03 0b02 	add.w	fp, r3, r2
 80048d2:	9b00      	ldr	r3, [sp, #0]
 80048d4:	9a05      	ldr	r2, [sp, #20]
 80048d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8004ba0 <__kernel_rem_pio2+0x310>
 80048da:	eb03 0802 	add.w	r8, r3, r2
 80048de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80048e0:	1aa7      	subs	r7, r4, r2
 80048e2:	ae20      	add	r6, sp, #128	@ 0x80
 80048e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80048e8:	2500      	movs	r5, #0
 80048ea:	4545      	cmp	r5, r8
 80048ec:	dd12      	ble.n	8004914 <__kernel_rem_pio2+0x84>
 80048ee:	9b06      	ldr	r3, [sp, #24]
 80048f0:	aa20      	add	r2, sp, #128	@ 0x80
 80048f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80048f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80048fa:	2700      	movs	r7, #0
 80048fc:	9b00      	ldr	r3, [sp, #0]
 80048fe:	429f      	cmp	r7, r3
 8004900:	dc2e      	bgt.n	8004960 <__kernel_rem_pio2+0xd0>
 8004902:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8004ba0 <__kernel_rem_pio2+0x310>
 8004906:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800490a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800490e:	46a8      	mov	r8, r5
 8004910:	2600      	movs	r6, #0
 8004912:	e01b      	b.n	800494c <__kernel_rem_pio2+0xbc>
 8004914:	42ef      	cmn	r7, r5
 8004916:	d407      	bmi.n	8004928 <__kernel_rem_pio2+0x98>
 8004918:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800491c:	f7fb fdc6 	bl	80004ac <__aeabi_i2d>
 8004920:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004924:	3501      	adds	r5, #1
 8004926:	e7e0      	b.n	80048ea <__kernel_rem_pio2+0x5a>
 8004928:	ec51 0b18 	vmov	r0, r1, d8
 800492c:	e7f8      	b.n	8004920 <__kernel_rem_pio2+0x90>
 800492e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8004932:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004936:	f7fb fe23 	bl	8000580 <__aeabi_dmul>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004942:	f7fb fc67 	bl	8000214 <__adddf3>
 8004946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800494a:	3601      	adds	r6, #1
 800494c:	9b05      	ldr	r3, [sp, #20]
 800494e:	429e      	cmp	r6, r3
 8004950:	dded      	ble.n	800492e <__kernel_rem_pio2+0x9e>
 8004952:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004956:	3701      	adds	r7, #1
 8004958:	ecaa 7b02 	vstmia	sl!, {d7}
 800495c:	3508      	adds	r5, #8
 800495e:	e7cd      	b.n	80048fc <__kernel_rem_pio2+0x6c>
 8004960:	9b00      	ldr	r3, [sp, #0]
 8004962:	f8dd 8000 	ldr.w	r8, [sp]
 8004966:	aa0c      	add	r2, sp, #48	@ 0x30
 8004968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800496c:	930a      	str	r3, [sp, #40]	@ 0x28
 800496e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004970:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004974:	9309      	str	r3, [sp, #36]	@ 0x24
 8004976:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800497a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800497c:	ab98      	add	r3, sp, #608	@ 0x260
 800497e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004982:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004986:	ed8d 7b02 	vstr	d7, [sp, #8]
 800498a:	ac0c      	add	r4, sp, #48	@ 0x30
 800498c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800498e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004992:	46a1      	mov	r9, r4
 8004994:	46c2      	mov	sl, r8
 8004996:	f1ba 0f00 	cmp.w	sl, #0
 800499a:	dc77      	bgt.n	8004a8c <__kernel_rem_pio2+0x1fc>
 800499c:	4658      	mov	r0, fp
 800499e:	ed9d 0b02 	vldr	d0, [sp, #8]
 80049a2:	f000 fac5 	bl	8004f30 <scalbn>
 80049a6:	ec57 6b10 	vmov	r6, r7, d0
 80049aa:	2200      	movs	r2, #0
 80049ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80049b0:	4630      	mov	r0, r6
 80049b2:	4639      	mov	r1, r7
 80049b4:	f7fb fde4 	bl	8000580 <__aeabi_dmul>
 80049b8:	ec41 0b10 	vmov	d0, r0, r1
 80049bc:	f000 fb34 	bl	8005028 <floor>
 80049c0:	4b7c      	ldr	r3, [pc, #496]	@ (8004bb4 <__kernel_rem_pio2+0x324>)
 80049c2:	ec51 0b10 	vmov	r0, r1, d0
 80049c6:	2200      	movs	r2, #0
 80049c8:	f7fb fdda 	bl	8000580 <__aeabi_dmul>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4630      	mov	r0, r6
 80049d2:	4639      	mov	r1, r7
 80049d4:	f7fb fc1c 	bl	8000210 <__aeabi_dsub>
 80049d8:	460f      	mov	r7, r1
 80049da:	4606      	mov	r6, r0
 80049dc:	f7fc f86a 	bl	8000ab4 <__aeabi_d2iz>
 80049e0:	9002      	str	r0, [sp, #8]
 80049e2:	f7fb fd63 	bl	80004ac <__aeabi_i2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4630      	mov	r0, r6
 80049ec:	4639      	mov	r1, r7
 80049ee:	f7fb fc0f 	bl	8000210 <__aeabi_dsub>
 80049f2:	f1bb 0f00 	cmp.w	fp, #0
 80049f6:	4606      	mov	r6, r0
 80049f8:	460f      	mov	r7, r1
 80049fa:	dd6c      	ble.n	8004ad6 <__kernel_rem_pio2+0x246>
 80049fc:	f108 31ff 	add.w	r1, r8, #4294967295
 8004a00:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a02:	9d02      	ldr	r5, [sp, #8]
 8004a04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a08:	f1cb 0018 	rsb	r0, fp, #24
 8004a0c:	fa43 f200 	asr.w	r2, r3, r0
 8004a10:	4415      	add	r5, r2
 8004a12:	4082      	lsls	r2, r0
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	aa0c      	add	r2, sp, #48	@ 0x30
 8004a18:	9502      	str	r5, [sp, #8]
 8004a1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004a1e:	f1cb 0217 	rsb	r2, fp, #23
 8004a22:	fa43 f902 	asr.w	r9, r3, r2
 8004a26:	f1b9 0f00 	cmp.w	r9, #0
 8004a2a:	dd64      	ble.n	8004af6 <__kernel_rem_pio2+0x266>
 8004a2c:	9b02      	ldr	r3, [sp, #8]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	3301      	adds	r3, #1
 8004a32:	9302      	str	r3, [sp, #8]
 8004a34:	4615      	mov	r5, r2
 8004a36:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004a3a:	4590      	cmp	r8, r2
 8004a3c:	f300 80a1 	bgt.w	8004b82 <__kernel_rem_pio2+0x2f2>
 8004a40:	f1bb 0f00 	cmp.w	fp, #0
 8004a44:	dd07      	ble.n	8004a56 <__kernel_rem_pio2+0x1c6>
 8004a46:	f1bb 0f01 	cmp.w	fp, #1
 8004a4a:	f000 80c1 	beq.w	8004bd0 <__kernel_rem_pio2+0x340>
 8004a4e:	f1bb 0f02 	cmp.w	fp, #2
 8004a52:	f000 80c8 	beq.w	8004be6 <__kernel_rem_pio2+0x356>
 8004a56:	f1b9 0f02 	cmp.w	r9, #2
 8004a5a:	d14c      	bne.n	8004af6 <__kernel_rem_pio2+0x266>
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	463b      	mov	r3, r7
 8004a60:	4955      	ldr	r1, [pc, #340]	@ (8004bb8 <__kernel_rem_pio2+0x328>)
 8004a62:	2000      	movs	r0, #0
 8004a64:	f7fb fbd4 	bl	8000210 <__aeabi_dsub>
 8004a68:	4606      	mov	r6, r0
 8004a6a:	460f      	mov	r7, r1
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	d042      	beq.n	8004af6 <__kernel_rem_pio2+0x266>
 8004a70:	4658      	mov	r0, fp
 8004a72:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8004ba8 <__kernel_rem_pio2+0x318>
 8004a76:	f000 fa5b 	bl	8004f30 <scalbn>
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	ec53 2b10 	vmov	r2, r3, d0
 8004a82:	f7fb fbc5 	bl	8000210 <__aeabi_dsub>
 8004a86:	4606      	mov	r6, r0
 8004a88:	460f      	mov	r7, r1
 8004a8a:	e034      	b.n	8004af6 <__kernel_rem_pio2+0x266>
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8004bbc <__kernel_rem_pio2+0x32c>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a94:	f7fb fd74 	bl	8000580 <__aeabi_dmul>
 8004a98:	f7fc f80c 	bl	8000ab4 <__aeabi_d2iz>
 8004a9c:	f7fb fd06 	bl	80004ac <__aeabi_i2d>
 8004aa0:	4b47      	ldr	r3, [pc, #284]	@ (8004bc0 <__kernel_rem_pio2+0x330>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	f7fb fd6a 	bl	8000580 <__aeabi_dmul>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab4:	f7fb fbac 	bl	8000210 <__aeabi_dsub>
 8004ab8:	f7fb fffc 	bl	8000ab4 <__aeabi_d2iz>
 8004abc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004ac0:	f849 0b04 	str.w	r0, [r9], #4
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f7fb fba4 	bl	8000214 <__adddf3>
 8004acc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ad4:	e75f      	b.n	8004996 <__kernel_rem_pio2+0x106>
 8004ad6:	d107      	bne.n	8004ae8 <__kernel_rem_pio2+0x258>
 8004ad8:	f108 33ff 	add.w	r3, r8, #4294967295
 8004adc:	aa0c      	add	r2, sp, #48	@ 0x30
 8004ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004ae6:	e79e      	b.n	8004a26 <__kernel_rem_pio2+0x196>
 8004ae8:	4b36      	ldr	r3, [pc, #216]	@ (8004bc4 <__kernel_rem_pio2+0x334>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	f7fb ffce 	bl	8000a8c <__aeabi_dcmpge>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d143      	bne.n	8004b7c <__kernel_rem_pio2+0x2ec>
 8004af4:	4681      	mov	r9, r0
 8004af6:	2200      	movs	r2, #0
 8004af8:	2300      	movs	r3, #0
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb ffa7 	bl	8000a50 <__aeabi_dcmpeq>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f000 80c1 	beq.w	8004c8a <__kernel_rem_pio2+0x3fa>
 8004b08:	f108 33ff 	add.w	r3, r8, #4294967295
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	9900      	ldr	r1, [sp, #0]
 8004b10:	428b      	cmp	r3, r1
 8004b12:	da70      	bge.n	8004bf6 <__kernel_rem_pio2+0x366>
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	f000 808b 	beq.w	8004c30 <__kernel_rem_pio2+0x3a0>
 8004b1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b20:	f1ab 0b18 	sub.w	fp, fp, #24
 8004b24:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f6      	beq.n	8004b1a <__kernel_rem_pio2+0x28a>
 8004b2c:	4658      	mov	r0, fp
 8004b2e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8004ba8 <__kernel_rem_pio2+0x318>
 8004b32:	f000 f9fd 	bl	8004f30 <scalbn>
 8004b36:	f108 0301 	add.w	r3, r8, #1
 8004b3a:	00da      	lsls	r2, r3, #3
 8004b3c:	9205      	str	r2, [sp, #20]
 8004b3e:	ec55 4b10 	vmov	r4, r5, d0
 8004b42:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004b44:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8004bbc <__kernel_rem_pio2+0x32c>
 8004b48:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004b4c:	4646      	mov	r6, r8
 8004b4e:	f04f 0a00 	mov.w	sl, #0
 8004b52:	2e00      	cmp	r6, #0
 8004b54:	f280 80d1 	bge.w	8004cfa <__kernel_rem_pio2+0x46a>
 8004b58:	4644      	mov	r4, r8
 8004b5a:	2c00      	cmp	r4, #0
 8004b5c:	f2c0 80ff 	blt.w	8004d5e <__kernel_rem_pio2+0x4ce>
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <__kernel_rem_pio2+0x338>)
 8004b62:	461f      	mov	r7, r3
 8004b64:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004b66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b6a:	9306      	str	r3, [sp, #24]
 8004b6c:	f04f 0a00 	mov.w	sl, #0
 8004b70:	f04f 0b00 	mov.w	fp, #0
 8004b74:	2600      	movs	r6, #0
 8004b76:	eba8 0504 	sub.w	r5, r8, r4
 8004b7a:	e0e4      	b.n	8004d46 <__kernel_rem_pio2+0x4b6>
 8004b7c:	f04f 0902 	mov.w	r9, #2
 8004b80:	e754      	b.n	8004a2c <__kernel_rem_pio2+0x19c>
 8004b82:	f854 3b04 	ldr.w	r3, [r4], #4
 8004b86:	bb0d      	cbnz	r5, 8004bcc <__kernel_rem_pio2+0x33c>
 8004b88:	b123      	cbz	r3, 8004b94 <__kernel_rem_pio2+0x304>
 8004b8a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004b8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004b92:	2301      	movs	r3, #1
 8004b94:	3201      	adds	r2, #1
 8004b96:	461d      	mov	r5, r3
 8004b98:	e74f      	b.n	8004a3a <__kernel_rem_pio2+0x1aa>
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w
	...
 8004bac:	3ff00000 	.word	0x3ff00000
 8004bb0:	08005320 	.word	0x08005320
 8004bb4:	40200000 	.word	0x40200000
 8004bb8:	3ff00000 	.word	0x3ff00000
 8004bbc:	3e700000 	.word	0x3e700000
 8004bc0:	41700000 	.word	0x41700000
 8004bc4:	3fe00000 	.word	0x3fe00000
 8004bc8:	080052e0 	.word	0x080052e0
 8004bcc:	1acb      	subs	r3, r1, r3
 8004bce:	e7de      	b.n	8004b8e <__kernel_rem_pio2+0x2fe>
 8004bd0:	f108 32ff 	add.w	r2, r8, #4294967295
 8004bd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8004bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004bde:	a90c      	add	r1, sp, #48	@ 0x30
 8004be0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004be4:	e737      	b.n	8004a56 <__kernel_rem_pio2+0x1c6>
 8004be6:	f108 32ff 	add.w	r2, r8, #4294967295
 8004bea:	ab0c      	add	r3, sp, #48	@ 0x30
 8004bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004bf4:	e7f3      	b.n	8004bde <__kernel_rem_pio2+0x34e>
 8004bf6:	a90c      	add	r1, sp, #48	@ 0x30
 8004bf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	e785      	b.n	8004b0e <__kernel_rem_pio2+0x27e>
 8004c02:	3401      	adds	r4, #1
 8004c04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	d0fa      	beq.n	8004c02 <__kernel_rem_pio2+0x372>
 8004c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c12:	eb0d 0503 	add.w	r5, sp, r3
 8004c16:	9b06      	ldr	r3, [sp, #24]
 8004c18:	aa20      	add	r2, sp, #128	@ 0x80
 8004c1a:	4443      	add	r3, r8
 8004c1c:	f108 0701 	add.w	r7, r8, #1
 8004c20:	3d98      	subs	r5, #152	@ 0x98
 8004c22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004c26:	4444      	add	r4, r8
 8004c28:	42bc      	cmp	r4, r7
 8004c2a:	da04      	bge.n	8004c36 <__kernel_rem_pio2+0x3a6>
 8004c2c:	46a0      	mov	r8, r4
 8004c2e:	e6a2      	b.n	8004976 <__kernel_rem_pio2+0xe6>
 8004c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c32:	2401      	movs	r4, #1
 8004c34:	e7e6      	b.n	8004c04 <__kernel_rem_pio2+0x374>
 8004c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004c3c:	f7fb fc36 	bl	80004ac <__aeabi_i2d>
 8004c40:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8004f00 <__kernel_rem_pio2+0x670>
 8004c44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c50:	46b2      	mov	sl, r6
 8004c52:	f04f 0800 	mov.w	r8, #0
 8004c56:	9b05      	ldr	r3, [sp, #20]
 8004c58:	4598      	cmp	r8, r3
 8004c5a:	dd05      	ble.n	8004c68 <__kernel_rem_pio2+0x3d8>
 8004c5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c60:	3701      	adds	r7, #1
 8004c62:	eca5 7b02 	vstmia	r5!, {d7}
 8004c66:	e7df      	b.n	8004c28 <__kernel_rem_pio2+0x398>
 8004c68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004c6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004c70:	f7fb fc86 	bl	8000580 <__aeabi_dmul>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7c:	f7fb faca 	bl	8000214 <__adddf3>
 8004c80:	f108 0801 	add.w	r8, r8, #1
 8004c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c88:	e7e5      	b.n	8004c56 <__kernel_rem_pio2+0x3c6>
 8004c8a:	f1cb 0000 	rsb	r0, fp, #0
 8004c8e:	ec47 6b10 	vmov	d0, r6, r7
 8004c92:	f000 f94d 	bl	8004f30 <scalbn>
 8004c96:	ec55 4b10 	vmov	r4, r5, d0
 8004c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8004f08 <__kernel_rem_pio2+0x678>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7fb fef3 	bl	8000a8c <__aeabi_dcmpge>
 8004ca6:	b300      	cbz	r0, 8004cea <__kernel_rem_pio2+0x45a>
 8004ca8:	4b98      	ldr	r3, [pc, #608]	@ (8004f0c <__kernel_rem_pio2+0x67c>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	4620      	mov	r0, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	f7fb fc66 	bl	8000580 <__aeabi_dmul>
 8004cb4:	f7fb fefe 	bl	8000ab4 <__aeabi_d2iz>
 8004cb8:	4606      	mov	r6, r0
 8004cba:	f7fb fbf7 	bl	80004ac <__aeabi_i2d>
 8004cbe:	4b92      	ldr	r3, [pc, #584]	@ (8004f08 <__kernel_rem_pio2+0x678>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f7fb fc5d 	bl	8000580 <__aeabi_dmul>
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7fb fa9f 	bl	8000210 <__aeabi_dsub>
 8004cd2:	f7fb feef 	bl	8000ab4 <__aeabi_d2iz>
 8004cd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8004cd8:	f10b 0b18 	add.w	fp, fp, #24
 8004cdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004ce0:	f108 0801 	add.w	r8, r8, #1
 8004ce4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004ce8:	e720      	b.n	8004b2c <__kernel_rem_pio2+0x29c>
 8004cea:	4620      	mov	r0, r4
 8004cec:	4629      	mov	r1, r5
 8004cee:	f7fb fee1 	bl	8000ab4 <__aeabi_d2iz>
 8004cf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8004cf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004cf8:	e718      	b.n	8004b2c <__kernel_rem_pio2+0x29c>
 8004cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8004cfc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004d00:	f7fb fbd4 	bl	80004ac <__aeabi_i2d>
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	f7fb fc3a 	bl	8000580 <__aeabi_dmul>
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004d12:	465b      	mov	r3, fp
 8004d14:	4620      	mov	r0, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7fb fc32 	bl	8000580 <__aeabi_dmul>
 8004d1c:	3e01      	subs	r6, #1
 8004d1e:	4604      	mov	r4, r0
 8004d20:	460d      	mov	r5, r1
 8004d22:	e716      	b.n	8004b52 <__kernel_rem_pio2+0x2c2>
 8004d24:	9906      	ldr	r1, [sp, #24]
 8004d26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004d2a:	9106      	str	r1, [sp, #24]
 8004d2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004d30:	f7fb fc26 	bl	8000580 <__aeabi_dmul>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4650      	mov	r0, sl
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	f7fb fa6a 	bl	8000214 <__adddf3>
 8004d40:	3601      	adds	r6, #1
 8004d42:	4682      	mov	sl, r0
 8004d44:	468b      	mov	fp, r1
 8004d46:	9b00      	ldr	r3, [sp, #0]
 8004d48:	429e      	cmp	r6, r3
 8004d4a:	dc01      	bgt.n	8004d50 <__kernel_rem_pio2+0x4c0>
 8004d4c:	42ae      	cmp	r6, r5
 8004d4e:	dde9      	ble.n	8004d24 <__kernel_rem_pio2+0x494>
 8004d50:	ab48      	add	r3, sp, #288	@ 0x120
 8004d52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004d56:	e9c5 ab00 	strd	sl, fp, [r5]
 8004d5a:	3c01      	subs	r4, #1
 8004d5c:	e6fd      	b.n	8004b5a <__kernel_rem_pio2+0x2ca>
 8004d5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	dc0b      	bgt.n	8004d7c <__kernel_rem_pio2+0x4ec>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dc35      	bgt.n	8004dd4 <__kernel_rem_pio2+0x544>
 8004d68:	d059      	beq.n	8004e1e <__kernel_rem_pio2+0x58e>
 8004d6a:	9b02      	ldr	r3, [sp, #8]
 8004d6c:	f003 0007 	and.w	r0, r3, #7
 8004d70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004d74:	ecbd 8b02 	vpop	{d8}
 8004d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d1f3      	bne.n	8004d6a <__kernel_rem_pio2+0x4da>
 8004d82:	9b05      	ldr	r3, [sp, #20]
 8004d84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d88:	eb0d 0403 	add.w	r4, sp, r3
 8004d8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004d90:	4625      	mov	r5, r4
 8004d92:	46c2      	mov	sl, r8
 8004d94:	f1ba 0f00 	cmp.w	sl, #0
 8004d98:	dc69      	bgt.n	8004e6e <__kernel_rem_pio2+0x5de>
 8004d9a:	4645      	mov	r5, r8
 8004d9c:	2d01      	cmp	r5, #1
 8004d9e:	f300 8087 	bgt.w	8004eb0 <__kernel_rem_pio2+0x620>
 8004da2:	9c05      	ldr	r4, [sp, #20]
 8004da4:	ab48      	add	r3, sp, #288	@ 0x120
 8004da6:	441c      	add	r4, r3
 8004da8:	2000      	movs	r0, #0
 8004daa:	2100      	movs	r1, #0
 8004dac:	f1b8 0f01 	cmp.w	r8, #1
 8004db0:	f300 809c 	bgt.w	8004eec <__kernel_rem_pio2+0x65c>
 8004db4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8004db8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8004dbc:	f1b9 0f00 	cmp.w	r9, #0
 8004dc0:	f040 80a6 	bne.w	8004f10 <__kernel_rem_pio2+0x680>
 8004dc4:	9b04      	ldr	r3, [sp, #16]
 8004dc6:	e9c3 5600 	strd	r5, r6, [r3]
 8004dca:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004dce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004dd2:	e7ca      	b.n	8004d6a <__kernel_rem_pio2+0x4da>
 8004dd4:	9d05      	ldr	r5, [sp, #20]
 8004dd6:	ab48      	add	r3, sp, #288	@ 0x120
 8004dd8:	441d      	add	r5, r3
 8004dda:	4644      	mov	r4, r8
 8004ddc:	2000      	movs	r0, #0
 8004dde:	2100      	movs	r1, #0
 8004de0:	2c00      	cmp	r4, #0
 8004de2:	da35      	bge.n	8004e50 <__kernel_rem_pio2+0x5c0>
 8004de4:	f1b9 0f00 	cmp.w	r9, #0
 8004de8:	d038      	beq.n	8004e5c <__kernel_rem_pio2+0x5cc>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004df0:	9c04      	ldr	r4, [sp, #16]
 8004df2:	e9c4 2300 	strd	r2, r3, [r4]
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004dfe:	f7fb fa07 	bl	8000210 <__aeabi_dsub>
 8004e02:	ad4a      	add	r5, sp, #296	@ 0x128
 8004e04:	2401      	movs	r4, #1
 8004e06:	45a0      	cmp	r8, r4
 8004e08:	da2b      	bge.n	8004e62 <__kernel_rem_pio2+0x5d2>
 8004e0a:	f1b9 0f00 	cmp.w	r9, #0
 8004e0e:	d002      	beq.n	8004e16 <__kernel_rem_pio2+0x586>
 8004e10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e14:	4619      	mov	r1, r3
 8004e16:	9b04      	ldr	r3, [sp, #16]
 8004e18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004e1c:	e7a5      	b.n	8004d6a <__kernel_rem_pio2+0x4da>
 8004e1e:	9c05      	ldr	r4, [sp, #20]
 8004e20:	ab48      	add	r3, sp, #288	@ 0x120
 8004e22:	441c      	add	r4, r3
 8004e24:	2000      	movs	r0, #0
 8004e26:	2100      	movs	r1, #0
 8004e28:	f1b8 0f00 	cmp.w	r8, #0
 8004e2c:	da09      	bge.n	8004e42 <__kernel_rem_pio2+0x5b2>
 8004e2e:	f1b9 0f00 	cmp.w	r9, #0
 8004e32:	d002      	beq.n	8004e3a <__kernel_rem_pio2+0x5aa>
 8004e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e38:	4619      	mov	r1, r3
 8004e3a:	9b04      	ldr	r3, [sp, #16]
 8004e3c:	e9c3 0100 	strd	r0, r1, [r3]
 8004e40:	e793      	b.n	8004d6a <__kernel_rem_pio2+0x4da>
 8004e42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004e46:	f7fb f9e5 	bl	8000214 <__adddf3>
 8004e4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e4e:	e7eb      	b.n	8004e28 <__kernel_rem_pio2+0x598>
 8004e50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004e54:	f7fb f9de 	bl	8000214 <__adddf3>
 8004e58:	3c01      	subs	r4, #1
 8004e5a:	e7c1      	b.n	8004de0 <__kernel_rem_pio2+0x550>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	e7c6      	b.n	8004df0 <__kernel_rem_pio2+0x560>
 8004e62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004e66:	f7fb f9d5 	bl	8000214 <__adddf3>
 8004e6a:	3401      	adds	r4, #1
 8004e6c:	e7cb      	b.n	8004e06 <__kernel_rem_pio2+0x576>
 8004e6e:	ed35 7b02 	vldmdb	r5!, {d7}
 8004e72:	ed8d 7b00 	vstr	d7, [sp]
 8004e76:	ed95 7b02 	vldr	d7, [r5, #8]
 8004e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e7e:	ec53 2b17 	vmov	r2, r3, d7
 8004e82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004e86:	f7fb f9c5 	bl	8000214 <__adddf3>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4606      	mov	r6, r0
 8004e90:	460f      	mov	r7, r1
 8004e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e96:	f7fb f9bb 	bl	8000210 <__aeabi_dsub>
 8004e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e9e:	f7fb f9b9 	bl	8000214 <__adddf3>
 8004ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ea6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004eaa:	e9c5 6700 	strd	r6, r7, [r5]
 8004eae:	e771      	b.n	8004d94 <__kernel_rem_pio2+0x504>
 8004eb0:	ed34 7b02 	vldmdb	r4!, {d7}
 8004eb4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004eb8:	ec51 0b17 	vmov	r0, r1, d7
 8004ebc:	4652      	mov	r2, sl
 8004ebe:	465b      	mov	r3, fp
 8004ec0:	ed8d 7b00 	vstr	d7, [sp]
 8004ec4:	f7fb f9a6 	bl	8000214 <__adddf3>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed4:	f7fb f99c 	bl	8000210 <__aeabi_dsub>
 8004ed8:	4652      	mov	r2, sl
 8004eda:	465b      	mov	r3, fp
 8004edc:	f7fb f99a 	bl	8000214 <__adddf3>
 8004ee0:	3d01      	subs	r5, #1
 8004ee2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ee6:	e9c4 6700 	strd	r6, r7, [r4]
 8004eea:	e757      	b.n	8004d9c <__kernel_rem_pio2+0x50c>
 8004eec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ef0:	f7fb f990 	bl	8000214 <__adddf3>
 8004ef4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ef8:	e758      	b.n	8004dac <__kernel_rem_pio2+0x51c>
 8004efa:	bf00      	nop
 8004efc:	f3af 8000 	nop.w
	...
 8004f08:	41700000 	.word	0x41700000
 8004f0c:	3e700000 	.word	0x3e700000
 8004f10:	9b04      	ldr	r3, [sp, #16]
 8004f12:	9a04      	ldr	r2, [sp, #16]
 8004f14:	601d      	str	r5, [r3, #0]
 8004f16:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8004f1a:	605c      	str	r4, [r3, #4]
 8004f1c:	609f      	str	r7, [r3, #8]
 8004f1e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8004f22:	60d3      	str	r3, [r2, #12]
 8004f24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f28:	6110      	str	r0, [r2, #16]
 8004f2a:	6153      	str	r3, [r2, #20]
 8004f2c:	e71d      	b.n	8004d6a <__kernel_rem_pio2+0x4da>
 8004f2e:	bf00      	nop

08004f30 <scalbn>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	ec55 4b10 	vmov	r4, r5, d0
 8004f36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	b991      	cbnz	r1, 8004f66 <scalbn+0x36>
 8004f40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004f44:	4323      	orrs	r3, r4
 8004f46:	d03b      	beq.n	8004fc0 <scalbn+0x90>
 8004f48:	4b33      	ldr	r3, [pc, #204]	@ (8005018 <scalbn+0xe8>)
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f7fb fb16 	bl	8000580 <__aeabi_dmul>
 8004f54:	4b31      	ldr	r3, [pc, #196]	@ (800501c <scalbn+0xec>)
 8004f56:	429e      	cmp	r6, r3
 8004f58:	4604      	mov	r4, r0
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	da0f      	bge.n	8004f7e <scalbn+0x4e>
 8004f5e:	a326      	add	r3, pc, #152	@ (adr r3, 8004ff8 <scalbn+0xc8>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	e01e      	b.n	8004fa4 <scalbn+0x74>
 8004f66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004f6a:	4291      	cmp	r1, r2
 8004f6c:	d10b      	bne.n	8004f86 <scalbn+0x56>
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f7fb f94e 	bl	8000214 <__adddf3>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	e020      	b.n	8004fc0 <scalbn+0x90>
 8004f7e:	460b      	mov	r3, r1
 8004f80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004f84:	3936      	subs	r1, #54	@ 0x36
 8004f86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004f8a:	4296      	cmp	r6, r2
 8004f8c:	dd0d      	ble.n	8004faa <scalbn+0x7a>
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	a11b      	add	r1, pc, #108	@ (adr r1, 8005000 <scalbn+0xd0>)
 8004f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f96:	da02      	bge.n	8004f9e <scalbn+0x6e>
 8004f98:	a11b      	add	r1, pc, #108	@ (adr r1, 8005008 <scalbn+0xd8>)
 8004f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f9e:	a318      	add	r3, pc, #96	@ (adr r3, 8005000 <scalbn+0xd0>)
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f7fb faec 	bl	8000580 <__aeabi_dmul>
 8004fa8:	e7e6      	b.n	8004f78 <scalbn+0x48>
 8004faa:	1872      	adds	r2, r6, r1
 8004fac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	dcec      	bgt.n	8004f8e <scalbn+0x5e>
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	dd06      	ble.n	8004fc6 <scalbn+0x96>
 8004fb8:	f36f 531e 	bfc	r3, #20, #11
 8004fbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004fc0:	ec45 4b10 	vmov	d0, r4, r5
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004fca:	da08      	bge.n	8004fde <scalbn+0xae>
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	a10a      	add	r1, pc, #40	@ (adr r1, 8004ff8 <scalbn+0xc8>)
 8004fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fd4:	dac3      	bge.n	8004f5e <scalbn+0x2e>
 8004fd6:	a10e      	add	r1, pc, #56	@ (adr r1, 8005010 <scalbn+0xe0>)
 8004fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fdc:	e7bf      	b.n	8004f5e <scalbn+0x2e>
 8004fde:	3236      	adds	r2, #54	@ 0x36
 8004fe0:	f36f 531e 	bfc	r3, #20, #11
 8004fe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <scalbn+0xf0>)
 8004fec:	4629      	mov	r1, r5
 8004fee:	2200      	movs	r2, #0
 8004ff0:	e7d8      	b.n	8004fa4 <scalbn+0x74>
 8004ff2:	bf00      	nop
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	c2f8f359 	.word	0xc2f8f359
 8004ffc:	01a56e1f 	.word	0x01a56e1f
 8005000:	8800759c 	.word	0x8800759c
 8005004:	7e37e43c 	.word	0x7e37e43c
 8005008:	8800759c 	.word	0x8800759c
 800500c:	fe37e43c 	.word	0xfe37e43c
 8005010:	c2f8f359 	.word	0xc2f8f359
 8005014:	81a56e1f 	.word	0x81a56e1f
 8005018:	43500000 	.word	0x43500000
 800501c:	ffff3cb0 	.word	0xffff3cb0
 8005020:	3c900000 	.word	0x3c900000
 8005024:	00000000 	.word	0x00000000

08005028 <floor>:
 8005028:	ec51 0b10 	vmov	r0, r1, d0
 800502c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005038:	2e13      	cmp	r6, #19
 800503a:	460c      	mov	r4, r1
 800503c:	4605      	mov	r5, r0
 800503e:	4680      	mov	r8, r0
 8005040:	dc34      	bgt.n	80050ac <floor+0x84>
 8005042:	2e00      	cmp	r6, #0
 8005044:	da17      	bge.n	8005076 <floor+0x4e>
 8005046:	a332      	add	r3, pc, #200	@ (adr r3, 8005110 <floor+0xe8>)
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f7fb f8e2 	bl	8000214 <__adddf3>
 8005050:	2200      	movs	r2, #0
 8005052:	2300      	movs	r3, #0
 8005054:	f7fb fd24 	bl	8000aa0 <__aeabi_dcmpgt>
 8005058:	b150      	cbz	r0, 8005070 <floor+0x48>
 800505a:	2c00      	cmp	r4, #0
 800505c:	da55      	bge.n	800510a <floor+0xe2>
 800505e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005062:	432c      	orrs	r4, r5
 8005064:	2500      	movs	r5, #0
 8005066:	42ac      	cmp	r4, r5
 8005068:	4c2b      	ldr	r4, [pc, #172]	@ (8005118 <floor+0xf0>)
 800506a:	bf08      	it	eq
 800506c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005070:	4621      	mov	r1, r4
 8005072:	4628      	mov	r0, r5
 8005074:	e023      	b.n	80050be <floor+0x96>
 8005076:	4f29      	ldr	r7, [pc, #164]	@ (800511c <floor+0xf4>)
 8005078:	4137      	asrs	r7, r6
 800507a:	ea01 0307 	and.w	r3, r1, r7
 800507e:	4303      	orrs	r3, r0
 8005080:	d01d      	beq.n	80050be <floor+0x96>
 8005082:	a323      	add	r3, pc, #140	@ (adr r3, 8005110 <floor+0xe8>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb f8c4 	bl	8000214 <__adddf3>
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	f7fb fd06 	bl	8000aa0 <__aeabi_dcmpgt>
 8005094:	2800      	cmp	r0, #0
 8005096:	d0eb      	beq.n	8005070 <floor+0x48>
 8005098:	2c00      	cmp	r4, #0
 800509a:	bfbe      	ittt	lt
 800509c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80050a0:	4133      	asrlt	r3, r6
 80050a2:	18e4      	addlt	r4, r4, r3
 80050a4:	ea24 0407 	bic.w	r4, r4, r7
 80050a8:	2500      	movs	r5, #0
 80050aa:	e7e1      	b.n	8005070 <floor+0x48>
 80050ac:	2e33      	cmp	r6, #51	@ 0x33
 80050ae:	dd0a      	ble.n	80050c6 <floor+0x9e>
 80050b0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80050b4:	d103      	bne.n	80050be <floor+0x96>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	f7fb f8ab 	bl	8000214 <__adddf3>
 80050be:	ec41 0b10 	vmov	d0, r0, r1
 80050c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80050ca:	f04f 37ff 	mov.w	r7, #4294967295
 80050ce:	40df      	lsrs	r7, r3
 80050d0:	4207      	tst	r7, r0
 80050d2:	d0f4      	beq.n	80050be <floor+0x96>
 80050d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8005110 <floor+0xe8>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb f89b 	bl	8000214 <__adddf3>
 80050de:	2200      	movs	r2, #0
 80050e0:	2300      	movs	r3, #0
 80050e2:	f7fb fcdd 	bl	8000aa0 <__aeabi_dcmpgt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0c2      	beq.n	8005070 <floor+0x48>
 80050ea:	2c00      	cmp	r4, #0
 80050ec:	da0a      	bge.n	8005104 <floor+0xdc>
 80050ee:	2e14      	cmp	r6, #20
 80050f0:	d101      	bne.n	80050f6 <floor+0xce>
 80050f2:	3401      	adds	r4, #1
 80050f4:	e006      	b.n	8005104 <floor+0xdc>
 80050f6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80050fa:	2301      	movs	r3, #1
 80050fc:	40b3      	lsls	r3, r6
 80050fe:	441d      	add	r5, r3
 8005100:	4545      	cmp	r5, r8
 8005102:	d3f6      	bcc.n	80050f2 <floor+0xca>
 8005104:	ea25 0507 	bic.w	r5, r5, r7
 8005108:	e7b2      	b.n	8005070 <floor+0x48>
 800510a:	2500      	movs	r5, #0
 800510c:	462c      	mov	r4, r5
 800510e:	e7af      	b.n	8005070 <floor+0x48>
 8005110:	8800759c 	.word	0x8800759c
 8005114:	7e37e43c 	.word	0x7e37e43c
 8005118:	bff00000 	.word	0xbff00000
 800511c:	000fffff 	.word	0x000fffff

08005120 <_init>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr

0800512c <_fini>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr
